2020-12-02 19:50:46.278484943 [ThreadId 5] - 




haskell-lsp:Starting up server ...
2020-12-02 19:50:46.27898711 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":79066,"clientInfo":{"name":"vscode","version":"1.51.1"},"rootPath":"/home/jordan/Repos/Work/cardano-haskell/cardano-node","rootUri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"tokenTypes":["comment","keyword","number","regexp","operator","namespace","type","struct","class","interface","enum","typeParameter","function","member","macro","variable","parameter","property","label"],"tokenModifiers":["declaration","documentation","static","abstract","deprecated","async","readonly"]}},"window":{"workDoneProgress":true}},"trace":"off","workspaceFolders":[{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node","name":"cardano-node"}]}}
2020-12-02 19:50:46.280387867 [ThreadId 5] - haskell-lsp:initializeRequestHandler: setting current dir to project root:/home/jordan/Repos/Work/cardano-haskell/cardano-node
2020-12-02 19:50:46.299699985 [ThreadId 25] - Registering ide configuration: IdeConfiguration {workspaceFolders = fromList [NormalizedUri 709005359093181263 "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node"], clientSettings = hashed Nothing}
2020-12-02 19:50:46.300287499 [ThreadId 7] - <--2--{"result":{"capabilities":{"typeDefinitionProvider":true,"foldingRangeProvider":false,"textDocumentSync":{"openClose":true,"change":2,"save":{}},"workspace":{"workspaceFolders":{"supported":true,"changeNotifications":true}},"implementationProvider":true,"documentRangeFormattingProvider":true,"documentHighlightProvider":true,"executeCommandProvider":{"commands":["79202:eval:evalCommand","79202:ghcide:typesignature.add","79202:importLens:ImportLensCommand","79202:pragmas:addPragma","79202:retrie:retrieCommand","79202:tactic:tacticsAutoCommand","79202:tactic:tacticsIntrosCommand","79202:tactic:tacticsDestructCommand","79202:tactic:tacticsHomomorphismCommand","79202:tactic:tacticsDestructLambdaCaseCommand","79202:tactic:tacticsHomomorphismLambdaCaseCommand"]},"renameProvider":false,"colorProvider":false,"definitionProvider":true,"hoverProvider":true,"codeActionProvider":true,"completionProvider":{"triggerCharacters":["."],"resolveProvider":false},"codeLensProvider":{},"documentSymbolProvider":true,"documentFormattingProvider":true}},"jsonrpc":"2.0","id":0}
2020-12-02 19:50:46.301399296 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"initialized","params":{}}
2020-12-02 19:50:46.301636455 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"registrations":[{"registerOptions":{"watchers":[{"kind":5,"globPattern":"**/*.hs"},{"kind":5,"globPattern":"**/*.hs-boot"},{"kind":5,"globPattern":"**/*.lhs"},{"kind":5,"globPattern":"**/*.lhs-boot"}]},"method":"workspace/didChangeWatchedFiles","id":"globalFileWatches"}]},"method":"client/registerCapability","id":0}
2020-12-02 19:50:46.301836808 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"haskell":{"hlintOn":true,"maxNumberOfProblems":100,"diagnosticsOnChange":true,"liquidOn":false,"completionSnippetsOn":true,"formatOnImportOn":true,"formattingProvider":"stylish-haskell","trace":{"server":"messages"},"logFile":"hls.log","languageServerVariant":"haskell-language-server","serverExecutablePath":"~/.local/bin/haskell-language-server-8.10.2","updateBehavior":"keep-up-to-date","indentationRules":{"enabled":true},"hlint":{"executablePath":"/home/jordan/.cabal/bin/hlint","logLevel":"log"}}}}}
2020-12-02 19:50:46.302056432 [ThreadId 25] - Configuration changed: Object (fromList [("haskell",Object (fromList [("hlint",Object (fromList [("logLevel",String "log"),("executablePath",String "/home/jordan/.cabal/bin/hlint")])),("logFile",String "hls.log"),("updateBehavior",String "keep-up-to-date"),("hlintOn",Bool True),("formatOnImportOn",Bool True),("indentationRules",Object (fromList [("enabled",Bool True)])),("liquidOn",Bool False),("languageServerVariant",String "haskell-language-server"),("serverExecutablePath",String "~/.local/bin/haskell-language-server-8.10.2"),("diagnosticsOnChange",Bool True),("completionSnippetsOn",Bool True),("maxNumberOfProblems",Number 100.0),("formattingProvider",String "stylish-haskell"),("trace",Object (fromList [("server",String "messages")]))]))])
2020-12-02 19:50:46.302335521 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 19:50:46.302456765 [ThreadId 24] - Finishing build session(exception: AsyncCancelled)
2020-12-02 19:50:46.303055166 [ThreadId 65] - finish: kick (took 0.00s)
2020-12-02 19:50:46.302998245 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE DerivingVia #-}\n{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE TypeFamilies #-}\n\nmodule Cardano.Api.Script (\n    -- * Languages\n    SimpleScriptV1,\n    SimpleScriptV2,\n    ScriptLanguage(..),\n    SimpleScriptVersion(..),\n    PlutusScriptVersion,\n    AnyScriptLanguage(..),\n    IsScriptLanguage(..),\n    IsSimpleScriptLanguage(..),\n\n    -- * Scripts in a specific language\n    Script(..),\n\n    -- * Scripts in any language\n    ScriptInAnyLang(..),\n    toScriptInAnyLang,\n\n    -- * Scripts in an era\n    ScriptInEra(..),\n    toScriptInEra,\n    eraOfScriptInEra,\n\n    -- ** Languages supported in each era\n    ScriptLanguageInEra(..),\n    scriptLanguageSupportedInEra,\n    languageOfScriptLanguageInEra,\n    eraOfScriptLanguageInEra,\n\n    -- * The simple script language\n    SimpleScript(..),\n    TimeLocksSupported(..),\n    timeLocksSupported,\n    adjustSimpleScriptVersion,\n\n    -- * Script hashes\n    ScriptHash(..),\n    hashScript,\n\n    -- * Internal conversion functions\n    toShelleyScript,\n    toShelleyMultiSig,\n    fromShelleyMultiSig,\n    toAllegraTimelock,\n    fromAllegraTimelock,\n    toShelleyScriptHash,\n    fromShelleyScriptHash,\n\n    -- * Data family instances\n    AsType(..)\n  ) where\n\nimport           Prelude\n\nimport qualified Data.ByteString.Lazy as LBS\nimport           Data.Foldable (toList)\nimport           Data.Scientific (toBoundedInteger)\nimport           Data.String (IsString)\nimport           Data.Text (Text)\nimport qualified Data.Text as Text\nimport qualified Data.Text.Encoding as Text\nimport           Data.Type.Equality (TestEquality(..), (:~:)(Refl))\n\nimport           Data.Aeson (Value (..), object, (.:), (.=))\nimport qualified Data.Aeson as Aeson\nimport qualified Data.Aeson.Types as Aeson\nimport qualified Data.Sequence.Strict as Seq\nimport           Data.Vector (Vector)\nimport qualified Data.Vector as Vector\n\nimport           Control.Applicative\nimport           Control.Monad\n\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\nimport qualified Cardano.Crypto.Hash.Class as Crypto\n\nimport           Cardano.Slotting.Slot (SlotNo)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era  as Ledger\n\nimport qualified Cardano.Ledger.ShelleyMA.Timelocks as Timelock\nimport           Ouroboros.Consensus.Shelley.Eras\n                   (StandardAllegra, StandardCrypto, StandardShelley)\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Scripts as Shelley\n\nimport           Cardano.Api.Eras\nimport           Cardano.Api.Hash\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseJSON\nimport           Cardano.Api.SerialiseRaw\nimport           Cardano.Api.SerialiseTextEnvelope\n\n{- HLINT ignore \"Use section\" -}\n\n\n-- ----------------------------------------------------------------------------\n-- Types for script language and version\n--\n\n-- | The original simple script language which supports\n--\n-- * require a signature from a given key (by verification key hash)\n-- * n-way and combinator\n-- * n-way or combinator\n-- * m-of-n combinator\n--\n-- This version of the language was introduced in the 'ShelleyEra'.\n--\ndata SimpleScriptV1\n\n-- | The second version of the simple script language. It has all the features\n-- of 'SimpleScriptV1' plus new atomic predicates:\n--\n-- * require the time be before a given slot number\n-- * require the time be after a given slot number\n--\n-- This version of the language was introduced in the 'AllegraEra'.\n--\ndata SimpleScriptV2\n\n-- | Place holder type to show what the pattern is to extend to multiple\n-- languages, not just multiple versions of a single language.\n--\ndata PlutusScriptV1\n\ninstance HasTypeProxy SimpleScriptV1 where\n    data AsType SimpleScriptV1 = AsSimpleScriptV1\n    proxyToAsType _ = AsSimpleScriptV1\n\ninstance HasTypeProxy SimpleScriptV2 where\n    data AsType SimpleScriptV2 = AsSimpleScriptV2\n    proxyToAsType _ = AsSimpleScriptV2\n\ninstance HasTypeProxy PlutusScriptV1 where\n    data AsType PlutusScriptV1 = AsPlutusScriptV1\n    proxyToAsType _ = AsPlutusScriptV1\n\n\n-- ----------------------------------------------------------------------------\n-- Value level representation for script languages\n--\ndata ScriptLanguage lang where\n\n     SimpleScriptLanguage :: SimpleScriptVersion lang -> ScriptLanguage lang\n\n     PlutusScriptLanguage :: PlutusScriptVersion lang -> ScriptLanguage lang\n\nderiving instance (Eq   (ScriptLanguage lang))\nderiving instance (Show (ScriptLanguage lang))\n\ninstance TestEquality ScriptLanguage where\n    testEquality (SimpleScriptLanguage lang)\n                 (SimpleScriptLanguage lang') = testEquality lang lang'\n\n    testEquality (PlutusScriptLanguage lang)\n                 (PlutusScriptLanguage lang') = testEquality lang lang'\n\n    testEquality  _ _ = Nothing\n\n\ndata SimpleScriptVersion lang where\n\n     SimpleScriptV1 :: SimpleScriptVersion SimpleScriptV1\n     SimpleScriptV2 :: SimpleScriptVersion SimpleScriptV2\n\nderiving instance (Eq   (SimpleScriptVersion lang))\nderiving instance (Show (SimpleScriptVersion lang))\n\ninstance TestEquality SimpleScriptVersion where\n    testEquality SimpleScriptV1 SimpleScriptV1 = Just Refl\n    testEquality SimpleScriptV2 SimpleScriptV2 = Just Refl\n    testEquality _              _              = Nothing\n\n\ndata PlutusScriptVersion lang\n  -- For now, there are no such versions, but it'd be like this:\n  -- PlutusScriptV1 :: PlutusScriptVersion PlutusScriptV1\n\nderiving instance (Eq   (PlutusScriptVersion lang))\nderiving instance (Show (PlutusScriptVersion lang))\n\ninstance TestEquality PlutusScriptVersion where\n    testEquality lang = case lang of {}\n\n\ndata AnyScriptLanguage where\n     AnyScriptLanguage :: ScriptLanguage lang -> AnyScriptLanguage\n\nderiving instance (Show AnyScriptLanguage)\n\ninstance Eq AnyScriptLanguage where\n    AnyScriptLanguage lang == AnyScriptLanguage lang' =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> True -- since no constructors share types\n\ninstance Enum AnyScriptLanguage where\n    toEnum 0 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    toEnum 1 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n    toEnum _ = error \"AnyScriptLanguage.toEnum: bad argument\"\n\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)) = 0\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)) = 1\n    fromEnum (AnyScriptLanguage (PlutusScriptLanguage lang)) = case lang of {}\n\ninstance Bounded AnyScriptLanguage where\n    minBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    maxBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n\n\nclass HasTypeProxy lang => IsScriptLanguage lang where\n    scriptLanguage :: ScriptLanguage lang\n\ninstance IsScriptLanguage SimpleScriptV1 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV1\n\ninstance IsScriptLanguage SimpleScriptV2 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV2\n\n--instance IsScriptLanguage PlutusScriptV1 where\n--    scriptLanguage = PlutusScriptLanguage PlutusScriptV1\n\n\nclass IsScriptLanguage lang => IsSimpleScriptLanguage lang where\n    simpleScriptVersion :: SimpleScriptVersion lang\n\ninstance IsSimpleScriptLanguage SimpleScriptV1 where\n    simpleScriptVersion = SimpleScriptV1\n\ninstance IsSimpleScriptLanguage SimpleScriptV2 where\n    simpleScriptVersion = SimpleScriptV2\n\n\n\n-- ----------------------------------------------------------------------------\n-- Script type: covering all script languages\n--\n\n-- | A script in a particular language.\n--\n-- See also 'ScriptInAnyLang' for a script in any of the languages that is available within\n-- a particular era.\n--\n-- See also 'ScriptInEra' for a script in a language that is available within\n-- a particular era.\n--\ndata Script lang where\n\n     SimpleScript :: !(SimpleScriptVersion lang)\n                  -> !(SimpleScript lang)\n                  -> Script lang\n\n     -- Place holder type to show what the pattern is to extend to multiple\n     -- languages, not just multiple versions of a single language.\n     -- For now there are no values of PlutusScriptVersion so this branch\n     -- is inaccessible.\n     PlutusScript :: !(PlutusScriptVersion lang)\n                  -> ()\n                  -> Script lang\n\nderiving instance (Eq   (Script lang))\nderiving instance (Show (Script lang))\n\ninstance HasTypeProxy lang => HasTypeProxy (Script lang) where\n    data AsType (Script lang) = AsScript (AsType lang)\n    proxyToAsType _ = AsScript (proxyToAsType (Proxy :: Proxy lang))\n\ninstance IsScriptLanguage lang => SerialiseAsCBOR (Script lang) where\n    serialiseToCBOR (SimpleScript SimpleScriptV1 s) =\n      CBOR.serialize' (toShelleyMultiSig s)\n\n    serialiseToCBOR (SimpleScript SimpleScriptV2 s) =\n      CBOR.serialize' (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    deserialiseFromCBOR _ bs =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 ->\n              SimpleScript SimpleScriptV1\n            . fromShelleyMultiSig\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        SimpleScriptLanguage SimpleScriptV2 ->\n              SimpleScript SimpleScriptV2\n            . (fromAllegraTimelock TimeLocksInSimpleScriptV2\n                                :: Timelock.Timelock StandardAllegra\n                                -> SimpleScript SimpleScriptV2)\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        PlutusScriptLanguage v -> case v of {}\n\n\ninstance IsScriptLanguage lang => HasTextEnvelope (Script lang) where\n    textEnvelopeType _ =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 -> \"SimpleScriptV1\"\n        SimpleScriptLanguage SimpleScriptV2 -> \"SimpleScriptV2\"\n        PlutusScriptLanguage v -> case v of {}\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in any language\n--\n\n-- | Sometimes it is necessary to handle all languages without making static\n-- type distinctions between languages. For example, when reading external\n-- input, or before the era context is known.\n--\n-- Use 'toScriptInEra' to convert to a script in the context of an era.\n--\ndata ScriptInAnyLang where\n     ScriptInAnyLang :: ScriptLanguage lang\n                     -> Script lang\n                     -> ScriptInAnyLang\n\nderiving instance Show ScriptInAnyLang\n\n-- The GADT in the ScriptInAnyLang constructor requires a custom Eq instance\ninstance Eq ScriptInAnyLang where\n    (==) (ScriptInAnyLang lang  script)\n         (ScriptInAnyLang lang' script') =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\n-- | Convert a script in a specific statically-known language to a\n-- 'ScriptInAnyLang'.\n--\n-- No inverse to this is provided, just do case analysis on the 'ScriptLanguage'\n-- field within the 'ScriptInAnyLang' constructor.\n--\ntoScriptInAnyLang :: Script lang -> ScriptInAnyLang\ntoScriptInAnyLang s@(SimpleScript v _) =\n    ScriptInAnyLang (SimpleScriptLanguage v) s\n\ninstance HasTypeProxy ScriptInAnyLang where\n    data AsType ScriptInAnyLang = AsScriptInAnyLang\n    proxyToAsType _ = AsScriptInAnyLang\n\ninstance SerialiseAsCBOR ScriptInAnyLang where\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript _v s)) =\n      -- Note that the CBOR encoding here is compatible with the previous\n      -- serialisation format for the @Script@ type from @cardano-ledger-specs@.\n      --\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 0\n       <> toCBOR (toShelleyMultiSig s)\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript _v s)) =\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 1\n       <> toCBOR (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    serialiseToCBOR (ScriptInAnyLang (PlutusScriptLanguage v) _) = case v of {}\n\n    deserialiseFromCBOR AsScriptInAnyLang bs =\n        CBOR.decodeAnnotator \"Script\" decodeScript (LBS.fromStrict bs)\n      where\n        decodeScript :: CBOR.Decoder s (CBOR.Annotator ScriptInAnyLang)\n        decodeScript = do\n          CBOR.decodeListLenOf 2\n          tag <- CBOR.decodeWord8\n\n          case tag of\n            0 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Shelley.MultiSig StandardShelley -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                        . SimpleScript SimpleScriptV1\n                        . fromShelleyMultiSig\n\n            1 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Timelock.Timelock StandardAllegra -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                        . SimpleScript SimpleScriptV2\n                        . fromAllegraTimelock TimeLocksInSimpleScriptV2\n\n            _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag \"Script\" tag\n\ninstance HasTextEnvelope ScriptInAnyLang where\n    textEnvelopeType _ = \"Script\"\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in the context of a ledger era\n--\n\ndata ScriptInEra era where\n     ScriptInEra :: ScriptLanguageInEra lang era\n                 -> Script lang\n                 -> ScriptInEra era\n\nderiving instance Show (ScriptInEra era)\n\n-- The GADT in the ScriptInEra constructor requires a custom instance\ninstance Eq (ScriptInEra era) where\n    (==) (ScriptInEra langInEra  script)\n         (ScriptInEra langInEra' script') =\n      case testEquality (languageOfScriptLanguageInEra langInEra)\n                        (languageOfScriptLanguageInEra langInEra') of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\ndata ScriptLanguageInEra lang era where\n\n     SimpleScriptV1InShelley :: ScriptLanguageInEra SimpleScriptV1 ShelleyEra\n     SimpleScriptV1InAllegra :: ScriptLanguageInEra SimpleScriptV1 AllegraEra\n     SimpleScriptV1InMary    :: ScriptLanguageInEra SimpleScriptV1 MaryEra\n\n     SimpleScriptV2InAllegra :: ScriptLanguageInEra SimpleScriptV2 AllegraEra\n     SimpleScriptV2InMary    :: ScriptLanguageInEra SimpleScriptV2 MaryEra\n\nderiving instance Eq   (ScriptLanguageInEra lang era)\nderiving instance Show (ScriptLanguageInEra lang era)\n\ninstance HasTypeProxy era => HasTypeProxy (ScriptInEra era) where\n    data AsType (ScriptInEra era) = AsScriptInEra (AsType era)\n    proxyToAsType _ = AsScriptInEra (proxyToAsType (Proxy :: Proxy era))\n\ninstance IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era) where\n    serialiseToCBOR (ScriptInEra _lang s) =\n      serialiseToCBOR (toScriptInAnyLang s)\n\n    deserialiseFromCBOR (AsScriptInEra _) bs = do\n      s@(ScriptInAnyLang lang _) <- deserialiseFromCBOR AsScriptInAnyLang bs\n      case toScriptInEra cardanoEra s of\n        Just s' -> Right s'\n        Nothing ->\n          Left $ CBOR.DecoderErrorCustom\n                 (Text.pack (show (cardanoEra :: CardanoEra era)) <> \" Script\")\n                 (\"Script language \" <> Text.pack (show lang) <>\n                  \" not supported in this era\")\n\ninstance IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era) where\n    textEnvelopeType _ =\n      case shelleyBasedEra :: ShelleyBasedEra era of\n        ShelleyBasedEraShelley -> \"ScriptInEra ShelleyEra\"\n        ShelleyBasedEraAllegra -> \"ScriptInEra AllegraEra\"\n        ShelleyBasedEraMary    -> \"ScriptInEra MaryEra\"\n\n\n-- | Check if a given script language is supported in a given era, and if so\n-- return the evidence.\n--\nscriptLanguageSupportedInEra :: CardanoEra era\n                             -> ScriptLanguage lang\n                             -> Maybe (ScriptLanguageInEra lang era)\nscriptLanguageSupportedInEra era lang =\n    case (era, lang) of\n      (ShelleyEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InShelley\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InMary\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InMary\n\n      _ -> Nothing\n\nlanguageOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                              -> ScriptLanguage lang\nlanguageOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InAllegra -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InMary    -> SimpleScriptLanguage SimpleScriptV1\n\n      SimpleScriptV2InAllegra -> SimpleScriptLanguage SimpleScriptV2\n      SimpleScriptV2InMary    -> SimpleScriptLanguage SimpleScriptV2\n\neraOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                         -> ShelleyBasedEra era\neraOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> ShelleyBasedEraShelley\n\n      SimpleScriptV1InAllegra -> ShelleyBasedEraAllegra\n      SimpleScriptV2InAllegra -> ShelleyBasedEraAllegra\n\n      SimpleScriptV1InMary    -> ShelleyBasedEraMary\n      SimpleScriptV2InMary    -> ShelleyBasedEraMary\n\n\n-- | Given a target era and a script in some language, check if the language is\n-- supported in that era, and if so return a 'ScriptInEra'.\n--\ntoScriptInEra :: CardanoEra era -> ScriptInAnyLang -> Maybe (ScriptInEra era)\ntoScriptInEra era (ScriptInAnyLang lang s) = do\n    lang' <- scriptLanguageSupportedInEra era lang\n    return (ScriptInEra lang' s)\n\neraOfScriptInEra :: ScriptInEra era -> ShelleyBasedEra era\neraOfScriptInEra (ScriptInEra langInEra _) = eraOfScriptLanguageInEra langInEra\n\n\n-- ----------------------------------------------------------------------------\n-- Script Hash\n--\n\n-- | We have this type separate from the 'Hash' type to avoid the script\n-- hash type being parametrised by the era. The representation is era\n-- independent, and there are many places where we want to use a script\n-- hash where we don't want things to be era-parametrised.\n--\nnewtype ScriptHash = ScriptHash (Shelley.ScriptHash StandardShelley)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex ScriptHash\n\ninstance HasTypeProxy ScriptHash where\n    data AsType ScriptHash = AsScriptHash\n    proxyToAsType _ = AsScriptHash\n\ninstance SerialiseAsRawBytes ScriptHash where\n    serialiseToRawBytes (ScriptHash (Shelley.ScriptHash h)) =\n      Crypto.hashToBytes h\n\n    deserialiseFromRawBytes AsScriptHash bs =\n      ScriptHash . Shelley.ScriptHash <$> Crypto.hashFromBytes bs\n\n\nhashScript :: Script lang -> ScriptHash\nhashScript (SimpleScript SimpleScriptV1 s) =\n    -- For V1, we convert to the Shelley-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . Shelley.hashMultiSigScript\n  . toShelleyMultiSig\n  $ s\n\nhashScript (SimpleScript SimpleScriptV2 s) =\n    -- For V1, we convert to the Allegra-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . coerceShelleyScriptHash\n  . Timelock.hashTimelockScript\n  . (toAllegraTimelock :: SimpleScript SimpleScriptV2\n                       -> Timelock.Timelock StandardAllegra)\n  $ s\n\n\ntoShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                    => ScriptHash -> Shelley.ScriptHash ledgerera\ntoShelleyScriptHash (ScriptHash h) = coerceShelleyScriptHash h\n\nfromShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                      => Shelley.ScriptHash ledgerera -> ScriptHash\nfromShelleyScriptHash = ScriptHash . coerceShelleyScriptHash\n\ncoerceShelleyScriptHash :: Ledger.Crypto ledgereraA ~ Ledger.Crypto ledgereraB\n                        => Shelley.ScriptHash ledgereraA\n                        -> Shelley.ScriptHash ledgereraB\ncoerceShelleyScriptHash (Shelley.ScriptHash h) =\n    Shelley.ScriptHash (Crypto.castHash h)\n\n\n-- ----------------------------------------------------------------------------\n-- The simple native script language\n--\n\ndata SimpleScript lang where\n\n     RequireSignature  :: !(Hash PaymentKey)\n                       -> SimpleScript lang\n\n     RequireTimeBefore :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireTimeAfter  :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireAllOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireAnyOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireMOf        :: Int -> [SimpleScript lang] -> SimpleScript lang\n\nderiving instance Eq   (SimpleScript lang)\nderiving instance Show (SimpleScript lang)\n\n\n-- | Time lock feature in the 'SimpleScript' language.\n--\n-- The constructors of this type serve as evidence that the timelocks feature\n-- is supported in particular versions of the language.\n--\ndata TimeLocksSupported lang where\n     TimeLocksInSimpleScriptV2 :: TimeLocksSupported SimpleScriptV2\n\nderiving instance Eq   (TimeLocksSupported lang)\nderiving instance Show (TimeLocksSupported lang)\n\ntimeLocksSupported :: SimpleScriptVersion lang\n                   -> Maybe (TimeLocksSupported lang)\ntimeLocksSupported SimpleScriptV1 = Nothing\ntimeLocksSupported SimpleScriptV2 = Just TimeLocksInSimpleScriptV2\n\n\n-- | Try converting the 'SimpleScript' into a different version of the language.\n--\n-- This will work when the script only uses the features of the target language\n-- version. For example converting from 'SimpleScriptV2' to 'SimpleScriptV1'\n-- will work if the script happens not to use time locks feature. On the other\n-- hand converting 'SimpleScriptV1' to 'SimpleScriptV2' will always work because\n-- it is backwards compatible.\n--\nadjustSimpleScriptVersion :: SimpleScriptVersion lang'\n                          -> SimpleScript lang\n                          -> Maybe (SimpleScript lang')\nadjustSimpleScriptVersion target = go\n  where\n    go (RequireSignature sig) = pure (RequireSignature sig)\n\n    go (RequireTimeBefore _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeBefore supported slot)\n\n    go (RequireTimeAfter _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeAfter supported slot)\n\n    go (RequireAllOf ss) = RequireAllOf <$> traverse go ss\n    go (RequireAnyOf ss) = RequireAnyOf <$> traverse go ss\n    go (RequireMOf m ss) = RequireMOf m <$> traverse go ss\n\n\n-- ----------------------------------------------------------------------------\n-- Conversion functions\n--\n\ntoShelleyScript :: ScriptInEra era -> Ledger.Script (ShelleyLedgerEra era)\ntoShelleyScript (ScriptInEra langInEra (SimpleScript _ script)) =\n    case langInEra of\n      SimpleScriptV1InShelley -> toShelleyMultiSig script\n\n      SimpleScriptV1InAllegra -> toAllegraTimelock script\n      SimpleScriptV1InMary    -> toAllegraTimelock script\n      SimpleScriptV2InAllegra -> toAllegraTimelock script\n      SimpleScriptV2InMary    -> toAllegraTimelock script\n\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\ntoShelleyMultiSig :: SimpleScript SimpleScriptV1\n                  -> Shelley.MultiSig StandardShelley\ntoShelleyMultiSig = go\n  where\n    go :: SimpleScript SimpleScriptV1 -> Shelley.MultiSig StandardShelley\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Shelley.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Shelley.RequireAllOf (map go s)\n    go (RequireAnyOf s) = Shelley.RequireAnyOf (map go s)\n    go (RequireMOf m s) = Shelley.RequireMOf m (map go s)\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\nfromShelleyMultiSig :: Shelley.MultiSig StandardShelley -> SimpleScript lang\nfromShelleyMultiSig = go\n  where\n    go (Shelley.RequireSignature kh)\n                                = RequireSignature\n                                    (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Shelley.RequireAllOf s) = RequireAllOf (map go s)\n    go (Shelley.RequireAnyOf s) = RequireAnyOf (map go s)\n    go (Shelley.RequireMOf m s) = RequireMOf m (map go s)\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\ntoAllegraTimelock :: forall lang ledgerera.\n                     (Ledger.Era ledgerera,\n                      Ledger.Crypto ledgerera ~ StandardCrypto)\n                  => SimpleScript lang -> Timelock.Timelock ledgerera\ntoAllegraTimelock = go\n  where\n    go :: SimpleScript lang -> Timelock.Timelock ledgerera\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Timelock.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Timelock.RequireAllOf (Seq.fromList (map go s))\n    go (RequireAnyOf s) = Timelock.RequireAnyOf (Seq.fromList (map go s))\n    go (RequireMOf m s) = Timelock.RequireMOf m (Seq.fromList (map go s))\n    go (RequireTimeBefore _ t) = Timelock.RequireTimeExpire t\n    go (RequireTimeAfter  _ t) = Timelock.RequireTimeStart  t\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\nfromAllegraTimelock ::    (Ledger.Era ledgerera,\n                           Ledger.Crypto ledgerera ~ StandardCrypto)\n                       => TimeLocksSupported lang\n                       -> Timelock.Timelock ledgerera\n                       -> SimpleScript lang\nfromAllegraTimelock timelocks = go\n  where\n    go (Timelock.RequireSignature kh) = RequireSignature\n                                          (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Timelock.RequireTimeExpire t) = RequireTimeBefore timelocks t\n    go (Timelock.RequireTimeStart  t) = RequireTimeAfter  timelocks t\n    go (Timelock.RequireAllOf      s) = RequireAllOf (map go (toList s))\n    go (Timelock.RequireAnyOf      s) = RequireAnyOf (map go (toList s))\n    go (Timelock.RequireMOf      i s) = RequireMOf i (map go (toList s))\n\n\n-- ----------------------------------------------------------------------------\n-- JSON serialisation\n--\n\ninstance ToJSON (Script lang) where\n  toJSON (SimpleScript _ script) = toJSON script\n\ninstance ToJSON ScriptInAnyLang where\n  toJSON (ScriptInAnyLang _ script) = toJSON script\n\ninstance ToJSON (ScriptInEra era) where\n  toJSON (ScriptInEra _ script) = toJSON script\n\ninstance ToJSON (SimpleScript lang) where\n  toJSON (RequireSignature pKeyHash) =\n    object [ \"type\"    .= String \"sig\"\n           , \"keyHash\" .= Text.decodeUtf8 (serialiseToRawBytesHex pKeyHash)\n           ]\n  toJSON (RequireTimeBefore _ slot) =\n    object [ \"type\" .= String \"before\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireTimeAfter _ slot) =\n    object [ \"type\" .= String \"after\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireAnyOf reqScripts) =\n    object [ \"type\" .= String \"any\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireAllOf reqScripts) =\n    object [ \"type\" .= String \"all\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireMOf reqNum reqScripts) =\n    object [ \"type\" .= String \"atLeast\"\n           , \"required\" .= reqNum\n           , \"scripts\" .= map toJSON reqScripts\n           ]\n\n\ninstance IsScriptLanguage lang => FromJSON (Script lang) where\n  parseJSON v =\n    case scriptLanguage :: ScriptLanguage lang of\n      SimpleScriptLanguage lang -> SimpleScript lang <$>\n                                     parseSimpleScript lang v\n      PlutusScriptLanguage lang -> case lang of {}\n\n\ninstance FromJSON ScriptInAnyLang where\n  parseJSON v =\n      -- The SimpleScript language has the property that it is backwards\n      -- compatible, so we can parse as the latest version and then downgrade\n      -- to the minimum version that has all the features actually used.\n      toMinimumSimpleScriptVersion <$> parseSimpleScript SimpleScriptV2 v\n    where\n      --TODO: this will need to be adjusted when more versions are added\n      -- with appropriate helper functions it can probably be done in an\n      -- era-generic style\n      toMinimumSimpleScriptVersion s =\n        case adjustSimpleScriptVersion SimpleScriptV1 s of\n          Nothing -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript SimpleScriptV2 s)\n          Just s' -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsCardanoEra era => FromJSON (ScriptInEra era) where\n  parseJSON v =\n    case cardanoEra :: CardanoEra era of\n      ByronEra   -> fail \"Scripts are not supported in the Byron era\"\n\n      ShelleyEra -> ScriptInEra SimpleScriptV1InShelley\n                  . SimpleScript SimpleScriptV1\n                <$> parseSimpleScript SimpleScriptV1 v\n\n      --TODO: this will need to be adjusted when more versions are added.\n      -- It can probably be done in an era-generic style, with the use of\n      -- appropriate helper functions.\n      AllegraEra -> toMinimumSimpleScriptVersion\n                <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InAllegra\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InAllegra\n                                     (SimpleScript SimpleScriptV1 s')\n\n      MaryEra -> toMinimumSimpleScriptVersion\n             <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InMary\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InMary\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang) where\n  parseJSON = parseSimpleScript simpleScriptVersion\n\n\nparseSimpleScript :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseSimpleScript lang v = parseScriptSig          v\n                       <|> parseScriptBefore  lang v\n                       <|> parseScriptAfter   lang v\n                       <|> parseScriptAny     lang v\n                       <|> parseScriptAll     lang v\n                       <|> parseScriptAtLeast lang v\n\nparseScriptAny :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAny lang =\n    Aeson.withObject \"any\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"any\" -> do vs <- obj .: \"scripts\"\n                    RequireAnyOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"any\\\" script value not found\"\n\nparseScriptAll :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAll lang =\n    Aeson.withObject \"all\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"all\" -> do vs <- obj .: \"scripts\"\n                    RequireAllOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"all\\\" script value not found\"\n\nparseScriptAtLeast :: SimpleScriptVersion lang\n                   -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAtLeast lang =\n    Aeson.withObject \"atLeast\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"atLeast\" -> do\n          r  <- obj .: \"required\"\n          vs <- obj .: \"scripts\"\n          case r of\n            Number sci ->\n              case toBoundedInteger sci of\n                Just reqInt ->\n                  do scripts <- gatherSimpleScriptTerms lang vs\n                     let numScripts = length scripts\n                     when\n                       (reqInt > numScripts)\n                       (fail $ \"Required number of script signatures exceeds the number of scripts.\"\n                             <> \" Required number: \" <> show reqInt\n                             <> \" Number of scripts: \" <> show numScripts)\n                     return $ RequireMOf reqInt scripts\n                Nothing -> fail $ \"Error in \\\"required\\\" key: \"\n                                <> show sci <> \" is not a valid Int\"\n            _ -> fail \"\\\"required\\\" value should be an integer\"\n        _        -> fail \"\\\"atLeast\\\" script value not found\"\n\ngatherSimpleScriptTerms :: SimpleScriptVersion lang\n                        -> Vector Value -> Aeson.Parser [SimpleScript lang]\ngatherSimpleScriptTerms lang = mapM (parseSimpleScript lang) . Vector.toList\n\nparseScriptSig :: Value -> Aeson.Parser (SimpleScript lang)\nparseScriptSig =\n    Aeson.withObject \"sig\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"sig\" -> do k <- obj .: \"keyHash\"\n                    RequireSignature <$> parsePaymentKeyHash k\n        _     -> fail \"\\\"sig\\\" script value not found\"\n\nparseScriptBefore :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptBefore lang =\n    Aeson.withObject \"before\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"before\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeBefore supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"before\\\" not supported in \" ++ show lang)\n        _ -> fail \"\\\"before\\\" script value not found\"\n\nparseScriptAfter :: SimpleScriptVersion lang\n                 -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAfter lang =\n    Aeson.withObject \"after\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"after\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeAfter supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"after\\\" not supported in \" ++ show lang)\n        _       -> fail \"\\\"after\\\" script value not found\"\n\nparsePaymentKeyHash :: Text -> Aeson.Parser (Hash PaymentKey)\nparsePaymentKeyHash txt =\n    case deserialiseFromRawBytesHex (AsHash AsPaymentKey) (Text.encodeUtf8 txt) of\n      Just payKeyHash -> return payKeyHash\n      Nothing -> fail $ \"Error deserialising payment key hash: \" <> Text.unpack txt\n\n"}}}
2020-12-02 19:50:46.310416016 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":0,"result":null}
2020-12-02 19:50:46.310599372 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":0,\"result\":null}"
2020-12-02 19:50:46.310893412 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-02 19:50:46.311174903 [ThreadId 44] - Finishing build session(exception: AsyncCancelled)
2020-12-02 19:50:46.311240106 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 19:50:46.311376022 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 19:50:46.312514612 [ThreadId 97] - Consulting the cradle for "cardano-api/src/Cardano/Api/Script.hs"
2020-12-02 19:50:46.313352692 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":0},"method":"window/workDoneProgress/create","id":1}
2020-12-02 19:50:46.31348243 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","cancellable":false,"title":"Setting up cardano-node (for cardano-api/src/Cardano/Api/Script.hs)"},"token":0},"method":"$/progress"}
2020-12-02 19:50:46.313967087 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":1,"result":null}
2020-12-02 19:50:46.314055365 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":null}"
2020-12-02 19:50:46.325579972 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-02 19:50:46.326466953 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":718,"character":23},"end":{"line":718,"character":23}},"context":{"diagnostics":[]}}}
2020-12-02 19:50:46.412322008 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":"3"},"method":"window/workDoneProgress/create","id":2}
2020-12-02 19:50:46.412544436 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","title":"Processing"},"token":"3"},"method":"$/progress"}
2020-12-02 19:50:46.413120153 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":2,"result":null}
2020-12-02 19:50:46.413262441 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":2,\"result\":null}"
2020-12-02 19:50:46.512589633 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"1/2"},"token":"3"},"method":"$/progress"}
2020-12-02 19:50:46.567651885 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-02 19:50:46.567893235 [ThreadId 117] - Plugin.makeCodeLens (ideLogger)
2020-12-02 19:50:46.6188869 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":710,"character":46}}}
2020-12-02 19:50:46.619228332 [ThreadId 122] - GhcIde.hover entered (ideLogger)
2020-12-02 19:50:46.619468338 [ThreadId 122] - Hover request at position 711:47 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 19:50:46.826089222 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}
2020-12-02 19:50:46.826388918 [ThreadId 122] - C:GetHieAst was cancelled
2020-12-02 19:50:46.826504859 [ThreadId 120] - Cancelled request IdInt 4
2020-12-02 19:50:46.826725 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":4}
2020-12-02 19:50:48.50036594 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":644,"character":16}}}
2020-12-02 19:50:48.500697242 [ThreadId 129] - GhcIde.hover entered (ideLogger)
2020-12-02 19:50:48.500908088 [ThreadId 129] - Hover request at position 645:17 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 19:50:48.739045908 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":5}}
2020-12-02 19:50:48.739375688 [ThreadId 129] - C:GetHieAst was cancelled
2020-12-02 19:50:48.739495669 [ThreadId 127] - Cancelled request IdInt 5
2020-12-02 19:50:48.739708601 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":5}
2020-12-02 19:50:56.744940942 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":158,"character":76}}}
2020-12-02 19:50:56.745398806 [ThreadId 135] - DocumentHighlight request at position 159:77 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 19:50:56.986609845 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":6}}
2020-12-02 19:50:56.986958323 [ThreadId 135] - C:GetHieAst was cancelled
2020-12-02 19:50:56.987048609 [ThreadId 133] - Cancelled request IdInt 6
2020-12-02 19:50:56.987204676 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":6}
2020-12-02 19:50:57.329246981 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":158,"character":16},"end":{"line":158,"character":76}},"context":{"diagnostics":[]}}}
2020-12-02 19:50:57.329510839 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}
2020-12-02 19:50:57.329835036 [ThreadId 112] - CodeAction was cancelled
2020-12-02 19:50:57.329897256 [ThreadId 110] - Cancelled request IdInt 2
2020-12-02 19:50:57.330113326 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":2}
2020-12-02 19:50:57.802213696 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":156,"character":0},"end":{"line":158,"character":76}},"context":{"diagnostics":[]}}}
2020-12-02 19:50:57.802584854 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":7}}
2020-12-02 19:50:57.802735629 [ThreadId 141] - CodeAction was cancelled
2020-12-02 19:50:57.802825131 [ThreadId 139] - Cancelled request IdInt 7
2020-12-02 19:50:57.802951111 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":7}
2020-12-02 19:50:58.114216295 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":155,"character":0},"end":{"line":158,"character":76}},"context":{"diagnostics":[]}}}
2020-12-02 19:50:58.114532263 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":8}}
2020-12-02 19:50:58.114713842 [ThreadId 147] - CodeAction was cancelled
2020-12-02 19:50:58.114832874 [ThreadId 145] - Cancelled request IdInt 8
2020-12-02 19:50:58.115031502 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":8}
2020-12-02 19:50:58.814811508 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"context":{"diagnostics":[]}}}
2020-12-02 19:50:58.815056676 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":9}}
2020-12-02 19:50:58.81523165 [ThreadId 153] - CodeAction was cancelled
2020-12-02 19:50:58.815405565 [ThreadId 151] - Cancelled request IdInt 9
2020-12-02 19:50:58.815828226 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":9}
2020-12-02 19:54:06.604412346 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":0},"method":"$/progress"}
2020-12-02 19:54:06.604367567 [ThreadId 97] - Session loading result: Right (ComponentOptions {componentOptions = ["-fbuilding-cabal-package","-O0","-outputdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-odir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-hidir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-stubdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-i","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-isrc","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-optP-include","-optP/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen/cabal_macros.h","-this-unit-id","cardano-api-1.24.0-inplace","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","/home/jordan/.cabal/store/ghc-8.10.2/package.db","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/packagedb/ghc-8.10.2","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/package.conf.inplace","-package-id","aeson-1.5.4.1-778a06fa5c9318198c793c5f8e2ca8d95fb38f4f10ed2bb32743f99d3f297246","-package-id","aeson-pretty-0.8.8-9b8e5a813f7409b128fda52cd6ba78fcfcdafe24319cbe51431a74775267e91b","-package-id","attoparsec-0.13.2.4-b396c2be954a9ffb3e95bbdaa6fb35ac8c27f1db8915f7964aec17a75da742b8","-package-id","base-4.14.1.0","-package-id","base16-bytestring-1.0.1.0-9f11fc286491f106a9ef784dbd62d74f1270ad38dd03d9b8cbaa41c1bbf814c8","-package-id","base58-bytestring-0.1.0-05a60df8b198010614f5302714ff68e040396e56ff7519d163761623c0de2d98","-package-id","base64-0.4.2.2-f3d429f1b298e2d466e9311305c47c04a6d9a575e1b8a3f034d63e7d23e4db48","-package-id","bech32-1.1.0-ae5f2a1a89c10d7c25e2ebed7b7fb0cd489664bd6e6c0de80e0c1dff37d17063","-package-id","bytestring-0.10.10.0","-package-id","cardano-binary-1.5.0-inplace","-package-id","cardano-config-0.1.0.0-inplace","-package-id","cardano-crypto-1.1.0-inplace","-package-id","cardano-crypto-class-2.0.0-inplace","-package-id","cardano-crypto-wrapper-1.3.0-inplace","-package-id","cardano-ledger-0.1.0.0-inplace","-package-id","cardano-ledger-shelley-ma-0.1.0.0-inplace","-package-id","cardano-prelude-0.1.0.0-inplace","-package-id","cardano-slotting-0.1.0.0-inplace","-package-id","cborg-0.2.4.0-4a245966fd5882ffb16d2ef07bb992473fd41fea0a4e61c4acd669aab7242ef9","-package-id","containers-0.6.2.1","-package-id","contra-tracer-0.1.0.0-inplace","-package-id","cryptonite-0.27-8826084f96fb9db464240662656382b25f16ff766ee68e8d02dd9d995db86b80","-package-id","directory-1.3.6.0","-package-id","filepath-1.4.2.1","-package-id","formatting-6.3.7-330f1aaaee1a6193dee6fd50994a301f73441c53ff813f4d131c0e6261ec6d04","-package-id","io-sim-classes-0.2.0.0-inplace","-package-id","iohk-monitoring-0.1.10.1-inplace","-package-id","iproute-1.7.9-43bc36e75965a204ad802bfb667361131efd65210901659e34179dc2da9d1118","-package-id","memory-0.15.0-618aae508e33731dca15e11c7e941c9d1279b1ed04bf74d2a2b887208cef7d4c","-package-id","network-3.1.2.0-f313f458cfb9472e49923061663feda9781129bd7a55b5c51b8bf13fb9eff621","-package-id","network-mux-0.1.0.0-inplace","-package-id","network-uri-2.6.3.0-5bbc25b922944130d3a812c001fbe448d17321f63665fc89b3c6ab483fba8ba1","-package-id","nothunks-0.1.1.0-79bfe850d8c797b8b11355d5e36d13d317a1777729736319881d061a6bbdcf98","-package-id","ouroboros-consensus-0.1.0.0-inplace","-package-id","ouroboros-consensus-byron-0.1.0.0-inplace","-package-id","ouroboros-consensus-cardano-0.1.0.0-inplace","-package-id","ouroboros-consensus-shelley-0.1.0.0-inplace","-package-id","ouroboros-network-0.1.0.0-inplace","-package-id","ouroboros-network-framework-0.1.0.0-inplace","-package-id","scientific-0.3.6.2-8634ec87686367cd9854d817075c6b174f7c80b793cfe710d1a33fad0d669b83","-package-id","serialise-0.2.3.0-2d2b69476413a92a4cff76cdbea89b5f9e9991e103cca95a6e05888ca3848e83","-package-id","shelley-spec-ledger-0.1.0.0-inplace","-package-id","stm-2.5.0.0","-package-id","text-1.2.3.2","-package-id","time-1.9.3","-package-id","transformers-0.5.6.2","-package-id","transformers-except-0.1.1-dff5057c0148093fdb22eb905288dea1dc40636273c3c43c25d303bb31f7e9cb","-package-id","typed-protocols-0.1.0.0-inplace","-package-id","typed-protocols-examples-0.1.0.0-inplace","-package-id","unordered-containers-0.2.13.0-4cfa23410683cfe8b97b82ed15f0d30134b196b546cbf1fdf2d0a9054d02c7db","-package-id","vector-0.12.1.2-9df9fc999682f51f3e81c90fce28e7b7f7243cc5f3e33ff871c9d5a147125c1d","-XHaskell2010","-XNoImplicitPrelude","-XOverloadedStrings","Cardano.API","Cardano.Api.Byron","Cardano.Api.Crypto.Ed25519Bip32","Cardano.Api.LocalChainSync","Cardano.Api.Protocol","Cardano.Api.Protocol.Byron","Cardano.Api.Protocol.Cardano","Cardano.Api.Protocol.Shelley","Cardano.Api.Protocol.Types","Cardano.Api.Shelley","Cardano.Api.Shelley.Genesis","Cardano.Api.TxSubmit","Cardano.Api.Typed","Cardano.Api.TxSubmit.ErrorRender","Cardano.Api.TxSubmit.Types","Cardano.Api.Address","Cardano.Api.Certificate","Cardano.Api.Eras","Cardano.Api.Error","Cardano.Api.Fees","Cardano.Api.Hash","Cardano.Api.HasTypeProxy","Cardano.Api.Key","Cardano.Api.KeysByron","Cardano.Api.KeysShelley","Cardano.Api.KeysPraos","Cardano.Api.NetworkId","Cardano.Api.OperationalCertificate","Cardano.Api.ProtocolParameters","Cardano.Api.Script","Cardano.Api.SerialiseBech32","Cardano.Api.SerialiseCBOR","Cardano.Api.SerialiseJSON","Cardano.Api.SerialiseRaw","Cardano.Api.SerialiseTextEnvelope","Cardano.Api.StakePoolMetadata","Cardano.Api.Tx","Cardano.Api.TxBody","Cardano.Api.TxMetadata","Cardano.Api.Utils","Cardano.Api.Value","-Wall","-Wincomplete-record-updates","-Wincomplete-uni-patterns","-Wredundant-constraints","-Wpartial-fields","-Wcompat","-hide-all-packages","-Werror"], componentRoot = "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api", componentDependencies = ["cardano-api/cardano-api.cabal","cabal.project","cabal.project.local"]},"/usr/local/lib/ghc-8.10.2")
2020-12-02 19:54:06.735307516 [ThreadId 97] - Using interface files cache dir: /home/jordan/.cache/ghcide/cardano-api-1.24.0-inplace-04573879897e8c84891c4ddfb50e69055b43dad3
2020-12-02 19:54:06.735799777 [ThreadId 97] - Making new HscEnv[cardano-api-1.24.0-inplace]
2020-12-02 19:54:06.776292372 [ThreadId 97] - New Component Cache HscEnvEq: (([],Just HscEnvEq 12),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-api/cardano-api.cabal",Just 2020-12-02 09:21:26.415901175 UTC)])
2020-12-02 19:54:06.861910122 [ThreadId 97] - Known files updated: fromList [(TargetModule Cardano.Api.TxBody,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs"]),(TargetModule Cardano.Api.Tx,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Cardano.Api.SerialiseRaw,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseRaw.hs"]),(TargetModule Cardano.Api.Crypto.Ed25519Bip32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Crypto/Ed25519Bip32.hs"]),(TargetModule Cardano.Api.SerialiseJSON,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseJSON.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"]),(TargetModule Cardano.Api.Typed,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs"]),(TargetModule Cardano.API,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"]),(TargetModule Cardano.Api.Shelley.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley/Genesis.hs"]),(TargetModule Cardano.Api.KeysShelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"]),(TargetModule Cardano.Api.SerialiseBech32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseBech32.hs"]),(TargetModule Cardano.Api.Error,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Error.hs"]),(TargetModule Cardano.Api.StakePoolMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs"]),(TargetModule Cardano.Api.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Key.hs"]),(TargetModule Cardano.Api.Hash,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Hash.hs"]),(TargetModule Cardano.Api.Protocol,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol.hs"]),(TargetModule Cardano.Api.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Byron.hs"]),(TargetModule Cardano.Api.OperationalCertificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs"]),(TargetModule Cardano.Api.Protocol.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Types.hs"]),(TargetModule Cardano.Api.NetworkId,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/NetworkId.hs"]),(TargetModule Cardano.Api.KeysPraos,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysPraos.hs"]),(TargetModule Cardano.Api.Address,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs"]),(TargetModule Cardano.Api.TxSubmit.ErrorRender,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/ErrorRender.hs"]),(TargetModule Cardano.Api.TxSubmit,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit.hs"]),(TargetModule Cardano.Api.Protocol.Cardano,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Cardano.hs"]),(TargetModule Cardano.Api.Certificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Certificate.hs"]),(TargetModule Cardano.Api.Value,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs"]),(TargetModule Cardano.Api.TxSubmit.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/Types.hs"]),(TargetModule Cardano.Api.LocalChainSync,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/LocalChainSync.hs"]),(TargetModule Cardano.Api.Script,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"]),(TargetModule Cardano.Api.Fees,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs"]),(TargetModule Cardano.Api.ProtocolParameters,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/ProtocolParameters.hs"]),(TargetModule Cardano.Api.SerialiseCBOR,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseCBOR.hs"]),(TargetModule Cardano.Api.Protocol.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Shelley.hs"]),(TargetModule Cardano.Api.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley.hs"]),(TargetModule Cardano.Api.TxMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxMetadata.hs"]),(TargetModule Cardano.Api.Eras,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Eras.hs"]),(TargetModule Cardano.Api.HasTypeProxy,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/HasTypeProxy.hs"]),(TargetModule Cardano.Api.Protocol.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Byron.hs"]),(TargetModule Cardano.Api.Utils,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Utils.hs"]),(TargetModule Cardano.Api.SerialiseTextEnvelope,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseTextEnvelope.hs"]),(TargetModule Cardano.Api.KeysByron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysByron.hs"])]
2020-12-02 19:54:06.863135633 [ThreadId 97] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 19:54:06.863246725 [ThreadId 69] - Finishing build session(exception: AsyncCancelled)
2020-12-02 19:54:06.908090966 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"6/46"},"token":"3"},"method":"$/progress"}
2020-12-02 19:54:06.946994322 [ThreadId 259] - finish: CodeAction (took 0.08s)
2020-12-02 19:54:06.950669786 [ThreadId 258] - finish: C:GetParsedModule (took 0.08s)
2020-12-02 19:54:06.957898335 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":1}
2020-12-02 19:54:07.009364955 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"11/53"},"token":"3"},"method":"$/progress"}
2020-12-02 19:54:07.113204888 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"18/58"},"token":"3"},"method":"$/progress"}
2020-12-02 19:54:07.316274146 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"19/58"},"token":"3"},"method":"$/progress"}
2020-12-02 19:54:07.417300144 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"25/61"},"token":"3"},"method":"$/progress"}
2020-12-02 19:54:07.517813251 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"32/63"},"token":"3"},"method":"$/progress"}
2020-12-02 19:54:07.618873536 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"47/69"},"token":"3"},"method":"$/progress"}
2020-12-02 19:54:07.721769149 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"48/69"},"token":"3"},"method":"$/progress"}
2020-12-02 19:54:08.243726817 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"49/69"},"token":"3"},"method":"$/progress"}
2020-12-02 19:54:08.345642831 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"51/70"},"token":"3"},"method":"$/progress"}
2020-12-02 19:54:08.399147983 [ThreadId 1026] - finish: codeLens (took 1.53s)
2020-12-02 19:54:08.399572832 [ThreadId 1027] - finish: kick (took 1.53s)
2020-12-02 19:54:08.399685036 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":"3"},"method":"$/progress"}
2020-12-02 19:54:08.400361203 [ThreadId 1037] - finish:  (took 0.00s)
2020-12-02 19:54:08.402055742 [ThreadId 7] - <--2--{"result":[{"command":{"command":"79202:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"newText":"import Control.Applicative ( Alternative((<|>)) )"}]}}],"title":"import Control.Applicative ( Alternative((<|>)) )"},"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"command":{"command":"79202:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"newText":"import Control.Monad ( when )"}]}}],"title":"import Control.Monad ( when )"},"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"command":{"command":"79202:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"newText":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      ShelleyLedgerEra,\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      IsCardanoEra(..),\n      CardanoEra(..),\n      MaryEra,\n      AllegraEra,\n      ShelleyEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      ShelleyLedgerEra,\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      IsCardanoEra(..),\n      CardanoEra(..),\n      MaryEra,\n      AllegraEra,\n      ShelleyEra )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"command":{"command":"79202:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"}]}}],"title":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"79202:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"79202:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsGenesisUTxOKey,\n             AsGenesisDelegateExtendedKey, AsGenesisDelegateKey,\n             AsGenesisExtendedKey, AsGenesisKey, AsStakeExtendedKey, AsStakeKey,\n             AsPaymentExtendedKey, AsPaymentKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsGenesisUTxOKey,\n             AsGenesisDelegateExtendedKey, AsGenesisDelegateKey,\n             AsGenesisExtendedKey, AsGenesisKey, AsStakeExtendedKey, AsStakeKey,\n             AsPaymentExtendedKey, AsPaymentKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"command":{"command":"79202:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"command":{"command":"79202:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"newText":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"}]}}],"title":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"command":{"command":"79202:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"newText":"import Cardano.Api.SerialiseRaw\n    ( UsingRawBytesHex(..),\n      SerialiseAsRawBytes(..),\n      serialiseToRawBytesHex,\n      deserialiseFromRawBytesHex )"}]}}],"title":"import Cardano.Api.SerialiseRaw\n    ( UsingRawBytesHex(..),\n      SerialiseAsRawBytes(..),\n      serialiseToRawBytesHex,\n      deserialiseFromRawBytesHex )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"command":{"command":"79202:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"jsonrpc":"2.0","id":3}
2020-12-02 19:54:08.432125579 [ThreadId 1061] - finish: CodeAction:PackageExports (took 1.48s)
2020-12-02 19:54:08.432500534 [ThreadId 1062] - finish: importLens (took 0.00s)
2020-12-02 19:54:08.432891362 [ThreadId 1064] - finish: retrie (took 0.00s)
2020-12-02 19:54:08.457578938 [ThreadId 1073] - finish: tactic (took 0.02s)
2020-12-02 19:54:08.457902525 [ThreadId 1078] - finish: tactic (took 0.00s)
2020-12-02 19:54:08.457978905 [ThreadId 1079] - finish: tactic (took 0.00s)
2020-12-02 19:54:08.458133325 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":10}
2020-12-02 19:54:08.802771588 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs","diagnostics":[{"severity":2,"range":{"start":{"line":719,"character":10},"end":{"line":719,"character":59}},"source":"parser","message":"Haddock parse error on input ‘-- * tranaction metadata   (in Shelley and later)’"}]},"method":"textDocument/publishDiagnostics"}
2020-12-02 19:54:09.502714207 [ThreadId 1236] - finish: InitialLoad (took 2.63s)
2020-12-02 19:56:21.686481371 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":158,"character":34}}}
2020-12-02 19:56:21.686748363 [ThreadId 1239] - GhcIde.hover entered (ideLogger)
2020-12-02 19:56:21.686885295 [ThreadId 1239] - Hover request at position 159:35 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 19:56:21.6871323 [ThreadId 1240] - finish: C:GetHieAst (took 0.00s)
2020-12-02 19:56:21.716059999 [ThreadId 1246] - finish: C:GetDocMap (took 0.03s)
2020-12-02 19:56:21.716426209 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nPlutusScriptVersion\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:188:1*\n\n\n\n"},"range":{"start":{"line":158,"character":29},"end":{"line":158,"character":48}}},"jsonrpc":"2.0","id":11}
2020-12-02 19:56:22.075597907 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":12,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":160,"character":44}}}
2020-12-02 19:56:22.075822585 [ThreadId 1250] - DocumentHighlight request at position 161:45 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 19:56:22.076044705 [ThreadId 1251] - finish: C:GetHieAst (took 0.00s)
2020-12-02 19:56:22.076065907 [ThreadId 7] - <--2--{"result":[{"kind":3,"range":{"start":{"line":160,"character":0},"end":{"line":160,"character":46}}},{"kind":2,"range":{"start":{"line":160,"character":40},"end":{"line":160,"character":44}}}],"jsonrpc":"2.0","id":12}
2020-12-02 19:56:22.321353373 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":160,"character":44},"end":{"line":160,"character":44}},"context":{"diagnostics":[]}}}
2020-12-02 19:56:22.321654779 [ThreadId 1257] - finish: CodeAction (took 0.00s)
2020-12-02 19:56:22.321776477 [ThreadId 1259] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-02 19:56:22.321929003 [ThreadId 1261] - finish: importLens (took 0.00s)
2020-12-02 19:56:22.322096798 [ThreadId 1263] - finish: retrie (took 0.00s)
2020-12-02 19:56:22.322241638 [ThreadId 1265] - finish: tactic (took 0.00s)
2020-12-02 19:56:22.322285751 [ThreadId 1267] - finish: tactic (took 0.00s)
2020-12-02 19:56:22.322330455 [ThreadId 1269] - finish: tactic (took 0.00s)
2020-12-02 19:56:22.322400853 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":13}
2020-12-02 19:56:23.344358052 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":156,"character":40}}}
2020-12-02 19:56:23.344593549 [ThreadId 1274] - GhcIde.hover entered (ideLogger)
2020-12-02 19:56:23.34470585 [ThreadId 1274] - Hover request at position 157:41 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 19:56:23.345012035 [ThreadId 1276] - finish: C:GetHieAst (took 0.00s)
2020-12-02 19:56:23.345105616 [ThreadId 1278] - finish: C:GetDocMap (took 0.00s)
2020-12-02 19:56:23.345133504 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nSimpleScriptVersion\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:174:1*\n\n\n\n"},"range":{"start":{"line":156,"character":29},"end":{"line":156,"character":48}}},"jsonrpc":"2.0","id":14}
2020-12-02 19:56:26.82578513 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":158,"character":25}}}
2020-12-02 19:56:26.825963719 [ThreadId 1282] - GhcIde.hover entered (ideLogger)
2020-12-02 19:56:26.82608839 [ThreadId 1282] - Hover request at position 159:26 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 19:56:26.826284098 [ThreadId 1283] - finish: C:GetHieAst (took 0.00s)
2020-12-02 19:56:26.826325201 [ThreadId 1286] - finish: C:GetDocMap (took 0.00s)
2020-12-02 19:56:26.826443158 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nPlutusScriptLanguage\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:159:6*\n\n\n\n"},"range":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}}},"jsonrpc":"2.0","id":15}
2020-12-02 19:56:41.413961787 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":16,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":199,"character":66}}}
2020-12-02 19:56:41.414237968 [ThreadId 1290] - DocumentHighlight request at position 200:67 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 19:56:41.414505442 [ThreadId 1291] - finish: C:GetHieAst (took 0.00s)
2020-12-02 19:56:41.41459307 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":14,"character":4},"end":{"line":14,"character":21}}},{"kind":3,"range":{"start":{"line":198,"character":5},"end":{"line":198,"character":22}}},{"kind":2,"range":{"start":{"line":199,"character":49},"end":{"line":199,"character":66}}},{"kind":2,"range":{"start":{"line":201,"character":24},"end":{"line":201,"character":41}}},{"kind":2,"range":{"start":{"line":203,"character":12},"end":{"line":203,"character":29}}},{"kind":2,"range":{"start":{"line":209,"character":14},"end":{"line":209,"character":31}}},{"kind":2,"range":{"start":{"line":218,"character":17},"end":{"line":218,"character":34}}}],"jsonrpc":"2.0","id":16}
2020-12-02 19:56:42.370645435 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"context":{"diagnostics":[]}}}
2020-12-02 19:56:42.371152111 [ThreadId 1297] - finish: CodeAction (took 0.00s)
2020-12-02 19:56:42.371360028 [ThreadId 1299] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-02 19:56:42.371635306 [ThreadId 1301] - finish: importLens (took 0.00s)
2020-12-02 19:56:42.371877532 [ThreadId 1303] - finish: retrie (took 0.00s)
2020-12-02 19:56:42.372098958 [ThreadId 1305] - finish: tactic (took 0.00s)
2020-12-02 19:56:42.372218539 [ThreadId 1307] - finish: tactic (took 0.00s)
2020-12-02 19:56:42.372272847 [ThreadId 1309] - finish: tactic (took 0.00s)
2020-12-02 19:56:42.372432395 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":17}
2020-12-02 20:39:25.587671268 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":18,"method":"shutdown","params":null}
2020-12-02 20:39:25.587819565 [ThreadId 7] - <--2--{"result":null,"jsonrpc":"2.0","id":18}
2020-12-02 20:39:25.588086794 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"exit","params":null}
2020-12-02 21:04:10.335229563 [ThreadId 5] - 




haskell-lsp:Starting up server ...
2020-12-02 21:04:10.335659962 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":86567,"clientInfo":{"name":"vscode","version":"1.51.1"},"rootPath":"/home/jordan/Repos/Work/cardano-haskell/cardano-node","rootUri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"tokenTypes":["comment","keyword","number","regexp","operator","namespace","type","struct","class","interface","enum","typeParameter","function","member","macro","variable","parameter","property","label"],"tokenModifiers":["declaration","documentation","static","abstract","deprecated","async","readonly"]}},"window":{"workDoneProgress":true}},"trace":"off","workspaceFolders":[{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node","name":"cardano-node"}]}}
2020-12-02 21:04:10.336757785 [ThreadId 5] - haskell-lsp:initializeRequestHandler: setting current dir to project root:/home/jordan/Repos/Work/cardano-haskell/cardano-node
2020-12-02 21:04:10.348603015 [ThreadId 25] - Registering ide configuration: IdeConfiguration {workspaceFolders = fromList [NormalizedUri 709005359093181263 "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node"], clientSettings = hashed Nothing}
2020-12-02 21:04:10.348838553 [ThreadId 7] - <--2--{"result":{"capabilities":{"typeDefinitionProvider":true,"foldingRangeProvider":false,"textDocumentSync":{"openClose":true,"change":2,"save":{}},"workspace":{"workspaceFolders":{"supported":true,"changeNotifications":true}},"implementationProvider":true,"documentRangeFormattingProvider":true,"documentHighlightProvider":true,"executeCommandProvider":{"commands":["86674:eval:evalCommand","86674:ghcide:typesignature.add","86674:importLens:ImportLensCommand","86674:pragmas:addPragma","86674:retrie:retrieCommand","86674:tactic:tacticsAutoCommand","86674:tactic:tacticsIntrosCommand","86674:tactic:tacticsDestructCommand","86674:tactic:tacticsHomomorphismCommand","86674:tactic:tacticsDestructLambdaCaseCommand","86674:tactic:tacticsHomomorphismLambdaCaseCommand"]},"renameProvider":false,"colorProvider":false,"definitionProvider":true,"hoverProvider":true,"codeActionProvider":true,"completionProvider":{"triggerCharacters":["."],"resolveProvider":false},"codeLensProvider":{},"documentSymbolProvider":true,"documentFormattingProvider":true}},"jsonrpc":"2.0","id":0}
2020-12-02 21:04:10.354350931 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"initialized","params":{}}
2020-12-02 21:04:10.354510823 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"haskell":{"hlintOn":true,"maxNumberOfProblems":100,"diagnosticsOnChange":true,"liquidOn":false,"completionSnippetsOn":true,"formatOnImportOn":true,"formattingProvider":"stylish-haskell","trace":{"server":"messages"},"logFile":"hls.log","languageServerVariant":"haskell-language-server","serverExecutablePath":"~/.local/bin/haskell-language-server-8.10.2","updateBehavior":"keep-up-to-date","indentationRules":{"enabled":true},"hlint":{"executablePath":"/home/jordan/.cabal/bin/hlint","logLevel":"log"}}}}}
2020-12-02 21:04:10.354738996 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"registrations":[{"registerOptions":{"watchers":[{"kind":5,"globPattern":"**/*.hs"},{"kind":5,"globPattern":"**/*.hs-boot"},{"kind":5,"globPattern":"**/*.lhs"},{"kind":5,"globPattern":"**/*.lhs-boot"}]},"method":"workspace/didChangeWatchedFiles","id":"globalFileWatches"}]},"method":"client/registerCapability","id":0}
2020-12-02 21:04:10.354729933 [ThreadId 25] - Configuration changed: Object (fromList [("haskell",Object (fromList [("hlint",Object (fromList [("logLevel",String "log"),("executablePath",String "/home/jordan/.cabal/bin/hlint")])),("logFile",String "hls.log"),("updateBehavior",String "keep-up-to-date"),("hlintOn",Bool True),("formatOnImportOn",Bool True),("indentationRules",Object (fromList [("enabled",Bool True)])),("liquidOn",Bool False),("languageServerVariant",String "haskell-language-server"),("serverExecutablePath",String "~/.local/bin/haskell-language-server-8.10.2"),("diagnosticsOnChange",Bool True),("completionSnippetsOn",Bool True),("maxNumberOfProblems",Number 100.0),("formattingProvider",String "stylish-haskell"),("trace",Object (fromList [("server",String "messages")]))]))])
2020-12-02 21:04:10.355094257 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 21:04:10.355174137 [ThreadId 24] - Finishing build session(exception: AsyncCancelled)
2020-12-02 21:04:10.355850025 [ThreadId 65] - finish: kick (took 0.00s)
2020-12-02 21:04:10.355200069 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE DerivingVia #-}\n{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE TypeFamilies #-}\n\nmodule Cardano.Api.Script (\n    -- * Languages\n    SimpleScriptV1,\n    SimpleScriptV2,\n    ScriptLanguage(..),\n    SimpleScriptVersion(..),\n    PlutusScriptVersion,\n    AnyScriptLanguage(..),\n    IsScriptLanguage(..),\n    IsSimpleScriptLanguage(..),\n\n    -- * Scripts in a specific language\n    Script(..),\n\n    -- * Scripts in any language\n    ScriptInAnyLang(..),\n    toScriptInAnyLang,\n\n    -- * Scripts in an era\n    ScriptInEra(..),\n    toScriptInEra,\n    eraOfScriptInEra,\n\n    -- ** Languages supported in each era\n    ScriptLanguageInEra(..),\n    scriptLanguageSupportedInEra,\n    languageOfScriptLanguageInEra,\n    eraOfScriptLanguageInEra,\n\n    -- * The simple script language\n    SimpleScript(..),\n    TimeLocksSupported(..),\n    timeLocksSupported,\n    adjustSimpleScriptVersion,\n\n    -- * Script hashes\n    ScriptHash(..),\n    hashScript,\n\n    -- * Internal conversion functions\n    toShelleyScript,\n    toShelleyMultiSig,\n    fromShelleyMultiSig,\n    toAllegraTimelock,\n    fromAllegraTimelock,\n    toShelleyScriptHash,\n    fromShelleyScriptHash,\n\n    -- * Data family instances\n    AsType(..)\n  ) where\n\nimport           Prelude\n\nimport qualified Data.ByteString.Lazy as LBS\nimport           Data.Foldable (toList)\nimport           Data.Scientific (toBoundedInteger)\nimport           Data.String (IsString)\nimport           Data.Text (Text)\nimport qualified Data.Text as Text\nimport qualified Data.Text.Encoding as Text\nimport           Data.Type.Equality (TestEquality(..), (:~:)(Refl))\n\nimport           Data.Aeson (Value (..), object, (.:), (.=))\nimport qualified Data.Aeson as Aeson\nimport qualified Data.Aeson.Types as Aeson\nimport qualified Data.Sequence.Strict as Seq\nimport           Data.Vector (Vector)\nimport qualified Data.Vector as Vector\n\nimport           Control.Applicative\nimport           Control.Monad\n\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\nimport qualified Cardano.Crypto.Hash.Class as Crypto\n\nimport           Cardano.Slotting.Slot (SlotNo)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era  as Ledger\n\nimport qualified Cardano.Ledger.ShelleyMA.Timelocks as Timelock\nimport           Ouroboros.Consensus.Shelley.Eras\n                   (StandardAllegra, StandardCrypto, StandardShelley)\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Scripts as Shelley\n\nimport           Cardano.Api.Eras\nimport           Cardano.Api.Hash\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseJSON\nimport           Cardano.Api.SerialiseRaw\nimport           Cardano.Api.SerialiseTextEnvelope\n\n{- HLINT ignore \"Use section\" -}\n\n\n-- ----------------------------------------------------------------------------\n-- Types for script language and version\n--\n\n-- | The original simple script language which supports\n--\n-- * require a signature from a given key (by verification key hash)\n-- * n-way and combinator\n-- * n-way or combinator\n-- * m-of-n combinator\n--\n-- This version of the language was introduced in the 'ShelleyEra'.\n--\ndata SimpleScriptV1\n\n-- | The second version of the simple script language. It has all the features\n-- of 'SimpleScriptV1' plus new atomic predicates:\n--\n-- * require the time be before a given slot number\n-- * require the time be after a given slot number\n--\n-- This version of the language was introduced in the 'AllegraEra'.\n--\ndata SimpleScriptV2\n\n-- | Place holder type to show what the pattern is to extend to multiple\n-- languages, not just multiple versions of a single language.\n--\ndata PlutusScriptV1\n\ninstance HasTypeProxy SimpleScriptV1 where\n    data AsType SimpleScriptV1 = AsSimpleScriptV1\n    proxyToAsType _ = AsSimpleScriptV1\n\ninstance HasTypeProxy SimpleScriptV2 where\n    data AsType SimpleScriptV2 = AsSimpleScriptV2\n    proxyToAsType _ = AsSimpleScriptV2\n\ninstance HasTypeProxy PlutusScriptV1 where\n    data AsType PlutusScriptV1 = AsPlutusScriptV1\n    proxyToAsType _ = AsPlutusScriptV1\n\n\n-- ----------------------------------------------------------------------------\n-- Value level representation for script languages\n--\ndata ScriptLanguage lang where\n\n     SimpleScriptLanguage :: SimpleScriptVersion lang -> ScriptLanguage lang\n\n     PlutusScriptLanguage :: PlutusScriptVersion lang -> ScriptLanguage lang\n\nderiving instance (Eq   (ScriptLanguage lang))\nderiving instance (Show (ScriptLanguage lang))\n\ninstance TestEquality ScriptLanguage where\n    testEquality (SimpleScriptLanguage lang)\n                 (SimpleScriptLanguage lang') = testEquality lang lang'\n\n    testEquality (PlutusScriptLanguage lang)\n                 (PlutusScriptLanguage lang') = testEquality lang lang'\n\n    testEquality  _ _ = Nothing\n\n\ndata SimpleScriptVersion lang where\n\n     SimpleScriptV1 :: SimpleScriptVersion SimpleScriptV1\n     SimpleScriptV2 :: SimpleScriptVersion SimpleScriptV2\n\nderiving instance (Eq   (SimpleScriptVersion lang))\nderiving instance (Show (SimpleScriptVersion lang))\n\ninstance TestEquality SimpleScriptVersion where\n    testEquality SimpleScriptV1 SimpleScriptV1 = Just Refl\n    testEquality SimpleScriptV2 SimpleScriptV2 = Just Refl\n    testEquality _              _              = Nothing\n\n\ndata PlutusScriptVersion lang\n  -- For now, there are no such versions, but it'd be like this:\n  -- PlutusScriptV1 :: PlutusScriptVersion PlutusScriptV1\n\nderiving instance (Eq   (PlutusScriptVersion lang))\nderiving instance (Show (PlutusScriptVersion lang))\n\ninstance TestEquality PlutusScriptVersion where\n    testEquality lang = case lang of {}\n\n\ndata AnyScriptLanguage where\n     AnyScriptLanguage :: ScriptLanguage lang -> AnyScriptLanguage\n\nderiving instance (Show AnyScriptLanguage)\n\ninstance Eq AnyScriptLanguage where\n    AnyScriptLanguage lang == AnyScriptLanguage lang' =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> True -- since no constructors share types\n\ninstance Enum AnyScriptLanguage where\n    toEnum 0 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    toEnum 1 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n    toEnum _ = error \"AnyScriptLanguage.toEnum: bad argument\"\n\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)) = 0\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)) = 1\n    fromEnum (AnyScriptLanguage (PlutusScriptLanguage lang)) = case lang of {}\n\ninstance Bounded AnyScriptLanguage where\n    minBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    maxBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n\n\nclass HasTypeProxy lang => IsScriptLanguage lang where\n    scriptLanguage :: ScriptLanguage lang\n\ninstance IsScriptLanguage SimpleScriptV1 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV1\n\ninstance IsScriptLanguage SimpleScriptV2 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV2\n\n--instance IsScriptLanguage PlutusScriptV1 where\n--    scriptLanguage = PlutusScriptLanguage PlutusScriptV1\n\n\nclass IsScriptLanguage lang => IsSimpleScriptLanguage lang where\n    simpleScriptVersion :: SimpleScriptVersion lang\n\ninstance IsSimpleScriptLanguage SimpleScriptV1 where\n    simpleScriptVersion = SimpleScriptV1\n\ninstance IsSimpleScriptLanguage SimpleScriptV2 where\n    simpleScriptVersion = SimpleScriptV2\n\n\n\n-- ----------------------------------------------------------------------------\n-- Script type: covering all script languages\n--\n\n-- | A script in a particular language.\n--\n-- See also 'ScriptInAnyLang' for a script in any of the languages that is available within\n-- a particular era.\n--\n-- See also 'ScriptInEra' for a script in a language that is available within\n-- a particular era.\n--\ndata Script lang where\n\n     SimpleScript :: !(SimpleScriptVersion lang)\n                  -> !(SimpleScript lang)\n                  -> Script lang\n\n     -- Place holder type to show what the pattern is to extend to multiple\n     -- languages, not just multiple versions of a single language.\n     -- For now there are no values of PlutusScriptVersion so this branch\n     -- is inaccessible.\n     PlutusScript :: !(PlutusScriptVersion lang)\n                  -> ()\n                  -> Script lang\n\nderiving instance (Eq   (Script lang))\nderiving instance (Show (Script lang))\n\ninstance HasTypeProxy lang => HasTypeProxy (Script lang) where\n    data AsType (Script lang) = AsScript (AsType lang)\n    proxyToAsType _ = AsScript (proxyToAsType (Proxy :: Proxy lang))\n\ninstance IsScriptLanguage lang => SerialiseAsCBOR (Script lang) where\n    serialiseToCBOR (SimpleScript SimpleScriptV1 s) =\n      CBOR.serialize' (toShelleyMultiSig s)\n\n    serialiseToCBOR (SimpleScript SimpleScriptV2 s) =\n      CBOR.serialize' (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    deserialiseFromCBOR _ bs =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 ->\n              SimpleScript SimpleScriptV1\n            . fromShelleyMultiSig\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        SimpleScriptLanguage SimpleScriptV2 ->\n              SimpleScript SimpleScriptV2\n            . (fromAllegraTimelock TimeLocksInSimpleScriptV2\n                                :: Timelock.Timelock StandardAllegra\n                                -> SimpleScript SimpleScriptV2)\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        PlutusScriptLanguage v -> case v of {}\n\n\ninstance IsScriptLanguage lang => HasTextEnvelope (Script lang) where\n    textEnvelopeType _ =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 -> \"SimpleScriptV1\"\n        SimpleScriptLanguage SimpleScriptV2 -> \"SimpleScriptV2\"\n        PlutusScriptLanguage v -> case v of {}\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in any language\n--\n\n-- | Sometimes it is necessary to handle all languages without making static\n-- type distinctions between languages. For example, when reading external\n-- input, or before the era context is known.\n--\n-- Use 'toScriptInEra' to convert to a script in the context of an era.\n--\ndata ScriptInAnyLang where\n     ScriptInAnyLang :: ScriptLanguage lang\n                     -> Script lang\n                     -> ScriptInAnyLang\n\nderiving instance Show ScriptInAnyLang\n\n-- The GADT in the ScriptInAnyLang constructor requires a custom Eq instance\ninstance Eq ScriptInAnyLang where\n    (==) (ScriptInAnyLang lang  script)\n         (ScriptInAnyLang lang' script') =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\n-- | Convert a script in a specific statically-known language to a\n-- 'ScriptInAnyLang'.\n--\n-- No inverse to this is provided, just do case analysis on the 'ScriptLanguage'\n-- field within the 'ScriptInAnyLang' constructor.\n--\ntoScriptInAnyLang :: Script lang -> ScriptInAnyLang\ntoScriptInAnyLang s@(SimpleScript v _) =\n    ScriptInAnyLang (SimpleScriptLanguage v) s\n\ninstance HasTypeProxy ScriptInAnyLang where\n    data AsType ScriptInAnyLang = AsScriptInAnyLang\n    proxyToAsType _ = AsScriptInAnyLang\n\ninstance SerialiseAsCBOR ScriptInAnyLang where\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript _v s)) =\n      -- Note that the CBOR encoding here is compatible with the previous\n      -- serialisation format for the @Script@ type from @cardano-ledger-specs@.\n      --\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 0\n       <> toCBOR (toShelleyMultiSig s)\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript _v s)) =\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 1\n       <> toCBOR (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    serialiseToCBOR (ScriptInAnyLang (PlutusScriptLanguage v) _) = case v of {}\n\n    deserialiseFromCBOR AsScriptInAnyLang bs =\n        CBOR.decodeAnnotator \"Script\" decodeScript (LBS.fromStrict bs)\n      where\n        decodeScript :: CBOR.Decoder s (CBOR.Annotator ScriptInAnyLang)\n        decodeScript = do\n          CBOR.decodeListLenOf 2\n          tag <- CBOR.decodeWord8\n\n          case tag of\n            0 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Shelley.MultiSig StandardShelley -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                        . SimpleScript SimpleScriptV1\n                        . fromShelleyMultiSig\n\n            1 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Timelock.Timelock StandardAllegra -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                        . SimpleScript SimpleScriptV2\n                        . fromAllegraTimelock TimeLocksInSimpleScriptV2\n\n            _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag \"Script\" tag\n\ninstance HasTextEnvelope ScriptInAnyLang where\n    textEnvelopeType _ = \"Script\"\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in the context of a ledger era\n--\n\ndata ScriptInEra era where\n     ScriptInEra :: ScriptLanguageInEra lang era\n                 -> Script lang\n                 -> ScriptInEra era\n\nderiving instance Show (ScriptInEra era)\n\n-- The GADT in the ScriptInEra constructor requires a custom instance\ninstance Eq (ScriptInEra era) where\n    (==) (ScriptInEra langInEra  script)\n         (ScriptInEra langInEra' script') =\n      case testEquality (languageOfScriptLanguageInEra langInEra)\n                        (languageOfScriptLanguageInEra langInEra') of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\ndata ScriptLanguageInEra lang era where\n\n     SimpleScriptV1InShelley :: ScriptLanguageInEra SimpleScriptV1 ShelleyEra\n     SimpleScriptV1InAllegra :: ScriptLanguageInEra SimpleScriptV1 AllegraEra\n     SimpleScriptV1InMary    :: ScriptLanguageInEra SimpleScriptV1 MaryEra\n\n     SimpleScriptV2InAllegra :: ScriptLanguageInEra SimpleScriptV2 AllegraEra\n     SimpleScriptV2InMary    :: ScriptLanguageInEra SimpleScriptV2 MaryEra\n\nderiving instance Eq   (ScriptLanguageInEra lang era)\nderiving instance Show (ScriptLanguageInEra lang era)\n\ninstance HasTypeProxy era => HasTypeProxy (ScriptInEra era) where\n    data AsType (ScriptInEra era) = AsScriptInEra (AsType era)\n    proxyToAsType _ = AsScriptInEra (proxyToAsType (Proxy :: Proxy era))\n\ninstance IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era) where\n    serialiseToCBOR (ScriptInEra _lang s) =\n      serialiseToCBOR (toScriptInAnyLang s)\n\n    deserialiseFromCBOR (AsScriptInEra _) bs = do\n      s@(ScriptInAnyLang lang _) <- deserialiseFromCBOR AsScriptInAnyLang bs\n      case toScriptInEra cardanoEra s of\n        Just s' -> Right s'\n        Nothing ->\n          Left $ CBOR.DecoderErrorCustom\n                 (Text.pack (show (cardanoEra :: CardanoEra era)) <> \" Script\")\n                 (\"Script language \" <> Text.pack (show lang) <>\n                  \" not supported in this era\")\n\ninstance IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era) where\n    textEnvelopeType _ =\n      case shelleyBasedEra :: ShelleyBasedEra era of\n        ShelleyBasedEraShelley -> \"ScriptInEra ShelleyEra\"\n        ShelleyBasedEraAllegra -> \"ScriptInEra AllegraEra\"\n        ShelleyBasedEraMary    -> \"ScriptInEra MaryEra\"\n\n\n-- | Check if a given script language is supported in a given era, and if so\n-- return the evidence.\n--\nscriptLanguageSupportedInEra :: CardanoEra era\n                             -> ScriptLanguage lang\n                             -> Maybe (ScriptLanguageInEra lang era)\nscriptLanguageSupportedInEra era lang =\n    case (era, lang) of\n      (ShelleyEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InShelley\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InMary\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InMary\n\n      _ -> Nothing\n\nlanguageOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                              -> ScriptLanguage lang\nlanguageOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InAllegra -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InMary    -> SimpleScriptLanguage SimpleScriptV1\n\n      SimpleScriptV2InAllegra -> SimpleScriptLanguage SimpleScriptV2\n      SimpleScriptV2InMary    -> SimpleScriptLanguage SimpleScriptV2\n\neraOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                         -> ShelleyBasedEra era\neraOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> ShelleyBasedEraShelley\n\n      SimpleScriptV1InAllegra -> ShelleyBasedEraAllegra\n      SimpleScriptV2InAllegra -> ShelleyBasedEraAllegra\n\n      SimpleScriptV1InMary    -> ShelleyBasedEraMary\n      SimpleScriptV2InMary    -> ShelleyBasedEraMary\n\n\n-- | Given a target era and a script in some language, check if the language is\n-- supported in that era, and if so return a 'ScriptInEra'.\n--\ntoScriptInEra :: CardanoEra era -> ScriptInAnyLang -> Maybe (ScriptInEra era)\ntoScriptInEra era (ScriptInAnyLang lang s) = do\n    lang' <- scriptLanguageSupportedInEra era lang\n    return (ScriptInEra lang' s)\n\neraOfScriptInEra :: ScriptInEra era -> ShelleyBasedEra era\neraOfScriptInEra (ScriptInEra langInEra _) = eraOfScriptLanguageInEra langInEra\n\n\n-- ----------------------------------------------------------------------------\n-- Script Hash\n--\n\n-- | We have this type separate from the 'Hash' type to avoid the script\n-- hash type being parametrised by the era. The representation is era\n-- independent, and there are many places where we want to use a script\n-- hash where we don't want things to be era-parametrised.\n--\nnewtype ScriptHash = ScriptHash (Shelley.ScriptHash StandardShelley)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex ScriptHash\n\ninstance HasTypeProxy ScriptHash where\n    data AsType ScriptHash = AsScriptHash\n    proxyToAsType _ = AsScriptHash\n\ninstance SerialiseAsRawBytes ScriptHash where\n    serialiseToRawBytes (ScriptHash (Shelley.ScriptHash h)) =\n      Crypto.hashToBytes h\n\n    deserialiseFromRawBytes AsScriptHash bs =\n      ScriptHash . Shelley.ScriptHash <$> Crypto.hashFromBytes bs\n\n\nhashScript :: Script lang -> ScriptHash\nhashScript (SimpleScript SimpleScriptV1 s) =\n    -- For V1, we convert to the Shelley-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . Shelley.hashMultiSigScript\n  . toShelleyMultiSig\n  $ s\n\nhashScript (SimpleScript SimpleScriptV2 s) =\n    -- For V1, we convert to the Allegra-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . coerceShelleyScriptHash\n  . Timelock.hashTimelockScript\n  . (toAllegraTimelock :: SimpleScript SimpleScriptV2\n                       -> Timelock.Timelock StandardAllegra)\n  $ s\n\n\ntoShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                    => ScriptHash -> Shelley.ScriptHash ledgerera\ntoShelleyScriptHash (ScriptHash h) = coerceShelleyScriptHash h\n\nfromShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                      => Shelley.ScriptHash ledgerera -> ScriptHash\nfromShelleyScriptHash = ScriptHash . coerceShelleyScriptHash\n\ncoerceShelleyScriptHash :: Ledger.Crypto ledgereraA ~ Ledger.Crypto ledgereraB\n                        => Shelley.ScriptHash ledgereraA\n                        -> Shelley.ScriptHash ledgereraB\ncoerceShelleyScriptHash (Shelley.ScriptHash h) =\n    Shelley.ScriptHash (Crypto.castHash h)\n\n\n-- ----------------------------------------------------------------------------\n-- The simple native script language\n--\n\ndata SimpleScript lang where\n\n     RequireSignature  :: !(Hash PaymentKey)\n                       -> SimpleScript lang\n\n     RequireTimeBefore :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireTimeAfter  :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireAllOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireAnyOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireMOf        :: Int -> [SimpleScript lang] -> SimpleScript lang\n\nderiving instance Eq   (SimpleScript lang)\nderiving instance Show (SimpleScript lang)\n\n\n-- | Time lock feature in the 'SimpleScript' language.\n--\n-- The constructors of this type serve as evidence that the timelocks feature\n-- is supported in particular versions of the language.\n--\ndata TimeLocksSupported lang where\n     TimeLocksInSimpleScriptV2 :: TimeLocksSupported SimpleScriptV2\n\nderiving instance Eq   (TimeLocksSupported lang)\nderiving instance Show (TimeLocksSupported lang)\n\ntimeLocksSupported :: SimpleScriptVersion lang\n                   -> Maybe (TimeLocksSupported lang)\ntimeLocksSupported SimpleScriptV1 = Nothing\ntimeLocksSupported SimpleScriptV2 = Just TimeLocksInSimpleScriptV2\n\n\n-- | Try converting the 'SimpleScript' into a different version of the language.\n--\n-- This will work when the script only uses the features of the target language\n-- version. For example converting from 'SimpleScriptV2' to 'SimpleScriptV1'\n-- will work if the script happens not to use time locks feature. On the other\n-- hand converting 'SimpleScriptV1' to 'SimpleScriptV2' will always work because\n-- it is backwards compatible.\n--\nadjustSimpleScriptVersion :: SimpleScriptVersion lang'\n                          -> SimpleScript lang\n                          -> Maybe (SimpleScript lang')\nadjustSimpleScriptVersion target = go\n  where\n    go (RequireSignature sig) = pure (RequireSignature sig)\n\n    go (RequireTimeBefore _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeBefore supported slot)\n\n    go (RequireTimeAfter _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeAfter supported slot)\n\n    go (RequireAllOf ss) = RequireAllOf <$> traverse go ss\n    go (RequireAnyOf ss) = RequireAnyOf <$> traverse go ss\n    go (RequireMOf m ss) = RequireMOf m <$> traverse go ss\n\n\n-- ----------------------------------------------------------------------------\n-- Conversion functions\n--\n\ntoShelleyScript :: ScriptInEra era -> Ledger.Script (ShelleyLedgerEra era)\ntoShelleyScript (ScriptInEra langInEra (SimpleScript _ script)) =\n    case langInEra of\n      SimpleScriptV1InShelley -> toShelleyMultiSig script\n\n      SimpleScriptV1InAllegra -> toAllegraTimelock script\n      SimpleScriptV1InMary    -> toAllegraTimelock script\n      SimpleScriptV2InAllegra -> toAllegraTimelock script\n      SimpleScriptV2InMary    -> toAllegraTimelock script\n\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\ntoShelleyMultiSig :: SimpleScript SimpleScriptV1\n                  -> Shelley.MultiSig StandardShelley\ntoShelleyMultiSig = go\n  where\n    go :: SimpleScript SimpleScriptV1 -> Shelley.MultiSig StandardShelley\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Shelley.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Shelley.RequireAllOf (map go s)\n    go (RequireAnyOf s) = Shelley.RequireAnyOf (map go s)\n    go (RequireMOf m s) = Shelley.RequireMOf m (map go s)\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\nfromShelleyMultiSig :: Shelley.MultiSig StandardShelley -> SimpleScript lang\nfromShelleyMultiSig = go\n  where\n    go (Shelley.RequireSignature kh)\n                                = RequireSignature\n                                    (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Shelley.RequireAllOf s) = RequireAllOf (map go s)\n    go (Shelley.RequireAnyOf s) = RequireAnyOf (map go s)\n    go (Shelley.RequireMOf m s) = RequireMOf m (map go s)\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\ntoAllegraTimelock :: forall lang ledgerera.\n                     (Ledger.Era ledgerera,\n                      Ledger.Crypto ledgerera ~ StandardCrypto)\n                  => SimpleScript lang -> Timelock.Timelock ledgerera\ntoAllegraTimelock = go\n  where\n    go :: SimpleScript lang -> Timelock.Timelock ledgerera\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Timelock.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Timelock.RequireAllOf (Seq.fromList (map go s))\n    go (RequireAnyOf s) = Timelock.RequireAnyOf (Seq.fromList (map go s))\n    go (RequireMOf m s) = Timelock.RequireMOf m (Seq.fromList (map go s))\n    go (RequireTimeBefore _ t) = Timelock.RequireTimeExpire t\n    go (RequireTimeAfter  _ t) = Timelock.RequireTimeStart  t\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\nfromAllegraTimelock ::    (Ledger.Era ledgerera,\n                           Ledger.Crypto ledgerera ~ StandardCrypto)\n                       => TimeLocksSupported lang\n                       -> Timelock.Timelock ledgerera\n                       -> SimpleScript lang\nfromAllegraTimelock timelocks = go\n  where\n    go (Timelock.RequireSignature kh) = RequireSignature\n                                          (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Timelock.RequireTimeExpire t) = RequireTimeBefore timelocks t\n    go (Timelock.RequireTimeStart  t) = RequireTimeAfter  timelocks t\n    go (Timelock.RequireAllOf      s) = RequireAllOf (map go (toList s))\n    go (Timelock.RequireAnyOf      s) = RequireAnyOf (map go (toList s))\n    go (Timelock.RequireMOf      i s) = RequireMOf i (map go (toList s))\n\n\n-- ----------------------------------------------------------------------------\n-- JSON serialisation\n--\n\ninstance ToJSON (Script lang) where\n  toJSON (SimpleScript _ script) = toJSON script\n\ninstance ToJSON ScriptInAnyLang where\n  toJSON (ScriptInAnyLang _ script) = toJSON script\n\ninstance ToJSON (ScriptInEra era) where\n  toJSON (ScriptInEra _ script) = toJSON script\n\ninstance ToJSON (SimpleScript lang) where\n  toJSON (RequireSignature pKeyHash) =\n    object [ \"type\"    .= String \"sig\"\n           , \"keyHash\" .= Text.decodeUtf8 (serialiseToRawBytesHex pKeyHash)\n           ]\n  toJSON (RequireTimeBefore _ slot) =\n    object [ \"type\" .= String \"before\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireTimeAfter _ slot) =\n    object [ \"type\" .= String \"after\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireAnyOf reqScripts) =\n    object [ \"type\" .= String \"any\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireAllOf reqScripts) =\n    object [ \"type\" .= String \"all\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireMOf reqNum reqScripts) =\n    object [ \"type\" .= String \"atLeast\"\n           , \"required\" .= reqNum\n           , \"scripts\" .= map toJSON reqScripts\n           ]\n\n\ninstance IsScriptLanguage lang => FromJSON (Script lang) where\n  parseJSON v =\n    case scriptLanguage :: ScriptLanguage lang of\n      SimpleScriptLanguage lang -> SimpleScript lang <$>\n                                     parseSimpleScript lang v\n      PlutusScriptLanguage lang -> case lang of {}\n\n\ninstance FromJSON ScriptInAnyLang where\n  parseJSON v =\n      -- The SimpleScript language has the property that it is backwards\n      -- compatible, so we can parse as the latest version and then downgrade\n      -- to the minimum version that has all the features actually used.\n      toMinimumSimpleScriptVersion <$> parseSimpleScript SimpleScriptV2 v\n    where\n      --TODO: this will need to be adjusted when more versions are added\n      -- with appropriate helper functions it can probably be done in an\n      -- era-generic style\n      toMinimumSimpleScriptVersion s =\n        case adjustSimpleScriptVersion SimpleScriptV1 s of\n          Nothing -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript SimpleScriptV2 s)\n          Just s' -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsCardanoEra era => FromJSON (ScriptInEra era) where\n  parseJSON v =\n    case cardanoEra :: CardanoEra era of\n      ByronEra   -> fail \"Scripts are not supported in the Byron era\"\n\n      ShelleyEra -> ScriptInEra SimpleScriptV1InShelley\n                  . SimpleScript SimpleScriptV1\n                <$> parseSimpleScript SimpleScriptV1 v\n\n      --TODO: this will need to be adjusted when more versions are added.\n      -- It can probably be done in an era-generic style, with the use of\n      -- appropriate helper functions.\n      AllegraEra -> toMinimumSimpleScriptVersion\n                <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InAllegra\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InAllegra\n                                     (SimpleScript SimpleScriptV1 s')\n\n      MaryEra -> toMinimumSimpleScriptVersion\n             <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InMary\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InMary\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang) where\n  parseJSON = parseSimpleScript simpleScriptVersion\n\n\nparseSimpleScript :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseSimpleScript lang v = parseScriptSig          v\n                       <|> parseScriptBefore  lang v\n                       <|> parseScriptAfter   lang v\n                       <|> parseScriptAny     lang v\n                       <|> parseScriptAll     lang v\n                       <|> parseScriptAtLeast lang v\n\nparseScriptAny :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAny lang =\n    Aeson.withObject \"any\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"any\" -> do vs <- obj .: \"scripts\"\n                    RequireAnyOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"any\\\" script value not found\"\n\nparseScriptAll :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAll lang =\n    Aeson.withObject \"all\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"all\" -> do vs <- obj .: \"scripts\"\n                    RequireAllOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"all\\\" script value not found\"\n\nparseScriptAtLeast :: SimpleScriptVersion lang\n                   -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAtLeast lang =\n    Aeson.withObject \"atLeast\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"atLeast\" -> do\n          r  <- obj .: \"required\"\n          vs <- obj .: \"scripts\"\n          case r of\n            Number sci ->\n              case toBoundedInteger sci of\n                Just reqInt ->\n                  do scripts <- gatherSimpleScriptTerms lang vs\n                     let numScripts = length scripts\n                     when\n                       (reqInt > numScripts)\n                       (fail $ \"Required number of script signatures exceeds the number of scripts.\"\n                             <> \" Required number: \" <> show reqInt\n                             <> \" Number of scripts: \" <> show numScripts)\n                     return $ RequireMOf reqInt scripts\n                Nothing -> fail $ \"Error in \\\"required\\\" key: \"\n                                <> show sci <> \" is not a valid Int\"\n            _ -> fail \"\\\"required\\\" value should be an integer\"\n        _        -> fail \"\\\"atLeast\\\" script value not found\"\n\ngatherSimpleScriptTerms :: SimpleScriptVersion lang\n                        -> Vector Value -> Aeson.Parser [SimpleScript lang]\ngatherSimpleScriptTerms lang = mapM (parseSimpleScript lang) . Vector.toList\n\nparseScriptSig :: Value -> Aeson.Parser (SimpleScript lang)\nparseScriptSig =\n    Aeson.withObject \"sig\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"sig\" -> do k <- obj .: \"keyHash\"\n                    RequireSignature <$> parsePaymentKeyHash k\n        _     -> fail \"\\\"sig\\\" script value not found\"\n\nparseScriptBefore :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptBefore lang =\n    Aeson.withObject \"before\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"before\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeBefore supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"before\\\" not supported in \" ++ show lang)\n        _ -> fail \"\\\"before\\\" script value not found\"\n\nparseScriptAfter :: SimpleScriptVersion lang\n                 -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAfter lang =\n    Aeson.withObject \"after\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"after\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeAfter supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"after\\\" not supported in \" ++ show lang)\n        _       -> fail \"\\\"after\\\" script value not found\"\n\nparsePaymentKeyHash :: Text -> Aeson.Parser (Hash PaymentKey)\nparsePaymentKeyHash txt =\n    case deserialiseFromRawBytesHex (AsHash AsPaymentKey) (Text.encodeUtf8 txt) of\n      Just payKeyHash -> return payKeyHash\n      Nothing -> fail $ \"Error deserialising payment key hash: \" <> Text.unpack txt\n\n"}}}
2020-12-02 21:04:10.360400281 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-02 21:04:10.3606919 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 21:04:10.36074929 [ThreadId 44] - Finishing build session(exception: AsyncCancelled)
2020-12-02 21:04:10.360744473 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 21:04:10.361598229 [ThreadId 97] - Consulting the cradle for "cardano-api/src/Cardano/Api/Script.hs"
2020-12-02 21:04:10.3621494 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":0},"method":"window/workDoneProgress/create","id":1}
2020-12-02 21:04:10.362228466 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","cancellable":false,"title":"Setting up cardano-node (for cardano-api/src/Cardano/Api/Script.hs)"},"token":0},"method":"$/progress"}
2020-12-02 21:04:10.377964723 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":0,"result":null}
2020-12-02 21:04:10.378099465 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":0,\"result\":null}"
2020-12-02 21:04:10.397197395 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":1,"result":null}
2020-12-02 21:04:10.397294279 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":null}"
2020-12-02 21:04:10.404693938 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-02 21:04:10.405233648 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"context":{"diagnostics":[]}}}
2020-12-02 21:04:10.444331063 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":1}}
2020-12-02 21:04:10.444449955 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-02 21:04:10.44448677 [ThreadId 107] - C:GetParsedModule was cancelled
2020-12-02 21:04:10.44455497 [ThreadId 105] - Cancelled request IdInt 1
2020-12-02 21:04:10.444651649 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":1}
2020-12-02 21:04:10.461453912 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":"4"},"method":"window/workDoneProgress/create","id":2}
2020-12-02 21:04:10.461553979 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","title":"Processing"},"token":"4"},"method":"$/progress"}
2020-12-02 21:04:10.481500772 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":2,"result":null}
2020-12-02 21:04:10.48159895 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":2,\"result\":null}"
2020-12-02 21:04:10.561616786 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"1/2"},"token":"4"},"method":"$/progress"}
2020-12-02 21:04:10.67882147 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":4,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-02 21:04:10.67898276 [ThreadId 123] - Plugin.makeCodeLens (ideLogger)
2020-12-02 21:04:10.866716434 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":191,"character":51},"end":{"line":191,"character":51}},"context":{"diagnostics":[]}}}
2020-12-02 21:04:10.866869315 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}
2020-12-02 21:04:10.86695176 [ThreadId 112] - CodeAction was cancelled
2020-12-02 21:04:10.867003858 [ThreadId 110] - Cancelled request IdInt 2
2020-12-02 21:04:10.867087901 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":2}
2020-12-02 21:04:12.084245774 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":5}}
2020-12-02 21:04:12.084400864 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":191,"character":51},"end":{"line":191,"character":51}},"context":{"diagnostics":[]}}}
2020-12-02 21:04:12.084470377 [ThreadId 128] - CodeAction was cancelled
2020-12-02 21:04:12.084549889 [ThreadId 126] - Cancelled request IdInt 5
2020-12-02 21:04:12.084793443 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":5}
2020-12-02 21:05:10.99600138 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-02 21:05:10.996147755 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}
2020-12-02 21:05:10.996323848 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}
2020-12-02 21:05:10.99642928 [ThreadId 123] - codeLens was cancelled
2020-12-02 21:05:10.996425769 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":6}}
2020-12-02 21:05:10.996499211 [ThreadId 121] - Cancelled request IdInt 4
2020-12-02 21:05:10.996345969 [ThreadId 25] - Set files of interest to: []
2020-12-02 21:05:10.996579173 [ThreadId 135] - CodeAction was cancelled
2020-12-02 21:05:10.996628464 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":4}
2020-12-02 21:05:10.996588375 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 21:05:10.996642924 [ThreadId 133] - Cancelled request IdInt 6
2020-12-02 21:05:10.996803838 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":6}
2020-12-02 21:05:10.996980789 [ThreadId 147] - Data.HashMap.Internal.(!): key not found
CallStack (from HasCallStack):
  error, called at ./Data/HashMap/Internal.hs:756:16 in unordered-containers-0.2.13.0-f519383be173bea40a77beaaf5249f6ae8af1a29545fb7d3d57c773b8188dc00:Data.HashMap.Internal
  !, called at src/Development/IDE/Import/DependencyInformation.hs:107:40 in ghcide-0.4.0-inplace:Development.IDE.Import.DependencyInformation
2020-12-02 21:05:10.997072424 [ThreadId 147] - finish: ParentTC (took 0.00s)
2020-12-02 21:05:11.01745182 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs","languageId":"haskell","version":1,"text":"-- | This module provides a library interface for interacting with Cardano as\n-- a user of the system.\n--\n-- It is intended to be the complete API covering everything but without exposing\n-- constructors that reveal any lower level types.\n--\n-- In the interest of simplicity it glosses over some details of the system.\n-- Most simple tools should be able to work just using this interface,\n-- however you can go deeper and expose the types from the underlying libraries\n-- using \"Cardano.Api.Byron\" or \"Cardano.Api.Shelley\".\n--\n\nmodule Cardano.API (\n    -- * Eras\n    ByronEra,\n    ShelleyEra,\n    AllegraEra,\n    MaryEra,\n    CardanoEra(..),\n    IsCardanoEra(..),\n    AnyCardanoEra(..),\n    anyCardanoEra,\n    InAnyCardanoEra(..),\n\n    -- ** Shelley-based eras\n    ShelleyBasedEra(..),\n    IsShelleyBasedEra(..),\n    InAnyShelleyBasedEra(..),\n    CardanoEraStyle(..),\n    cardanoEraStyle,\n\n    -- ** Deprecated\n    Byron,\n    Shelley,\n    Allegra,\n    Mary,\n    -- * Type tags\n    HasTypeProxy(..),\n    AsType(..),\n    -- * Cryptographic key interface\n    -- $keys\n    Key,\n    VerificationKey,\n    SigningKey,\n    getVerificationKey,\n    verificationKeyHash,\n    castVerificationKey,\n    castSigningKey,\n\n    -- ** Generating keys\n    generateSigningKey,\n    deterministicSigningKey,\n    deterministicSigningKeySeedSize,\n\n    -- ** Hashes\n    -- | In Cardano most keys are identified by their hash, and hashes are\n    -- used in many other places.\n    Hash,\n    castHash,\n\n    -- * Payment addresses\n    -- | Constructing and inspecting normal payment addresses\n    Address,\n    ByronAddr,\n    ShelleyAddr,\n    NetworkId(..),\n    -- ** Byron addresses\n    makeByronAddress,\n    ByronKey,\n\n    -- ** Shelley addresses\n    makeShelleyAddress,\n    PaymentCredential(..),\n    StakeAddressReference(..),\n    PaymentKey,\n    PaymentExtendedKey,\n\n    -- ** Addresses in any era\n    AddressAny(..),\n\n    -- ** Addresses in specific eras\n    AddressInEra(..),\n    AddressTypeInEra(..),\n    byronAddressInEra,\n    shelleyAddressInEra,\n    anyAddressInShelleyBasedEra,\n    anyAddressInEra,\n    toAddressAny,\n    makeByronAddressInEra,\n    makeShelleyAddressInEra,\n\n    -- * Stake addresses\n    -- | Constructing and inspecting stake addresses\n    StakeAddress,\n    StakeCredential,\n    makeStakeAddress,\n    StakeKey,\n    StakeExtendedKey,\n\n    -- * Currency values\n    -- ** Ada \\/ Lovelace\n    Lovelace,\n\n    -- ** Multi-asset values\n    Quantity,\n    PolicyId,\n    AssetName,\n    AssetId(..),\n    Value,\n    selectAsset,\n    valueFromList,\n    valueToList,\n    filterValue,\n    negateValue,\n\n    -- ** Ada \\/ Lovelace within multi-asset values\n    quantityToLovelace,\n    lovelaceToQuantity,\n    selectLovelace,\n    lovelaceToValue,\n    valueToLovelace,\n\n    -- * Building transactions\n    -- | Constructing and inspecting transactions\n\n    -- ** Transaction bodies\n    TxBody,\n    makeTransactionBody,\n    TxBodyContent(..),\n    TxBodyError(..),\n\n    -- ** Transaction Ids\n    TxId,\n    getTxId,\n\n    -- ** Transaction inputs\n    TxIn(TxIn),\n    TxIx(TxIx),\n\n    -- ** Transaction outputs\n    TxOut(TxOut),\n    TxOutValue(..),\n\n    -- ** Other transaction body types\n    TxFee(..),\n    TxValidityLowerBound(..),\n    TxValidityUpperBound(..),\n    SlotNo(..),\n    TxMetadataInEra(..),\n    TxAuxScripts(..),\n    TxWithdrawals(..),\n    TxCertificates(..),\n    TxUpdateProposal(..),\n    TxMintValue(..),\n\n    -- ** Era-dependent transaction body features\n    MultiAssetSupportedInEra(..),\n    OnlyAdaSupportedInEra(..),\n    TxFeesExplicitInEra(..),\n    TxFeesImplicitInEra(..),\n    ValidityUpperBoundSupportedInEra(..),\n    ValidityNoUpperBoundSupportedInEra(..),\n    ValidityLowerBoundSupportedInEra(..),\n    TxMetadataSupportedInEra(..),\n    AuxScriptsSupportedInEra(..),\n    WithdrawalsSupportedInEra(..),\n    CertificatesSupportedInEra(..),\n    UpdateProposalSupportedInEra(..),\n\n    -- ** Feature availability functions\n    multiAssetSupportedInEra,\n    txFeesExplicitInEra,\n    validityUpperBoundSupportedInEra,\n    validityNoUpperBoundSupportedInEra,\n    validityLowerBoundSupportedInEra,\n    txMetadataSupportedInEra,\n    auxScriptsSupportedInEra,\n    withdrawalsSupportedInEra,\n    certificatesSupportedInEra,\n    updateProposalSupportedInEra,\n\n    -- * Signing transactions\n    -- | Creating transaction witnesses one by one, or all in one go.\n    Tx,\n    getTxBody,\n    getTxWitnesses,\n\n    -- ** Signing in one go\n    signByronTransaction,\n    signShelleyTransaction,\n\n    -- ** Incremental signing and separate witnesses\n    makeSignedTransaction,\n    Witness,\n    makeByronKeyWitness,\n    ShelleyWitnessSigningKey,\n    makeShelleyKeyWitness,\n    makeShelleyBootstrapWitness,\n    makeScriptWitness,\n\n    -- * Fee calculation\n    transactionFee,\n    estimateTransactionFee,\n\n    -- * Transaction metadata\n    -- | Embedding additional structured data within transactions.\n    TxMetadata(..),\n\n    -- ** Constructing metadata\n    TxMetadataValue(..),\n    makeTransactionMetadata,\n\n    -- ** Validating metadata\n    validateTxMetadata,\n    TxMetadataRangeError (..),\n\n    -- ** Converstion to\\/from JSON\n    TxMetadataJsonSchema (..),\n    metadataFromJson,\n    metadataToJson,\n    metadataValueToJsonNoSchema,\n    TxMetadataJsonError (..),\n    TxMetadataJsonSchemaError (..),\n\n    -- * Certificates\n    Certificate,\n\n    -- ** Registering stake address and delegating\n    -- | Certificates that are embedded in transactions for registering and\n    -- unregistering stake address, and for setting the stake pool delegation\n    -- choice for a stake address.\n    makeStakeAddressRegistrationCertificate,\n    makeStakeAddressDeregistrationCertificate,\n    makeStakeAddressDelegationCertificate,\n\n    -- ** Registering stake pools\n    -- | Certificates that are embedded in transactions for registering and\n    -- retiring stake pools. This includes updating the stake pool parameters.\n    makeStakePoolRegistrationCertificate,\n    makeStakePoolRetirementCertificate,\n    StakePoolParameters,\n    StakePoolRelay,\n    StakePoolMetadataReference,\n\n    -- * Stake pool off-chain metadata\n    StakePoolMetadata,\n    validateAndHashStakePoolMetadata,\n    StakePoolMetadataValidationError,\n\n    -- * Scripts\n    -- | Both 'PaymentCredential's and 'StakeCredential's can use scripts.\n\n    -- ** Script languages\n    SimpleScriptV1,\n    SimpleScriptV2,\n    ScriptLanguage(..),\n    SimpleScriptVersion(..),\n    PlutusScriptVersion,\n    AnyScriptLanguage(..),\n    IsScriptLanguage(..),\n    IsSimpleScriptLanguage(..),\n\n    -- ** Scripts in a specific language\n    Script(..),\n\n    -- ** Scripts in any language\n    ScriptInAnyLang(..),\n    toScriptInAnyLang,\n\n    -- ** Scripts in a specific era\n    ScriptInEra(..),\n    toScriptInEra,\n    eraOfScriptInEra,\n\n    -- *** Languages supported in each era\n    ScriptLanguageInEra(..),\n    scriptLanguageSupportedInEra,\n    languageOfScriptLanguageInEra,\n    eraOfScriptLanguageInEra,\n\n    -- ** Simple scripts\n    -- | Making multi-signature and time-lock scripts.\n    SimpleScript(..),\n    TimeLocksSupported(..),\n    timeLocksSupported,\n    adjustSimpleScriptVersion,\n\n    -- ** Script addresses\n    -- | Making addresses from scripts.\n    ScriptHash,\n    hashScript,\n\n    -- * Serialisation\n    -- | Support for serialising data in JSON, CBOR and text files.\n\n    -- ** CBOR\n    SerialiseAsCBOR,\n    ToCBOR,\n    FromCBOR,\n    serialiseToCBOR,\n    deserialiseFromCBOR,\n\n    -- ** JSON\n    ToJSON,\n    FromJSON,\n    serialiseToJSON,\n    deserialiseFromJSON,\n    JsonDecodeError(..),\n    readFileJSON,\n    writeFileJSON,\n\n    -- ** Bech32\n    SerialiseAsBech32,\n    serialiseToBech32,\n    deserialiseFromBech32,\n    deserialiseAnyOfFromBech32,\n    Bech32DecodeError,\n\n    -- ** Addresses\n    -- | Address serialisation is (sadly) special\n    SerialiseAddress,\n    serialiseAddress,\n    deserialiseAddress,\n\n    -- ** Raw binary\n    -- | Some types have a natural raw binary format.\n    SerialiseAsRawBytes,\n    serialiseToRawBytes,\n    deserialiseFromRawBytes,\n    serialiseToRawBytesHex,\n    deserialiseFromRawBytesHex,\n\n    -- ** Text envelope\n    -- | Support for a envelope file format with text headers and a hex-encoded\n    -- binary payload.\n    HasTextEnvelope,\n    TextEnvelope,\n    TextEnvelopeType,\n    TextEnvelopeDescr,\n    TextEnvelopeError,\n    textEnvelopeRawCBOR,\n    serialiseToTextEnvelope,\n    deserialiseFromTextEnvelope,\n    readFileTextEnvelope,\n    writeFileTextEnvelope,\n    writeFileTextEnvelopeWithOwnerPermissions,\n    readTextEnvelopeFromFile,\n    readTextEnvelopeOfTypeFromFile,\n    -- *** Reading one of several key types\n    FromSomeType,\n    deserialiseFromTextEnvelopeAnyOf,\n    readFileTextEnvelopeAnyOf,\n\n    -- * Errors\n    Error(..),\n    throwErrorAsException,\n    FileError,\n\n    -- * Node interaction\n    -- | Operations that involve talking to a local Cardano node.\n\n    -- ** Queries\n    -- ** Submitting transactions\n\n    -- ** Low level protocol interaction with a Cardano node\n    connectToLocalNode,\n    LocalNodeConnectInfo,\n    localNodeSocketPath,\n    localNodeNetworkId,\n    localNodeConsensusMode,\n    NodeConsensusMode,\n    LocalNodeClientProtocols,\n    localChainSyncClient,\n    localTxSubmissionClient,\n    localStateQueryClient,\n    nullLocalNodeClientProtocols,\n--  connectToRemoteNode,\n\n    -- *** Chain sync protocol\n    ChainSyncClient,\n    runChainSyncClient,\n\n    -- *** Local tx submission\n    LocalTxSubmissionClient,\n    runLocalTxSubmissionClient,\n    submitTxToNodeLocal,\n\n    -- *** Local state query\n    LocalStateQueryClient,\n    runLocalStateQueryClient,\n    queryNodeLocalState,\n\n    -- * Node operation\n    -- | Support for the steps needed to operate a node\n\n    -- ** Operational certificates\n    OperationalCertificate,\n    OperationalCertificateIssueCounter,\n    OperationalCertIssueError,\n    issueOperationalCertificate,\n\n    -- * Genesis file\n    -- | Types and functions needed to inspect or create a genesis file.\n    GenesisKey,\n    GenesisExtendedKey,\n    GenesisDelegateKey,\n    GenesisDelegateExtendedKey,\n    GenesisUTxOKey,\n    genesisUTxOPseudoTxIn,\n\n    -- * Special transactions\n    -- | There are various additional things that can be embedded in a\n    -- transaction for special operations.\n    makeMIRCertificate,\n    makeGenesisKeyDelegationCertificate,\n\n    -- * Protocol parameter updates\n    UpdateProposal(..),\n    ProtocolParametersUpdate(..),\n    makeShelleyUpdateProposal,\n    PraosNonce,\n    makePraosNonce,\n\n    NetworkMagic,\n  ) where\n\nimport           Cardano.Api.Typed\n"}}}
2020-12-02 21:05:11.019322653 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs",Modified)]
2020-12-02 21:05:11.019562981 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-02 21:05:11.019688332 [ThreadId 69] - Finishing build session(exception: AsyncCancelled)
2020-12-02 21:05:11.019747812 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 21:05:11.019825288 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs
2020-12-02 21:05:11.02107604 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":8,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"}}}
2020-12-02 21:05:11.101417976 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"1/3"},"token":"4"},"method":"$/progress"}
2020-12-02 21:05:11.259177891 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":9,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"}}}
2020-12-02 21:05:11.259342286 [ThreadId 195] - Plugin.makeCodeLens (ideLogger)
2020-12-02 21:05:11.26533352 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"},"range":{"start":{"line":407,"character":4},"end":{"line":407,"character":13}},"context":{"diagnostics":[]}}}
2020-12-02 21:05:11.265537 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":7}}
2020-12-02 21:05:11.265686024 [ThreadId 163] - CodeAction was cancelled
2020-12-02 21:05:11.265738706 [ThreadId 161] - Cancelled request IdInt 7
2020-12-02 21:05:11.265834753 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":7}
2020-12-02 21:05:11.56623786 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"},"position":{"line":404,"character":14}}}
2020-12-02 21:05:11.566420795 [ThreadId 206] - GhcIde.hover entered (ideLogger)
2020-12-02 21:05:11.566549043 [ThreadId 206] - Hover request at position 405:15 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs
2020-12-02 21:05:11.663120792 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":11}}
2020-12-02 21:05:11.663286735 [ThreadId 206] - C:GetHieAst was cancelled
2020-12-02 21:05:11.663336793 [ThreadId 204] - Cancelled request IdInt 11
2020-12-02 21:05:11.663467247 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":11}
2020-12-02 21:05:12.013812713 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"},"position":{"line":407,"character":11}}}
2020-12-02 21:05:12.014010333 [ThreadId 213] - GhcIde.hover entered (ideLogger)
2020-12-02 21:05:12.014195717 [ThreadId 213] - Hover request at position 408:12 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs
2020-12-02 21:05:12.201942367 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":12}}
2020-12-02 21:05:12.202189056 [ThreadId 213] - C:GetHieAst was cancelled
2020-12-02 21:05:12.202278586 [ThreadId 211] - Cancelled request IdInt 12
2020-12-02 21:05:12.202410826 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":12}
2020-12-02 21:05:12.299954241 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":13,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"},"position":{"line":407,"character":18}}}
2020-12-02 21:05:12.30019573 [ThreadId 219] - DocumentHighlight request at position 408:19 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs
2020-12-02 21:05:12.549153848 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"},"range":{"start":{"line":407,"character":4},"end":{"line":407,"character":18}},"context":{"diagnostics":[]}}}
2020-12-02 21:05:12.549318291 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":10}}
2020-12-02 21:05:12.549472389 [ThreadId 200] - CodeAction was cancelled
2020-12-02 21:05:12.549536275 [ThreadId 198] - Cancelled request IdInt 10
2020-12-02 21:05:12.549622181 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":10}
2020-12-02 21:05:18.794838478 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"}}}
2020-12-02 21:05:18.795037708 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"}
2020-12-02 21:05:18.795301796 [ThreadId 25] - Set files of interest to: []
2020-12-02 21:05:18.795396492 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":9}}
2020-12-02 21:05:18.795457358 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs
2020-12-02 21:05:18.795562667 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":14}}
2020-12-02 21:05:18.79557127 [ThreadId 195] - codeLens was cancelled
2020-12-02 21:05:18.795661094 [ThreadId 193] - Cancelled request IdInt 9
2020-12-02 21:05:18.795672543 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":13}}
2020-12-02 21:05:18.795679739 [ThreadId 224] - CodeAction was cancelled
2020-12-02 21:05:18.795799891 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":9}
2020-12-02 21:05:18.795835448 [ThreadId 219] - C:GetHieAst was cancelled
2020-12-02 21:05:18.795811533 [ThreadId 235] - Data.HashMap.Internal.(!): key not found
CallStack (from HasCallStack):
  error, called at ./Data/HashMap/Internal.hs:756:16 in unordered-containers-0.2.13.0-f519383be173bea40a77beaaf5249f6ae8af1a29545fb7d3d57c773b8188dc00:Data.HashMap.Internal
  !, called at src/Development/IDE/Import/DependencyInformation.hs:107:40 in ghcide-0.4.0-inplace:Development.IDE.Import.DependencyInformation
2020-12-02 21:05:18.79583749 [ThreadId 222] - Cancelled request IdInt 14
2020-12-02 21:05:18.795882387 [ThreadId 217] - Cancelled request IdInt 13
2020-12-02 21:05:18.79590783 [ThreadId 235] - finish: ParentTC (took 0.00s)
2020-12-02 21:05:18.795953893 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":14}
2020-12-02 21:05:18.796024655 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":13}
2020-12-02 21:05:18.831233217 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE DerivingVia #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE InstanceSigs #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-- The Shelley ledger uses promoted data kinds which we have to use, but we do\n-- not export any from this API. We also use them unticked as nature intended.\n{-# LANGUAGE DataKinds #-}\n{-# OPTIONS_GHC -Wno-unticked-promoted-constructors #-}\n\n-- | Shelley key types and their 'Key' class instances\n--\nmodule Cardano.Api.KeysShelley (\n\n    -- * Key types\n    PaymentKey,\n    PaymentExtendedKey,\n    StakeKey,\n    StakeExtendedKey,\n    StakePoolKey,\n    GenesisKey,\n    GenesisExtendedKey,\n    GenesisDelegateKey,\n    GenesisDelegateExtendedKey,\n    GenesisUTxOKey,\n\n    -- * Data family instances\n    AsType(..),\n    VerificationKey(..),\n    SigningKey(..),\n    Hash(..),\n  ) where\n\nimport           Prelude\n\nimport           Data.ByteString (ByteString)\nimport qualified Data.ByteString as BS\nimport           Data.Maybe\nimport           Data.String (IsString (..))\n\nimport qualified Cardano.Crypto.DSIGN.Class as Crypto\nimport qualified Cardano.Crypto.Hash.Class as Crypto\nimport qualified Cardano.Crypto.Seed as Crypto\nimport qualified Cardano.Crypto.Wallet as Crypto.HD\n\nimport qualified Cardano.Ledger.Crypto as Shelley (DSIGN)\nimport           Ouroboros.Consensus.Shelley.Protocol.Crypto (StandardCrypto)\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\n\nimport           Cardano.Api.Hash\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.Key\nimport           Cardano.Api.SerialiseBech32\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseJSON\nimport           Cardano.Api.SerialiseRaw\nimport           Cardano.Api.SerialiseTextEnvelope\n\n\n--\n-- Shelley payment keys\n--\n\n-- | Shelley-era payment keys. Used for Shelley payment addresses and witnessing\n-- transactions that spend from these addresses.\n--\n-- This is a type level tag, used with other interfaces like 'Key'.\n--\ndata PaymentKey\n\ninstance HasTypeProxy PaymentKey where\n    data AsType PaymentKey = AsPaymentKey\n    proxyToAsType _ = AsPaymentKey\n\ninstance Key PaymentKey where\n\n    newtype VerificationKey PaymentKey =\n        PaymentVerificationKey (Shelley.VKey Shelley.Payment StandardCrypto)\n      deriving stock (Eq)\n      deriving (Show, IsString) via UsingRawBytesHex (VerificationKey PaymentKey)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n\n    newtype SigningKey PaymentKey =\n        PaymentSigningKey (Shelley.SignKeyDSIGN StandardCrypto)\n      deriving (Show, IsString) via UsingRawBytesHex (SigningKey PaymentKey)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n\n    deterministicSigningKey :: AsType PaymentKey -> Crypto.Seed -> SigningKey PaymentKey\n    deterministicSigningKey AsPaymentKey seed =\n        PaymentSigningKey (Crypto.genKeyDSIGN seed)\n\n    deterministicSigningKeySeedSize :: AsType PaymentKey -> Word\n    deterministicSigningKeySeedSize AsPaymentKey =\n        Crypto.seedSizeDSIGN proxy\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\n    getVerificationKey :: SigningKey PaymentKey -> VerificationKey PaymentKey\n    getVerificationKey (PaymentSigningKey sk) =\n        PaymentVerificationKey (Shelley.VKey (Crypto.deriveVerKeyDSIGN sk))\n\n    verificationKeyHash :: VerificationKey PaymentKey -> Hash PaymentKey\n    verificationKeyHash (PaymentVerificationKey vkey) =\n        PaymentKeyHash (Shelley.hashKey vkey)\n\ninstance SerialiseAsRawBytes (VerificationKey PaymentKey) where\n    serialiseToRawBytes (PaymentVerificationKey (Shelley.VKey vk)) =\n      Crypto.rawSerialiseVerKeyDSIGN vk\n\n    deserialiseFromRawBytes (AsVerificationKey AsPaymentKey) bs =\n      PaymentVerificationKey . Shelley.VKey <$>\n        Crypto.rawDeserialiseVerKeyDSIGN bs\n\ninstance SerialiseAsRawBytes (SigningKey PaymentKey) where\n    serialiseToRawBytes (PaymentSigningKey sk) =\n      Crypto.rawSerialiseSignKeyDSIGN sk\n\n    deserialiseFromRawBytes (AsSigningKey AsPaymentKey) bs =\n      PaymentSigningKey <$> Crypto.rawDeserialiseSignKeyDSIGN bs\n\ninstance SerialiseAsBech32 (VerificationKey PaymentKey) where\n    bech32PrefixFor         _ =  \"addr_vk\"\n    bech32PrefixesPermitted _ = [\"addr_vk\"]\n\ninstance SerialiseAsBech32 (SigningKey PaymentKey) where\n    bech32PrefixFor         _ =  \"addr_sk\"\n    bech32PrefixesPermitted _ = [\"addr_sk\"]\n\nnewtype instance Hash PaymentKey =\n    PaymentKeyHash (Shelley.KeyHash Shelley.Payment StandardCrypto)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex (Hash PaymentKey)\n\ninstance SerialiseAsRawBytes (Hash PaymentKey) where\n    serialiseToRawBytes (PaymentKeyHash (Shelley.KeyHash vkh)) =\n      Crypto.hashToBytes vkh\n\n    deserialiseFromRawBytes (AsHash AsPaymentKey) bs =\n      PaymentKeyHash . Shelley.KeyHash <$> Crypto.hashFromBytes bs\n\ninstance HasTextEnvelope (VerificationKey PaymentKey) where\n    textEnvelopeType _ = \"PaymentVerificationKeyShelley_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\ninstance HasTextEnvelope (SigningKey PaymentKey) where\n    textEnvelopeType _ = \"PaymentSigningKeyShelley_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\n\n--\n-- Shelley payment extended ed25519 keys\n--\n\n-- | Shelley-era payment keys using extended ed25519 cryptographic keys.\n--\n-- They can be used for Shelley payment addresses and witnessing\n-- transactions that spend from these addresses.\n--\n-- These extended keys are used by HD wallets. So this type provides\n-- interoperability with HD wallets. The ITN CLI also supported this key type.\n--\n-- The extended verification keys can be converted (via 'castVerificationKey')\n-- to ordinary keys (i.e. 'VerificationKey' 'PaymentKey') but this is /not/ the\n-- case for the signing keys. The signing keys can be used to witness\n-- transactions directly, with verification via their non-extended verification\n-- key ('VerificationKey' 'PaymentKey').\n--\n-- This is a type level tag, used with other interfaces like 'Key'.\n--\ndata PaymentExtendedKey\n\ninstance HasTypeProxy PaymentExtendedKey where\n    data AsType PaymentExtendedKey = AsPaymentExtendedKey\n    proxyToAsType _ = AsPaymentExtendedKey\n\ninstance Key PaymentExtendedKey where\n\n    newtype VerificationKey PaymentExtendedKey =\n        PaymentExtendedVerificationKey Crypto.HD.XPub\n      deriving stock (Eq)\n      deriving anyclass SerialiseAsCBOR\n      deriving (Show, IsString) via UsingRawBytesHex (VerificationKey PaymentExtendedKey)\n\n    newtype SigningKey PaymentExtendedKey =\n        PaymentExtendedSigningKey Crypto.HD.XPrv\n      deriving anyclass SerialiseAsCBOR\n      deriving (Show, IsString) via UsingRawBytesHex (SigningKey PaymentExtendedKey)\n\n    deterministicSigningKey :: AsType PaymentExtendedKey\n                            -> Crypto.Seed\n                            -> SigningKey PaymentExtendedKey\n    deterministicSigningKey AsPaymentExtendedKey seed =\n        PaymentExtendedSigningKey\n          (Crypto.HD.generate seedbs BS.empty)\n      where\n       (seedbs, _) = Crypto.getBytesFromSeedT 32 seed\n\n    deterministicSigningKeySeedSize :: AsType PaymentExtendedKey -> Word\n    deterministicSigningKeySeedSize AsPaymentExtendedKey = 32\n\n    getVerificationKey :: SigningKey PaymentExtendedKey\n                       -> VerificationKey PaymentExtendedKey\n    getVerificationKey (PaymentExtendedSigningKey sk) =\n        PaymentExtendedVerificationKey (Crypto.HD.toXPub sk)\n\n    -- | We use the hash of the normal non-extended pub key so that it is\n    -- consistent with the one used in addresses and signatures.\n    --\n    verificationKeyHash :: VerificationKey PaymentExtendedKey\n                        -> Hash PaymentExtendedKey\n    verificationKeyHash (PaymentExtendedVerificationKey vk) =\n        PaymentExtendedKeyHash\n      . Shelley.KeyHash\n      . Crypto.castHash\n      $ Crypto.hashWith Crypto.HD.xpubPublicKey vk\n\n\ninstance ToCBOR (VerificationKey PaymentExtendedKey) where\n    toCBOR (PaymentExtendedVerificationKey xpub) =\n      toCBOR (Crypto.HD.unXPub xpub)\n\ninstance FromCBOR (VerificationKey PaymentExtendedKey) where\n    fromCBOR = do\n      bs <- fromCBOR\n      either fail (return . PaymentExtendedVerificationKey)\n             (Crypto.HD.xpub (bs :: ByteString))\n\ninstance ToCBOR (SigningKey PaymentExtendedKey) where\n    toCBOR (PaymentExtendedSigningKey xprv) =\n      toCBOR (Crypto.HD.unXPrv xprv)\n\ninstance FromCBOR (SigningKey PaymentExtendedKey) where\n    fromCBOR = do\n      bs <- fromCBOR\n      either fail (return . PaymentExtendedSigningKey)\n             (Crypto.HD.xprv (bs :: ByteString))\n\ninstance SerialiseAsRawBytes (VerificationKey PaymentExtendedKey) where\n    serialiseToRawBytes (PaymentExtendedVerificationKey xpub) =\n      Crypto.HD.unXPub xpub\n\n    deserialiseFromRawBytes (AsVerificationKey AsPaymentExtendedKey) bs =\n      either (const Nothing) (Just . PaymentExtendedVerificationKey)\n             (Crypto.HD.xpub bs)\n\ninstance SerialiseAsRawBytes (SigningKey PaymentExtendedKey) where\n    serialiseToRawBytes (PaymentExtendedSigningKey xprv) =\n      Crypto.HD.unXPrv xprv\n\n    deserialiseFromRawBytes (AsSigningKey AsPaymentExtendedKey) bs =\n      either (const Nothing) (Just . PaymentExtendedSigningKey)\n             (Crypto.HD.xprv bs)\n\ninstance SerialiseAsBech32 (VerificationKey PaymentExtendedKey) where\n    bech32PrefixFor         _ =  \"addr_xvk\"\n    bech32PrefixesPermitted _ = [\"addr_xvk\"]\n\ninstance SerialiseAsBech32 (SigningKey PaymentExtendedKey) where\n    bech32PrefixFor         _ =  \"addr_xsk\"\n    bech32PrefixesPermitted _ = [\"addr_xsk\"]\n\n\nnewtype instance Hash PaymentExtendedKey =\n    PaymentExtendedKeyHash (Shelley.KeyHash Shelley.Payment StandardCrypto)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex (Hash PaymentKey)\n\ninstance SerialiseAsRawBytes (Hash PaymentExtendedKey) where\n    serialiseToRawBytes (PaymentExtendedKeyHash (Shelley.KeyHash vkh)) =\n      Crypto.hashToBytes vkh\n\n    deserialiseFromRawBytes (AsHash AsPaymentExtendedKey) bs =\n      PaymentExtendedKeyHash . Shelley.KeyHash <$> Crypto.hashFromBytes bs\n\ninstance HasTextEnvelope (VerificationKey PaymentExtendedKey) where\n    textEnvelopeType _ = \"PaymentExtendedVerificationKeyShelley_ed25519_bip32\"\n\ninstance HasTextEnvelope (SigningKey PaymentExtendedKey) where\n    textEnvelopeType _ = \"PaymentExtendedSigningKeyShelley_ed25519_bip32\"\n\ninstance CastVerificationKeyRole PaymentExtendedKey PaymentKey where\n    castVerificationKey (PaymentExtendedVerificationKey vk) =\n        PaymentVerificationKey\n      . Shelley.VKey\n      . fromMaybe impossible\n      . Crypto.rawDeserialiseVerKeyDSIGN\n      . Crypto.HD.xpubPublicKey\n      $ vk\n      where\n        impossible =\n          error \"castVerificationKey: byron and shelley key sizes do not match!\"\n\n\n--\n-- Stake keys\n--\n\ndata StakeKey\n\ninstance HasTypeProxy StakeKey where\n    data AsType StakeKey = AsStakeKey\n    proxyToAsType _ = AsStakeKey\n\ninstance Key StakeKey where\n\n    newtype VerificationKey StakeKey =\n        StakeVerificationKey (Shelley.VKey Shelley.Staking StandardCrypto)\n      deriving stock (Eq)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n      deriving (Show, IsString) via UsingRawBytesHex (VerificationKey StakeKey)\n\n    newtype SigningKey StakeKey =\n        StakeSigningKey (Shelley.SignKeyDSIGN StandardCrypto)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n      deriving (Show, IsString) via UsingRawBytesHex (SigningKey StakeKey)\n\n    deterministicSigningKey :: AsType StakeKey -> Crypto.Seed -> SigningKey StakeKey\n    deterministicSigningKey AsStakeKey seed =\n        StakeSigningKey (Crypto.genKeyDSIGN seed)\n\n    deterministicSigningKeySeedSize :: AsType StakeKey -> Word\n    deterministicSigningKeySeedSize AsStakeKey =\n        Crypto.seedSizeDSIGN proxy\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\n    getVerificationKey :: SigningKey StakeKey -> VerificationKey StakeKey\n    getVerificationKey (StakeSigningKey sk) =\n        StakeVerificationKey (Shelley.VKey (Crypto.deriveVerKeyDSIGN sk))\n\n    verificationKeyHash :: VerificationKey StakeKey -> Hash StakeKey\n    verificationKeyHash (StakeVerificationKey vkey) =\n        StakeKeyHash (Shelley.hashKey vkey)\n\n\ninstance SerialiseAsRawBytes (VerificationKey StakeKey) where\n    serialiseToRawBytes (StakeVerificationKey (Shelley.VKey vk)) =\n      Crypto.rawSerialiseVerKeyDSIGN vk\n\n    deserialiseFromRawBytes (AsVerificationKey AsStakeKey) bs =\n      StakeVerificationKey . Shelley.VKey <$>\n        Crypto.rawDeserialiseVerKeyDSIGN bs\n\ninstance SerialiseAsRawBytes (SigningKey StakeKey) where\n    serialiseToRawBytes (StakeSigningKey sk) =\n      Crypto.rawSerialiseSignKeyDSIGN sk\n\n    deserialiseFromRawBytes (AsSigningKey AsStakeKey) bs =\n      StakeSigningKey <$> Crypto.rawDeserialiseSignKeyDSIGN bs\n\ninstance SerialiseAsBech32 (VerificationKey StakeKey) where\n    bech32PrefixFor         _ =  \"stake_vk\"\n    bech32PrefixesPermitted _ = [\"stake_vk\"]\n\ninstance SerialiseAsBech32 (SigningKey StakeKey) where\n    bech32PrefixFor         _ =  \"stake_sk\"\n    bech32PrefixesPermitted _ = [\"stake_sk\"]\n\n\nnewtype instance Hash StakeKey =\n    StakeKeyHash (Shelley.KeyHash Shelley.Staking StandardCrypto)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex (Hash PaymentKey)\n\ninstance SerialiseAsRawBytes (Hash StakeKey) where\n    serialiseToRawBytes (StakeKeyHash (Shelley.KeyHash vkh)) =\n      Crypto.hashToBytes vkh\n\n    deserialiseFromRawBytes (AsHash AsStakeKey) bs =\n      StakeKeyHash . Shelley.KeyHash <$> Crypto.hashFromBytes bs\n\ninstance HasTextEnvelope (VerificationKey StakeKey) where\n    textEnvelopeType _ = \"StakeVerificationKeyShelley_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\ninstance HasTextEnvelope (SigningKey StakeKey) where\n    textEnvelopeType _ = \"StakeSigningKeyShelley_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\n\n--\n-- Shelley stake extended ed25519 keys\n--\n\n-- | Shelley-era stake keys using extended ed25519 cryptographic keys.\n--\n-- They can be used for Shelley stake addresses and witnessing transactions\n-- that use stake addresses.\n--\n-- These extended keys are used by HD wallets. So this type provides\n-- interoperability with HD wallets. The ITN CLI also supported this key type.\n--\n-- The extended verification keys can be converted (via 'castVerificationKey')\n-- to ordinary keys (i.e. 'VerificationKey' 'StakeKey') but this is /not/ the\n-- case for the signing keys. The signing keys can be used to witness\n-- transactions directly, with verification via their non-extended verification\n-- key ('VerificationKey' 'StakeKey').\n--\n-- This is a type level tag, used with other interfaces like 'Key'.\n--\ndata StakeExtendedKey\n\ninstance HasTypeProxy StakeExtendedKey where\n    data AsType StakeExtendedKey = AsStakeExtendedKey\n    proxyToAsType _ = AsStakeExtendedKey\n\ninstance Key StakeExtendedKey where\n\n    newtype VerificationKey StakeExtendedKey =\n        StakeExtendedVerificationKey Crypto.HD.XPub\n      deriving stock (Eq)\n      deriving anyclass SerialiseAsCBOR\n      deriving (Show, IsString) via UsingRawBytesHex (VerificationKey StakeExtendedKey)\n\n    newtype SigningKey StakeExtendedKey =\n        StakeExtendedSigningKey Crypto.HD.XPrv\n      deriving anyclass SerialiseAsCBOR\n      deriving (Show, IsString) via UsingRawBytesHex (SigningKey StakeExtendedKey)\n\n    deterministicSigningKey :: AsType StakeExtendedKey\n                            -> Crypto.Seed\n                            -> SigningKey StakeExtendedKey\n    deterministicSigningKey AsStakeExtendedKey seed =\n        StakeExtendedSigningKey\n          (Crypto.HD.generate seedbs BS.empty)\n      where\n       (seedbs, _) = Crypto.getBytesFromSeedT 32 seed\n\n    deterministicSigningKeySeedSize :: AsType StakeExtendedKey -> Word\n    deterministicSigningKeySeedSize AsStakeExtendedKey = 32\n\n    getVerificationKey :: SigningKey StakeExtendedKey\n                       -> VerificationKey StakeExtendedKey\n    getVerificationKey (StakeExtendedSigningKey sk) =\n        StakeExtendedVerificationKey (Crypto.HD.toXPub sk)\n\n    -- | We use the hash of the normal non-extended pub key so that it is\n    -- consistent with the one used in addresses and signatures.\n    --\n    verificationKeyHash :: VerificationKey StakeExtendedKey\n                        -> Hash StakeExtendedKey\n    verificationKeyHash (StakeExtendedVerificationKey vk) =\n        StakeExtendedKeyHash\n      . Shelley.KeyHash\n      . Crypto.castHash\n      $ Crypto.hashWith Crypto.HD.xpubPublicKey vk\n\n\ninstance ToCBOR (VerificationKey StakeExtendedKey) where\n    toCBOR (StakeExtendedVerificationKey xpub) =\n      toCBOR (Crypto.HD.unXPub xpub)\n\ninstance FromCBOR (VerificationKey StakeExtendedKey) where\n    fromCBOR = do\n      bs <- fromCBOR\n      either fail (return . StakeExtendedVerificationKey)\n             (Crypto.HD.xpub (bs :: ByteString))\n\ninstance ToCBOR (SigningKey StakeExtendedKey) where\n    toCBOR (StakeExtendedSigningKey xprv) =\n      toCBOR (Crypto.HD.unXPrv xprv)\n\ninstance FromCBOR (SigningKey StakeExtendedKey) where\n    fromCBOR = do\n      bs <- fromCBOR\n      either fail (return . StakeExtendedSigningKey)\n             (Crypto.HD.xprv (bs :: ByteString))\n\ninstance SerialiseAsRawBytes (VerificationKey StakeExtendedKey) where\n    serialiseToRawBytes (StakeExtendedVerificationKey xpub) =\n      Crypto.HD.unXPub xpub\n\n    deserialiseFromRawBytes (AsVerificationKey AsStakeExtendedKey) bs =\n      either (const Nothing) (Just . StakeExtendedVerificationKey)\n             (Crypto.HD.xpub bs)\n\ninstance SerialiseAsRawBytes (SigningKey StakeExtendedKey) where\n    serialiseToRawBytes (StakeExtendedSigningKey xprv) =\n      Crypto.HD.unXPrv xprv\n\n    deserialiseFromRawBytes (AsSigningKey AsStakeExtendedKey) bs =\n      either (const Nothing) (Just . StakeExtendedSigningKey)\n             (Crypto.HD.xprv bs)\n\ninstance SerialiseAsBech32 (VerificationKey StakeExtendedKey) where\n    bech32PrefixFor         _ =  \"stake_xvk\"\n    bech32PrefixesPermitted _ = [\"stake_xvk\"]\n\ninstance SerialiseAsBech32 (SigningKey StakeExtendedKey) where\n    bech32PrefixFor         _ =  \"stake_xsk\"\n    bech32PrefixesPermitted _ = [\"stake_xsk\"]\n\n\nnewtype instance Hash StakeExtendedKey =\n    StakeExtendedKeyHash (Shelley.KeyHash Shelley.Staking StandardCrypto)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex (Hash PaymentKey)\n\ninstance SerialiseAsRawBytes (Hash StakeExtendedKey) where\n    serialiseToRawBytes (StakeExtendedKeyHash (Shelley.KeyHash vkh)) =\n      Crypto.hashToBytes vkh\n\n    deserialiseFromRawBytes (AsHash AsStakeExtendedKey) bs =\n      StakeExtendedKeyHash . Shelley.KeyHash <$> Crypto.hashFromBytes bs\n\ninstance HasTextEnvelope (VerificationKey StakeExtendedKey) where\n    textEnvelopeType _ = \"StakeExtendedVerificationKeyShelley_ed25519_bip32\"\n\ninstance HasTextEnvelope (SigningKey StakeExtendedKey) where\n    textEnvelopeType _ = \"StakeExtendedSigningKeyShelley_ed25519_bip32\"\n\ninstance CastVerificationKeyRole StakeExtendedKey StakeKey where\n    castVerificationKey (StakeExtendedVerificationKey vk) =\n        StakeVerificationKey\n      . Shelley.VKey\n      . fromMaybe impossible\n      . Crypto.rawDeserialiseVerKeyDSIGN\n      . Crypto.HD.xpubPublicKey\n      $ vk\n      where\n        impossible =\n          error \"castVerificationKey: byron and shelley key sizes do not match!\"\n\n\n--\n-- Genesis keys\n--\n\ndata GenesisKey\n\ninstance HasTypeProxy GenesisKey where\n    data AsType GenesisKey = AsGenesisKey\n    proxyToAsType _ = AsGenesisKey\n\ninstance Key GenesisKey where\n\n    newtype VerificationKey GenesisKey =\n        GenesisVerificationKey (Shelley.VKey Shelley.Genesis StandardCrypto)\n      deriving stock (Eq)\n      deriving (Show, IsString) via UsingRawBytesHex (VerificationKey GenesisKey)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n\n    newtype SigningKey GenesisKey =\n        GenesisSigningKey (Shelley.SignKeyDSIGN StandardCrypto)\n      deriving (Show, IsString) via UsingRawBytesHex (SigningKey GenesisKey)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n\n    deterministicSigningKey :: AsType GenesisKey -> Crypto.Seed -> SigningKey GenesisKey\n    deterministicSigningKey AsGenesisKey seed =\n        GenesisSigningKey (Crypto.genKeyDSIGN seed)\n\n    deterministicSigningKeySeedSize :: AsType GenesisKey -> Word\n    deterministicSigningKeySeedSize AsGenesisKey =\n        Crypto.seedSizeDSIGN proxy\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\n    getVerificationKey :: SigningKey GenesisKey -> VerificationKey GenesisKey\n    getVerificationKey (GenesisSigningKey sk) =\n        GenesisVerificationKey (Shelley.VKey (Crypto.deriveVerKeyDSIGN sk))\n\n    verificationKeyHash :: VerificationKey GenesisKey -> Hash GenesisKey\n    verificationKeyHash (GenesisVerificationKey vkey) =\n        GenesisKeyHash (Shelley.hashKey vkey)\n\n\ninstance SerialiseAsRawBytes (VerificationKey GenesisKey) where\n    serialiseToRawBytes (GenesisVerificationKey (Shelley.VKey vk)) =\n      Crypto.rawSerialiseVerKeyDSIGN vk\n\n    deserialiseFromRawBytes (AsVerificationKey AsGenesisKey) bs =\n      GenesisVerificationKey . Shelley.VKey <$>\n        Crypto.rawDeserialiseVerKeyDSIGN bs\n\ninstance SerialiseAsRawBytes (SigningKey GenesisKey) where\n    serialiseToRawBytes (GenesisSigningKey sk) =\n      Crypto.rawSerialiseSignKeyDSIGN sk\n\n    deserialiseFromRawBytes (AsSigningKey AsGenesisKey) bs =\n      GenesisSigningKey <$> Crypto.rawDeserialiseSignKeyDSIGN bs\n\n\nnewtype instance Hash GenesisKey =\n    GenesisKeyHash (Shelley.KeyHash Shelley.Genesis StandardCrypto)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex (Hash PaymentKey)\n\ninstance SerialiseAsRawBytes (Hash GenesisKey) where\n    serialiseToRawBytes (GenesisKeyHash (Shelley.KeyHash vkh)) =\n      Crypto.hashToBytes vkh\n\n    deserialiseFromRawBytes (AsHash AsGenesisKey) bs =\n      GenesisKeyHash . Shelley.KeyHash <$> Crypto.hashFromBytes bs\n\ninstance HasTextEnvelope (VerificationKey GenesisKey) where\n    textEnvelopeType _ = \"GenesisVerificationKey_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\ninstance HasTextEnvelope (SigningKey GenesisKey) where\n    textEnvelopeType _ = \"GenesisSigningKey_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\n\n--\n-- Shelley genesis extended ed25519 keys\n--\n\n-- | Shelley-era genesis keys using extended ed25519 cryptographic keys.\n--\n-- These serve the same role as normal genesis keys, but are here to support\n-- legacy Byron genesis keys which used extended keys.\n--\n-- The extended verification keys can be converted (via 'castVerificationKey')\n-- to ordinary keys (i.e. 'VerificationKey' 'GenesisKey') but this is /not/ the\n-- case for the signing keys. The signing keys can be used to witness\n-- transactions directly, with verification via their non-extended verification\n-- key ('VerificationKey' 'GenesisKey').\n--\n-- This is a type level tag, used with other interfaces like 'Key'.\n--\ndata GenesisExtendedKey\n\ninstance HasTypeProxy GenesisExtendedKey where\n    data AsType GenesisExtendedKey = AsGenesisExtendedKey\n    proxyToAsType _ = AsGenesisExtendedKey\n\ninstance Key GenesisExtendedKey where\n\n    newtype VerificationKey GenesisExtendedKey =\n        GenesisExtendedVerificationKey Crypto.HD.XPub\n      deriving stock (Eq)\n      deriving anyclass SerialiseAsCBOR\n      deriving (Show, IsString) via UsingRawBytesHex (VerificationKey GenesisExtendedKey)\n\n    newtype SigningKey GenesisExtendedKey =\n        GenesisExtendedSigningKey Crypto.HD.XPrv\n      deriving anyclass SerialiseAsCBOR\n      deriving (Show, IsString) via UsingRawBytesHex (SigningKey GenesisExtendedKey)\n\n    deterministicSigningKey :: AsType GenesisExtendedKey\n                            -> Crypto.Seed\n                            -> SigningKey GenesisExtendedKey\n    deterministicSigningKey AsGenesisExtendedKey seed =\n        GenesisExtendedSigningKey\n          (Crypto.HD.generate seedbs BS.empty)\n      where\n       (seedbs, _) = Crypto.getBytesFromSeedT 32 seed\n\n    deterministicSigningKeySeedSize :: AsType GenesisExtendedKey -> Word\n    deterministicSigningKeySeedSize AsGenesisExtendedKey = 32\n\n    getVerificationKey :: SigningKey GenesisExtendedKey\n                       -> VerificationKey GenesisExtendedKey\n    getVerificationKey (GenesisExtendedSigningKey sk) =\n        GenesisExtendedVerificationKey (Crypto.HD.toXPub sk)\n\n    -- | We use the hash of the normal non-extended pub key so that it is\n    -- consistent with the one used in addresses and signatures.\n    --\n    verificationKeyHash :: VerificationKey GenesisExtendedKey\n                        -> Hash GenesisExtendedKey\n    verificationKeyHash (GenesisExtendedVerificationKey vk) =\n        GenesisExtendedKeyHash\n      . Shelley.KeyHash\n      . Crypto.castHash\n      $ Crypto.hashWith Crypto.HD.xpubPublicKey vk\n\n\ninstance ToCBOR (VerificationKey GenesisExtendedKey) where\n    toCBOR (GenesisExtendedVerificationKey xpub) =\n      toCBOR (Crypto.HD.unXPub xpub)\n\ninstance FromCBOR (VerificationKey GenesisExtendedKey) where\n    fromCBOR = do\n      bs <- fromCBOR\n      either fail (return . GenesisExtendedVerificationKey)\n             (Crypto.HD.xpub (bs :: ByteString))\n\ninstance ToCBOR (SigningKey GenesisExtendedKey) where\n    toCBOR (GenesisExtendedSigningKey xprv) =\n      toCBOR (Crypto.HD.unXPrv xprv)\n\ninstance FromCBOR (SigningKey GenesisExtendedKey) where\n    fromCBOR = do\n      bs <- fromCBOR\n      either fail (return . GenesisExtendedSigningKey)\n             (Crypto.HD.xprv (bs :: ByteString))\n\ninstance SerialiseAsRawBytes (VerificationKey GenesisExtendedKey) where\n    serialiseToRawBytes (GenesisExtendedVerificationKey xpub) =\n      Crypto.HD.unXPub xpub\n\n    deserialiseFromRawBytes (AsVerificationKey AsGenesisExtendedKey) bs =\n      either (const Nothing) (Just . GenesisExtendedVerificationKey)\n             (Crypto.HD.xpub bs)\n\ninstance SerialiseAsRawBytes (SigningKey GenesisExtendedKey) where\n    serialiseToRawBytes (GenesisExtendedSigningKey xprv) =\n      Crypto.HD.unXPrv xprv\n\n    deserialiseFromRawBytes (AsSigningKey AsGenesisExtendedKey) bs =\n      either (const Nothing) (Just . GenesisExtendedSigningKey)\n             (Crypto.HD.xprv bs)\n\n\nnewtype instance Hash GenesisExtendedKey =\n    GenesisExtendedKeyHash (Shelley.KeyHash Shelley.Staking StandardCrypto)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex (Hash PaymentKey)\n\ninstance SerialiseAsRawBytes (Hash GenesisExtendedKey) where\n    serialiseToRawBytes (GenesisExtendedKeyHash (Shelley.KeyHash vkh)) =\n      Crypto.hashToBytes vkh\n\n    deserialiseFromRawBytes (AsHash AsGenesisExtendedKey) bs =\n      GenesisExtendedKeyHash . Shelley.KeyHash <$> Crypto.hashFromBytes bs\n\ninstance HasTextEnvelope (VerificationKey GenesisExtendedKey) where\n    textEnvelopeType _ = \"GenesisExtendedVerificationKey_ed25519_bip32\"\n\ninstance HasTextEnvelope (SigningKey GenesisExtendedKey) where\n    textEnvelopeType _ = \"GenesisExtendedSigningKey_ed25519_bip32\"\n\ninstance CastVerificationKeyRole GenesisExtendedKey GenesisKey where\n    castVerificationKey (GenesisExtendedVerificationKey vk) =\n        GenesisVerificationKey\n      . Shelley.VKey\n      . fromMaybe impossible\n      . Crypto.rawDeserialiseVerKeyDSIGN\n      . Crypto.HD.xpubPublicKey\n      $ vk\n      where\n        impossible =\n          error \"castVerificationKey: byron and shelley key sizes do not match!\"\n\n\n--\n-- Genesis delegate keys\n--\n\ndata GenesisDelegateKey\n\ninstance HasTypeProxy GenesisDelegateKey where\n    data AsType GenesisDelegateKey = AsGenesisDelegateKey\n    proxyToAsType _ = AsGenesisDelegateKey\n\n\ninstance Key GenesisDelegateKey where\n\n    newtype VerificationKey GenesisDelegateKey =\n        GenesisDelegateVerificationKey (Shelley.VKey Shelley.GenesisDelegate StandardCrypto)\n      deriving stock (Eq)\n      deriving (Show, IsString) via UsingRawBytesHex (VerificationKey GenesisDelegateKey)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n\n    newtype SigningKey GenesisDelegateKey =\n        GenesisDelegateSigningKey (Shelley.SignKeyDSIGN StandardCrypto)\n      deriving (Show, IsString) via UsingRawBytesHex (SigningKey GenesisDelegateKey)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n\n    deterministicSigningKey :: AsType GenesisDelegateKey -> Crypto.Seed -> SigningKey GenesisDelegateKey\n    deterministicSigningKey AsGenesisDelegateKey seed =\n        GenesisDelegateSigningKey (Crypto.genKeyDSIGN seed)\n\n    deterministicSigningKeySeedSize :: AsType GenesisDelegateKey -> Word\n    deterministicSigningKeySeedSize AsGenesisDelegateKey =\n        Crypto.seedSizeDSIGN proxy\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\n    getVerificationKey :: SigningKey GenesisDelegateKey -> VerificationKey GenesisDelegateKey\n    getVerificationKey (GenesisDelegateSigningKey sk) =\n        GenesisDelegateVerificationKey (Shelley.VKey (Crypto.deriveVerKeyDSIGN sk))\n\n    verificationKeyHash :: VerificationKey GenesisDelegateKey -> Hash GenesisDelegateKey\n    verificationKeyHash (GenesisDelegateVerificationKey vkey) =\n        GenesisDelegateKeyHash (Shelley.hashKey vkey)\n\n\ninstance SerialiseAsRawBytes (VerificationKey GenesisDelegateKey) where\n    serialiseToRawBytes (GenesisDelegateVerificationKey (Shelley.VKey vk)) =\n      Crypto.rawSerialiseVerKeyDSIGN vk\n\n    deserialiseFromRawBytes (AsVerificationKey AsGenesisDelegateKey) bs =\n      GenesisDelegateVerificationKey . Shelley.VKey <$>\n        Crypto.rawDeserialiseVerKeyDSIGN bs\n\ninstance SerialiseAsRawBytes (SigningKey GenesisDelegateKey) where\n    serialiseToRawBytes (GenesisDelegateSigningKey sk) =\n      Crypto.rawSerialiseSignKeyDSIGN sk\n\n    deserialiseFromRawBytes (AsSigningKey AsGenesisDelegateKey) bs =\n      GenesisDelegateSigningKey <$> Crypto.rawDeserialiseSignKeyDSIGN bs\n\n\nnewtype instance Hash GenesisDelegateKey =\n    GenesisDelegateKeyHash (Shelley.KeyHash Shelley.GenesisDelegate StandardCrypto)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex (Hash PaymentKey)\n\ninstance SerialiseAsRawBytes (Hash GenesisDelegateKey) where\n    serialiseToRawBytes (GenesisDelegateKeyHash (Shelley.KeyHash vkh)) =\n      Crypto.hashToBytes vkh\n\n    deserialiseFromRawBytes (AsHash AsGenesisDelegateKey) bs =\n      GenesisDelegateKeyHash . Shelley.KeyHash <$> Crypto.hashFromBytes bs\n\ninstance HasTextEnvelope (VerificationKey GenesisDelegateKey) where\n    textEnvelopeType _ = \"GenesisDelegateVerificationKey_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\ninstance HasTextEnvelope (SigningKey GenesisDelegateKey) where\n    textEnvelopeType _ = \"GenesisDelegateSigningKey_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\ninstance CastVerificationKeyRole GenesisDelegateKey StakePoolKey where\n    castVerificationKey (GenesisDelegateVerificationKey (Shelley.VKey vkey)) =\n      StakePoolVerificationKey (Shelley.VKey vkey)\n\ninstance CastSigningKeyRole GenesisDelegateKey StakePoolKey where\n    castSigningKey (GenesisDelegateSigningKey skey) =\n      StakePoolSigningKey skey\n\n\n--\n-- Shelley genesis delegate extended ed25519 keys\n--\n\n-- | Shelley-era genesis keys using extended ed25519 cryptographic keys.\n--\n-- These serve the same role as normal genesis keys, but are here to support\n-- legacy Byron genesis keys which used extended keys.\n--\n-- The extended verification keys can be converted (via 'castVerificationKey')\n-- to ordinary keys (i.e. 'VerificationKey' 'GenesisKey') but this is /not/ the\n-- case for the signing keys. The signing keys can be used to witness\n-- transactions directly, with verification via their non-extended verification\n-- key ('VerificationKey' 'GenesisKey').\n--\n-- This is a type level tag, used with other interfaces like 'Key'.\n--\ndata GenesisDelegateExtendedKey\n\ninstance HasTypeProxy GenesisDelegateExtendedKey where\n    data AsType GenesisDelegateExtendedKey = AsGenesisDelegateExtendedKey\n    proxyToAsType _ = AsGenesisDelegateExtendedKey\n\ninstance Key GenesisDelegateExtendedKey where\n\n    newtype VerificationKey GenesisDelegateExtendedKey =\n        GenesisDelegateExtendedVerificationKey Crypto.HD.XPub\n      deriving stock (Eq)\n      deriving anyclass SerialiseAsCBOR\n      deriving (Show, IsString) via UsingRawBytesHex (VerificationKey GenesisDelegateExtendedKey)\n\n    newtype SigningKey GenesisDelegateExtendedKey =\n        GenesisDelegateExtendedSigningKey Crypto.HD.XPrv\n      deriving anyclass SerialiseAsCBOR\n      deriving (Show, IsString) via UsingRawBytesHex (SigningKey GenesisDelegateExtendedKey)\n\n    deterministicSigningKey :: AsType GenesisDelegateExtendedKey\n                            -> Crypto.Seed\n                            -> SigningKey GenesisDelegateExtendedKey\n    deterministicSigningKey AsGenesisDelegateExtendedKey seed =\n        GenesisDelegateExtendedSigningKey\n          (Crypto.HD.generate seedbs BS.empty)\n      where\n       (seedbs, _) = Crypto.getBytesFromSeedT 32 seed\n\n    deterministicSigningKeySeedSize :: AsType GenesisDelegateExtendedKey -> Word\n    deterministicSigningKeySeedSize AsGenesisDelegateExtendedKey = 32\n\n    getVerificationKey :: SigningKey GenesisDelegateExtendedKey\n                       -> VerificationKey GenesisDelegateExtendedKey\n    getVerificationKey (GenesisDelegateExtendedSigningKey sk) =\n        GenesisDelegateExtendedVerificationKey (Crypto.HD.toXPub sk)\n\n    -- | We use the hash of the normal non-extended pub key so that it is\n    -- consistent with the one used in addresses and signatures.\n    --\n    verificationKeyHash :: VerificationKey GenesisDelegateExtendedKey\n                        -> Hash GenesisDelegateExtendedKey\n    verificationKeyHash (GenesisDelegateExtendedVerificationKey vk) =\n        GenesisDelegateExtendedKeyHash\n      . Shelley.KeyHash\n      . Crypto.castHash\n      $ Crypto.hashWith Crypto.HD.xpubPublicKey vk\n\n\ninstance ToCBOR (VerificationKey GenesisDelegateExtendedKey) where\n    toCBOR (GenesisDelegateExtendedVerificationKey xpub) =\n      toCBOR (Crypto.HD.unXPub xpub)\n\ninstance FromCBOR (VerificationKey GenesisDelegateExtendedKey) where\n    fromCBOR = do\n      bs <- fromCBOR\n      either fail (return . GenesisDelegateExtendedVerificationKey)\n             (Crypto.HD.xpub (bs :: ByteString))\n\ninstance ToCBOR (SigningKey GenesisDelegateExtendedKey) where\n    toCBOR (GenesisDelegateExtendedSigningKey xprv) =\n      toCBOR (Crypto.HD.unXPrv xprv)\n\ninstance FromCBOR (SigningKey GenesisDelegateExtendedKey) where\n    fromCBOR = do\n      bs <- fromCBOR\n      either fail (return . GenesisDelegateExtendedSigningKey)\n             (Crypto.HD.xprv (bs :: ByteString))\n\ninstance SerialiseAsRawBytes (VerificationKey GenesisDelegateExtendedKey) where\n    serialiseToRawBytes (GenesisDelegateExtendedVerificationKey xpub) =\n      Crypto.HD.unXPub xpub\n\n    deserialiseFromRawBytes (AsVerificationKey AsGenesisDelegateExtendedKey) bs =\n      either (const Nothing) (Just . GenesisDelegateExtendedVerificationKey)\n             (Crypto.HD.xpub bs)\n\ninstance SerialiseAsRawBytes (SigningKey GenesisDelegateExtendedKey) where\n    serialiseToRawBytes (GenesisDelegateExtendedSigningKey xprv) =\n      Crypto.HD.unXPrv xprv\n\n    deserialiseFromRawBytes (AsSigningKey AsGenesisDelegateExtendedKey) bs =\n      either (const Nothing) (Just . GenesisDelegateExtendedSigningKey)\n             (Crypto.HD.xprv bs)\n\n\nnewtype instance Hash GenesisDelegateExtendedKey =\n    GenesisDelegateExtendedKeyHash (Shelley.KeyHash Shelley.Staking StandardCrypto)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex (Hash PaymentKey)\n\ninstance SerialiseAsRawBytes (Hash GenesisDelegateExtendedKey) where\n    serialiseToRawBytes (GenesisDelegateExtendedKeyHash (Shelley.KeyHash vkh)) =\n      Crypto.hashToBytes vkh\n\n    deserialiseFromRawBytes (AsHash AsGenesisDelegateExtendedKey) bs =\n      GenesisDelegateExtendedKeyHash . Shelley.KeyHash <$> Crypto.hashFromBytes bs\n\ninstance HasTextEnvelope (VerificationKey GenesisDelegateExtendedKey) where\n    textEnvelopeType _ = \"GenesisDelegateExtendedVerificationKey_ed25519_bip32\"\n\ninstance HasTextEnvelope (SigningKey GenesisDelegateExtendedKey) where\n    textEnvelopeType _ = \"GenesisDelegateExtendedSigningKey_ed25519_bip32\"\n\ninstance CastVerificationKeyRole GenesisDelegateExtendedKey GenesisDelegateKey where\n    castVerificationKey (GenesisDelegateExtendedVerificationKey vk) =\n        GenesisDelegateVerificationKey\n      . Shelley.VKey\n      . fromMaybe impossible\n      . Crypto.rawDeserialiseVerKeyDSIGN\n      . Crypto.HD.xpubPublicKey\n      $ vk\n      where\n        impossible =\n          error \"castVerificationKey: byron and shelley key sizes do not match!\"\n\n\n--\n-- Genesis UTxO keys\n--\n\ndata GenesisUTxOKey\n\ninstance HasTypeProxy GenesisUTxOKey where\n    data AsType GenesisUTxOKey = AsGenesisUTxOKey\n    proxyToAsType _ = AsGenesisUTxOKey\n\n\ninstance Key GenesisUTxOKey where\n\n    newtype VerificationKey GenesisUTxOKey =\n        GenesisUTxOVerificationKey (Shelley.VKey Shelley.Payment StandardCrypto)\n      deriving stock (Eq)\n      deriving (Show, IsString) via UsingRawBytesHex (VerificationKey GenesisUTxOKey)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n\n    newtype SigningKey GenesisUTxOKey =\n        GenesisUTxOSigningKey (Shelley.SignKeyDSIGN StandardCrypto)\n      deriving (Show, IsString) via UsingRawBytesHex (SigningKey GenesisUTxOKey)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n\n    deterministicSigningKey :: AsType GenesisUTxOKey -> Crypto.Seed -> SigningKey GenesisUTxOKey\n    deterministicSigningKey AsGenesisUTxOKey seed =\n        GenesisUTxOSigningKey (Crypto.genKeyDSIGN seed)\n\n    deterministicSigningKeySeedSize :: AsType GenesisUTxOKey -> Word\n    deterministicSigningKeySeedSize AsGenesisUTxOKey =\n        Crypto.seedSizeDSIGN proxy\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\n    getVerificationKey :: SigningKey GenesisUTxOKey -> VerificationKey GenesisUTxOKey\n    getVerificationKey (GenesisUTxOSigningKey sk) =\n        GenesisUTxOVerificationKey (Shelley.VKey (Crypto.deriveVerKeyDSIGN sk))\n\n    verificationKeyHash :: VerificationKey GenesisUTxOKey -> Hash GenesisUTxOKey\n    verificationKeyHash (GenesisUTxOVerificationKey vkey) =\n        GenesisUTxOKeyHash (Shelley.hashKey vkey)\n\n\ninstance SerialiseAsRawBytes (VerificationKey GenesisUTxOKey) where\n    serialiseToRawBytes (GenesisUTxOVerificationKey (Shelley.VKey vk)) =\n      Crypto.rawSerialiseVerKeyDSIGN vk\n\n    deserialiseFromRawBytes (AsVerificationKey AsGenesisUTxOKey) bs =\n      GenesisUTxOVerificationKey . Shelley.VKey <$>\n        Crypto.rawDeserialiseVerKeyDSIGN bs\n\ninstance SerialiseAsRawBytes (SigningKey GenesisUTxOKey) where\n    serialiseToRawBytes (GenesisUTxOSigningKey sk) =\n      Crypto.rawSerialiseSignKeyDSIGN sk\n\n    deserialiseFromRawBytes (AsSigningKey AsGenesisUTxOKey) bs =\n      GenesisUTxOSigningKey <$> Crypto.rawDeserialiseSignKeyDSIGN bs\n\n\nnewtype instance Hash GenesisUTxOKey =\n    GenesisUTxOKeyHash (Shelley.KeyHash Shelley.Payment StandardCrypto)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex (Hash PaymentKey)\n\ninstance SerialiseAsRawBytes (Hash GenesisUTxOKey) where\n    serialiseToRawBytes (GenesisUTxOKeyHash (Shelley.KeyHash vkh)) =\n      Crypto.hashToBytes vkh\n\n    deserialiseFromRawBytes (AsHash AsGenesisUTxOKey) bs =\n      GenesisUTxOKeyHash . Shelley.KeyHash <$> Crypto.hashFromBytes bs\n\ninstance HasTextEnvelope (VerificationKey GenesisUTxOKey) where\n    textEnvelopeType _ = \"GenesisUTxOVerificationKey_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\ninstance HasTextEnvelope (SigningKey GenesisUTxOKey) where\n    textEnvelopeType _ = \"GenesisUTxOSigningKey_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n    -- TODO: use a different type from the stake pool key, since some operations\n    -- need a genesis key specifically\n\ninstance CastVerificationKeyRole GenesisUTxOKey PaymentKey where\n    castVerificationKey (GenesisUTxOVerificationKey (Shelley.VKey vkey)) =\n      PaymentVerificationKey (Shelley.VKey vkey)\n\ninstance CastSigningKeyRole GenesisUTxOKey PaymentKey where\n    castSigningKey (GenesisUTxOSigningKey skey) =\n      PaymentSigningKey skey\n\n\n--\n-- stake pool keys\n--\n\ndata StakePoolKey\n\ninstance HasTypeProxy StakePoolKey where\n    data AsType StakePoolKey = AsStakePoolKey\n    proxyToAsType _ = AsStakePoolKey\n\ninstance Key StakePoolKey where\n\n    newtype VerificationKey StakePoolKey =\n        StakePoolVerificationKey (Shelley.VKey Shelley.StakePool StandardCrypto)\n      deriving stock (Eq)\n      deriving (Show, IsString) via UsingRawBytesHex (VerificationKey StakePoolKey)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n\n    newtype SigningKey StakePoolKey =\n        StakePoolSigningKey (Shelley.SignKeyDSIGN StandardCrypto)\n      deriving (Show, IsString) via UsingRawBytesHex (SigningKey StakePoolKey)\n      deriving newtype (ToCBOR, FromCBOR)\n      deriving anyclass SerialiseAsCBOR\n\n    deterministicSigningKey :: AsType StakePoolKey -> Crypto.Seed -> SigningKey StakePoolKey\n    deterministicSigningKey AsStakePoolKey seed =\n        StakePoolSigningKey (Crypto.genKeyDSIGN seed)\n\n    deterministicSigningKeySeedSize :: AsType StakePoolKey -> Word\n    deterministicSigningKeySeedSize AsStakePoolKey =\n        Crypto.seedSizeDSIGN proxy\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\n    getVerificationKey :: SigningKey StakePoolKey -> VerificationKey StakePoolKey\n    getVerificationKey (StakePoolSigningKey sk) =\n        StakePoolVerificationKey (Shelley.VKey (Crypto.deriveVerKeyDSIGN sk))\n\n    verificationKeyHash :: VerificationKey StakePoolKey -> Hash StakePoolKey\n    verificationKeyHash (StakePoolVerificationKey vkey) =\n        StakePoolKeyHash (Shelley.hashKey vkey)\n\ninstance SerialiseAsRawBytes (VerificationKey StakePoolKey) where\n    serialiseToRawBytes (StakePoolVerificationKey (Shelley.VKey vk)) =\n      Crypto.rawSerialiseVerKeyDSIGN vk\n\n    deserialiseFromRawBytes (AsVerificationKey AsStakePoolKey) bs =\n      StakePoolVerificationKey . Shelley.VKey <$>\n        Crypto.rawDeserialiseVerKeyDSIGN bs\n\ninstance SerialiseAsRawBytes (SigningKey StakePoolKey) where\n    serialiseToRawBytes (StakePoolSigningKey sk) =\n      Crypto.rawSerialiseSignKeyDSIGN sk\n\n    deserialiseFromRawBytes (AsSigningKey AsStakePoolKey) bs =\n      StakePoolSigningKey <$> Crypto.rawDeserialiseSignKeyDSIGN bs\n\ninstance SerialiseAsBech32 (VerificationKey StakePoolKey) where\n    bech32PrefixFor         _ =  \"pool_vk\"\n    bech32PrefixesPermitted _ = [\"pool_vk\"]\n\ninstance SerialiseAsBech32 (SigningKey StakePoolKey) where\n    bech32PrefixFor         _ =  \"pool_sk\"\n    bech32PrefixesPermitted _ = [\"pool_sk\"]\n\nnewtype instance Hash StakePoolKey =\n    StakePoolKeyHash (Shelley.KeyHash Shelley.StakePool StandardCrypto)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex (Hash PaymentKey)\n\ninstance SerialiseAsRawBytes (Hash StakePoolKey) where\n    serialiseToRawBytes (StakePoolKeyHash (Shelley.KeyHash vkh)) =\n      Crypto.hashToBytes vkh\n\n    deserialiseFromRawBytes (AsHash AsStakePoolKey) bs =\n      StakePoolKeyHash . Shelley.KeyHash <$> Crypto.hashFromBytes bs\n\ninstance SerialiseAsBech32 (Hash StakePoolKey) where\n    bech32PrefixFor         _ =  \"pool\"\n    bech32PrefixesPermitted _ = [\"pool\"]\n\ninstance ToJSON (Hash StakePoolKey) where\n    toJSON = toJSON . serialiseToBech32\n\ninstance HasTextEnvelope (VerificationKey StakePoolKey) where\n    textEnvelopeType _ = \"StakePoolVerificationKey_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\ninstance HasTextEnvelope (SigningKey StakePoolKey) where\n    textEnvelopeType _ = \"StakePoolSigningKey_\"\n                      <> fromString (Crypto.algorithmNameDSIGN proxy)\n      where\n        proxy :: Proxy (Shelley.DSIGN StandardCrypto)\n        proxy = Proxy\n\n"}}}
2020-12-02 21:05:18.839059976 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs",Modified)]
2020-12-02 21:05:18.839451156 [ThreadId 152] - Finishing build session(exception: AsyncCancelled)
2020-12-02 21:05:18.839529284 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 21:05:18.83964039 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs
2020-12-02 21:05:18.843571095 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-02 21:05:18.845478607 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":16,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"}}}
2020-12-02 21:05:18.91725468 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"1/4"},"token":"4"},"method":"$/progress"}
2020-12-02 21:05:19.066835651 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":17,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"}}}
2020-12-02 21:05:19.067031432 [ThreadId 288] - Plugin.makeCodeLens (ideLogger)
2020-12-02 21:05:19.067172554 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"},"range":{"start":{"line":1004,"character":16},"end":{"line":1004,"character":30}},"context":{"diagnostics":[]}}}
2020-12-02 21:05:19.067393001 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":15}}
2020-12-02 21:05:19.067546211 [ThreadId 278] - CodeAction was cancelled
2020-12-02 21:05:19.067609815 [ThreadId 276] - Cancelled request IdInt 15
2020-12-02 21:05:19.067786209 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":15}
2020-12-02 21:05:26.088180636 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"}}}
2020-12-02 21:05:26.088449235 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"}
2020-12-02 21:05:26.088755465 [ThreadId 25] - Set files of interest to: []
2020-12-02 21:05:26.088941454 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs
2020-12-02 21:05:26.089015322 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":17}}
2020-12-02 21:05:26.089154918 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":18}}
2020-12-02 21:05:26.089300916 [ThreadId 288] - codeLens was cancelled
2020-12-02 21:05:26.08933133 [ThreadId 293] - CodeAction was cancelled
2020-12-02 21:05:26.089412259 [ThreadId 291] - Cancelled request IdInt 18
2020-12-02 21:05:26.089414319 [ThreadId 286] - Cancelled request IdInt 17
2020-12-02 21:05:26.089364894 [ThreadId 302] - Data.HashMap.Internal.(!): key not found
CallStack (from HasCallStack):
  error, called at ./Data/HashMap/Internal.hs:756:16 in unordered-containers-0.2.13.0-f519383be173bea40a77beaaf5249f6ae8af1a29545fb7d3d57c773b8188dc00:Data.HashMap.Internal
  !, called at src/Development/IDE/Import/DependencyInformation.hs:107:40 in ghcide-0.4.0-inplace:Development.IDE.Import.DependencyInformation
2020-12-02 21:05:26.089552758 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":18}
2020-12-02 21:05:26.089653651 [ThreadId 302] - finish: ParentTC (took 0.00s)
2020-12-02 21:05:26.089690353 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":17}
2020-12-02 21:05:26.146209996 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE PatternSynonyms #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-- The Shelley ledger uses promoted data kinds which we have to use, but we do\n-- not export any from this API. We also use them unticked as nature intended.\n{-# LANGUAGE DataKinds #-}\n{-# OPTIONS_GHC -Wno-unticked-promoted-constructors #-}\n\n-- | Complete, signed transactions\n--\nmodule Cardano.Api.Tx (\n\n    -- * Signing transactions\n    -- | Creating transaction witnesses one by one, or all in one go.\n    Tx(..),\n    getTxBody,\n    getTxWitnesses,\n\n    -- ** Signing in one go\n    ShelleySigningKey(..),\n    toShelleySigningKey,\n    signByronTransaction,\n    signShelleyTransaction,\n    -- ** Incremental signing and separate witnesses\n    makeSignedTransaction,\n    Witness(..),\n    makeByronKeyWitness,\n    ShelleyWitnessSigningKey(..),\n    makeShelleyKeyWitness,\n    WitnessNetworkIdOrByronAddress (..),\n    makeShelleyBootstrapWitness,\n    makeScriptWitness,\n    makeShelleySignature,\n    getShelleyKeyWitnessVerificationKey,\n\n    -- * Data family instances\n    AsType(AsTx, AsByronTx, AsShelleyTx,\n           AsWitness, AsByronWitness, AsShelleyWitness),\n  ) where\n\nimport           Prelude\n\nimport           Data.Maybe\n\nimport           Data.ByteString (ByteString)\nimport qualified Data.ByteString as BS\nimport qualified Data.ByteString.Lazy as LBS\n\nimport qualified Data.Map.Strict as Map\nimport qualified Data.Set as Set\nimport qualified Data.Vector as Vector\n\n--\n-- Common types, consensus, network\n--\nimport           Cardano.Binary (Annotated (..))\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\n--\n-- Crypto API used by consensus and Shelley (and should be used by Byron)\n--\nimport qualified Cardano.Crypto.DSIGN.Class as Crypto\nimport qualified Cardano.Crypto.Util as Crypto\nimport qualified Cardano.Crypto.Wallet as Crypto.HD\n\n--\n-- Byron imports\n--\nimport qualified Cardano.Crypto.Hashing as Byron\nimport qualified Cardano.Crypto.ProtocolMagic as Byron\nimport qualified Cardano.Crypto.Signing as Byron\nimport qualified Cardano.Chain.Common as Byron\nimport qualified Cardano.Chain.UTxO as Byron\n\n--\n-- Shelley imports\n--\nimport           Ouroboros.Consensus.Shelley.Protocol.Crypto (StandardCrypto)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era as Ledger\nimport qualified Cardano.Ledger.Shelley.Constraints as Shelley\n\nimport qualified Shelley.Spec.Ledger.Address.Bootstrap as Shelley\nimport           Shelley.Spec.Ledger.BaseTypes (maybeToStrictMaybe, strictMaybeToMaybe)\nimport qualified Shelley.Spec.Ledger.Hashing as Shelley\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Tx as Shelley\n\nimport           Cardano.Api.Address\nimport           Cardano.Api.Certificate\nimport           Cardano.Api.Eras\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.Key\nimport           Cardano.Api.KeysByron\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.NetworkId\nimport           Cardano.Api.Script\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseTextEnvelope\nimport           Cardano.Api.TxBody\n\n\n-- ----------------------------------------------------------------------------\n-- Signed transactions\n--\n\ndata Tx era where\n\n     ByronTx\n       :: Byron.ATxAux ByteString\n       -> Tx ByronEra\n\n     ShelleyTx\n       :: ShelleyBasedEra era\n       -> Shelley.Tx (ShelleyLedgerEra era)\n       -> Tx era\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Eq (Tx era) where\n    (==) (ByronTx txA)\n         (ByronTx txB) = txA == txB\n\n    (==) (ShelleyTx era txA)\n         (ShelleyTx _   txB) =\n      case era of\n        ShelleyBasedEraShelley -> txA == txB\n        ShelleyBasedEraAllegra -> txA == txB\n        ShelleyBasedEraMary    -> txA == txB\n\n    (==) ByronTx{} (ShelleyTx era _) = case era of {}\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Show (Tx era) where\n    showsPrec p (ByronTx tx) =\n      showParen (p >= 11) $\n        showString \"ByronTx \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Tx era) where\n    data AsType (Tx era) = AsTx (AsType era)\n    proxyToAsType _ = AsTx (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronTx :: AsType (Tx ByronEra)\npattern AsByronTx   = AsTx AsByronEra\n{-# COMPLETE AsByronTx #-}\n\npattern AsShelleyTx :: AsType (Tx ShelleyEra)\npattern AsShelleyTx = AsTx AsShelleyEra\n{-# COMPLETE AsShelleyTx #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Tx era) where\n    serialiseToCBOR (ByronTx tx) = CBOR.recoverBytes tx\n\n    serialiseToCBOR (ShelleyTx era tx) =\n      case era of\n        ShelleyBasedEraShelley -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraAllegra -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraMary    -> serialiseShelleyBasedTx tx\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronTx <$>\n            CBOR.decodeFullAnnotatedBytes\n              \"Byron Tx\" fromCBOR (LBS.fromStrict bs)\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraShelley) bs\n        AllegraEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraAllegra) bs\n        MaryEra    -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraMary) bs\n\n-- | The serialisation format for the different Shelley-based eras are not the\n-- same, but they can be handled generally with one overloaded implementation.\n--\nserialiseShelleyBasedTx :: ToCBOR tx => tx -> ByteString\nserialiseShelleyBasedTx = CBOR.serialize'\n\ndeserialiseShelleyBasedTx :: FromCBOR (CBOR.Annotator tx)\n                          => (tx -> tx')\n                          -> ByteString\n                          -> Either CBOR.DecoderError tx'\ndeserialiseShelleyBasedTx mkTx bs =\n    mkTx <$> CBOR.decodeAnnotator \"Shelley Tx\" fromCBOR (LBS.fromStrict bs)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Tx era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxSignedByron\"\n        ShelleyEra -> \"TxSignedShelley\"\n        AllegraEra -> \"Tx AllegraEra\"\n        MaryEra    -> \"Tx MaryEra\"\n\n\ndata Witness era where\n\n     ByronKeyWitness\n       :: Byron.TxInWitness\n       -> Witness ByronEra\n\n     ShelleyBootstrapWitness\n       :: ShelleyBasedEra era\n       -> Shelley.BootstrapWitness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyKeyWitness\n       :: ShelleyBasedEra era\n       -> Shelley.WitVKey Shelley.Witness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyScriptWitness\n       :: ShelleyBasedEra era\n       -> Ledger.Script (ShelleyLedgerEra era)\n       -> Witness era\n\n\n-- The GADT in the Shelley cases requires a custom instance\ninstance Eq (Witness era) where\n    (==) (ByronKeyWitness wA)\n         (ByronKeyWitness wB) = wA == wB\n\n    (==) (ShelleyBootstrapWitness era wA)\n         (ShelleyBootstrapWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyKeyWitness era wA)\n         (ShelleyKeyWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyScriptWitness era wA)\n         (ShelleyScriptWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) _ _ = False\n\n-- The GADT in the ShelleyTx case requires a custom instance\n--TODO: once we start providing custom patterns we should do the show in terms\n-- of those. It'll be less verbose too!\ninstance Show (Witness era) where\n    showsPrec p (ByronKeyWitness tx) =\n      showParen (p >= 11) $\n        showString \"ByronKeyWitness \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Witness era) where\n    data AsType (Witness era) = AsWitness (AsType era)\n    proxyToAsType _ = AsWitness (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronWitness :: AsType (Witness ByronEra)\npattern AsByronWitness   = AsWitness AsByronEra\n{-# COMPLETE AsByronWitness #-}\n\npattern AsShelleyWitness :: AsType (Witness ShelleyEra)\npattern AsShelleyWitness = AsWitness AsShelleyEra\n{-# COMPLETE AsShelleyWitness #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Witness era) where\n    serialiseToCBOR (ByronKeyWitness wit) = CBOR.serialize' wit\n\n    serialiseToCBOR (ShelleyKeyWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedKeyWitness wit\n\n    serialiseToCBOR (ShelleyBootstrapWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedBootstrapWitness wit\n\n    serialiseToCBOR (ShelleyScriptWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedScriptWitness wit\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronKeyWitness <$> CBOR.decodeFull' bs\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> decodeShelleyBasedWitness ShelleyBasedEraShelley bs\n        AllegraEra -> decodeShelleyBasedWitness ShelleyBasedEraAllegra bs\n        MaryEra    -> decodeShelleyBasedWitness ShelleyBasedEraMary    bs\n\n\nencodeShelleyBasedKeyWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedKeyWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 0 <> toCBOR wit\n\nencodeShelleyBasedBootstrapWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedBootstrapWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 1 <> toCBOR wit\n\nencodeShelleyBasedScriptWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedScriptWitness wit =\n    CBOR.encodeListLen 2\n <> CBOR.encodeWord 2\n    -- We use an extra level of wrapping here to support the legacy\n    -- binary serialisation format for the @Script@ type from\n    -- @cardano-ledger-specs@.\n    --\n    -- TODO: make this go away by providing a WitnessSet type and only\n    -- providing serialisation for witness sets, using the serialisation\n    -- from the ledger lib rather than needing something custom here.\n    -- Signed transactions have witness sets, so this is an existing on-chain\n    -- stable format.\n <> CBOR.encodeListLen 2\n <> CBOR.encodeWord 0\n <> toCBOR wit\n\ndecodeShelleyBasedWitness :: forall era.\n                             Ledger.Era (ShelleyLedgerEra era)\n                          => FromCBOR (CBOR.Annotator (Ledger.Script (ShelleyLedgerEra era)))\n                          => ShelleyBasedEra era\n                          -> ByteString\n                          -> Either CBOR.DecoderError (Witness era)\ndecodeShelleyBasedWitness era =\n    CBOR.decodeAnnotator \"Shelley Witness\" decode . LBS.fromStrict\n  where\n    decode :: CBOR.Decoder s (CBOR.Annotator (Witness era))\n    decode =  do\n      CBOR.decodeListLenOf 2\n      t <- CBOR.decodeWord\n      case t of\n        0 -> fmap (fmap (ShelleyKeyWitness era)) fromCBOR\n        1 -> fmap (fmap (ShelleyBootstrapWitness era)) fromCBOR\n        -- We use an extra level of wrapping here to support the legacy\n        -- binary serialisation format for the @Script@ type from\n        -- @cardano-ledger-specs@.\n        2 -> do CBOR.decodeListLenOf 2\n                CBOR.decodeWordOf 0\n                fmap (fmap (ShelleyScriptWitness era)) fromCBOR\n        _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag\n                                \"Shelley Witness\" (fromIntegral t)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Witness era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxWitnessByron\"\n        ShelleyEra -> \"TxWitnessShelley\"\n        AllegraEra -> \"TxWitness AllegraEra\"\n        MaryEra    -> \"TxWitness MaryEra\"\n\n\ngetTxBody :: forall era. Tx era -> TxBody era\ngetTxBody (ByronTx Byron.ATxAux { Byron.aTaTx = txbody }) =\n    ByronTxBody txbody\n\ngetTxBody (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxBody tx\n      ShelleyBasedEraAllegra -> getShelleyTxBody tx\n      ShelleyBasedEraMary    -> getShelleyTxBody tx\n  where\n    getShelleyTxBody :: forall ledgerera.\n                        ShelleyLedgerEra era ~ ledgerera\n                     => Shelley.ShelleyBased ledgerera\n                     => Shelley.Tx ledgerera\n                     -> TxBody era\n    getShelleyTxBody Shelley.Tx {\n                       Shelley._body     = txbody,\n                       Shelley._metadata = txmetadata\n                     } =\n      ShelleyTxBody era txbody (strictMaybeToMaybe txmetadata)\n\n\ngetTxWitnesses :: forall era. Tx era -> [Witness era]\ngetTxWitnesses (ByronTx Byron.ATxAux { Byron.aTaWitness = witnesses }) =\n    map ByronKeyWitness\n  . Vector.toList\n  . unAnnotated\n  $ witnesses\n\ngetTxWitnesses (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxWitnesses tx\n      ShelleyBasedEraAllegra -> getShelleyTxWitnesses tx\n      ShelleyBasedEraMary    -> getShelleyTxWitnesses tx\n  where\n    getShelleyTxWitnesses :: forall ledgerera.\n                             ShelleyLedgerEra era ~ ledgerera\n                          => Shelley.ShelleyBased ledgerera\n                          => Shelley.Tx ledgerera\n                          -> [Witness era]\n    getShelleyTxWitnesses Shelley.Tx {\n                            Shelley._witnessSet =\n                              Shelley.WitnessSet\n                                addrWits\n                                msigWits\n                                bootWits\n                          } =\n        map (ShelleyBootstrapWitness era) (Set.elems bootWits)\n     ++ map (ShelleyKeyWitness       era) (Set.elems addrWits)\n     ++ map (ShelleyScriptWitness    era) (Map.elems msigWits)\n\n\nmakeSignedTransaction :: forall era.\n                         [Witness era]\n                      -> TxBody era\n                      -> Tx era\nmakeSignedTransaction witnesses (ByronTxBody txbody) =\n    ByronTx\n  . Byron.annotateTxAux\n  $ Byron.mkTxAux\n      (unAnnotated txbody)\n      (Vector.fromList [ w | ByronKeyWitness w <- witnesses ])\n\nmakeSignedTransaction witnesses (ShelleyTxBody era txbody txmetadata) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraAllegra -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraMary    -> makeShelleySignedTransaction txbody\n  where\n    makeShelleySignedTransaction :: forall ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Shelley.ValidateScript ledgerera\n                                 => Ledger.TxBody ledgerera\n                                 -> Tx era\n    makeShelleySignedTransaction txbody' =\n      ShelleyTx era $\n        Shelley.Tx\n          txbody'\n          (Shelley.WitnessSet\n            (Set.fromList [ w | ShelleyKeyWitness _ w <- witnesses ])\n            (Map.fromList [ (Shelley.hashScript sw, sw)\n                          | ShelleyScriptWitness _ sw <- witnesses ])\n            (Set.fromList [ w | ShelleyBootstrapWitness _ w <- witnesses ]))\n          (maybeToStrictMaybe txmetadata)\n\n\nmakeByronKeyWitness :: NetworkId\n                    -> TxBody ByronEra\n                    -> SigningKey ByronKey\n                    -> Witness ByronEra\nmakeByronKeyWitness _ (ShelleyTxBody era _ _) = case era of {}\nmakeByronKeyWitness nw (ByronTxBody txbody) =\n    let txhash :: Byron.Hash Byron.Tx\n        txhash = Byron.hashDecoded txbody\n\n        pm :: Byron.ProtocolMagicId\n        pm = toByronProtocolMagicId nw\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\(ByronSigningKey sk) ->\n        ByronKeyWitness $\n          Byron.VKWitness\n            (Byron.toVerification sk)\n            (Byron.sign pm Byron.SignTx sk (Byron.TxSigData txhash))\n\n-- | Either a network ID or a Byron address to be used in constructing a\n-- Shelley bootstrap witness.\ndata WitnessNetworkIdOrByronAddress\n  = WitnessNetworkId !NetworkId\n  -- ^ Network ID.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- the result will not consist of a derivation path. If that is required,\n  -- specify a 'WitnessByronAddress' value instead.\n  | WitnessByronAddress !(Address ByronAddr)\n  -- ^ Byron address.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- both the network ID and derivation path will be extracted from the\n  -- address and used in the construction of the witness.\n\nmakeShelleyBootstrapWitness :: forall era.\n                               IsShelleyBasedEra era\n                            => WitnessNetworkIdOrByronAddress\n                            -> TxBody era\n                            -> SigningKey ByronKey\n                            -> Witness era\nmakeShelleyBootstrapWitness _ ByronTxBody{} _ =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\nmakeShelleyBootstrapWitness nwOrAddr (ShelleyTxBody era txbody _) sk =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraAllegra -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraMary    -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n\nmakeShelleyBasedBootstrapWitness :: forall era ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Ledger.Crypto ledgerera ~ StandardCrypto\n                                 => ShelleyBasedEra era\n                                 -> WitnessNetworkIdOrByronAddress\n                                 -> Ledger.TxBody ledgerera\n                                 -> SigningKey ByronKey\n                                 -> Witness era\nmakeShelleyBasedBootstrapWitness era nwOrAddr txbody (ByronSigningKey sk) =\n    ShelleyBootstrapWitness era $\n      -- Byron era witnesses were weird. This reveals all that weirdness.\n      Shelley.BootstrapWitness {\n        Shelley.bwKey        = vk,\n        Shelley.bwSig        = signature,\n        Shelley.bwChainCode  = chainCode,\n        Shelley.bwAttributes = attributes\n      }\n  where\n    -- Starting with the easy bits: we /can/ convert the Byron verification key\n    -- to a the pair of a Shelley verification key plus the chain code.\n    --\n    (vk, chainCode) = Shelley.unpackByronVKey (Byron.toVerification sk)\n\n    -- Now the hairy bits.\n    --\n    -- Byron era signing keys were all /extended/ ed25519 keys. We have to\n    -- produce a signature using this extended signing key directly. They\n    -- /cannot/ be converted to a plain (non-extended) signing keys. Since we\n    -- now support extended signing keys for the Shelley too, we are able to\n    -- reuse that here.\n    --\n    signature :: Shelley.SignedDSIGN StandardCrypto\n                  (Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody)\n    signature = makeShelleySignature\n                  txhash\n                  -- Make the signature with the extended key directly:\n                  (ShelleyExtendedSigningKey (Byron.unSigningKey sk))\n\n    txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n    txhash = Shelley.hashAnnotated txbody\n    --TODO: use Shelley.eraIndTxBodyHash txbody once that function has a\n    -- suitably general type.\n\n    -- And finally we need to provide the extra suffix bytes necessary to\n    -- reconstruct the mini-Merkel tree that is a Byron address. The suffix\n    -- bytes are the serialised address attributes.\n    attributes =\n      CBOR.serialize' $\n        Byron.mkAttributes Byron.AddrAttributes {\n          Byron.aaVKDerivationPath = derivationPath,\n          Byron.aaNetworkMagic     = networkMagic\n        }\n\n    -- The 'WitnessNetworkIdOrByronAddress' value converted to an 'Either'.\n    eitherNwOrAddr :: Either NetworkId (Address ByronAddr)\n    eitherNwOrAddr =\n      case nwOrAddr of\n        WitnessNetworkId nw -> Left nw\n        WitnessByronAddress addr -> Right addr\n\n    unByronAddr :: Address ByronAddr -> Byron.Address\n    unByronAddr (ByronAddress addr) = addr\n\n    unAddrAttrs :: Address ByronAddr -> Byron.AddrAttributes\n    unAddrAttrs = Byron.attrData . Byron.addrAttributes . unByronAddr\n\n    derivationPath :: Maybe Byron.HDAddressPayload\n    derivationPath =\n      either\n        (const Nothing)\n        (Byron.aaVKDerivationPath . unAddrAttrs)\n        eitherNwOrAddr\n\n    networkMagic :: Byron.NetworkMagic\n    networkMagic =\n      either\n        toByronNetworkMagic\n        (Byron.aaNetworkMagic . unAddrAttrs)\n        eitherNwOrAddr\n\n\ndata ShelleyWitnessSigningKey =\n       WitnessPaymentKey         (SigningKey PaymentKey)\n     | WitnessPaymentExtendedKey (SigningKey PaymentExtendedKey)\n     | WitnessStakeKey           (SigningKey StakeKey)\n     | WitnessStakeExtendedKey   (SigningKey StakeExtendedKey)\n     | WitnessStakePoolKey       (SigningKey StakePoolKey)\n     | WitnessGenesisKey         (SigningKey GenesisKey)\n     | WitnessGenesisExtendedKey (SigningKey GenesisExtendedKey)\n     | WitnessGenesisDelegateKey (SigningKey GenesisDelegateKey)\n     | WitnessGenesisDelegateExtendedKey\n                                 (SigningKey GenesisDelegateExtendedKey)\n     | WitnessGenesisUTxOKey     (SigningKey GenesisUTxOKey)\n\n\nmakeShelleyKeyWitness :: forall era.\n                         IsShelleyBasedEra era\n                      => TxBody era\n                      -> ShelleyWitnessSigningKey\n                      -> Witness era\nmakeShelleyKeyWitness (ShelleyTxBody era txbody _) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraAllegra -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraMary    -> makeShelleyBasedKeyWitness txbody\n  where\n    makeShelleyBasedKeyWitness :: forall ledgerera.\n                                  ShelleyLedgerEra era ~ ledgerera\n                               => Shelley.ShelleyBased ledgerera\n                               => Ledger.Crypto ledgerera ~ StandardCrypto\n                               => Ledger.TxBody ledgerera\n                               -> ShelleyWitnessSigningKey\n                               -> Witness era\n    makeShelleyBasedKeyWitness txbody' =\n\n     let txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n         txhash = Shelley.hashAnnotated txbody'\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\wsk ->\n        let sk        = toShelleySigningKey wsk\n            vk        = getShelleyKeyWitnessVerificationKey sk\n            signature = makeShelleySignature txhash sk\n         in ShelleyKeyWitness era $\n              Shelley.WitVKey vk signature\n\nmakeShelleyKeyWitness ByronTxBody{} =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\n\n-- | We support making key witnesses with both normal and extended signing keys.\n--\ndata ShelleySigningKey =\n       -- | A normal ed25519 signing key\n       ShelleyNormalSigningKey   (Shelley.SignKeyDSIGN StandardCrypto)\n\n       -- | An extended ed25519 signing key\n     | ShelleyExtendedSigningKey Crypto.HD.XPrv\n\n\ntoShelleySigningKey :: ShelleyWitnessSigningKey -> ShelleySigningKey\ntoShelleySigningKey key = case key of\n  WitnessPaymentKey     (PaymentSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessStakeKey       (StakeSigningKey       sk) -> ShelleyNormalSigningKey sk\n  WitnessStakePoolKey   (StakePoolSigningKey   sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisKey     (GenesisSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisUTxOKey (GenesisUTxOSigningKey sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisDelegateKey (GenesisDelegateSigningKey sk) ->\n    ShelleyNormalSigningKey sk\n\n  -- The cases for extended keys\n  WitnessPaymentExtendedKey (PaymentExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessStakeExtendedKey (StakeExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisExtendedKey (GenesisExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisDelegateExtendedKey (GenesisDelegateExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n\ngetShelleyKeyWitnessVerificationKey\n  :: ShelleySigningKey\n  -> Shelley.VKey Shelley.Witness StandardCrypto\ngetShelleyKeyWitnessVerificationKey (ShelleyNormalSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . getVerificationKey\n    . PaymentSigningKey\n    $ sk\n\ngetShelleyKeyWitnessVerificationKey (ShelleyExtendedSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . (castVerificationKey :: VerificationKey PaymentExtendedKey\n                           -> VerificationKey PaymentKey)\n    . getVerificationKey\n    . PaymentExtendedSigningKey\n    $ sk\n\n\nmakeShelleySignature\n  :: Crypto.SignableRepresentation tosign\n  => tosign\n  -> ShelleySigningKey\n  -> Shelley.SignedDSIGN StandardCrypto tosign\nmakeShelleySignature tosign (ShelleyNormalSigningKey sk) =\n    Crypto.signedDSIGN () tosign sk\n\nmakeShelleySignature tosign (ShelleyExtendedSigningKey sk) =\n    fromXSignature $\n      Crypto.HD.sign\n        BS.empty  -- passphrase for (unused) in-memory encryption\n        sk\n        (Crypto.getSignableRepresentation tosign)\n  where\n    fromXSignature :: Crypto.HD.XSignature\n                   -> Shelley.SignedDSIGN StandardCrypto b\n    fromXSignature =\n        Crypto.SignedDSIGN\n      . fromMaybe impossible\n      . Crypto.rawDeserialiseSigDSIGN\n      . Crypto.HD.unXSignature\n\n    impossible =\n      error \"makeShelleyKeyWitnessSignature: byron and shelley signature sizes do not match\"\n\n\nmakeScriptWitness :: forall era. ScriptInEra era -> Witness era\nmakeScriptWitness s = ShelleyScriptWitness\n                        (eraOfScriptInEra s)\n                        (toShelleyScript s)\n\n\n-- order of signing keys must match txins\nsignByronTransaction :: NetworkId\n                     -> TxBody ByronEra\n                     -> [SigningKey ByronKey]\n                     -> Tx ByronEra\nsignByronTransaction nw txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeByronKeyWitness nw txbody) sks\n\n-- signing keys is a set\nsignShelleyTransaction :: IsShelleyBasedEra era\n                       => TxBody era\n                       -> [ShelleyWitnessSigningKey]\n                       -> Tx era\nsignShelleyTransaction txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeShelleyKeyWitness txbody) sks\n\n"}}}
2020-12-02 21:05:26.154349785 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-02 21:05:26.154594154 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":20,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-02 21:05:26.154680915 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs",Modified)]
2020-12-02 21:05:26.155148635 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 21:05:26.155294433 [ThreadId 242] - Finishing build session(exception: AsyncCancelled)
2020-12-02 21:05:26.155228845 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-02 21:05:26.233672884 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"1/5"},"token":"4"},"method":"$/progress"}
2020-12-02 21:05:26.367809331 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":21,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-02 21:05:26.368107668 [ThreadId 362] - Plugin.makeCodeLens (ideLogger)
2020-12-02 21:05:26.368258672 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":668,"character":45},"end":{"line":668,"character":59}},"context":{"diagnostics":[]}}}
2020-12-02 21:05:26.368427906 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":19}}
2020-12-02 21:05:26.368619286 [ThreadId 329] - CodeAction was cancelled
2020-12-02 21:05:26.36868869 [ThreadId 318] - Cancelled request IdInt 19
2020-12-02 21:05:26.368821174 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":19}
2020-12-02 21:05:36.891414534 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-02 21:05:36.891596364 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}
2020-12-02 21:05:36.891690177 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":21}}
2020-12-02 21:05:36.891799669 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":22}}
2020-12-02 21:05:36.891902921 [ThreadId 362] - codeLens was cancelled
2020-12-02 21:05:36.891903791 [ThreadId 367] - CodeAction was cancelled
2020-12-02 21:05:36.891971151 [ThreadId 360] - Cancelled request IdInt 21
2020-12-02 21:05:36.891890277 [ThreadId 25] - Set files of interest to: []
2020-12-02 21:05:36.891984859 [ThreadId 365] - Cancelled request IdInt 22
2020-12-02 21:05:36.892064665 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-02 21:05:36.892100319 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":21}
2020-12-02 21:05:36.892196704 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":22}
2020-12-02 21:05:36.89231358 [ThreadId 378] - Data.HashMap.Internal.(!): key not found
CallStack (from HasCallStack):
  error, called at ./Data/HashMap/Internal.hs:756:16 in unordered-containers-0.2.13.0-f519383be173bea40a77beaaf5249f6ae8af1a29545fb7d3d57c773b8188dc00:Data.HashMap.Internal
  !, called at src/Development/IDE/Import/DependencyInformation.hs:107:40 in ghcide-0.4.0-inplace:Development.IDE.Import.DependencyInformation
2020-12-02 21:05:36.892407244 [ThreadId 378] - finish: ParentTC (took 0.00s)
2020-12-02 21:05:36.930297786 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE ConstraintKinds #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TupleSections #-}\n{-# LANGUAGE TypeApplications #-}\n\n{-# OPTIONS_GHC -Wno-unticked-promoted-constructors #-}\n\nmodule Cardano.CLI.Shelley.Run.Genesis\n  ( ShelleyGenesisCmdError\n  , renderShelleyGenesisCmdError\n  , runGenesisCmd\n  ) where\n\nimport           Cardano.Prelude\nimport           Prelude (id)\n\nimport qualified Data.Aeson as Aeson\nimport           Data.Aeson.Encode.Pretty (encodePretty)\nimport qualified Data.Binary.Get as Bin\nimport qualified Data.ByteString.Char8 as BS\nimport qualified Data.ByteString.Lazy.Char8 as LBS\nimport           Data.Coerce (coerce)\nimport qualified Data.List as List\nimport qualified Data.List.Split as List\nimport qualified Data.Map.Strict as Map\n\nimport qualified Data.Sequence.Strict as Seq\nimport           Data.String (fromString)\nimport qualified Data.Text as Text\nimport qualified Data.Text.IO as Text\nimport           Data.Time.Clock (NominalDiffTime, UTCTime, addUTCTime, getCurrentTime)\n\nimport           Cardano.Binary (ToCBOR(..))\n\nimport           Cardano.Crypto.Hash (HashAlgorithm)\nimport qualified Cardano.Crypto.Hash as Hash\nimport qualified Cardano.Crypto.Random as Crypto\nimport           Crypto.Random as Crypto\n\nimport           Cardano.Ledger.Crypto (ADDRHASH, Crypto)\n\nimport           System.Directory (createDirectoryIfMissing, listDirectory)\nimport           System.FilePath (takeExtension, takeExtensions, (</>))\nimport           System.IO.Error (isDoesNotExistError)\n\nimport           Control.Monad.Trans.Except.Extra (firstExceptT, handleIOExceptT, hoistEither, left,\n                     newExceptT)\n\nimport qualified Cardano.Crypto.Hash as Crypto\n\nimport           Cardano.Api.Shelley.Genesis\nimport           Cardano.Api.Typed\nimport           Cardano.Api.Shelley\n\nimport           Ouroboros.Consensus.BlockchainTime (SystemStart (..))\nimport           Ouroboros.Consensus.Shelley.Protocol (StandardCrypto)\nimport           Ouroboros.Consensus.Shelley.Node (ShelleyGenesisStaking(..))\n\nimport qualified Shelley.Spec.Ledger.API as Ledger\nimport qualified Shelley.Spec.Ledger.Keys as Ledger\nimport qualified Shelley.Spec.Ledger.BaseTypes as Ledger\n\nimport           Cardano.Ledger.Era ()\n\nimport           Cardano.CLI.Helpers (textShow)\nimport           Cardano.CLI.Shelley.Commands\nimport           Cardano.CLI.Shelley.Key\nimport           Cardano.CLI.Shelley.Parsers (renderTxIn)\nimport           Cardano.CLI.Shelley.Run.Address\nimport           Cardano.CLI.Shelley.Run.Node\n                   (ShelleyNodeCmdError(..), renderShelleyNodeCmdError,\n                    runNodeIssueOpCert, runNodeKeyGenKES, runNodeKeyGenVRF, runNodeKeyGenCold)\nimport           Cardano.CLI.Shelley.Run.Pool\n                   (ShelleyPoolCmdError(..), renderShelleyPoolCmdError)\nimport           Cardano.CLI.Shelley.Run.StakeAddress\n                   (ShelleyStakeAddressCmdError(..),\n                    renderShelleyStakeAddressCmdError, runStakeAddressKeyGen)\nimport           Cardano.CLI.Types\n\n{- HLINT ignore \"Reduce duplication\" -}\n\ndata ShelleyGenesisCmdError\n  = ShelleyGenesisCmdAesonDecodeError !FilePath !Text\n  | ShelleyGenesisCmdGenesisFileError !(FileError ())\n  | ShelleyGenesisCmdFileError !(FileError ())\n  | ShelleyGenesisCmdMismatchedGenesisKeyFiles [Int] [Int] [Int]\n  | ShelleyGenesisCmdFilesNoIndex [FilePath]\n  | ShelleyGenesisCmdFilesDupIndex [FilePath]\n  | ShelleyGenesisCmdTextEnvReadFileError !(FileError TextEnvelopeError)\n  | ShelleyGenesisCmdUnexpectedAddressVerificationKey !VerificationKeyFile !Text !SomeAddressVerificationKey\n  | ShelleyGenesisCmdTooFewPoolsForBulkCreds !Word !Word !Word\n  | ShelleyGenesisCmdAddressCmdError !ShelleyAddressCmdError\n  | ShelleyGenesisCmdNodeCmdError !ShelleyNodeCmdError\n  | ShelleyGenesisCmdPoolCmdError !ShelleyPoolCmdError\n  | ShelleyGenesisCmdStakeAddressCmdError !ShelleyStakeAddressCmdError\n  deriving Show\n\nrenderShelleyGenesisCmdError :: ShelleyGenesisCmdError -> Text\nrenderShelleyGenesisCmdError err =\n  case err of\n    ShelleyGenesisCmdAesonDecodeError fp decErr ->\n      \"Error while decoding Shelley genesis at: \" <> textShow fp <> \" Error: \" <> textShow decErr\n    ShelleyGenesisCmdGenesisFileError fe -> Text.pack $ displayError fe\n    ShelleyGenesisCmdFileError fe -> Text.pack $ displayError fe\n    ShelleyGenesisCmdMismatchedGenesisKeyFiles gfiles dfiles vfiles ->\n      \"Mismatch between the files found:\\n\"\n        <> \"Genesis key file indexes:      \" <> textShow gfiles <> \"\\n\"\n        <> \"Delegate key file indexes:     \" <> textShow dfiles <> \"\\n\"\n        <> \"Delegate VRF key file indexes: \" <> textShow vfiles\n    ShelleyGenesisCmdFilesNoIndex files ->\n      \"The genesis keys files are expected to have a numeric index but these do not:\\n\"\n        <> Text.unlines (map Text.pack files)\n    ShelleyGenesisCmdFilesDupIndex files ->\n      \"The genesis keys files are expected to have a unique numeric index but these do not:\\n\"\n        <> Text.unlines (map Text.pack files)\n    ShelleyGenesisCmdTextEnvReadFileError fileErr -> Text.pack $ displayError fileErr\n    ShelleyGenesisCmdUnexpectedAddressVerificationKey (VerificationKeyFile file) expect got -> mconcat\n      [ \"Unexpected address verification key type in file \", Text.pack file\n      , \", expected: \", expect, \", got: \", textShow got\n      ]\n    ShelleyGenesisCmdTooFewPoolsForBulkCreds pools files perPool -> mconcat\n      [ \"Number of pools requested for generation (\", textShow pools\n      , \") is insufficient to fill \", textShow files\n      , \" bulk files, with \", textShow perPool, \" pools per file.\"\n      ]\n    ShelleyGenesisCmdAddressCmdError e -> renderShelleyAddressCmdError e\n    ShelleyGenesisCmdNodeCmdError e -> renderShelleyNodeCmdError e\n    ShelleyGenesisCmdPoolCmdError e -> renderShelleyPoolCmdError e\n    ShelleyGenesisCmdStakeAddressCmdError e -> renderShelleyStakeAddressCmdError e\n\n\nrunGenesisCmd :: GenesisCmd -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisCmd (GenesisKeyGenGenesis vk sk) = runGenesisKeyGenGenesis vk sk\nrunGenesisCmd (GenesisKeyGenDelegate vk sk ctr) = runGenesisKeyGenDelegate vk sk ctr\nrunGenesisCmd (GenesisKeyGenUTxO vk sk) = runGenesisKeyGenUTxO vk sk\nrunGenesisCmd (GenesisCmdKeyHash vk) = runGenesisKeyHash vk\nrunGenesisCmd (GenesisVerKey vk sk) = runGenesisVerKey vk sk\nrunGenesisCmd (GenesisTxIn vk nw mOutFile) = runGenesisTxIn vk nw mOutFile\nrunGenesisCmd (GenesisAddr vk nw mOutFile) = runGenesisAddr vk nw mOutFile\nrunGenesisCmd (GenesisCreate gd gn un ms am nw) = runGenesisCreate gd gn un ms am nw\nrunGenesisCmd (GenesisCreateStaked gd gn gp gl un ms am ds nw bf bp su) = runGenesisCreateStaked gd gn gp gl un ms am ds nw bf bp su\nrunGenesisCmd (GenesisHashFile gf) = runGenesisHashFile gf\n\n--\n-- Genesis command implementations\n--\n\nrunGenesisKeyGenGenesis :: VerificationKeyFile -> SigningKeyFile\n                        -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisKeyGenGenesis (VerificationKeyFile vkeyPath)\n                        (SigningKeyFile skeyPath) = do\n    skey <- liftIO $ generateSigningKey AsGenesisKey\n    let vkey = getVerificationKey skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope skeyPath (Just skeyDesc) skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope vkeyPath (Just vkeyDesc) vkey\n  where\n    skeyDesc, vkeyDesc :: TextEnvelopeDescr\n    skeyDesc = \"Genesis Signing Key\"\n    vkeyDesc = \"Genesis Verification Key\"\n\n\nrunGenesisKeyGenDelegate :: VerificationKeyFile\n                         -> SigningKeyFile\n                         -> OpCertCounterFile\n                         -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisKeyGenDelegate (VerificationKeyFile vkeyPath)\n                         (SigningKeyFile skeyPath)\n                         (OpCertCounterFile ocertCtrPath) = do\n    skey <- liftIO $ generateSigningKey AsGenesisDelegateKey\n    let vkey = getVerificationKey skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope skeyPath (Just skeyDesc) skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope vkeyPath (Just vkeyDesc) vkey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope ocertCtrPath (Just certCtrDesc)\n      $ OperationalCertificateIssueCounter\n          initialCounter\n          (castVerificationKey vkey)  -- Cast to a 'StakePoolKey'\n  where\n    skeyDesc, vkeyDesc, certCtrDesc :: TextEnvelopeDescr\n    skeyDesc = \"Genesis delegate operator key\"\n    vkeyDesc = \"Genesis delegate operator key\"\n    certCtrDesc = \"Next certificate issue number: \"\n               <> fromString (show initialCounter)\n\n    initialCounter :: Word64\n    initialCounter = 0\n\n\nrunGenesisKeyGenDelegateVRF :: VerificationKeyFile -> SigningKeyFile\n                            -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisKeyGenDelegateVRF (VerificationKeyFile vkeyPath)\n                            (SigningKeyFile skeyPath) = do\n    skey <- liftIO $ generateSigningKey AsVrfKey\n    let vkey = getVerificationKey skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope skeyPath (Just skeyDesc) skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope vkeyPath (Just vkeyDesc) vkey\n  where\n    skeyDesc, vkeyDesc :: TextEnvelopeDescr\n    skeyDesc = \"VRF Signing Key\"\n    vkeyDesc = \"VRF Verification Key\"\n\n\nrunGenesisKeyGenUTxO :: VerificationKeyFile -> SigningKeyFile\n                     -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisKeyGenUTxO (VerificationKeyFile vkeyPath)\n                     (SigningKeyFile skeyPath) = do\n    skey <- liftIO $ generateSigningKey AsGenesisUTxOKey\n    let vkey = getVerificationKey skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope skeyPath (Just skeyDesc) skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope vkeyPath (Just vkeyDesc) vkey\n  where\n    skeyDesc, vkeyDesc :: TextEnvelopeDescr\n    skeyDesc = \"Genesis Initial UTxO Signing Key\"\n    vkeyDesc = \"Genesis Initial UTxO Verification Key\"\n\n\nrunGenesisKeyHash :: VerificationKeyFile -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisKeyHash (VerificationKeyFile vkeyPath) = do\n    vkey <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError . newExceptT $\n            readFileTextEnvelopeAnyOf\n              [ FromSomeType (AsVerificationKey AsGenesisKey)\n                             AGenesisKey\n              , FromSomeType (AsVerificationKey AsGenesisDelegateKey)\n                             AGenesisDelegateKey\n              , FromSomeType (AsVerificationKey AsGenesisUTxOKey)\n                             AGenesisUTxOKey\n              ]\n              vkeyPath\n    liftIO $ BS.putStrLn (renderKeyHash vkey)\n  where\n    renderKeyHash :: SomeGenesisKey VerificationKey -> ByteString\n    renderKeyHash (AGenesisKey         vk) = renderVerificationKeyHash vk\n    renderKeyHash (AGenesisDelegateKey vk) = renderVerificationKeyHash vk\n    renderKeyHash (AGenesisUTxOKey     vk) = renderVerificationKeyHash vk\n\n    renderVerificationKeyHash :: Key keyrole => VerificationKey keyrole -> ByteString\n    renderVerificationKeyHash = serialiseToRawBytesHex\n                              . verificationKeyHash\n\n\nrunGenesisVerKey :: VerificationKeyFile -> SigningKeyFile\n                 -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisVerKey (VerificationKeyFile vkeyPath) (SigningKeyFile skeyPath) = do\n    skey <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError . newExceptT $\n            readFileTextEnvelopeAnyOf\n              [ FromSomeType (AsSigningKey AsGenesisKey)\n                             AGenesisKey\n              , FromSomeType (AsSigningKey AsGenesisDelegateKey)\n                             AGenesisDelegateKey\n              , FromSomeType (AsSigningKey AsGenesisUTxOKey)\n                             AGenesisUTxOKey\n              ]\n              skeyPath\n\n    let vkey :: SomeGenesisKey VerificationKey\n        vkey = case skey of\n          AGenesisKey         sk -> AGenesisKey         (getVerificationKey sk)\n          AGenesisDelegateKey sk -> AGenesisDelegateKey (getVerificationKey sk)\n          AGenesisUTxOKey     sk -> AGenesisUTxOKey     (getVerificationKey sk)\n\n    firstExceptT ShelleyGenesisCmdGenesisFileError . newExceptT . liftIO $\n      case vkey of\n        AGenesisKey         vk -> writeFileTextEnvelope vkeyPath Nothing vk\n        AGenesisDelegateKey vk -> writeFileTextEnvelope vkeyPath Nothing vk\n        AGenesisUTxOKey     vk -> writeFileTextEnvelope vkeyPath Nothing vk\n\ndata SomeGenesisKey f\n     = AGenesisKey         (f GenesisKey)\n     | AGenesisDelegateKey (f GenesisDelegateKey)\n     | AGenesisUTxOKey     (f GenesisUTxOKey)\n\n\nrunGenesisTxIn :: VerificationKeyFile -> NetworkId -> Maybe OutputFile\n               -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisTxIn (VerificationKeyFile vkeyPath) network mOutFile = do\n    vkey <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError . newExceptT $\n            readFileTextEnvelope (AsVerificationKey AsGenesisUTxOKey) vkeyPath\n    let txin = genesisUTxOPseudoTxIn network (verificationKeyHash vkey)\n    liftIO $ writeOutput mOutFile (renderTxIn txin)\n\n\nrunGenesisAddr :: VerificationKeyFile -> NetworkId -> Maybe OutputFile\n               -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisAddr (VerificationKeyFile vkeyPath) network mOutFile = do\n    vkey <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError . newExceptT $\n            readFileTextEnvelope (AsVerificationKey AsGenesisUTxOKey) vkeyPath\n    let vkh  = verificationKeyHash (castVerificationKey vkey)\n        addr = makeShelleyAddress network (PaymentCredentialByKey vkh)\n                                  NoStakeAddress\n    liftIO $ writeOutput mOutFile (serialiseAddress addr)\n\nwriteOutput :: Maybe OutputFile -> Text -> IO ()\nwriteOutput (Just (OutputFile fpath)) = Text.writeFile fpath\nwriteOutput Nothing                   = Text.putStrLn\n\n\n--\n-- Create Genesis command implementation\n--\n\nrunGenesisCreate :: GenesisDir\n                 -> Word  -- ^ num genesis & delegate keys to make\n                 -> Word  -- ^ num utxo keys to make\n                 -> Maybe SystemStart\n                 -> Maybe Lovelace\n                 -> NetworkId\n                 -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisCreate (GenesisDir rootdir)\n                 genNumGenesisKeys genNumUTxOKeys\n                 mStart mAmount network = do\n  liftIO $ do\n    createDirectoryIfMissing False rootdir\n    createDirectoryIfMissing False gendir\n    createDirectoryIfMissing False deldir\n    createDirectoryIfMissing False utxodir\n\n  template <- readShelleyGenesis (rootdir </> \"genesis.spec.json\") adjustTemplate\n\n  forM_ [ 1 .. genNumGenesisKeys ] $ \\index -> do\n    createGenesisKeys  gendir  index\n    createDelegateKeys deldir index\n\n  forM_ [ 1 .. genNumUTxOKeys ] $ \\index ->\n    createUtxoKeys utxodir index\n\n  genDlgs <- readGenDelegsMap gendir deldir\n  utxoAddrs <- readInitialFundAddresses utxodir network\n  start <- maybe (SystemStart <$> getCurrentTimePlus30) pure mStart\n\n  let finalGenesis = updateTemplate start genDlgs mAmount utxoAddrs mempty (Lovelace 0) [] [] template\n\n  writeShelleyGenesis (rootdir </> \"genesis.json\") finalGenesis\n  where\n    adjustTemplate t = t { sgNetworkMagic = unNetworkMagic (toNetworkMagic network) }\n    gendir  = rootdir </> \"genesis-keys\"\n    deldir  = rootdir </> \"delegate-keys\"\n    utxodir = rootdir </> \"utxo-keys\"\n\nrunGenesisCreateStaked\n  :: GenesisDir\n  -> Word           -- ^ num genesis & delegate keys to make\n  -> Word           -- ^ num utxo keys to make\n  -> Word           -- ^ num pools to make\n  -> Word           -- ^ num delegators to make\n  -> Maybe SystemStart\n  -> Maybe Lovelace -- ^ supply going to non-delegators\n  -> Lovelace       -- ^ supply going to delegators\n  -> NetworkId\n  -> Word           -- ^ bulk credential files to write\n  -> Word           -- ^ pool credentials per bulk file\n  -> Word           -- ^ num stuffed UTxO entries\n  -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisCreateStaked (GenesisDir rootdir)\n                 genNumGenesisKeys genNumUTxOKeys genNumPools genNumStDelegs\n                 mStart mNonDlgAmount stDlgAmount network\n                 bulkPoolCredFiles bulkPoolsPerFile numStuffedUtxo = do\n  liftIO $ do\n    createDirectoryIfMissing False rootdir\n    createDirectoryIfMissing False gendir\n    createDirectoryIfMissing False deldir\n    createDirectoryIfMissing False pooldir\n    createDirectoryIfMissing False stdeldir\n    createDirectoryIfMissing False utxodir\n\n  template <- readShelleyGenesis (rootdir </> \"genesis.spec.json\") adjustTemplate\n\n  forM_ [ 1 .. genNumGenesisKeys ] $ \\index -> do\n    createGenesisKeys  gendir  index\n    createDelegateKeys deldir index\n\n  forM_ [ 1 .. genNumUTxOKeys ] $ \\index ->\n    createUtxoKeys utxodir index\n\n  pools <- forM [ 1 .. genNumPools ] $ \\index -> do\n    createPoolCredentials pooldir index\n    buildPool network pooldir index\n\n  when (bulkPoolCredFiles * bulkPoolsPerFile > genNumPools) $\n    left $ ShelleyGenesisCmdTooFewPoolsForBulkCreds  genNumPools bulkPoolCredFiles bulkPoolsPerFile\n  -- We generate the bulk files for the last pool indices,\n  -- so that all the non-bulk pools have stable indices at beginning:\n  let bulkOffset  = fromIntegral $ genNumPools - bulkPoolCredFiles * bulkPoolsPerFile\n      bulkIndices :: [Word]   = [ 1 + bulkOffset .. genNumPools ]\n      bulkSlices  :: [[Word]] = List.chunksOf (fromIntegral bulkPoolsPerFile) bulkIndices\n  forM_ (zip [ 1 .. bulkPoolCredFiles ] bulkSlices) $\n    uncurry (writeBulkPoolCredentials pooldir)\n\n  forM_ [ 1 .. genNumStDelegs ] $ \\index ->\n    createDelegatorCredentials stdeldir index\n\n  delegations :: [Delegation] <-\n    -- Distribute M delegates across N pools:\n    forM [ (pool, delegIx)\n         | (pool, poolIx) <- zip pools [1 ..]\n         , delegIxLocal <- [ 1 .. delegsPerPool ] ++\n                           -- Add all remaining delegates to the last pool:\n                           if delegsRemaining /= 0 && poolIx == genNumPools\n                           then [ delegsPerPool + 1 .. delegsPerPool + delegsRemaining ]\n                           else []\n         , let delegIx = delegIxLocal + delegsPerPool * (poolIx - 1)] $\n      uncurry (computeDelegation network stdeldir)\n\n  genDlgs <- readGenDelegsMap gendir deldir\n  nonDelegAddrs <- readInitialFundAddresses utxodir network\n  start <- maybe (SystemStart <$> getCurrentTimePlus30) pure mStart\n\n  stuffedUtxoAddrs <- liftIO $ replicateM (fromIntegral numStuffedUtxo)\n                      genStuffedAddress\n\n  let poolMap :: Map (Ledger.KeyHash Ledger.Staking StandardCrypto) (Ledger.PoolParams StandardShelley)\n      poolMap = Map.fromList $ mkDelegationMapEntry <$> delegations\n      delegAddrs = dInitialUtxoAddr <$> delegations\n      finalGenesis = updateTemplate start genDlgs mNonDlgAmount nonDelegAddrs poolMap stDlgAmount delegAddrs stuffedUtxoAddrs template\n\n  writeShelleyGenesis (rootdir </> \"genesis.json\") finalGenesis\n  liftIO $ Text.putStrLn $ mconcat $\n    [ \"generated genesis with: \"\n    , textShow genNumGenesisKeys, \" genesis keys, \"\n    , textShow genNumUTxOKeys, \" non-delegating UTxO keys, \"\n    , textShow genNumPools, \" stake pools, \"\n    , textShow genNumStDelegs, \" delegating UTxO keys, \"\n    , textShow (length delegations), \" delegation relationships, \"\n    , textShow (Map.size poolMap), \" delegation map entries, \"\n    , textShow (length delegAddrs), \" delegating addresses\"\n    ] ++\n    [ mconcat\n      [ \", \"\n      , textShow bulkPoolCredFiles, \" bulk pool credential files, \"\n      , textShow bulkPoolsPerFile, \" pools per bulk credential file, indices starting from \"\n      , textShow bulkOffset, \", \"\n      , textShow $ length bulkIndices, \" total pools in bulk nodes, each bulk node having this many entries: \"\n      , textShow $ length <$> bulkSlices\n      ]\n    | bulkPoolCredFiles * bulkPoolsPerFile > 0 ]\n\n  where\n    (,) delegsPerPool delegsRemaining = divMod genNumStDelegs genNumPools\n    adjustTemplate t = t { sgNetworkMagic = unNetworkMagic (toNetworkMagic network) }\n    mkDelegationMapEntry :: Delegation -> (Ledger.KeyHash Ledger.Staking StandardCrypto, Ledger.PoolParams StandardShelley)\n    mkDelegationMapEntry d = (dDelegStaking d, dPoolParams d)\n\n    gendir   = rootdir </> \"genesis-keys\"\n    deldir   = rootdir </> \"delegate-keys\"\n    pooldir  = rootdir </> \"pools\"\n    stdeldir = rootdir </> \"stake-delegator-keys\"\n    utxodir  = rootdir </> \"utxo-keys\"\n\n    genStuffedAddress :: IO (AddressInEra ShelleyEra)\n    genStuffedAddress =\n      shelleyAddressInEra <$>\n      (ShelleyAddress\n       <$> pure Ledger.Testnet\n       <*> (Ledger.KeyHashObj . mkKeyHash . read64BitInt\n             <$> Crypto.runSecureRandom (getRandomBytes 8))\n       <*> pure Ledger.StakeRefNull)\n\n    read64BitInt :: ByteString -> Int\n    read64BitInt = (fromIntegral :: Word64 -> Int)\n      . Bin.runGet Bin.getWord64le . LBS.fromStrict\n\n    mkDummyHash :: forall h a. HashAlgorithm h => Proxy h -> Int -> Hash.Hash h a\n    mkDummyHash _ = coerce . Ledger.hashWithSerialiser @h toCBOR\n\n    mkKeyHash :: forall c discriminator. Crypto c => Int -> Ledger.KeyHash discriminator c\n    mkKeyHash = Ledger.KeyHash . mkDummyHash (Proxy @(ADDRHASH c))\n\n-- -------------------------------------------------------------------------------------------------\n\ncreateDelegateKeys :: FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO ()\ncreateDelegateKeys dir index = do\n  liftIO $ createDirectoryIfMissing False dir\n  runGenesisKeyGenDelegate\n        (VerificationKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".vkey\")\n        coldSK\n        opCertCtr\n  runGenesisKeyGenDelegateVRF\n        (VerificationKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".vrf.vkey\")\n        (SigningKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".vrf.skey\")\n  firstExceptT ShelleyGenesisCmdNodeCmdError $ do\n    runNodeKeyGenKES\n        kesVK\n        (SigningKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".kes.skey\")\n    runNodeIssueOpCert\n        (VerificationKeyFilePath kesVK)\n        coldSK\n        opCertCtr\n        (KESPeriod 0)\n        (OutputFile $ dir </> \"opcert\" ++ strIndex ++ \".cert\")\n where\n   strIndex = show index\n   kesVK = VerificationKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".kes.vkey\"\n   coldSK = SigningKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".skey\"\n   opCertCtr = OpCertCounterFile $ dir </> \"delegate\" ++ strIndex ++ \".counter\"\n\ncreateGenesisKeys :: FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO ()\ncreateGenesisKeys dir index = do\n  liftIO $ createDirectoryIfMissing False dir\n  let strIndex = show index\n  runGenesisKeyGenGenesis\n        (VerificationKeyFile $ dir </> \"genesis\" ++ strIndex ++ \".vkey\")\n        (SigningKeyFile $ dir </> \"genesis\" ++ strIndex ++ \".skey\")\n\n\ncreateUtxoKeys :: FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO ()\ncreateUtxoKeys dir index = do\n  liftIO $ createDirectoryIfMissing False dir\n  let strIndex = show index\n  runGenesisKeyGenUTxO\n        (VerificationKeyFile $ dir </> \"utxo\" ++ strIndex ++ \".vkey\")\n        (SigningKeyFile $ dir </> \"utxo\" ++ strIndex ++ \".skey\")\n\ncreatePoolCredentials :: FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO ()\ncreatePoolCredentials dir index = do\n  liftIO $ createDirectoryIfMissing False dir\n  firstExceptT ShelleyGenesisCmdNodeCmdError $ do\n    runNodeKeyGenKES\n        kesVK\n        (SigningKeyFile $ dir </> \"kes\" ++ strIndex ++ \".skey\")\n    runNodeKeyGenVRF\n        (VerificationKeyFile $ dir </> \"vrf\" ++ strIndex ++ \".vkey\")\n        (SigningKeyFile $ dir </> \"vrf\" ++ strIndex ++ \".skey\")\n    runNodeKeyGenCold\n        (VerificationKeyFile $ dir </> \"cold\" ++ strIndex ++ \".vkey\")\n        coldSK\n        opCertCtr\n    runNodeIssueOpCert\n        (VerificationKeyFilePath kesVK)\n        coldSK\n        opCertCtr\n        (KESPeriod 0)\n        (OutputFile $ dir </> \"opcert\" ++ strIndex ++ \".cert\")\n  firstExceptT ShelleyGenesisCmdStakeAddressCmdError $\n    runStakeAddressKeyGen\n        (VerificationKeyFile $ dir </> \"staking-reward\" ++ strIndex ++ \".vkey\")\n        (SigningKeyFile $ dir </> \"staking-reward\" ++ strIndex ++ \".skey\")\n where\n   strIndex = show index\n   kesVK = VerificationKeyFile $ dir </> \"kes\" ++ strIndex ++ \".vkey\"\n   coldSK = SigningKeyFile $ dir </> \"cold\" ++ strIndex ++ \".skey\"\n   opCertCtr = OpCertCounterFile $ dir </> \"opcert\" ++ strIndex ++ \".counter\"\n\ncreateDelegatorCredentials :: FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO ()\ncreateDelegatorCredentials dir index = do\n  liftIO $ createDirectoryIfMissing False dir\n  firstExceptT ShelleyGenesisCmdAddressCmdError $ do\n    runAddressKeyGen\n        AddressKeyShelley\n        addrVK\n        (SigningKeyFile $ dir </> \"payment\" ++ strIndex ++ \".skey\")\n  firstExceptT ShelleyGenesisCmdStakeAddressCmdError $\n    runStakeAddressKeyGen\n        (VerificationKeyFile $ dir </> \"staking\" ++ strIndex ++ \".vkey\")\n        (SigningKeyFile $ dir </> \"staking\" ++ strIndex ++ \".skey\")\n where\n   strIndex = show index\n   addrVK = VerificationKeyFile $ dir </> \"payment\" ++ strIndex ++ \".vkey\"\n\ndata Delegation\n  = Delegation\n    { dInitialUtxoAddr  :: AddressInEra ShelleyEra\n    , dDelegStaking     :: Ledger.KeyHash Ledger.Staking StandardCrypto\n    , dPoolParams       :: Ledger.PoolParams StandardShelley\n    }\n\nbuildPool :: NetworkId -> FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO (Ledger.PoolParams StandardShelley)\nbuildPool nw dir index = do\n    StakePoolVerificationKey poolColdVK <- firstExceptT (ShelleyGenesisCmdPoolCmdError\n                                                         . ShelleyPoolCmdReadFileError)\n      . newExceptT\n      $ readFileTextEnvelope (AsVerificationKey AsStakePoolKey) poolColdVKF\n    VrfVerificationKey poolVrfVK <- firstExceptT (ShelleyGenesisCmdNodeCmdError\n                                                  . ShelleyNodeCmdReadFileError)\n      . newExceptT\n      $ readFileTextEnvelope (AsVerificationKey AsVrfKey) poolVrfVKF\n    rewardsSVK <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError\n      . newExceptT\n      $ readFileTextEnvelope (AsVerificationKey AsStakeKey) poolRewardVKF\n    pure Ledger.PoolParams\n      { Ledger._poolId     = Ledger.hashKey poolColdVK\n      , Ledger._poolVrf    = Ledger.hashVerKeyVRF poolVrfVK\n      , Ledger._poolPledge = Ledger.Coin 0\n      , Ledger._poolCost   = Ledger.Coin 0\n      , Ledger._poolMargin = Ledger.truncateUnitInterval 0\n      , Ledger._poolRAcnt  =\n          toShelleyStakeAddr $ makeStakeAddress nw $ StakeCredentialByKey (verificationKeyHash rewardsSVK)\n      , Ledger._poolOwners = mempty\n      , Ledger._poolRelays = Seq.empty\n      , Ledger._poolMD     = Ledger.SNothing\n      }\n where\n   strIndex = show index\n   poolColdVKF = dir </> \"cold\" ++ strIndex ++ \".vkey\"\n   poolVrfVKF = dir </> \"vrf\" ++ strIndex ++ \".vkey\"\n   poolRewardVKF = dir </> \"staking-reward\" ++ strIndex ++ \".vkey\"\n\nwriteBulkPoolCredentials :: FilePath -> Word -> [Word] -> ExceptT ShelleyGenesisCmdError IO ()\nwriteBulkPoolCredentials dir bulkIx poolIxs = do\n  creds <- mapM readPoolCreds poolIxs\n  handleIOExceptT (ShelleyGenesisCmdFileError . FileIOError bulkFile) $\n    LBS.writeFile bulkFile $ Aeson.encode creds\n where\n   bulkFile = dir </> \"bulk\" ++ show bulkIx ++ \".creds\"\n\n   readPoolCreds :: Word -> ExceptT ShelleyGenesisCmdError IO\n                                   (TextEnvelope, TextEnvelope, TextEnvelope)\n   readPoolCreds ix = do\n     (,,) <$> readEnvelope poolCert\n          <*> readEnvelope poolVrfSKF\n          <*> readEnvelope poolKesSKF\n    where\n      strIndex = show ix\n      poolCert = dir </> \"opcert\" ++ strIndex ++ \".cert\"\n      poolVrfSKF = dir </> \"vrf\" ++ strIndex ++ \".skey\"\n      poolKesSKF = dir </> \"kes\" ++ strIndex ++ \".skey\"\n   readEnvelope :: FilePath -> ExceptT ShelleyGenesisCmdError IO TextEnvelope\n   readEnvelope fp = do\n     content <- handleIOExceptT (ShelleyGenesisCmdFileError . FileIOError fp) $\n                  BS.readFile fp\n     firstExceptT (ShelleyGenesisCmdAesonDecodeError fp . Text.pack) . hoistEither $\n       Aeson.eitherDecodeStrict' content\n\ncomputeDelegation :: NetworkId -> FilePath -> Ledger.PoolParams StandardShelley -> Word -> ExceptT ShelleyGenesisCmdError IO Delegation\ncomputeDelegation nw delegDir pool delegIx = do\n    paySVK <- firstExceptT (ShelleyGenesisCmdAddressCmdError\n                           . ShelleyAddressCmdVerificationKeyTextOrFileError) $\n                 readAddressVerificationKeyTextOrFile\n                   (VktofVerificationKeyFile payVKF)\n    initialUtxoAddr <- case paySVK of\n      APaymentVerificationKey payVK ->\n        firstExceptT ShelleyGenesisCmdAddressCmdError\n        $ buildShelleyAddress payVK (Just . VerificationKeyFilePath . VerificationKeyFile $ stakeVKF) nw\n      _ -> left $ ShelleyGenesisCmdUnexpectedAddressVerificationKey payVKF \"APaymentVerificationKey\" paySVK\n\n    StakeVerificationKey stakeVK <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError\n      . newExceptT\n      $ readFileTextEnvelope (AsVerificationKey AsStakeKey) stakeVKF\n\n    pure Delegation\n      { dInitialUtxoAddr = shelleyAddressInEra initialUtxoAddr\n      , dDelegStaking = Ledger.hashKey stakeVK\n      , dPoolParams = pool\n      }\n where\n   strIndexDeleg = show delegIx\n   payVKF = VerificationKeyFile $ delegDir </> \"payment\" ++ strIndexDeleg ++ \".vkey\"\n   stakeVKF = delegDir </> \"staking\" ++ strIndexDeleg ++ \".vkey\"\n\n-- | Current UTCTime plus 30 seconds\ngetCurrentTimePlus30 :: ExceptT ShelleyGenesisCmdError IO UTCTime\ngetCurrentTimePlus30 =\n    plus30sec <$> liftIO getCurrentTime\n  where\n    plus30sec :: UTCTime -> UTCTime\n    plus30sec = addUTCTime (30 :: NominalDiffTime)\n\n\nreadShelleyGenesis\n  :: FilePath\n  -> (ShelleyGenesis StandardShelley -> ShelleyGenesis StandardShelley)\n  -> ExceptT ShelleyGenesisCmdError IO (ShelleyGenesis StandardShelley)\nreadShelleyGenesis fpath adjustDefaults = do\n    readAndDecode\n      `catchError` \\err ->\n        case err of\n          ShelleyGenesisCmdGenesisFileError (FileIOError _ ioe)\n            | isDoesNotExistError ioe -> writeDefault\n          _                           -> left err\n  where\n    readAndDecode = do\n      lbs <- handleIOExceptT (ShelleyGenesisCmdGenesisFileError . FileIOError fpath) $ LBS.readFile fpath\n      firstExceptT (ShelleyGenesisCmdAesonDecodeError fpath . Text.pack)\n        . hoistEither $ Aeson.eitherDecode' lbs\n\n    defaults :: ShelleyGenesis StandardShelley\n    defaults = adjustDefaults shelleyGenesisDefaults\n\n    writeDefault = do\n      handleIOExceptT (ShelleyGenesisCmdGenesisFileError . FileIOError fpath) $\n        LBS.writeFile fpath (encodePretty defaults)\n      return defaults\n\n\nupdateTemplate\n    :: SystemStart\n    -- Genesis delegation (not stake-based):\n    -> Map (Hash GenesisKey) (Hash GenesisDelegateKey, Hash VrfKey)\n    -- Non-delegated initial UTxO spec:\n    -> Maybe Lovelace\n    -> [AddressInEra ShelleyEra]\n    -- Genesis staking: pools/delegation map & delegated initial UTxO spec:\n    -> Map (Ledger.KeyHash 'Ledger.Staking StandardCrypto) (Ledger.PoolParams StandardShelley)\n    -> Lovelace\n    -> [AddressInEra ShelleyEra]\n    -> [AddressInEra ShelleyEra]\n    -> ShelleyGenesis StandardShelley\n    -> ShelleyGenesis StandardShelley\nupdateTemplate (SystemStart start)\n               genDelegMap mAmountNonDeleg utxoAddrsNonDeleg\n               poolSpecs (Lovelace amountDeleg) utxoAddrsDeleg stuffedUtxoAddrs\n               template =\n    template\n      { sgSystemStart = start\n      , sgMaxLovelaceSupply = fromIntegral $ nonDelegCoin + delegCoin\n      , sgGenDelegs = shelleyDelKeys\n      , sgInitialFunds = Map.fromList\n                          [ (toShelleyAddr addr, toShelleyLovelace v)\n                          | (addr, v) <-\n                            distribute nonDelegCoin utxoAddrsNonDeleg ++\n                            distribute delegCoin    utxoAddrsDeleg ++\n                            mkStuffedUtxo stuffedUtxoAddrs ]\n      , sgStaking =\n        ShelleyGenesisStaking\n          { sgsPools = Map.fromList\n                        [ (Ledger._poolId poolParams, poolParams)\n                        | poolParams <- Map.elems poolSpecs ]\n          , sgsStake = Ledger._poolId <$> poolSpecs\n          }\n      }\n  where\n    nonDelegCoin, delegCoin :: Integer\n    nonDelegCoin = fromIntegral $ fromMaybe (sgMaxLovelaceSupply template) (unLovelace <$> mAmountNonDeleg)\n    delegCoin = fromIntegral amountDeleg\n\n    distribute :: Integer -> [AddressInEra ShelleyEra] -> [(AddressInEra ShelleyEra, Lovelace)]\n    distribute funds addrs =\n      fst $ List.foldl' folder ([], fromIntegral funds) addrs\n     where\n       nAddrs, coinPerAddr, splitThreshold :: Integer\n       nAddrs = fromIntegral $ length addrs\n       coinPerAddr = funds `div` nAddrs\n       splitThreshold = coinPerAddr + nAddrs\n\n       folder :: ([(AddressInEra ShelleyEra, Lovelace)], Integer)\n              -> AddressInEra ShelleyEra\n              -> ([(AddressInEra ShelleyEra, Lovelace)], Integer)\n       folder (acc, rest) addr\n         | rest > splitThreshold =\n             ((addr, Lovelace coinPerAddr) : acc, rest - coinPerAddr)\n         | otherwise = ((addr, Lovelace rest) : acc, 0)\n\n    mkStuffedUtxo :: [AddressInEra ShelleyEra] -> [(AddressInEra ShelleyEra, Lovelace)]\n    mkStuffedUtxo xs = (, Lovelace minUtxoVal) <$> xs\n      where (Coin minUtxoVal) = _minUTxOValue $ sgProtocolParams template\n\n    shelleyDelKeys =\n      Map.fromList\n        [ (gh, Ledger.GenDelegPair gdh h)\n        | (GenesisKeyHash gh,\n           (GenesisDelegateKeyHash gdh, VrfKeyHash h)) <- Map.toList genDelegMap\n        ]\n\n    unLovelace :: Integral a => Lovelace -> a\n    unLovelace (Lovelace coin) = fromIntegral coin\n\nwriteShelleyGenesis :: FilePath -> ShelleyGenesis StandardShelley -> ExceptT ShelleyGenesisCmdError IO ()\nwriteShelleyGenesis fpath sg =\n  handleIOExceptT (ShelleyGenesisCmdGenesisFileError . FileIOError fpath) $ LBS.writeFile fpath (encodePretty sg)\n\n\n-- -------------------------------------------------------------------------------------------------\n\nreadGenDelegsMap :: FilePath -> FilePath\n                 -> ExceptT ShelleyGenesisCmdError IO\n                            (Map (Hash GenesisKey)\n                                 (Hash GenesisDelegateKey, Hash VrfKey))\nreadGenDelegsMap gendir deldir = do\n    gkm <- readGenesisKeys gendir\n    dkm <- readDelegateKeys deldir\n    vkm <- readDelegateVrfKeys deldir\n\n    let combinedMap :: Map Int (VerificationKey GenesisKey,\n                                (VerificationKey GenesisDelegateKey,\n                                 VerificationKey VrfKey))\n        combinedMap =\n          Map.intersectionWith (,)\n            gkm\n            (Map.intersectionWith (,)\n               dkm vkm)\n\n    -- All the maps should have an identical set of keys. Complain if not.\n    let gkmExtra = gkm Map.\\\\ combinedMap\n        dkmExtra = dkm Map.\\\\ combinedMap\n        vkmExtra = vkm Map.\\\\ combinedMap\n    unless (Map.null gkmExtra && Map.null dkmExtra && Map.null vkmExtra) $\n      throwError $ ShelleyGenesisCmdMismatchedGenesisKeyFiles\n                     (Map.keys gkm) (Map.keys dkm) (Map.keys vkm)\n\n    let delegsMap :: Map (Hash GenesisKey)\n                         (Hash GenesisDelegateKey, Hash VrfKey)\n        delegsMap =\n          Map.fromList [ (gh, (dh, vh))\n                       | (g,(d,v)) <- Map.elems combinedMap\n                       , let gh = verificationKeyHash g\n                             dh = verificationKeyHash d\n                             vh = verificationKeyHash v\n                       ]\n\n    pure delegsMap\n\n\nreadGenesisKeys :: FilePath -> ExceptT ShelleyGenesisCmdError IO\n                                       (Map Int (VerificationKey GenesisKey))\nreadGenesisKeys gendir = do\n  files <- liftIO (listDirectory gendir)\n  fileIxs <- extractFileNameIndexes [ gendir </> file\n                                    | file <- files\n                                    , takeExtension file == \".vkey\" ]\n  firstExceptT ShelleyGenesisCmdTextEnvReadFileError $\n    Map.fromList <$>\n      sequence\n        [ (,) ix <$> readKey file\n        | (file, ix) <- fileIxs ]\n  where\n    readKey = newExceptT\n              . readFileTextEnvelope (AsVerificationKey AsGenesisKey)\n\nreadDelegateKeys :: FilePath\n                 -> ExceptT ShelleyGenesisCmdError IO\n                            (Map Int (VerificationKey GenesisDelegateKey))\nreadDelegateKeys deldir = do\n  files <- liftIO (listDirectory deldir)\n  fileIxs <- extractFileNameIndexes [ deldir </> file\n                                    | file <- files\n                                    , takeExtensions file == \".vkey\" ]\n  firstExceptT ShelleyGenesisCmdTextEnvReadFileError $\n    Map.fromList <$>\n      sequence\n        [ (,) ix <$> readKey file\n        | (file, ix) <- fileIxs ]\n  where\n    readKey = newExceptT\n            . readFileTextEnvelope (AsVerificationKey AsGenesisDelegateKey)\n\nreadDelegateVrfKeys :: FilePath -> ExceptT ShelleyGenesisCmdError IO\n                                           (Map Int (VerificationKey VrfKey))\nreadDelegateVrfKeys deldir = do\n  files <- liftIO (listDirectory deldir)\n  fileIxs <- extractFileNameIndexes [ deldir </> file\n                                    | file <- files\n                                    , takeExtensions file == \".vrf.vkey\" ]\n  firstExceptT ShelleyGenesisCmdTextEnvReadFileError $\n    Map.fromList <$>\n      sequence\n        [ (,) ix <$> readKey file\n        | (file, ix) <- fileIxs ]\n  where\n    readKey = newExceptT\n            . readFileTextEnvelope (AsVerificationKey AsVrfKey)\n\n\n-- | The file path is of the form @\"delegate-keys/delegate3.vkey\"@.\n-- This function reads the file and extracts the index (in this case 3).\n--\nextractFileNameIndex :: FilePath -> Maybe Int\nextractFileNameIndex fp =\n  case filter isDigit fp of\n    [] -> Nothing\n    xs -> readMaybe xs\n\nextractFileNameIndexes :: [FilePath]\n                       -> ExceptT ShelleyGenesisCmdError IO [(FilePath, Int)]\nextractFileNameIndexes files = do\n    case [ file | (file, Nothing) <- filesIxs ] of\n      []     -> return ()\n      files' -> throwError (ShelleyGenesisCmdFilesNoIndex files')\n    case filter (\\g -> length g > 1)\n       . groupBy ((==) `on` snd)\n       . sortBy (compare `on` snd)\n       $ [ (file, ix) | (file, Just ix) <- filesIxs ] of\n      [] -> return ()\n      (g:_) -> throwError (ShelleyGenesisCmdFilesDupIndex (map fst g))\n\n    return [ (file, ix) | (file, Just ix) <- filesIxs ]\n  where\n    filesIxs = [ (file, extractFileNameIndex file) | file <- files ]\n\nreadInitialFundAddresses :: FilePath -> NetworkId\n                         -> ExceptT ShelleyGenesisCmdError IO [AddressInEra ShelleyEra]\nreadInitialFundAddresses utxodir nw = do\n    files <- liftIO (listDirectory utxodir)\n    vkeys <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError $\n               sequence\n                 [ newExceptT $\n                     readFileTextEnvelope (AsVerificationKey AsGenesisUTxOKey)\n                                          (utxodir </> file)\n                 | file <- files\n                 , takeExtension file == \".vkey\" ]\n    return [ addr | vkey <- vkeys\n           , let vkh  = verificationKeyHash (castVerificationKey vkey)\n                 addr = makeShelleyAddressInEra nw (PaymentCredentialByKey vkh)\n                                                NoStakeAddress\n           ]\n\n\n-- | Hash a genesis file\nrunGenesisHashFile :: GenesisFile -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisHashFile (GenesisFile fpath) = do\n   content <- handleIOExceptT (ShelleyGenesisCmdGenesisFileError . FileIOError fpath) $\n              BS.readFile fpath\n   let gh :: Crypto.Hash Crypto.Blake2b_256 ByteString\n       gh = Crypto.hashWith id content\n   liftIO $ Text.putStrLn (Crypto.hashToTextAsHex gh)\n"}}}
2020-12-02 21:05:36.938345917 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-02 21:05:36.938626363 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs",Modified)]
2020-12-02 21:05:36.939084172 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":24,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"}}}
2020-12-02 21:05:36.939404523 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 21:05:36.939532018 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs
2020-12-02 21:05:36.939631644 [ThreadId 311] - Finishing build session(exception: AsyncCancelled)
2020-12-02 21:05:36.954164455 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"1/6"},"token":"4"},"method":"$/progress"}
2020-12-02 21:05:37.155564078 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":25,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"}}}
2020-12-02 21:05:37.155759563 [ThreadId 441] - Plugin.makeCodeLens (ideLogger)
2020-12-02 21:05:37.161329589 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"},"range":{"start":{"line":288,"character":30},"end":{"line":288,"character":44}},"context":{"diagnostics":[]}}}
2020-12-02 21:05:37.161543488 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":23}}
2020-12-02 21:05:37.161671746 [ThreadId 401] - CodeAction was cancelled
2020-12-02 21:05:37.161731951 [ThreadId 395] - Cancelled request IdInt 23
2020-12-02 21:05:37.162449359 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":23}
2020-12-02 21:05:43.550618278 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":27,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"},"position":{"line":302,"character":39}}}
2020-12-02 21:05:43.551028239 [ThreadId 452] - Definition request at position 303:40 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs
2020-12-02 21:05:43.693002714 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":28,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"},"position":{"line":302,"character":38}}}
2020-12-02 21:05:43.693285226 [ThreadId 458] - GhcIde.hover entered (ideLogger)
2020-12-02 21:05:43.693530467 [ThreadId 458] - Hover request at position 303:39 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs
2020-12-02 21:05:44.744742482 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":28}}
2020-12-02 21:05:44.744977738 [ThreadId 458] - C:GetHieAst was cancelled
2020-12-02 21:05:44.745033574 [ThreadId 456] - Cancelled request IdInt 28
2020-12-02 21:05:44.745219865 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":28}
2020-12-02 21:07:02.543592009 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":0},"method":"$/progress"}
2020-12-02 21:07:02.543520038 [ThreadId 97] - Session loading result: Right (ComponentOptions {componentOptions = ["-fbuilding-cabal-package","-O0","-outputdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-odir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-hidir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-stubdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-i","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-isrc","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-optP-include","-optP/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen/cabal_macros.h","-this-unit-id","cardano-api-1.24.0-inplace","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","/home/jordan/.cabal/store/ghc-8.10.2/package.db","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/packagedb/ghc-8.10.2","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/package.conf.inplace","-package-id","aeson-1.5.4.1-778a06fa5c9318198c793c5f8e2ca8d95fb38f4f10ed2bb32743f99d3f297246","-package-id","aeson-pretty-0.8.8-9b8e5a813f7409b128fda52cd6ba78fcfcdafe24319cbe51431a74775267e91b","-package-id","attoparsec-0.13.2.4-b396c2be954a9ffb3e95bbdaa6fb35ac8c27f1db8915f7964aec17a75da742b8","-package-id","base-4.14.1.0","-package-id","base16-bytestring-1.0.1.0-9f11fc286491f106a9ef784dbd62d74f1270ad38dd03d9b8cbaa41c1bbf814c8","-package-id","base58-bytestring-0.1.0-05a60df8b198010614f5302714ff68e040396e56ff7519d163761623c0de2d98","-package-id","base64-0.4.2.2-f3d429f1b298e2d466e9311305c47c04a6d9a575e1b8a3f034d63e7d23e4db48","-package-id","bech32-1.1.0-ae5f2a1a89c10d7c25e2ebed7b7fb0cd489664bd6e6c0de80e0c1dff37d17063","-package-id","bytestring-0.10.10.0","-package-id","cardano-binary-1.5.0-inplace","-package-id","cardano-config-0.1.0.0-inplace","-package-id","cardano-crypto-1.1.0-inplace","-package-id","cardano-crypto-class-2.0.0-inplace","-package-id","cardano-crypto-wrapper-1.3.0-inplace","-package-id","cardano-ledger-0.1.0.0-inplace","-package-id","cardano-ledger-shelley-ma-0.1.0.0-inplace","-package-id","cardano-prelude-0.1.0.0-inplace","-package-id","cardano-slotting-0.1.0.0-inplace","-package-id","cborg-0.2.4.0-4a245966fd5882ffb16d2ef07bb992473fd41fea0a4e61c4acd669aab7242ef9","-package-id","containers-0.6.2.1","-package-id","contra-tracer-0.1.0.0-inplace","-package-id","cryptonite-0.27-8826084f96fb9db464240662656382b25f16ff766ee68e8d02dd9d995db86b80","-package-id","directory-1.3.6.0","-package-id","filepath-1.4.2.1","-package-id","formatting-6.3.7-330f1aaaee1a6193dee6fd50994a301f73441c53ff813f4d131c0e6261ec6d04","-package-id","io-sim-classes-0.2.0.0-inplace","-package-id","iohk-monitoring-0.1.10.1-inplace","-package-id","iproute-1.7.9-43bc36e75965a204ad802bfb667361131efd65210901659e34179dc2da9d1118","-package-id","memory-0.15.0-618aae508e33731dca15e11c7e941c9d1279b1ed04bf74d2a2b887208cef7d4c","-package-id","network-3.1.2.0-f313f458cfb9472e49923061663feda9781129bd7a55b5c51b8bf13fb9eff621","-package-id","network-mux-0.1.0.0-inplace","-package-id","network-uri-2.6.3.0-5bbc25b922944130d3a812c001fbe448d17321f63665fc89b3c6ab483fba8ba1","-package-id","nothunks-0.1.1.0-79bfe850d8c797b8b11355d5e36d13d317a1777729736319881d061a6bbdcf98","-package-id","ouroboros-consensus-0.1.0.0-inplace","-package-id","ouroboros-consensus-byron-0.1.0.0-inplace","-package-id","ouroboros-consensus-cardano-0.1.0.0-inplace","-package-id","ouroboros-consensus-shelley-0.1.0.0-inplace","-package-id","ouroboros-network-0.1.0.0-inplace","-package-id","ouroboros-network-framework-0.1.0.0-inplace","-package-id","scientific-0.3.6.2-8634ec87686367cd9854d817075c6b174f7c80b793cfe710d1a33fad0d669b83","-package-id","serialise-0.2.3.0-2d2b69476413a92a4cff76cdbea89b5f9e9991e103cca95a6e05888ca3848e83","-package-id","shelley-spec-ledger-0.1.0.0-inplace","-package-id","stm-2.5.0.0","-package-id","text-1.2.3.2","-package-id","time-1.9.3","-package-id","transformers-0.5.6.2","-package-id","transformers-except-0.1.1-dff5057c0148093fdb22eb905288dea1dc40636273c3c43c25d303bb31f7e9cb","-package-id","typed-protocols-0.1.0.0-inplace","-package-id","typed-protocols-examples-0.1.0.0-inplace","-package-id","unordered-containers-0.2.13.0-4cfa23410683cfe8b97b82ed15f0d30134b196b546cbf1fdf2d0a9054d02c7db","-package-id","vector-0.12.1.2-9df9fc999682f51f3e81c90fce28e7b7f7243cc5f3e33ff871c9d5a147125c1d","-XHaskell2010","-XNoImplicitPrelude","-XOverloadedStrings","Cardano.API","Cardano.Api.Byron","Cardano.Api.Crypto.Ed25519Bip32","Cardano.Api.LocalChainSync","Cardano.Api.Protocol","Cardano.Api.Protocol.Byron","Cardano.Api.Protocol.Cardano","Cardano.Api.Protocol.Shelley","Cardano.Api.Protocol.Types","Cardano.Api.Shelley","Cardano.Api.Shelley.Genesis","Cardano.Api.TxSubmit","Cardano.Api.Typed","Cardano.Api.TxSubmit.ErrorRender","Cardano.Api.TxSubmit.Types","Cardano.Api.Address","Cardano.Api.Certificate","Cardano.Api.Eras","Cardano.Api.Error","Cardano.Api.Fees","Cardano.Api.Hash","Cardano.Api.HasTypeProxy","Cardano.Api.Key","Cardano.Api.KeysByron","Cardano.Api.KeysShelley","Cardano.Api.KeysPraos","Cardano.Api.NetworkId","Cardano.Api.OperationalCertificate","Cardano.Api.ProtocolParameters","Cardano.Api.Script","Cardano.Api.SerialiseBech32","Cardano.Api.SerialiseCBOR","Cardano.Api.SerialiseJSON","Cardano.Api.SerialiseRaw","Cardano.Api.SerialiseTextEnvelope","Cardano.Api.StakePoolMetadata","Cardano.Api.Tx","Cardano.Api.TxBody","Cardano.Api.TxMetadata","Cardano.Api.Utils","Cardano.Api.Value","-Wall","-Wincomplete-record-updates","-Wincomplete-uni-patterns","-Wredundant-constraints","-Wpartial-fields","-Wcompat","-hide-all-packages","-Werror"], componentRoot = "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api", componentDependencies = ["cardano-api/cardano-api.cabal","cabal.project","cabal.project.local"]},"/usr/local/lib/ghc-8.10.2")
2020-12-02 21:07:02.658775597 [ThreadId 97] - Using interface files cache dir: /home/jordan/.cache/ghcide/cardano-api-1.24.0-inplace-04573879897e8c84891c4ddfb50e69055b43dad3
2020-12-02 21:07:02.65921168 [ThreadId 97] - Making new HscEnv[cardano-api-1.24.0-inplace]
2020-12-02 21:07:02.697412559 [ThreadId 97] - New Component Cache HscEnvEq: (([],Just HscEnvEq 34),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-api/cardano-api.cabal",Just 2020-12-02 09:21:26.415901175 UTC)])
2020-12-02 21:07:02.77954426 [ThreadId 97] - Known files updated: fromList [(TargetModule Cardano.Api.TxBody,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs"]),(TargetModule Cardano.Api.Tx,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Cardano.Api.SerialiseRaw,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseRaw.hs"]),(TargetModule Cardano.Api.Crypto.Ed25519Bip32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Crypto/Ed25519Bip32.hs"]),(TargetModule Cardano.Api.SerialiseJSON,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseJSON.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"]),(TargetModule Cardano.Api.Typed,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs"]),(TargetModule Cardano.API,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"]),(TargetModule Cardano.Api.Shelley.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley/Genesis.hs"]),(TargetModule Cardano.Api.KeysShelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"]),(TargetModule Cardano.Api.SerialiseBech32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseBech32.hs"]),(TargetModule Cardano.Api.Error,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Error.hs"]),(TargetModule Cardano.Api.StakePoolMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs"]),(TargetModule Cardano.Api.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Key.hs"]),(TargetModule Cardano.Api.Hash,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Hash.hs"]),(TargetModule Cardano.Api.Protocol,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol.hs"]),(TargetModule Cardano.Api.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Byron.hs"]),(TargetModule Cardano.Api.OperationalCertificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs"]),(TargetModule Cardano.Api.Protocol.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Types.hs"]),(TargetModule Cardano.Api.NetworkId,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/NetworkId.hs"]),(TargetModule Cardano.Api.KeysPraos,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysPraos.hs"]),(TargetModule Cardano.Api.Address,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs"]),(TargetModule Cardano.Api.TxSubmit.ErrorRender,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/ErrorRender.hs"]),(TargetModule Cardano.Api.TxSubmit,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit.hs"]),(TargetModule Cardano.Api.Protocol.Cardano,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Cardano.hs"]),(TargetModule Cardano.Api.Certificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Certificate.hs"]),(TargetModule Cardano.Api.Value,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs"]),(TargetModule Cardano.Api.TxSubmit.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/Types.hs"]),(TargetModule Cardano.Api.LocalChainSync,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/LocalChainSync.hs"]),(TargetModule Cardano.Api.Script,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"]),(TargetModule Cardano.Api.Fees,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs"]),(TargetModule Cardano.Api.ProtocolParameters,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/ProtocolParameters.hs"]),(TargetModule Cardano.Api.SerialiseCBOR,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseCBOR.hs"]),(TargetModule Cardano.Api.Protocol.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Shelley.hs"]),(TargetModule Cardano.Api.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley.hs"]),(TargetModule Cardano.Api.TxMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxMetadata.hs"]),(TargetModule Cardano.Api.Eras,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Eras.hs"]),(TargetModule Cardano.Api.HasTypeProxy,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/HasTypeProxy.hs"]),(TargetModule Cardano.Api.Protocol.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Byron.hs"]),(TargetModule Cardano.Api.Utils,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Utils.hs"]),(TargetModule Cardano.Api.SerialiseTextEnvelope,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseTextEnvelope.hs"]),(TargetModule Cardano.Api.KeysByron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysByron.hs"])]
2020-12-02 21:07:02.780612621 [ThreadId 386] - Finishing build session(exception: AsyncCancelled)
2020-12-02 21:07:02.780689873 [ThreadId 97] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 21:07:02.804737149 [ThreadId 514] - Consulting the cradle for "cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"
2020-12-02 21:07:02.805406608 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":1},"method":"window/workDoneProgress/create","id":3}
2020-12-02 21:07:02.80553885 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","cancellable":false,"title":"Setting up cardano-node (for cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs)"},"token":1},"method":"$/progress"}
2020-12-02 21:07:02.805884866 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":3,"result":null}
2020-12-02 21:07:02.805950076 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":3,\"result\":null}"
2020-12-02 21:07:02.85679652 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"11/43"},"token":"4"},"method":"$/progress"}
2020-12-02 21:09:43.134196235 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":29,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"},"position":{"line":282,"character":75}}}
2020-12-02 21:09:43.134641907 [ThreadId 602] - DocumentHighlight request at position 283:76 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs
2020-12-02 21:09:43.37429558 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"},"range":{"start":{"line":282,"character":75},"end":{"line":282,"character":75}},"context":{"diagnostics":[]}}}
2020-12-02 21:09:43.374515749 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":26}}
2020-12-02 21:09:43.374707877 [ThreadId 446] - CodeAction was cancelled
2020-12-02 21:09:43.374823452 [ThreadId 444] - Cancelled request IdInt 26
2020-12-02 21:09:43.374987895 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":26}
2020-12-02 21:09:44.179210227 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":31,"method":"shutdown","params":null}
2020-12-02 21:09:44.17937028 [ThreadId 7] - <--2--{"result":null,"jsonrpc":"2.0","id":31}
2020-12-02 21:09:44.179600278 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"exit","params":null}
2020-12-02 22:44:49.666246405 [ThreadId 5] - 




haskell-lsp:Starting up server ...
2020-12-02 22:44:49.667002237 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":95935,"clientInfo":{"name":"vscode","version":"1.51.1"},"rootPath":"/home/jordan/Repos/Work/cardano-haskell/cardano-node","rootUri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"tokenTypes":["comment","keyword","number","regexp","operator","namespace","type","struct","class","interface","enum","typeParameter","function","member","macro","variable","parameter","property","label"],"tokenModifiers":["declaration","documentation","static","abstract","deprecated","async","readonly"]}},"window":{"workDoneProgress":true}},"trace":"off","workspaceFolders":[{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node","name":"cardano-node"}]}}
2020-12-02 22:44:49.668907031 [ThreadId 5] - haskell-lsp:initializeRequestHandler: setting current dir to project root:/home/jordan/Repos/Work/cardano-haskell/cardano-node
2020-12-02 22:44:49.693095033 [ThreadId 7] - <--2--{"result":{"capabilities":{"typeDefinitionProvider":true,"foldingRangeProvider":false,"textDocumentSync":{"openClose":true,"change":2,"save":{}},"workspace":{"workspaceFolders":{"supported":true,"changeNotifications":true}},"implementationProvider":true,"documentRangeFormattingProvider":true,"documentHighlightProvider":true,"executeCommandProvider":{"commands":["96041:eval:evalCommand","96041:ghcide:typesignature.add","96041:importLens:ImportLensCommand","96041:pragmas:addPragma","96041:retrie:retrieCommand","96041:tactic:tacticsAutoCommand","96041:tactic:tacticsIntrosCommand","96041:tactic:tacticsDestructCommand","96041:tactic:tacticsHomomorphismCommand","96041:tactic:tacticsDestructLambdaCaseCommand","96041:tactic:tacticsHomomorphismLambdaCaseCommand"]},"renameProvider":false,"colorProvider":false,"definitionProvider":true,"hoverProvider":true,"codeActionProvider":true,"completionProvider":{"triggerCharacters":["."],"resolveProvider":false},"codeLensProvider":{},"documentSymbolProvider":true,"documentFormattingProvider":true}},"jsonrpc":"2.0","id":0}
2020-12-02 22:44:49.69284204 [ThreadId 25] - Registering ide configuration: IdeConfiguration {workspaceFolders = fromList [NormalizedUri 709005359093181263 "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node"], clientSettings = hashed Nothing}
2020-12-02 22:44:49.714039575 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"initialized","params":{}}
2020-12-02 22:44:49.714246495 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"haskell":{"hlintOn":true,"maxNumberOfProblems":100,"diagnosticsOnChange":true,"liquidOn":false,"completionSnippetsOn":true,"formatOnImportOn":true,"formattingProvider":"stylish-haskell","trace":{"server":"messages"},"logFile":"hls.log","languageServerVariant":"haskell-language-server","serverExecutablePath":"~/.local/bin/haskell-language-server-8.10.2","updateBehavior":"keep-up-to-date","indentationRules":{"enabled":true},"hlint":{"executablePath":"/home/jordan/.cabal/bin/hlint","logLevel":"log"}}}}}
2020-12-02 22:44:49.714376674 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"registrations":[{"registerOptions":{"watchers":[{"kind":5,"globPattern":"**/*.hs"},{"kind":5,"globPattern":"**/*.hs-boot"},{"kind":5,"globPattern":"**/*.lhs"},{"kind":5,"globPattern":"**/*.lhs-boot"}]},"method":"workspace/didChangeWatchedFiles","id":"globalFileWatches"}]},"method":"client/registerCapability","id":0}
2020-12-02 22:44:49.714669085 [ThreadId 25] - Configuration changed: Object (fromList [("haskell",Object (fromList [("hlint",Object (fromList [("logLevel",String "log"),("executablePath",String "/home/jordan/.cabal/bin/hlint")])),("logFile",String "hls.log"),("updateBehavior",String "keep-up-to-date"),("hlintOn",Bool True),("formatOnImportOn",Bool True),("indentationRules",Object (fromList [("enabled",Bool True)])),("liquidOn",Bool False),("languageServerVariant",String "haskell-language-server"),("serverExecutablePath",String "~/.local/bin/haskell-language-server-8.10.2"),("diagnosticsOnChange",Bool True),("completionSnippetsOn",Bool True),("maxNumberOfProblems",Number 100.0),("formattingProvider",String "stylish-haskell"),("trace",Object (fromList [("server",String "messages")]))]))])
2020-12-02 22:44:49.715055932 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 22:44:49.715193024 [ThreadId 24] - Finishing build session(exception: AsyncCancelled)
2020-12-02 22:44:49.715754226 [ThreadId 65] - finish: kick (took 0.00s)
2020-12-02 22:44:49.715518847 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE ConstraintKinds #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TupleSections #-}\n{-# LANGUAGE TypeApplications #-}\n\n{-# OPTIONS_GHC -Wno-unticked-promoted-constructors #-}\n\nmodule Cardano.CLI.Shelley.Run.Genesis\n  ( ShelleyGenesisCmdError\n  , renderShelleyGenesisCmdError\n  , runGenesisCmd\n  ) where\n\nimport           Cardano.Prelude\nimport           Prelude (id)\n\nimport qualified Data.Aeson as Aeson\nimport           Data.Aeson.Encode.Pretty (encodePretty)\nimport qualified Data.Binary.Get as Bin\nimport qualified Data.ByteString.Char8 as BS\nimport qualified Data.ByteString.Lazy.Char8 as LBS\nimport           Data.Coerce (coerce)\nimport qualified Data.List as List\nimport qualified Data.List.Split as List\nimport qualified Data.Map.Strict as Map\n\nimport qualified Data.Sequence.Strict as Seq\nimport           Data.String (fromString)\nimport qualified Data.Text as Text\nimport qualified Data.Text.IO as Text\nimport           Data.Time.Clock (NominalDiffTime, UTCTime, addUTCTime, getCurrentTime)\n\nimport           Cardano.Binary (ToCBOR(..))\n\nimport           Cardano.Crypto.Hash (HashAlgorithm)\nimport qualified Cardano.Crypto.Hash as Hash\nimport qualified Cardano.Crypto.Random as Crypto\nimport           Crypto.Random as Crypto\n\nimport           Cardano.Ledger.Crypto (ADDRHASH, Crypto)\n\nimport           System.Directory (createDirectoryIfMissing, listDirectory)\nimport           System.FilePath (takeExtension, takeExtensions, (</>))\nimport           System.IO.Error (isDoesNotExistError)\n\nimport           Control.Monad.Trans.Except.Extra (firstExceptT, handleIOExceptT, hoistEither, left,\n                     newExceptT)\n\nimport qualified Cardano.Crypto.Hash as Crypto\n\nimport           Cardano.Api.Shelley.Genesis\nimport           Cardano.Api.Typed\nimport           Cardano.Api.Shelley\n\nimport           Ouroboros.Consensus.BlockchainTime (SystemStart (..))\nimport           Ouroboros.Consensus.Shelley.Protocol (StandardCrypto)\nimport           Ouroboros.Consensus.Shelley.Node (ShelleyGenesisStaking(..))\n\nimport qualified Shelley.Spec.Ledger.API as Ledger\nimport qualified Shelley.Spec.Ledger.Keys as Ledger\nimport qualified Shelley.Spec.Ledger.BaseTypes as Ledger\n\nimport           Cardano.Ledger.Era ()\n\nimport           Cardano.CLI.Helpers (textShow)\nimport           Cardano.CLI.Shelley.Commands\nimport           Cardano.CLI.Shelley.Key\nimport           Cardano.CLI.Shelley.Parsers (renderTxIn)\nimport           Cardano.CLI.Shelley.Run.Address\nimport           Cardano.CLI.Shelley.Run.Node\n                   (ShelleyNodeCmdError(..), renderShelleyNodeCmdError,\n                    runNodeIssueOpCert, runNodeKeyGenKES, runNodeKeyGenVRF, runNodeKeyGenCold)\nimport           Cardano.CLI.Shelley.Run.Pool\n                   (ShelleyPoolCmdError(..), renderShelleyPoolCmdError)\nimport           Cardano.CLI.Shelley.Run.StakeAddress\n                   (ShelleyStakeAddressCmdError(..),\n                    renderShelleyStakeAddressCmdError, runStakeAddressKeyGen)\nimport           Cardano.CLI.Types\n\n{- HLINT ignore \"Reduce duplication\" -}\n\ndata ShelleyGenesisCmdError\n  = ShelleyGenesisCmdAesonDecodeError !FilePath !Text\n  | ShelleyGenesisCmdGenesisFileError !(FileError ())\n  | ShelleyGenesisCmdFileError !(FileError ())\n  | ShelleyGenesisCmdMismatchedGenesisKeyFiles [Int] [Int] [Int]\n  | ShelleyGenesisCmdFilesNoIndex [FilePath]\n  | ShelleyGenesisCmdFilesDupIndex [FilePath]\n  | ShelleyGenesisCmdTextEnvReadFileError !(FileError TextEnvelopeError)\n  | ShelleyGenesisCmdUnexpectedAddressVerificationKey !VerificationKeyFile !Text !SomeAddressVerificationKey\n  | ShelleyGenesisCmdTooFewPoolsForBulkCreds !Word !Word !Word\n  | ShelleyGenesisCmdAddressCmdError !ShelleyAddressCmdError\n  | ShelleyGenesisCmdNodeCmdError !ShelleyNodeCmdError\n  | ShelleyGenesisCmdPoolCmdError !ShelleyPoolCmdError\n  | ShelleyGenesisCmdStakeAddressCmdError !ShelleyStakeAddressCmdError\n  deriving Show\n\nrenderShelleyGenesisCmdError :: ShelleyGenesisCmdError -> Text\nrenderShelleyGenesisCmdError err =\n  case err of\n    ShelleyGenesisCmdAesonDecodeError fp decErr ->\n      \"Error while decoding Shelley genesis at: \" <> textShow fp <> \" Error: \" <> textShow decErr\n    ShelleyGenesisCmdGenesisFileError fe -> Text.pack $ displayError fe\n    ShelleyGenesisCmdFileError fe -> Text.pack $ displayError fe\n    ShelleyGenesisCmdMismatchedGenesisKeyFiles gfiles dfiles vfiles ->\n      \"Mismatch between the files found:\\n\"\n        <> \"Genesis key file indexes:      \" <> textShow gfiles <> \"\\n\"\n        <> \"Delegate key file indexes:     \" <> textShow dfiles <> \"\\n\"\n        <> \"Delegate VRF key file indexes: \" <> textShow vfiles\n    ShelleyGenesisCmdFilesNoIndex files ->\n      \"The genesis keys files are expected to have a numeric index but these do not:\\n\"\n        <> Text.unlines (map Text.pack files)\n    ShelleyGenesisCmdFilesDupIndex files ->\n      \"The genesis keys files are expected to have a unique numeric index but these do not:\\n\"\n        <> Text.unlines (map Text.pack files)\n    ShelleyGenesisCmdTextEnvReadFileError fileErr -> Text.pack $ displayError fileErr\n    ShelleyGenesisCmdUnexpectedAddressVerificationKey (VerificationKeyFile file) expect got -> mconcat\n      [ \"Unexpected address verification key type in file \", Text.pack file\n      , \", expected: \", expect, \", got: \", textShow got\n      ]\n    ShelleyGenesisCmdTooFewPoolsForBulkCreds pools files perPool -> mconcat\n      [ \"Number of pools requested for generation (\", textShow pools\n      , \") is insufficient to fill \", textShow files\n      , \" bulk files, with \", textShow perPool, \" pools per file.\"\n      ]\n    ShelleyGenesisCmdAddressCmdError e -> renderShelleyAddressCmdError e\n    ShelleyGenesisCmdNodeCmdError e -> renderShelleyNodeCmdError e\n    ShelleyGenesisCmdPoolCmdError e -> renderShelleyPoolCmdError e\n    ShelleyGenesisCmdStakeAddressCmdError e -> renderShelleyStakeAddressCmdError e\n\n\nrunGenesisCmd :: GenesisCmd -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisCmd (GenesisKeyGenGenesis vk sk) = runGenesisKeyGenGenesis vk sk\nrunGenesisCmd (GenesisKeyGenDelegate vk sk ctr) = runGenesisKeyGenDelegate vk sk ctr\nrunGenesisCmd (GenesisKeyGenUTxO vk sk) = runGenesisKeyGenUTxO vk sk\nrunGenesisCmd (GenesisCmdKeyHash vk) = runGenesisKeyHash vk\nrunGenesisCmd (GenesisVerKey vk sk) = runGenesisVerKey vk sk\nrunGenesisCmd (GenesisTxIn vk nw mOutFile) = runGenesisTxIn vk nw mOutFile\nrunGenesisCmd (GenesisAddr vk nw mOutFile) = runGenesisAddr vk nw mOutFile\nrunGenesisCmd (GenesisCreate gd gn un ms am nw) = runGenesisCreate gd gn un ms am nw\nrunGenesisCmd (GenesisCreateStaked gd gn gp gl un ms am ds nw bf bp su) = runGenesisCreateStaked gd gn gp gl un ms am ds nw bf bp su\nrunGenesisCmd (GenesisHashFile gf) = runGenesisHashFile gf\n\n--\n-- Genesis command implementations\n--\n\nrunGenesisKeyGenGenesis :: VerificationKeyFile -> SigningKeyFile\n                        -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisKeyGenGenesis (VerificationKeyFile vkeyPath)\n                        (SigningKeyFile skeyPath) = do\n    skey <- liftIO $ generateSigningKey AsGenesisKey\n    let vkey = getVerificationKey skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope skeyPath (Just skeyDesc) skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope vkeyPath (Just vkeyDesc) vkey\n  where\n    skeyDesc, vkeyDesc :: TextEnvelopeDescr\n    skeyDesc = \"Genesis Signing Key\"\n    vkeyDesc = \"Genesis Verification Key\"\n\n\nrunGenesisKeyGenDelegate :: VerificationKeyFile\n                         -> SigningKeyFile\n                         -> OpCertCounterFile\n                         -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisKeyGenDelegate (VerificationKeyFile vkeyPath)\n                         (SigningKeyFile skeyPath)\n                         (OpCertCounterFile ocertCtrPath) = do\n    skey <- liftIO $ generateSigningKey AsGenesisDelegateKey\n    let vkey = getVerificationKey skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope skeyPath (Just skeyDesc) skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope vkeyPath (Just vkeyDesc) vkey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope ocertCtrPath (Just certCtrDesc)\n      $ OperationalCertificateIssueCounter\n          initialCounter\n          (castVerificationKey vkey)  -- Cast to a 'StakePoolKey'\n  where\n    skeyDesc, vkeyDesc, certCtrDesc :: TextEnvelopeDescr\n    skeyDesc = \"Genesis delegate operator key\"\n    vkeyDesc = \"Genesis delegate operator key\"\n    certCtrDesc = \"Next certificate issue number: \"\n               <> fromString (show initialCounter)\n\n    initialCounter :: Word64\n    initialCounter = 0\n\n\nrunGenesisKeyGenDelegateVRF :: VerificationKeyFile -> SigningKeyFile\n                            -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisKeyGenDelegateVRF (VerificationKeyFile vkeyPath)\n                            (SigningKeyFile skeyPath) = do\n    skey <- liftIO $ generateSigningKey AsVrfKey\n    let vkey = getVerificationKey skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope skeyPath (Just skeyDesc) skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope vkeyPath (Just vkeyDesc) vkey\n  where\n    skeyDesc, vkeyDesc :: TextEnvelopeDescr\n    skeyDesc = \"VRF Signing Key\"\n    vkeyDesc = \"VRF Verification Key\"\n\n\nrunGenesisKeyGenUTxO :: VerificationKeyFile -> SigningKeyFile\n                     -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisKeyGenUTxO (VerificationKeyFile vkeyPath)\n                     (SigningKeyFile skeyPath) = do\n    skey <- liftIO $ generateSigningKey AsGenesisUTxOKey\n    let vkey = getVerificationKey skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope skeyPath (Just skeyDesc) skey\n    firstExceptT ShelleyGenesisCmdGenesisFileError\n      . newExceptT\n      $ writeFileTextEnvelope vkeyPath (Just vkeyDesc) vkey\n  where\n    skeyDesc, vkeyDesc :: TextEnvelopeDescr\n    skeyDesc = \"Genesis Initial UTxO Signing Key\"\n    vkeyDesc = \"Genesis Initial UTxO Verification Key\"\n\n\nrunGenesisKeyHash :: VerificationKeyFile -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisKeyHash (VerificationKeyFile vkeyPath) = do\n    vkey <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError . newExceptT $\n            readFileTextEnvelopeAnyOf\n              [ FromSomeType (AsVerificationKey AsGenesisKey)\n                             AGenesisKey\n              , FromSomeType (AsVerificationKey AsGenesisDelegateKey)\n                             AGenesisDelegateKey\n              , FromSomeType (AsVerificationKey AsGenesisUTxOKey)\n                             AGenesisUTxOKey\n              ]\n              vkeyPath\n    liftIO $ BS.putStrLn (renderKeyHash vkey)\n  where\n    renderKeyHash :: SomeGenesisKey VerificationKey -> ByteString\n    renderKeyHash (AGenesisKey         vk) = renderVerificationKeyHash vk\n    renderKeyHash (AGenesisDelegateKey vk) = renderVerificationKeyHash vk\n    renderKeyHash (AGenesisUTxOKey     vk) = renderVerificationKeyHash vk\n\n    renderVerificationKeyHash :: Key keyrole => VerificationKey keyrole -> ByteString\n    renderVerificationKeyHash = serialiseToRawBytesHex\n                              . verificationKeyHash\n\n\nrunGenesisVerKey :: VerificationKeyFile -> SigningKeyFile\n                 -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisVerKey (VerificationKeyFile vkeyPath) (SigningKeyFile skeyPath) = do\n    skey <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError . newExceptT $\n            readFileTextEnvelopeAnyOf\n              [ FromSomeType (AsSigningKey AsGenesisKey)\n                             AGenesisKey\n              , FromSomeType (AsSigningKey AsGenesisDelegateKey)\n                             AGenesisDelegateKey\n              , FromSomeType (AsSigningKey AsGenesisUTxOKey)\n                             AGenesisUTxOKey\n              ]\n              skeyPath\n\n    let vkey :: SomeGenesisKey VerificationKey\n        vkey = case skey of\n          AGenesisKey         sk -> AGenesisKey         (getVerificationKey sk)\n          AGenesisDelegateKey sk -> AGenesisDelegateKey (getVerificationKey sk)\n          AGenesisUTxOKey     sk -> AGenesisUTxOKey     (getVerificationKey sk)\n\n    firstExceptT ShelleyGenesisCmdGenesisFileError . newExceptT . liftIO $\n      case vkey of\n        AGenesisKey         vk -> writeFileTextEnvelope vkeyPath Nothing vk\n        AGenesisDelegateKey vk -> writeFileTextEnvelope vkeyPath Nothing vk\n        AGenesisUTxOKey     vk -> writeFileTextEnvelope vkeyPath Nothing vk\n\ndata SomeGenesisKey f\n     = AGenesisKey         (f GenesisKey)\n     | AGenesisDelegateKey (f GenesisDelegateKey)\n     | AGenesisUTxOKey     (f GenesisUTxOKey)\n\n\nrunGenesisTxIn :: VerificationKeyFile -> NetworkId -> Maybe OutputFile\n               -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisTxIn (VerificationKeyFile vkeyPath) network mOutFile = do\n    vkey <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError . newExceptT $\n            readFileTextEnvelope (AsVerificationKey AsGenesisUTxOKey) vkeyPath\n    let txin = genesisUTxOPseudoTxIn network (verificationKeyHash vkey)\n    liftIO $ writeOutput mOutFile (renderTxIn txin)\n\n\nrunGenesisAddr :: VerificationKeyFile -> NetworkId -> Maybe OutputFile\n               -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisAddr (VerificationKeyFile vkeyPath) network mOutFile = do\n    vkey <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError . newExceptT $\n            readFileTextEnvelope (AsVerificationKey AsGenesisUTxOKey) vkeyPath\n    let vkh  = verificationKeyHash (castVerificationKey vkey)\n        addr = makeShelleyAddress network (PaymentCredentialByKey vkh)\n                                  NoStakeAddress\n    liftIO $ writeOutput mOutFile (serialiseAddress addr)\n\nwriteOutput :: Maybe OutputFile -> Text -> IO ()\nwriteOutput (Just (OutputFile fpath)) = Text.writeFile fpath\nwriteOutput Nothing                   = Text.putStrLn\n\n\n--\n-- Create Genesis command implementation\n--\n\nrunGenesisCreate :: GenesisDir\n                 -> Word  -- ^ num genesis & delegate keys to make\n                 -> Word  -- ^ num utxo keys to make\n                 -> Maybe SystemStart\n                 -> Maybe Lovelace\n                 -> NetworkId\n                 -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisCreate (GenesisDir rootdir)\n                 genNumGenesisKeys genNumUTxOKeys\n                 mStart mAmount network = do\n  liftIO $ do\n    createDirectoryIfMissing False rootdir\n    createDirectoryIfMissing False gendir\n    createDirectoryIfMissing False deldir\n    createDirectoryIfMissing False utxodir\n\n  template <- readShelleyGenesis (rootdir </> \"genesis.spec.json\") adjustTemplate\n\n  forM_ [ 1 .. genNumGenesisKeys ] $ \\index -> do\n    createGenesisKeys  gendir  index\n    createDelegateKeys deldir index\n\n  forM_ [ 1 .. genNumUTxOKeys ] $ \\index ->\n    createUtxoKeys utxodir index\n\n  genDlgs <- readGenDelegsMap gendir deldir\n  utxoAddrs <- readInitialFundAddresses utxodir network\n  start <- maybe (SystemStart <$> getCurrentTimePlus30) pure mStart\n\n  let finalGenesis = updateTemplate start genDlgs mAmount utxoAddrs mempty (Lovelace 0) [] [] template\n\n  writeShelleyGenesis (rootdir </> \"genesis.json\") finalGenesis\n  where\n    adjustTemplate t = t { sgNetworkMagic = unNetworkMagic (toNetworkMagic network) }\n    gendir  = rootdir </> \"genesis-keys\"\n    deldir  = rootdir </> \"delegate-keys\"\n    utxodir = rootdir </> \"utxo-keys\"\n\nrunGenesisCreateStaked\n  :: GenesisDir\n  -> Word           -- ^ num genesis & delegate keys to make\n  -> Word           -- ^ num utxo keys to make\n  -> Word           -- ^ num pools to make\n  -> Word           -- ^ num delegators to make\n  -> Maybe SystemStart\n  -> Maybe Lovelace -- ^ supply going to non-delegators\n  -> Lovelace       -- ^ supply going to delegators\n  -> NetworkId\n  -> Word           -- ^ bulk credential files to write\n  -> Word           -- ^ pool credentials per bulk file\n  -> Word           -- ^ num stuffed UTxO entries\n  -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisCreateStaked (GenesisDir rootdir)\n                 genNumGenesisKeys genNumUTxOKeys genNumPools genNumStDelegs\n                 mStart mNonDlgAmount stDlgAmount network\n                 bulkPoolCredFiles bulkPoolsPerFile numStuffedUtxo = do\n  liftIO $ do\n    createDirectoryIfMissing False rootdir\n    createDirectoryIfMissing False gendir\n    createDirectoryIfMissing False deldir\n    createDirectoryIfMissing False pooldir\n    createDirectoryIfMissing False stdeldir\n    createDirectoryIfMissing False utxodir\n\n  template <- readShelleyGenesis (rootdir </> \"genesis.spec.json\") adjustTemplate\n\n  forM_ [ 1 .. genNumGenesisKeys ] $ \\index -> do\n    createGenesisKeys  gendir  index\n    createDelegateKeys deldir index\n\n  forM_ [ 1 .. genNumUTxOKeys ] $ \\index ->\n    createUtxoKeys utxodir index\n\n  pools <- forM [ 1 .. genNumPools ] $ \\index -> do\n    createPoolCredentials pooldir index\n    buildPool network pooldir index\n\n  when (bulkPoolCredFiles * bulkPoolsPerFile > genNumPools) $\n    left $ ShelleyGenesisCmdTooFewPoolsForBulkCreds  genNumPools bulkPoolCredFiles bulkPoolsPerFile\n  -- We generate the bulk files for the last pool indices,\n  -- so that all the non-bulk pools have stable indices at beginning:\n  let bulkOffset  = fromIntegral $ genNumPools - bulkPoolCredFiles * bulkPoolsPerFile\n      bulkIndices :: [Word]   = [ 1 + bulkOffset .. genNumPools ]\n      bulkSlices  :: [[Word]] = List.chunksOf (fromIntegral bulkPoolsPerFile) bulkIndices\n  forM_ (zip [ 1 .. bulkPoolCredFiles ] bulkSlices) $\n    uncurry (writeBulkPoolCredentials pooldir)\n\n  forM_ [ 1 .. genNumStDelegs ] $ \\index ->\n    createDelegatorCredentials stdeldir index\n\n  delegations :: [Delegation] <-\n    -- Distribute M delegates across N pools:\n    forM [ (pool, delegIx)\n         | (pool, poolIx) <- zip pools [1 ..]\n         , delegIxLocal <- [ 1 .. delegsPerPool ] ++\n                           -- Add all remaining delegates to the last pool:\n                           if delegsRemaining /= 0 && poolIx == genNumPools\n                           then [ delegsPerPool + 1 .. delegsPerPool + delegsRemaining ]\n                           else []\n         , let delegIx = delegIxLocal + delegsPerPool * (poolIx - 1)] $\n      uncurry (computeDelegation network stdeldir)\n\n  genDlgs <- readGenDelegsMap gendir deldir\n  nonDelegAddrs <- readInitialFundAddresses utxodir network\n  start <- maybe (SystemStart <$> getCurrentTimePlus30) pure mStart\n\n  stuffedUtxoAddrs <- liftIO $ replicateM (fromIntegral numStuffedUtxo)\n                      genStuffedAddress\n\n  let poolMap :: Map (Ledger.KeyHash Ledger.Staking StandardCrypto) (Ledger.PoolParams StandardShelley)\n      poolMap = Map.fromList $ mkDelegationMapEntry <$> delegations\n      delegAddrs = dInitialUtxoAddr <$> delegations\n      finalGenesis = updateTemplate start genDlgs mNonDlgAmount nonDelegAddrs poolMap stDlgAmount delegAddrs stuffedUtxoAddrs template\n\n  writeShelleyGenesis (rootdir </> \"genesis.json\") finalGenesis\n  liftIO $ Text.putStrLn $ mconcat $\n    [ \"generated genesis with: \"\n    , textShow genNumGenesisKeys, \" genesis keys, \"\n    , textShow genNumUTxOKeys, \" non-delegating UTxO keys, \"\n    , textShow genNumPools, \" stake pools, \"\n    , textShow genNumStDelegs, \" delegating UTxO keys, \"\n    , textShow (length delegations), \" delegation relationships, \"\n    , textShow (Map.size poolMap), \" delegation map entries, \"\n    , textShow (length delegAddrs), \" delegating addresses\"\n    ] ++\n    [ mconcat\n      [ \", \"\n      , textShow bulkPoolCredFiles, \" bulk pool credential files, \"\n      , textShow bulkPoolsPerFile, \" pools per bulk credential file, indices starting from \"\n      , textShow bulkOffset, \", \"\n      , textShow $ length bulkIndices, \" total pools in bulk nodes, each bulk node having this many entries: \"\n      , textShow $ length <$> bulkSlices\n      ]\n    | bulkPoolCredFiles * bulkPoolsPerFile > 0 ]\n\n  where\n    (,) delegsPerPool delegsRemaining = divMod genNumStDelegs genNumPools\n    adjustTemplate t = t { sgNetworkMagic = unNetworkMagic (toNetworkMagic network) }\n    mkDelegationMapEntry :: Delegation -> (Ledger.KeyHash Ledger.Staking StandardCrypto, Ledger.PoolParams StandardShelley)\n    mkDelegationMapEntry d = (dDelegStaking d, dPoolParams d)\n\n    gendir   = rootdir </> \"genesis-keys\"\n    deldir   = rootdir </> \"delegate-keys\"\n    pooldir  = rootdir </> \"pools\"\n    stdeldir = rootdir </> \"stake-delegator-keys\"\n    utxodir  = rootdir </> \"utxo-keys\"\n\n    genStuffedAddress :: IO (AddressInEra ShelleyEra)\n    genStuffedAddress =\n      shelleyAddressInEra <$>\n      (ShelleyAddress\n       <$> pure Ledger.Testnet\n       <*> (Ledger.KeyHashObj . mkKeyHash . read64BitInt\n             <$> Crypto.runSecureRandom (getRandomBytes 8))\n       <*> pure Ledger.StakeRefNull)\n\n    read64BitInt :: ByteString -> Int\n    read64BitInt = (fromIntegral :: Word64 -> Int)\n      . Bin.runGet Bin.getWord64le . LBS.fromStrict\n\n    mkDummyHash :: forall h a. HashAlgorithm h => Proxy h -> Int -> Hash.Hash h a\n    mkDummyHash _ = coerce . Ledger.hashWithSerialiser @h toCBOR\n\n    mkKeyHash :: forall c discriminator. Crypto c => Int -> Ledger.KeyHash discriminator c\n    mkKeyHash = Ledger.KeyHash . mkDummyHash (Proxy @(ADDRHASH c))\n\n-- -------------------------------------------------------------------------------------------------\n\ncreateDelegateKeys :: FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO ()\ncreateDelegateKeys dir index = do\n  liftIO $ createDirectoryIfMissing False dir\n  runGenesisKeyGenDelegate\n        (VerificationKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".vkey\")\n        coldSK\n        opCertCtr\n  runGenesisKeyGenDelegateVRF\n        (VerificationKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".vrf.vkey\")\n        (SigningKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".vrf.skey\")\n  firstExceptT ShelleyGenesisCmdNodeCmdError $ do\n    runNodeKeyGenKES\n        kesVK\n        (SigningKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".kes.skey\")\n    runNodeIssueOpCert\n        (VerificationKeyFilePath kesVK)\n        coldSK\n        opCertCtr\n        (KESPeriod 0)\n        (OutputFile $ dir </> \"opcert\" ++ strIndex ++ \".cert\")\n where\n   strIndex = show index\n   kesVK = VerificationKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".kes.vkey\"\n   coldSK = SigningKeyFile $ dir </> \"delegate\" ++ strIndex ++ \".skey\"\n   opCertCtr = OpCertCounterFile $ dir </> \"delegate\" ++ strIndex ++ \".counter\"\n\ncreateGenesisKeys :: FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO ()\ncreateGenesisKeys dir index = do\n  liftIO $ createDirectoryIfMissing False dir\n  let strIndex = show index\n  runGenesisKeyGenGenesis\n        (VerificationKeyFile $ dir </> \"genesis\" ++ strIndex ++ \".vkey\")\n        (SigningKeyFile $ dir </> \"genesis\" ++ strIndex ++ \".skey\")\n\n\ncreateUtxoKeys :: FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO ()\ncreateUtxoKeys dir index = do\n  liftIO $ createDirectoryIfMissing False dir\n  let strIndex = show index\n  runGenesisKeyGenUTxO\n        (VerificationKeyFile $ dir </> \"utxo\" ++ strIndex ++ \".vkey\")\n        (SigningKeyFile $ dir </> \"utxo\" ++ strIndex ++ \".skey\")\n\ncreatePoolCredentials :: FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO ()\ncreatePoolCredentials dir index = do\n  liftIO $ createDirectoryIfMissing False dir\n  firstExceptT ShelleyGenesisCmdNodeCmdError $ do\n    runNodeKeyGenKES\n        kesVK\n        (SigningKeyFile $ dir </> \"kes\" ++ strIndex ++ \".skey\")\n    runNodeKeyGenVRF\n        (VerificationKeyFile $ dir </> \"vrf\" ++ strIndex ++ \".vkey\")\n        (SigningKeyFile $ dir </> \"vrf\" ++ strIndex ++ \".skey\")\n    runNodeKeyGenCold\n        (VerificationKeyFile $ dir </> \"cold\" ++ strIndex ++ \".vkey\")\n        coldSK\n        opCertCtr\n    runNodeIssueOpCert\n        (VerificationKeyFilePath kesVK)\n        coldSK\n        opCertCtr\n        (KESPeriod 0)\n        (OutputFile $ dir </> \"opcert\" ++ strIndex ++ \".cert\")\n  firstExceptT ShelleyGenesisCmdStakeAddressCmdError $\n    runStakeAddressKeyGen\n        (VerificationKeyFile $ dir </> \"staking-reward\" ++ strIndex ++ \".vkey\")\n        (SigningKeyFile $ dir </> \"staking-reward\" ++ strIndex ++ \".skey\")\n where\n   strIndex = show index\n   kesVK = VerificationKeyFile $ dir </> \"kes\" ++ strIndex ++ \".vkey\"\n   coldSK = SigningKeyFile $ dir </> \"cold\" ++ strIndex ++ \".skey\"\n   opCertCtr = OpCertCounterFile $ dir </> \"opcert\" ++ strIndex ++ \".counter\"\n\ncreateDelegatorCredentials :: FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO ()\ncreateDelegatorCredentials dir index = do\n  liftIO $ createDirectoryIfMissing False dir\n  firstExceptT ShelleyGenesisCmdAddressCmdError $ do\n    runAddressKeyGen\n        AddressKeyShelley\n        addrVK\n        (SigningKeyFile $ dir </> \"payment\" ++ strIndex ++ \".skey\")\n  firstExceptT ShelleyGenesisCmdStakeAddressCmdError $\n    runStakeAddressKeyGen\n        (VerificationKeyFile $ dir </> \"staking\" ++ strIndex ++ \".vkey\")\n        (SigningKeyFile $ dir </> \"staking\" ++ strIndex ++ \".skey\")\n where\n   strIndex = show index\n   addrVK = VerificationKeyFile $ dir </> \"payment\" ++ strIndex ++ \".vkey\"\n\ndata Delegation\n  = Delegation\n    { dInitialUtxoAddr  :: AddressInEra ShelleyEra\n    , dDelegStaking     :: Ledger.KeyHash Ledger.Staking StandardCrypto\n    , dPoolParams       :: Ledger.PoolParams StandardShelley\n    }\n\nbuildPool :: NetworkId -> FilePath -> Word -> ExceptT ShelleyGenesisCmdError IO (Ledger.PoolParams StandardShelley)\nbuildPool nw dir index = do\n    StakePoolVerificationKey poolColdVK <- firstExceptT (ShelleyGenesisCmdPoolCmdError\n                                                         . ShelleyPoolCmdReadFileError)\n      . newExceptT\n      $ readFileTextEnvelope (AsVerificationKey AsStakePoolKey) poolColdVKF\n    VrfVerificationKey poolVrfVK <- firstExceptT (ShelleyGenesisCmdNodeCmdError\n                                                  . ShelleyNodeCmdReadFileError)\n      . newExceptT\n      $ readFileTextEnvelope (AsVerificationKey AsVrfKey) poolVrfVKF\n    rewardsSVK <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError\n      . newExceptT\n      $ readFileTextEnvelope (AsVerificationKey AsStakeKey) poolRewardVKF\n    pure Ledger.PoolParams\n      { Ledger._poolId     = Ledger.hashKey poolColdVK\n      , Ledger._poolVrf    = Ledger.hashVerKeyVRF poolVrfVK\n      , Ledger._poolPledge = Ledger.Coin 0\n      , Ledger._poolCost   = Ledger.Coin 0\n      , Ledger._poolMargin = Ledger.truncateUnitInterval 0\n      , Ledger._poolRAcnt  =\n          toShelleyStakeAddr $ makeStakeAddress nw $ StakeCredentialByKey (verificationKeyHash rewardsSVK)\n      , Ledger._poolOwners = mempty\n      , Ledger._poolRelays = Seq.empty\n      , Ledger._poolMD     = Ledger.SNothing\n      }\n where\n   strIndex = show index\n   poolColdVKF = dir </> \"cold\" ++ strIndex ++ \".vkey\"\n   poolVrfVKF = dir </> \"vrf\" ++ strIndex ++ \".vkey\"\n   poolRewardVKF = dir </> \"staking-reward\" ++ strIndex ++ \".vkey\"\n\nwriteBulkPoolCredentials :: FilePath -> Word -> [Word] -> ExceptT ShelleyGenesisCmdError IO ()\nwriteBulkPoolCredentials dir bulkIx poolIxs = do\n  creds <- mapM readPoolCreds poolIxs\n  handleIOExceptT (ShelleyGenesisCmdFileError . FileIOError bulkFile) $\n    LBS.writeFile bulkFile $ Aeson.encode creds\n where\n   bulkFile = dir </> \"bulk\" ++ show bulkIx ++ \".creds\"\n\n   readPoolCreds :: Word -> ExceptT ShelleyGenesisCmdError IO\n                                   (TextEnvelope, TextEnvelope, TextEnvelope)\n   readPoolCreds ix = do\n     (,,) <$> readEnvelope poolCert\n          <*> readEnvelope poolVrfSKF\n          <*> readEnvelope poolKesSKF\n    where\n      strIndex = show ix\n      poolCert = dir </> \"opcert\" ++ strIndex ++ \".cert\"\n      poolVrfSKF = dir </> \"vrf\" ++ strIndex ++ \".skey\"\n      poolKesSKF = dir </> \"kes\" ++ strIndex ++ \".skey\"\n   readEnvelope :: FilePath -> ExceptT ShelleyGenesisCmdError IO TextEnvelope\n   readEnvelope fp = do\n     content <- handleIOExceptT (ShelleyGenesisCmdFileError . FileIOError fp) $\n                  BS.readFile fp\n     firstExceptT (ShelleyGenesisCmdAesonDecodeError fp . Text.pack) . hoistEither $\n       Aeson.eitherDecodeStrict' content\n\ncomputeDelegation :: NetworkId -> FilePath -> Ledger.PoolParams StandardShelley -> Word -> ExceptT ShelleyGenesisCmdError IO Delegation\ncomputeDelegation nw delegDir pool delegIx = do\n    paySVK <- firstExceptT (ShelleyGenesisCmdAddressCmdError\n                           . ShelleyAddressCmdVerificationKeyTextOrFileError) $\n                 readAddressVerificationKeyTextOrFile\n                   (VktofVerificationKeyFile payVKF)\n    initialUtxoAddr <- case paySVK of\n      APaymentVerificationKey payVK ->\n        firstExceptT ShelleyGenesisCmdAddressCmdError\n        $ buildShelleyAddress payVK (Just . VerificationKeyFilePath . VerificationKeyFile $ stakeVKF) nw\n      _ -> left $ ShelleyGenesisCmdUnexpectedAddressVerificationKey payVKF \"APaymentVerificationKey\" paySVK\n\n    StakeVerificationKey stakeVK <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError\n      . newExceptT\n      $ readFileTextEnvelope (AsVerificationKey AsStakeKey) stakeVKF\n\n    pure Delegation\n      { dInitialUtxoAddr = shelleyAddressInEra initialUtxoAddr\n      , dDelegStaking = Ledger.hashKey stakeVK\n      , dPoolParams = pool\n      }\n where\n   strIndexDeleg = show delegIx\n   payVKF = VerificationKeyFile $ delegDir </> \"payment\" ++ strIndexDeleg ++ \".vkey\"\n   stakeVKF = delegDir </> \"staking\" ++ strIndexDeleg ++ \".vkey\"\n\n-- | Current UTCTime plus 30 seconds\ngetCurrentTimePlus30 :: ExceptT ShelleyGenesisCmdError IO UTCTime\ngetCurrentTimePlus30 =\n    plus30sec <$> liftIO getCurrentTime\n  where\n    plus30sec :: UTCTime -> UTCTime\n    plus30sec = addUTCTime (30 :: NominalDiffTime)\n\n\nreadShelleyGenesis\n  :: FilePath\n  -> (ShelleyGenesis StandardShelley -> ShelleyGenesis StandardShelley)\n  -> ExceptT ShelleyGenesisCmdError IO (ShelleyGenesis StandardShelley)\nreadShelleyGenesis fpath adjustDefaults = do\n    readAndDecode\n      `catchError` \\err ->\n        case err of\n          ShelleyGenesisCmdGenesisFileError (FileIOError _ ioe)\n            | isDoesNotExistError ioe -> writeDefault\n          _                           -> left err\n  where\n    readAndDecode = do\n      lbs <- handleIOExceptT (ShelleyGenesisCmdGenesisFileError . FileIOError fpath) $ LBS.readFile fpath\n      firstExceptT (ShelleyGenesisCmdAesonDecodeError fpath . Text.pack)\n        . hoistEither $ Aeson.eitherDecode' lbs\n\n    defaults :: ShelleyGenesis StandardShelley\n    defaults = adjustDefaults shelleyGenesisDefaults\n\n    writeDefault = do\n      handleIOExceptT (ShelleyGenesisCmdGenesisFileError . FileIOError fpath) $\n        LBS.writeFile fpath (encodePretty defaults)\n      return defaults\n\n\nupdateTemplate\n    :: SystemStart\n    -- Genesis delegation (not stake-based):\n    -> Map (Hash GenesisKey) (Hash GenesisDelegateKey, Hash VrfKey)\n    -- Non-delegated initial UTxO spec:\n    -> Maybe Lovelace\n    -> [AddressInEra ShelleyEra]\n    -- Genesis staking: pools/delegation map & delegated initial UTxO spec:\n    -> Map (Ledger.KeyHash 'Ledger.Staking StandardCrypto) (Ledger.PoolParams StandardShelley)\n    -> Lovelace\n    -> [AddressInEra ShelleyEra]\n    -> [AddressInEra ShelleyEra]\n    -> ShelleyGenesis StandardShelley\n    -> ShelleyGenesis StandardShelley\nupdateTemplate (SystemStart start)\n               genDelegMap mAmountNonDeleg utxoAddrsNonDeleg\n               poolSpecs (Lovelace amountDeleg) utxoAddrsDeleg stuffedUtxoAddrs\n               template =\n    template\n      { sgSystemStart = start\n      , sgMaxLovelaceSupply = fromIntegral $ nonDelegCoin + delegCoin\n      , sgGenDelegs = shelleyDelKeys\n      , sgInitialFunds = Map.fromList\n                          [ (toShelleyAddr addr, toShelleyLovelace v)\n                          | (addr, v) <-\n                            distribute nonDelegCoin utxoAddrsNonDeleg ++\n                            distribute delegCoin    utxoAddrsDeleg ++\n                            mkStuffedUtxo stuffedUtxoAddrs ]\n      , sgStaking =\n        ShelleyGenesisStaking\n          { sgsPools = Map.fromList\n                        [ (Ledger._poolId poolParams, poolParams)\n                        | poolParams <- Map.elems poolSpecs ]\n          , sgsStake = Ledger._poolId <$> poolSpecs\n          }\n      }\n  where\n    nonDelegCoin, delegCoin :: Integer\n    nonDelegCoin = fromIntegral $ fromMaybe (sgMaxLovelaceSupply template) (unLovelace <$> mAmountNonDeleg)\n    delegCoin = fromIntegral amountDeleg\n\n    distribute :: Integer -> [AddressInEra ShelleyEra] -> [(AddressInEra ShelleyEra, Lovelace)]\n    distribute funds addrs =\n      fst $ List.foldl' folder ([], fromIntegral funds) addrs\n     where\n       nAddrs, coinPerAddr, splitThreshold :: Integer\n       nAddrs = fromIntegral $ length addrs\n       coinPerAddr = funds `div` nAddrs\n       splitThreshold = coinPerAddr + nAddrs\n\n       folder :: ([(AddressInEra ShelleyEra, Lovelace)], Integer)\n              -> AddressInEra ShelleyEra\n              -> ([(AddressInEra ShelleyEra, Lovelace)], Integer)\n       folder (acc, rest) addr\n         | rest > splitThreshold =\n             ((addr, Lovelace coinPerAddr) : acc, rest - coinPerAddr)\n         | otherwise = ((addr, Lovelace rest) : acc, 0)\n\n    mkStuffedUtxo :: [AddressInEra ShelleyEra] -> [(AddressInEra ShelleyEra, Lovelace)]\n    mkStuffedUtxo xs = (, Lovelace minUtxoVal) <$> xs\n      where (Coin minUtxoVal) = _minUTxOValue $ sgProtocolParams template\n\n    shelleyDelKeys =\n      Map.fromList\n        [ (gh, Ledger.GenDelegPair gdh h)\n        | (GenesisKeyHash gh,\n           (GenesisDelegateKeyHash gdh, VrfKeyHash h)) <- Map.toList genDelegMap\n        ]\n\n    unLovelace :: Integral a => Lovelace -> a\n    unLovelace (Lovelace coin) = fromIntegral coin\n\nwriteShelleyGenesis :: FilePath -> ShelleyGenesis StandardShelley -> ExceptT ShelleyGenesisCmdError IO ()\nwriteShelleyGenesis fpath sg =\n  handleIOExceptT (ShelleyGenesisCmdGenesisFileError . FileIOError fpath) $ LBS.writeFile fpath (encodePretty sg)\n\n\n-- -------------------------------------------------------------------------------------------------\n\nreadGenDelegsMap :: FilePath -> FilePath\n                 -> ExceptT ShelleyGenesisCmdError IO\n                            (Map (Hash GenesisKey)\n                                 (Hash GenesisDelegateKey, Hash VrfKey))\nreadGenDelegsMap gendir deldir = do\n    gkm <- readGenesisKeys gendir\n    dkm <- readDelegateKeys deldir\n    vkm <- readDelegateVrfKeys deldir\n\n    let combinedMap :: Map Int (VerificationKey GenesisKey,\n                                (VerificationKey GenesisDelegateKey,\n                                 VerificationKey VrfKey))\n        combinedMap =\n          Map.intersectionWith (,)\n            gkm\n            (Map.intersectionWith (,)\n               dkm vkm)\n\n    -- All the maps should have an identical set of keys. Complain if not.\n    let gkmExtra = gkm Map.\\\\ combinedMap\n        dkmExtra = dkm Map.\\\\ combinedMap\n        vkmExtra = vkm Map.\\\\ combinedMap\n    unless (Map.null gkmExtra && Map.null dkmExtra && Map.null vkmExtra) $\n      throwError $ ShelleyGenesisCmdMismatchedGenesisKeyFiles\n                     (Map.keys gkm) (Map.keys dkm) (Map.keys vkm)\n\n    let delegsMap :: Map (Hash GenesisKey)\n                         (Hash GenesisDelegateKey, Hash VrfKey)\n        delegsMap =\n          Map.fromList [ (gh, (dh, vh))\n                       | (g,(d,v)) <- Map.elems combinedMap\n                       , let gh = verificationKeyHash g\n                             dh = verificationKeyHash d\n                             vh = verificationKeyHash v\n                       ]\n\n    pure delegsMap\n\n\nreadGenesisKeys :: FilePath -> ExceptT ShelleyGenesisCmdError IO\n                                       (Map Int (VerificationKey GenesisKey))\nreadGenesisKeys gendir = do\n  files <- liftIO (listDirectory gendir)\n  fileIxs <- extractFileNameIndexes [ gendir </> file\n                                    | file <- files\n                                    , takeExtension file == \".vkey\" ]\n  firstExceptT ShelleyGenesisCmdTextEnvReadFileError $\n    Map.fromList <$>\n      sequence\n        [ (,) ix <$> readKey file\n        | (file, ix) <- fileIxs ]\n  where\n    readKey = newExceptT\n              . readFileTextEnvelope (AsVerificationKey AsGenesisKey)\n\nreadDelegateKeys :: FilePath\n                 -> ExceptT ShelleyGenesisCmdError IO\n                            (Map Int (VerificationKey GenesisDelegateKey))\nreadDelegateKeys deldir = do\n  files <- liftIO (listDirectory deldir)\n  fileIxs <- extractFileNameIndexes [ deldir </> file\n                                    | file <- files\n                                    , takeExtensions file == \".vkey\" ]\n  firstExceptT ShelleyGenesisCmdTextEnvReadFileError $\n    Map.fromList <$>\n      sequence\n        [ (,) ix <$> readKey file\n        | (file, ix) <- fileIxs ]\n  where\n    readKey = newExceptT\n            . readFileTextEnvelope (AsVerificationKey AsGenesisDelegateKey)\n\nreadDelegateVrfKeys :: FilePath -> ExceptT ShelleyGenesisCmdError IO\n                                           (Map Int (VerificationKey VrfKey))\nreadDelegateVrfKeys deldir = do\n  files <- liftIO (listDirectory deldir)\n  fileIxs <- extractFileNameIndexes [ deldir </> file\n                                    | file <- files\n                                    , takeExtensions file == \".vrf.vkey\" ]\n  firstExceptT ShelleyGenesisCmdTextEnvReadFileError $\n    Map.fromList <$>\n      sequence\n        [ (,) ix <$> readKey file\n        | (file, ix) <- fileIxs ]\n  where\n    readKey = newExceptT\n            . readFileTextEnvelope (AsVerificationKey AsVrfKey)\n\n\n-- | The file path is of the form @\"delegate-keys/delegate3.vkey\"@.\n-- This function reads the file and extracts the index (in this case 3).\n--\nextractFileNameIndex :: FilePath -> Maybe Int\nextractFileNameIndex fp =\n  case filter isDigit fp of\n    [] -> Nothing\n    xs -> readMaybe xs\n\nextractFileNameIndexes :: [FilePath]\n                       -> ExceptT ShelleyGenesisCmdError IO [(FilePath, Int)]\nextractFileNameIndexes files = do\n    case [ file | (file, Nothing) <- filesIxs ] of\n      []     -> return ()\n      files' -> throwError (ShelleyGenesisCmdFilesNoIndex files')\n    case filter (\\g -> length g > 1)\n       . groupBy ((==) `on` snd)\n       . sortBy (compare `on` snd)\n       $ [ (file, ix) | (file, Just ix) <- filesIxs ] of\n      [] -> return ()\n      (g:_) -> throwError (ShelleyGenesisCmdFilesDupIndex (map fst g))\n\n    return [ (file, ix) | (file, Just ix) <- filesIxs ]\n  where\n    filesIxs = [ (file, extractFileNameIndex file) | file <- files ]\n\nreadInitialFundAddresses :: FilePath -> NetworkId\n                         -> ExceptT ShelleyGenesisCmdError IO [AddressInEra ShelleyEra]\nreadInitialFundAddresses utxodir nw = do\n    files <- liftIO (listDirectory utxodir)\n    vkeys <- firstExceptT ShelleyGenesisCmdTextEnvReadFileError $\n               sequence\n                 [ newExceptT $\n                     readFileTextEnvelope (AsVerificationKey AsGenesisUTxOKey)\n                                          (utxodir </> file)\n                 | file <- files\n                 , takeExtension file == \".vkey\" ]\n    return [ addr | vkey <- vkeys\n           , let vkh  = verificationKeyHash (castVerificationKey vkey)\n                 addr = makeShelleyAddressInEra nw (PaymentCredentialByKey vkh)\n                                                NoStakeAddress\n           ]\n\n\n-- | Hash a genesis file\nrunGenesisHashFile :: GenesisFile -> ExceptT ShelleyGenesisCmdError IO ()\nrunGenesisHashFile (GenesisFile fpath) = do\n   content <- handleIOExceptT (ShelleyGenesisCmdGenesisFileError . FileIOError fpath) $\n              BS.readFile fpath\n   let gh :: Crypto.Hash Crypto.Blake2b_256 ByteString\n       gh = Crypto.hashWith id content\n   liftIO $ Text.putStrLn (Crypto.hashToTextAsHex gh)\n"}}}
2020-12-02 22:44:49.724074273 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":0,"result":null}
2020-12-02 22:44:49.724214629 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":0,\"result\":null}"
2020-12-02 22:44:49.724377848 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs",Modified)]
2020-12-02 22:44:49.724812065 [ThreadId 44] - Finishing build session(exception: AsyncCancelled)
2020-12-02 22:44:49.724879073 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 22:44:49.724968027 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs
2020-12-02 22:44:49.726388121 [ThreadId 97] - Consulting the cradle for "cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"
2020-12-02 22:44:49.727543108 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":0},"method":"window/workDoneProgress/create","id":1}
2020-12-02 22:44:49.72771205 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","cancellable":false,"title":"Setting up cardano-node (for cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs)"},"token":0},"method":"$/progress"}
2020-12-02 22:44:49.762426963 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"}}}
2020-12-02 22:44:49.762774847 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"},"range":{"start":{"line":282,"character":75},"end":{"line":282,"character":75}},"context":{"diagnostics":[]}}}
2020-12-02 22:44:49.762963149 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":1,"result":null}
2020-12-02 22:44:49.763089579 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":null}"
2020-12-02 22:44:49.825937349 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":"3"},"method":"window/workDoneProgress/create","id":2}
2020-12-02 22:44:49.826123281 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","title":"Processing"},"token":"3"},"method":"$/progress"}
2020-12-02 22:44:49.826382159 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":2,"result":null}
2020-12-02 22:44:49.826498996 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":2,\"result\":null}"
2020-12-02 22:44:49.926134948 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"1/2"},"token":"3"},"method":"$/progress"}
2020-12-02 22:44:49.977263634 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"}}}
2020-12-02 22:44:49.977592626 [ThreadId 117] - Plugin.makeCodeLens (ideLogger)
2020-12-02 22:44:50.514767168 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}
2020-12-02 22:44:50.515041003 [ThreadId 110] - CodeAction was cancelled
2020-12-02 22:44:50.515200982 [ThreadId 108] - Cancelled request IdInt 2
2020-12-02 22:44:50.51531674 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"},"range":{"start":{"line":282,"character":75},"end":{"line":282,"character":75}},"context":{"diagnostics":[]}}}
2020-12-02 22:44:50.515378134 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":2}
2020-12-02 22:44:58.615818711 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"}}}
2020-12-02 22:44:58.616068647 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"}
2020-12-02 22:44:58.616370951 [ThreadId 25] - Set files of interest to: []
2020-12-02 22:44:58.616528498 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}
2020-12-02 22:44:58.616577553 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs
2020-12-02 22:44:58.616680175 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}
2020-12-02 22:44:58.616697052 [ThreadId 117] - codeLens was cancelled
2020-12-02 22:44:58.616817992 [ThreadId 123] - CodeAction was cancelled
2020-12-02 22:44:58.616793606 [ThreadId 115] - Cancelled request IdInt 3
2020-12-02 22:44:58.616884853 [ThreadId 121] - Cancelled request IdInt 4
2020-12-02 22:44:58.616973576 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":3}
2020-12-02 22:44:58.617093226 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":4}
2020-12-02 22:44:58.617075139 [ThreadId 135] - Data.HashMap.Internal.(!): key not found
CallStack (from HasCallStack):
  error, called at ./Data/HashMap/Internal.hs:756:16 in unordered-containers-0.2.13.0-f519383be173bea40a77beaaf5249f6ae8af1a29545fb7d3d57c773b8188dc00:Data.HashMap.Internal
  !, called at src/Development/IDE/Import/DependencyInformation.hs:107:40 in ghcide-0.4.0-inplace:Development.IDE.Import.DependencyInformation
2020-12-02 22:44:58.617255508 [ThreadId 135] - finish: ParentTC (took 0.00s)
2020-12-02 22:44:58.6930215 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE DerivingVia #-}\n{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE TypeFamilies #-}\n\nmodule Cardano.Api.Script (\n    -- * Languages\n    SimpleScriptV1,\n    SimpleScriptV2,\n    ScriptLanguage(..),\n    SimpleScriptVersion(..),\n    PlutusScriptVersion,\n    AnyScriptLanguage(..),\n    IsScriptLanguage(..),\n    IsSimpleScriptLanguage(..),\n\n    -- * Scripts in a specific language\n    Script(..),\n\n    -- * Scripts in any language\n    ScriptInAnyLang(..),\n    toScriptInAnyLang,\n\n    -- * Scripts in an era\n    ScriptInEra(..),\n    toScriptInEra,\n    eraOfScriptInEra,\n\n    -- ** Languages supported in each era\n    ScriptLanguageInEra(..),\n    scriptLanguageSupportedInEra,\n    languageOfScriptLanguageInEra,\n    eraOfScriptLanguageInEra,\n\n    -- * The simple script language\n    SimpleScript(..),\n    TimeLocksSupported(..),\n    timeLocksSupported,\n    adjustSimpleScriptVersion,\n\n    -- * Script hashes\n    ScriptHash(..),\n    hashScript,\n\n    -- * Internal conversion functions\n    toShelleyScript,\n    toShelleyMultiSig,\n    fromShelleyMultiSig,\n    toAllegraTimelock,\n    fromAllegraTimelock,\n    toShelleyScriptHash,\n    fromShelleyScriptHash,\n\n    -- * Data family instances\n    AsType(..)\n  ) where\n\nimport           Prelude\n\nimport qualified Data.ByteString.Lazy as LBS\nimport           Data.Foldable (toList)\nimport           Data.Scientific (toBoundedInteger)\nimport           Data.String (IsString)\nimport           Data.Text (Text)\nimport qualified Data.Text as Text\nimport qualified Data.Text.Encoding as Text\nimport           Data.Type.Equality (TestEquality(..), (:~:)(Refl))\n\nimport           Data.Aeson (Value (..), object, (.:), (.=))\nimport qualified Data.Aeson as Aeson\nimport qualified Data.Aeson.Types as Aeson\nimport qualified Data.Sequence.Strict as Seq\nimport           Data.Vector (Vector)\nimport qualified Data.Vector as Vector\n\nimport           Control.Applicative\nimport           Control.Monad\n\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\nimport qualified Cardano.Crypto.Hash.Class as Crypto\n\nimport           Cardano.Slotting.Slot (SlotNo)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era  as Ledger\n\nimport qualified Cardano.Ledger.ShelleyMA.Timelocks as Timelock\nimport           Ouroboros.Consensus.Shelley.Eras\n                   (StandardAllegra, StandardCrypto, StandardShelley)\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Scripts as Shelley\n\nimport           Cardano.Api.Eras\nimport           Cardano.Api.Hash\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseJSON\nimport           Cardano.Api.SerialiseRaw\nimport           Cardano.Api.SerialiseTextEnvelope\n\n{- HLINT ignore \"Use section\" -}\n\n\n-- ----------------------------------------------------------------------------\n-- Types for script language and version\n--\n\n-- | The original simple script language which supports\n--\n-- * require a signature from a given key (by verification key hash)\n-- * n-way and combinator\n-- * n-way or combinator\n-- * m-of-n combinator\n--\n-- This version of the language was introduced in the 'ShelleyEra'.\n--\ndata SimpleScriptV1\n\n-- | The second version of the simple script language. It has all the features\n-- of 'SimpleScriptV1' plus new atomic predicates:\n--\n-- * require the time be before a given slot number\n-- * require the time be after a given slot number\n--\n-- This version of the language was introduced in the 'AllegraEra'.\n--\ndata SimpleScriptV2\n\n-- | Place holder type to show what the pattern is to extend to multiple\n-- languages, not just multiple versions of a single language.\n--\ndata PlutusScriptV1\n\ninstance HasTypeProxy SimpleScriptV1 where\n    data AsType SimpleScriptV1 = AsSimpleScriptV1\n    proxyToAsType _ = AsSimpleScriptV1\n\ninstance HasTypeProxy SimpleScriptV2 where\n    data AsType SimpleScriptV2 = AsSimpleScriptV2\n    proxyToAsType _ = AsSimpleScriptV2\n\ninstance HasTypeProxy PlutusScriptV1 where\n    data AsType PlutusScriptV1 = AsPlutusScriptV1\n    proxyToAsType _ = AsPlutusScriptV1\n\n\n-- ----------------------------------------------------------------------------\n-- Value level representation for script languages\n--\ndata ScriptLanguage lang where\n\n     SimpleScriptLanguage :: SimpleScriptVersion lang -> ScriptLanguage lang\n\n     PlutusScriptLanguage :: PlutusScriptVersion lang -> ScriptLanguage lang\n\nderiving instance (Eq   (ScriptLanguage lang))\nderiving instance (Show (ScriptLanguage lang))\n\ninstance TestEquality ScriptLanguage where\n    testEquality (SimpleScriptLanguage lang)\n                 (SimpleScriptLanguage lang') = testEquality lang lang'\n\n    testEquality (PlutusScriptLanguage lang)\n                 (PlutusScriptLanguage lang') = testEquality lang lang'\n\n    testEquality  _ _ = Nothing\n\n\ndata SimpleScriptVersion lang where\n\n     SimpleScriptV1 :: SimpleScriptVersion SimpleScriptV1\n     SimpleScriptV2 :: SimpleScriptVersion SimpleScriptV2\n\nderiving instance (Eq   (SimpleScriptVersion lang))\nderiving instance (Show (SimpleScriptVersion lang))\n\ninstance TestEquality SimpleScriptVersion where\n    testEquality SimpleScriptV1 SimpleScriptV1 = Just Refl\n    testEquality SimpleScriptV2 SimpleScriptV2 = Just Refl\n    testEquality _              _              = Nothing\n\n\ndata PlutusScriptVersion lang\n  -- For now, there are no such versions, but it'd be like this:\n  -- PlutusScriptV1 :: PlutusScriptVersion PlutusScriptV1\n\nderiving instance (Eq   (PlutusScriptVersion lang))\nderiving instance (Show (PlutusScriptVersion lang))\n\ninstance TestEquality PlutusScriptVersion where\n    testEquality lang = case lang of {}\n\n\ndata AnyScriptLanguage where\n     AnyScriptLanguage :: ScriptLanguage lang -> AnyScriptLanguage\n\nderiving instance (Show AnyScriptLanguage)\n\ninstance Eq AnyScriptLanguage where\n    AnyScriptLanguage lang == AnyScriptLanguage lang' =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> True -- since no constructors share types\n\ninstance Enum AnyScriptLanguage where\n    toEnum 0 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    toEnum 1 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n    toEnum _ = error \"AnyScriptLanguage.toEnum: bad argument\"\n\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)) = 0\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)) = 1\n    fromEnum (AnyScriptLanguage (PlutusScriptLanguage lang)) = case lang of {}\n\ninstance Bounded AnyScriptLanguage where\n    minBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    maxBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n\n\nclass HasTypeProxy lang => IsScriptLanguage lang where\n    scriptLanguage :: ScriptLanguage lang\n\ninstance IsScriptLanguage SimpleScriptV1 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV1\n\ninstance IsScriptLanguage SimpleScriptV2 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV2\n\n--instance IsScriptLanguage PlutusScriptV1 where\n--    scriptLanguage = PlutusScriptLanguage PlutusScriptV1\n\n\nclass IsScriptLanguage lang => IsSimpleScriptLanguage lang where\n    simpleScriptVersion :: SimpleScriptVersion lang\n\ninstance IsSimpleScriptLanguage SimpleScriptV1 where\n    simpleScriptVersion = SimpleScriptV1\n\ninstance IsSimpleScriptLanguage SimpleScriptV2 where\n    simpleScriptVersion = SimpleScriptV2\n\n\n\n-- ----------------------------------------------------------------------------\n-- Script type: covering all script languages\n--\n\n-- | A script in a particular language.\n--\n-- See also 'ScriptInAnyLang' for a script in any of the languages that is available within\n-- a particular era.\n--\n-- See also 'ScriptInEra' for a script in a language that is available within\n-- a particular era.\n--\ndata Script lang where\n\n     SimpleScript :: !(SimpleScriptVersion lang)\n                  -> !(SimpleScript lang)\n                  -> Script lang\n\n     -- Place holder type to show what the pattern is to extend to multiple\n     -- languages, not just multiple versions of a single language.\n     -- For now there are no values of PlutusScriptVersion so this branch\n     -- is inaccessible.\n     PlutusScript :: !(PlutusScriptVersion lang)\n                  -> ()\n                  -> Script lang\n\nderiving instance (Eq   (Script lang))\nderiving instance (Show (Script lang))\n\ninstance HasTypeProxy lang => HasTypeProxy (Script lang) where\n    data AsType (Script lang) = AsScript (AsType lang)\n    proxyToAsType _ = AsScript (proxyToAsType (Proxy :: Proxy lang))\n\ninstance IsScriptLanguage lang => SerialiseAsCBOR (Script lang) where\n    serialiseToCBOR (SimpleScript SimpleScriptV1 s) =\n      CBOR.serialize' (toShelleyMultiSig s)\n\n    serialiseToCBOR (SimpleScript SimpleScriptV2 s) =\n      CBOR.serialize' (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    deserialiseFromCBOR _ bs =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 ->\n              SimpleScript SimpleScriptV1\n            . fromShelleyMultiSig\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        SimpleScriptLanguage SimpleScriptV2 ->\n              SimpleScript SimpleScriptV2\n            . (fromAllegraTimelock TimeLocksInSimpleScriptV2\n                                :: Timelock.Timelock StandardAllegra\n                                -> SimpleScript SimpleScriptV2)\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        PlutusScriptLanguage v -> case v of {}\n\n\ninstance IsScriptLanguage lang => HasTextEnvelope (Script lang) where\n    textEnvelopeType _ =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 -> \"SimpleScriptV1\"\n        SimpleScriptLanguage SimpleScriptV2 -> \"SimpleScriptV2\"\n        PlutusScriptLanguage v -> case v of {}\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in any language\n--\n\n-- | Sometimes it is necessary to handle all languages without making static\n-- type distinctions between languages. For example, when reading external\n-- input, or before the era context is known.\n--\n-- Use 'toScriptInEra' to convert to a script in the context of an era.\n--\ndata ScriptInAnyLang where\n     ScriptInAnyLang :: ScriptLanguage lang\n                     -> Script lang\n                     -> ScriptInAnyLang\n\nderiving instance Show ScriptInAnyLang\n\n-- The GADT in the ScriptInAnyLang constructor requires a custom Eq instance\ninstance Eq ScriptInAnyLang where\n    (==) (ScriptInAnyLang lang  script)\n         (ScriptInAnyLang lang' script') =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\n-- | Convert a script in a specific statically-known language to a\n-- 'ScriptInAnyLang'.\n--\n-- No inverse to this is provided, just do case analysis on the 'ScriptLanguage'\n-- field within the 'ScriptInAnyLang' constructor.\n--\ntoScriptInAnyLang :: Script lang -> ScriptInAnyLang\ntoScriptInAnyLang s@(SimpleScript v _) =\n    ScriptInAnyLang (SimpleScriptLanguage v) s\n\ninstance HasTypeProxy ScriptInAnyLang where\n    data AsType ScriptInAnyLang = AsScriptInAnyLang\n    proxyToAsType _ = AsScriptInAnyLang\n\ninstance SerialiseAsCBOR ScriptInAnyLang where\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript _v s)) =\n      -- Note that the CBOR encoding here is compatible with the previous\n      -- serialisation format for the @Script@ type from @cardano-ledger-specs@.\n      --\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 0\n       <> toCBOR (toShelleyMultiSig s)\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript _v s)) =\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 1\n       <> toCBOR (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    serialiseToCBOR (ScriptInAnyLang (PlutusScriptLanguage v) _) = case v of {}\n\n    deserialiseFromCBOR AsScriptInAnyLang bs =\n        CBOR.decodeAnnotator \"Script\" decodeScript (LBS.fromStrict bs)\n      where\n        decodeScript :: CBOR.Decoder s (CBOR.Annotator ScriptInAnyLang)\n        decodeScript = do\n          CBOR.decodeListLenOf 2\n          tag <- CBOR.decodeWord8\n\n          case tag of\n            0 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Shelley.MultiSig StandardShelley -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                        . SimpleScript SimpleScriptV1\n                        . fromShelleyMultiSig\n\n            1 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Timelock.Timelock StandardAllegra -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                        . SimpleScript SimpleScriptV2\n                        . fromAllegraTimelock TimeLocksInSimpleScriptV2\n\n            _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag \"Script\" tag\n\ninstance HasTextEnvelope ScriptInAnyLang where\n    textEnvelopeType _ = \"Script\"\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in the context of a ledger era\n--\n\ndata ScriptInEra era where\n     ScriptInEra :: ScriptLanguageInEra lang era\n                 -> Script lang\n                 -> ScriptInEra era\n\nderiving instance Show (ScriptInEra era)\n\n-- The GADT in the ScriptInEra constructor requires a custom instance\ninstance Eq (ScriptInEra era) where\n    (==) (ScriptInEra langInEra  script)\n         (ScriptInEra langInEra' script') =\n      case testEquality (languageOfScriptLanguageInEra langInEra)\n                        (languageOfScriptLanguageInEra langInEra') of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\ndata ScriptLanguageInEra lang era where\n\n     SimpleScriptV1InShelley :: ScriptLanguageInEra SimpleScriptV1 ShelleyEra\n     SimpleScriptV1InAllegra :: ScriptLanguageInEra SimpleScriptV1 AllegraEra\n     SimpleScriptV1InMary    :: ScriptLanguageInEra SimpleScriptV1 MaryEra\n\n     SimpleScriptV2InAllegra :: ScriptLanguageInEra SimpleScriptV2 AllegraEra\n     SimpleScriptV2InMary    :: ScriptLanguageInEra SimpleScriptV2 MaryEra\n\nderiving instance Eq   (ScriptLanguageInEra lang era)\nderiving instance Show (ScriptLanguageInEra lang era)\n\ninstance HasTypeProxy era => HasTypeProxy (ScriptInEra era) where\n    data AsType (ScriptInEra era) = AsScriptInEra (AsType era)\n    proxyToAsType _ = AsScriptInEra (proxyToAsType (Proxy :: Proxy era))\n\ninstance IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era) where\n    serialiseToCBOR (ScriptInEra _lang s) =\n      serialiseToCBOR (toScriptInAnyLang s)\n\n    deserialiseFromCBOR (AsScriptInEra _) bs = do\n      s@(ScriptInAnyLang lang _) <- deserialiseFromCBOR AsScriptInAnyLang bs\n      case toScriptInEra cardanoEra s of\n        Just s' -> Right s'\n        Nothing ->\n          Left $ CBOR.DecoderErrorCustom\n                 (Text.pack (show (cardanoEra :: CardanoEra era)) <> \" Script\")\n                 (\"Script language \" <> Text.pack (show lang) <>\n                  \" not supported in this era\")\n\ninstance IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era) where\n    textEnvelopeType _ =\n      case shelleyBasedEra :: ShelleyBasedEra era of\n        ShelleyBasedEraShelley -> \"ScriptInEra ShelleyEra\"\n        ShelleyBasedEraAllegra -> \"ScriptInEra AllegraEra\"\n        ShelleyBasedEraMary    -> \"ScriptInEra MaryEra\"\n\n\n-- | Check if a given script language is supported in a given era, and if so\n-- return the evidence.\n--\nscriptLanguageSupportedInEra :: CardanoEra era\n                             -> ScriptLanguage lang\n                             -> Maybe (ScriptLanguageInEra lang era)\nscriptLanguageSupportedInEra era lang =\n    case (era, lang) of\n      (ShelleyEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InShelley\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InMary\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InMary\n\n      _ -> Nothing\n\nlanguageOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                              -> ScriptLanguage lang\nlanguageOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InAllegra -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InMary    -> SimpleScriptLanguage SimpleScriptV1\n\n      SimpleScriptV2InAllegra -> SimpleScriptLanguage SimpleScriptV2\n      SimpleScriptV2InMary    -> SimpleScriptLanguage SimpleScriptV2\n\neraOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                         -> ShelleyBasedEra era\neraOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> ShelleyBasedEraShelley\n\n      SimpleScriptV1InAllegra -> ShelleyBasedEraAllegra\n      SimpleScriptV2InAllegra -> ShelleyBasedEraAllegra\n\n      SimpleScriptV1InMary    -> ShelleyBasedEraMary\n      SimpleScriptV2InMary    -> ShelleyBasedEraMary\n\n\n-- | Given a target era and a script in some language, check if the language is\n-- supported in that era, and if so return a 'ScriptInEra'.\n--\ntoScriptInEra :: CardanoEra era -> ScriptInAnyLang -> Maybe (ScriptInEra era)\ntoScriptInEra era (ScriptInAnyLang lang s) = do\n    lang' <- scriptLanguageSupportedInEra era lang\n    return (ScriptInEra lang' s)\n\neraOfScriptInEra :: ScriptInEra era -> ShelleyBasedEra era\neraOfScriptInEra (ScriptInEra langInEra _) = eraOfScriptLanguageInEra langInEra\n\n\n-- ----------------------------------------------------------------------------\n-- Script Hash\n--\n\n-- | We have this type separate from the 'Hash' type to avoid the script\n-- hash type being parametrised by the era. The representation is era\n-- independent, and there are many places where we want to use a script\n-- hash where we don't want things to be era-parametrised.\n--\nnewtype ScriptHash = ScriptHash (Shelley.ScriptHash StandardShelley)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex ScriptHash\n\ninstance HasTypeProxy ScriptHash where\n    data AsType ScriptHash = AsScriptHash\n    proxyToAsType _ = AsScriptHash\n\ninstance SerialiseAsRawBytes ScriptHash where\n    serialiseToRawBytes (ScriptHash (Shelley.ScriptHash h)) =\n      Crypto.hashToBytes h\n\n    deserialiseFromRawBytes AsScriptHash bs =\n      ScriptHash . Shelley.ScriptHash <$> Crypto.hashFromBytes bs\n\n\nhashScript :: Script lang -> ScriptHash\nhashScript (SimpleScript SimpleScriptV1 s) =\n    -- For V1, we convert to the Shelley-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . Shelley.hashMultiSigScript\n  . toShelleyMultiSig\n  $ s\n\nhashScript (SimpleScript SimpleScriptV2 s) =\n    -- For V1, we convert to the Allegra-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . coerceShelleyScriptHash\n  . Timelock.hashTimelockScript\n  . (toAllegraTimelock :: SimpleScript SimpleScriptV2\n                       -> Timelock.Timelock StandardAllegra)\n  $ s\n\n\ntoShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                    => ScriptHash -> Shelley.ScriptHash ledgerera\ntoShelleyScriptHash (ScriptHash h) = coerceShelleyScriptHash h\n\nfromShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                      => Shelley.ScriptHash ledgerera -> ScriptHash\nfromShelleyScriptHash = ScriptHash . coerceShelleyScriptHash\n\ncoerceShelleyScriptHash :: Ledger.Crypto ledgereraA ~ Ledger.Crypto ledgereraB\n                        => Shelley.ScriptHash ledgereraA\n                        -> Shelley.ScriptHash ledgereraB\ncoerceShelleyScriptHash (Shelley.ScriptHash h) =\n    Shelley.ScriptHash (Crypto.castHash h)\n\n\n-- ----------------------------------------------------------------------------\n-- The simple native script language\n--\n\ndata SimpleScript lang where\n\n     RequireSignature  :: !(Hash PaymentKey)\n                       -> SimpleScript lang\n\n     RequireTimeBefore :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireTimeAfter  :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireAllOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireAnyOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireMOf        :: Int -> [SimpleScript lang] -> SimpleScript lang\n\nderiving instance Eq   (SimpleScript lang)\nderiving instance Show (SimpleScript lang)\n\n\n-- | Time lock feature in the 'SimpleScript' language.\n--\n-- The constructors of this type serve as evidence that the timelocks feature\n-- is supported in particular versions of the language.\n--\ndata TimeLocksSupported lang where\n     TimeLocksInSimpleScriptV2 :: TimeLocksSupported SimpleScriptV2\n\nderiving instance Eq   (TimeLocksSupported lang)\nderiving instance Show (TimeLocksSupported lang)\n\ntimeLocksSupported :: SimpleScriptVersion lang\n                   -> Maybe (TimeLocksSupported lang)\ntimeLocksSupported SimpleScriptV1 = Nothing\ntimeLocksSupported SimpleScriptV2 = Just TimeLocksInSimpleScriptV2\n\n\n-- | Try converting the 'SimpleScript' into a different version of the language.\n--\n-- This will work when the script only uses the features of the target language\n-- version. For example converting from 'SimpleScriptV2' to 'SimpleScriptV1'\n-- will work if the script happens not to use time locks feature. On the other\n-- hand converting 'SimpleScriptV1' to 'SimpleScriptV2' will always work because\n-- it is backwards compatible.\n--\nadjustSimpleScriptVersion :: SimpleScriptVersion lang'\n                          -> SimpleScript lang\n                          -> Maybe (SimpleScript lang')\nadjustSimpleScriptVersion target = go\n  where\n    go (RequireSignature sig) = pure (RequireSignature sig)\n\n    go (RequireTimeBefore _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeBefore supported slot)\n\n    go (RequireTimeAfter _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeAfter supported slot)\n\n    go (RequireAllOf ss) = RequireAllOf <$> traverse go ss\n    go (RequireAnyOf ss) = RequireAnyOf <$> traverse go ss\n    go (RequireMOf m ss) = RequireMOf m <$> traverse go ss\n\n\n-- ----------------------------------------------------------------------------\n-- Conversion functions\n--\n\ntoShelleyScript :: ScriptInEra era -> Ledger.Script (ShelleyLedgerEra era)\ntoShelleyScript (ScriptInEra langInEra (SimpleScript _ script)) =\n    case langInEra of\n      SimpleScriptV1InShelley -> toShelleyMultiSig script\n\n      SimpleScriptV1InAllegra -> toAllegraTimelock script\n      SimpleScriptV1InMary    -> toAllegraTimelock script\n      SimpleScriptV2InAllegra -> toAllegraTimelock script\n      SimpleScriptV2InMary    -> toAllegraTimelock script\n\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\ntoShelleyMultiSig :: SimpleScript SimpleScriptV1\n                  -> Shelley.MultiSig StandardShelley\ntoShelleyMultiSig = go\n  where\n    go :: SimpleScript SimpleScriptV1 -> Shelley.MultiSig StandardShelley\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Shelley.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Shelley.RequireAllOf (map go s)\n    go (RequireAnyOf s) = Shelley.RequireAnyOf (map go s)\n    go (RequireMOf m s) = Shelley.RequireMOf m (map go s)\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\nfromShelleyMultiSig :: Shelley.MultiSig StandardShelley -> SimpleScript lang\nfromShelleyMultiSig = go\n  where\n    go (Shelley.RequireSignature kh)\n                                = RequireSignature\n                                    (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Shelley.RequireAllOf s) = RequireAllOf (map go s)\n    go (Shelley.RequireAnyOf s) = RequireAnyOf (map go s)\n    go (Shelley.RequireMOf m s) = RequireMOf m (map go s)\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\ntoAllegraTimelock :: forall lang ledgerera.\n                     (Ledger.Era ledgerera,\n                      Ledger.Crypto ledgerera ~ StandardCrypto)\n                  => SimpleScript lang -> Timelock.Timelock ledgerera\ntoAllegraTimelock = go\n  where\n    go :: SimpleScript lang -> Timelock.Timelock ledgerera\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Timelock.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Timelock.RequireAllOf (Seq.fromList (map go s))\n    go (RequireAnyOf s) = Timelock.RequireAnyOf (Seq.fromList (map go s))\n    go (RequireMOf m s) = Timelock.RequireMOf m (Seq.fromList (map go s))\n    go (RequireTimeBefore _ t) = Timelock.RequireTimeExpire t\n    go (RequireTimeAfter  _ t) = Timelock.RequireTimeStart  t\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\nfromAllegraTimelock ::    (Ledger.Era ledgerera,\n                           Ledger.Crypto ledgerera ~ StandardCrypto)\n                       => TimeLocksSupported lang\n                       -> Timelock.Timelock ledgerera\n                       -> SimpleScript lang\nfromAllegraTimelock timelocks = go\n  where\n    go (Timelock.RequireSignature kh) = RequireSignature\n                                          (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Timelock.RequireTimeExpire t) = RequireTimeBefore timelocks t\n    go (Timelock.RequireTimeStart  t) = RequireTimeAfter  timelocks t\n    go (Timelock.RequireAllOf      s) = RequireAllOf (map go (toList s))\n    go (Timelock.RequireAnyOf      s) = RequireAnyOf (map go (toList s))\n    go (Timelock.RequireMOf      i s) = RequireMOf i (map go (toList s))\n\n\n-- ----------------------------------------------------------------------------\n-- JSON serialisation\n--\n\ninstance ToJSON (Script lang) where\n  toJSON (SimpleScript _ script) = toJSON script\n\ninstance ToJSON ScriptInAnyLang where\n  toJSON (ScriptInAnyLang _ script) = toJSON script\n\ninstance ToJSON (ScriptInEra era) where\n  toJSON (ScriptInEra _ script) = toJSON script\n\ninstance ToJSON (SimpleScript lang) where\n  toJSON (RequireSignature pKeyHash) =\n    object [ \"type\"    .= String \"sig\"\n           , \"keyHash\" .= Text.decodeUtf8 (serialiseToRawBytesHex pKeyHash)\n           ]\n  toJSON (RequireTimeBefore _ slot) =\n    object [ \"type\" .= String \"before\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireTimeAfter _ slot) =\n    object [ \"type\" .= String \"after\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireAnyOf reqScripts) =\n    object [ \"type\" .= String \"any\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireAllOf reqScripts) =\n    object [ \"type\" .= String \"all\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireMOf reqNum reqScripts) =\n    object [ \"type\" .= String \"atLeast\"\n           , \"required\" .= reqNum\n           , \"scripts\" .= map toJSON reqScripts\n           ]\n\n\ninstance IsScriptLanguage lang => FromJSON (Script lang) where\n  parseJSON v =\n    case scriptLanguage :: ScriptLanguage lang of\n      SimpleScriptLanguage lang -> SimpleScript lang <$>\n                                     parseSimpleScript lang v\n      PlutusScriptLanguage lang -> case lang of {}\n\n\ninstance FromJSON ScriptInAnyLang where\n  parseJSON v =\n      -- The SimpleScript language has the property that it is backwards\n      -- compatible, so we can parse as the latest version and then downgrade\n      -- to the minimum version that has all the features actually used.\n      toMinimumSimpleScriptVersion <$> parseSimpleScript SimpleScriptV2 v\n    where\n      --TODO: this will need to be adjusted when more versions are added\n      -- with appropriate helper functions it can probably be done in an\n      -- era-generic style\n      toMinimumSimpleScriptVersion s =\n        case adjustSimpleScriptVersion SimpleScriptV1 s of\n          Nothing -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript SimpleScriptV2 s)\n          Just s' -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsCardanoEra era => FromJSON (ScriptInEra era) where\n  parseJSON v =\n    case cardanoEra :: CardanoEra era of\n      ByronEra   -> fail \"Scripts are not supported in the Byron era\"\n\n      ShelleyEra -> ScriptInEra SimpleScriptV1InShelley\n                  . SimpleScript SimpleScriptV1\n                <$> parseSimpleScript SimpleScriptV1 v\n\n      --TODO: this will need to be adjusted when more versions are added.\n      -- It can probably be done in an era-generic style, with the use of\n      -- appropriate helper functions.\n      AllegraEra -> toMinimumSimpleScriptVersion\n                <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InAllegra\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InAllegra\n                                     (SimpleScript SimpleScriptV1 s')\n\n      MaryEra -> toMinimumSimpleScriptVersion\n             <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InMary\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InMary\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang) where\n  parseJSON = parseSimpleScript simpleScriptVersion\n\n\nparseSimpleScript :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseSimpleScript lang v = parseScriptSig          v\n                       <|> parseScriptBefore  lang v\n                       <|> parseScriptAfter   lang v\n                       <|> parseScriptAny     lang v\n                       <|> parseScriptAll     lang v\n                       <|> parseScriptAtLeast lang v\n\nparseScriptAny :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAny lang =\n    Aeson.withObject \"any\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"any\" -> do vs <- obj .: \"scripts\"\n                    RequireAnyOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"any\\\" script value not found\"\n\nparseScriptAll :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAll lang =\n    Aeson.withObject \"all\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"all\" -> do vs <- obj .: \"scripts\"\n                    RequireAllOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"all\\\" script value not found\"\n\nparseScriptAtLeast :: SimpleScriptVersion lang\n                   -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAtLeast lang =\n    Aeson.withObject \"atLeast\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"atLeast\" -> do\n          r  <- obj .: \"required\"\n          vs <- obj .: \"scripts\"\n          case r of\n            Number sci ->\n              case toBoundedInteger sci of\n                Just reqInt ->\n                  do scripts <- gatherSimpleScriptTerms lang vs\n                     let numScripts = length scripts\n                     when\n                       (reqInt > numScripts)\n                       (fail $ \"Required number of script signatures exceeds the number of scripts.\"\n                             <> \" Required number: \" <> show reqInt\n                             <> \" Number of scripts: \" <> show numScripts)\n                     return $ RequireMOf reqInt scripts\n                Nothing -> fail $ \"Error in \\\"required\\\" key: \"\n                                <> show sci <> \" is not a valid Int\"\n            _ -> fail \"\\\"required\\\" value should be an integer\"\n        _        -> fail \"\\\"atLeast\\\" script value not found\"\n\ngatherSimpleScriptTerms :: SimpleScriptVersion lang\n                        -> Vector Value -> Aeson.Parser [SimpleScript lang]\ngatherSimpleScriptTerms lang = mapM (parseSimpleScript lang) . Vector.toList\n\nparseScriptSig :: Value -> Aeson.Parser (SimpleScript lang)\nparseScriptSig =\n    Aeson.withObject \"sig\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"sig\" -> do k <- obj .: \"keyHash\"\n                    RequireSignature <$> parsePaymentKeyHash k\n        _     -> fail \"\\\"sig\\\" script value not found\"\n\nparseScriptBefore :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptBefore lang =\n    Aeson.withObject \"before\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"before\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeBefore supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"before\\\" not supported in \" ++ show lang)\n        _ -> fail \"\\\"before\\\" script value not found\"\n\nparseScriptAfter :: SimpleScriptVersion lang\n                 -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAfter lang =\n    Aeson.withObject \"after\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"after\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeAfter supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"after\\\" not supported in \" ++ show lang)\n        _       -> fail \"\\\"after\\\" script value not found\"\n\nparsePaymentKeyHash :: Text -> Aeson.Parser (Hash PaymentKey)\nparsePaymentKeyHash txt =\n    case deserialiseFromRawBytesHex (AsHash AsPaymentKey) (Text.encodeUtf8 txt) of\n      Just payKeyHash -> return payKeyHash\n      Nothing -> fail $ \"Error deserialising payment key hash: \" <> Text.unpack txt\n\n"}}}
2020-12-02 22:44:58.700727612 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-02 22:44:58.701172145 [ThreadId 69] - Finishing build session(exception: AsyncCancelled)
2020-12-02 22:44:58.701292193 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 22:44:58.70148938 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-02 22:44:58.704345679 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-02 22:44:58.706553734 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-02 22:44:58.748238514 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"1/3"},"token":"3"},"method":"$/progress"}
2020-12-02 22:44:58.88758744 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":7,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-02 22:44:58.887788424 [ThreadId 182] - Plugin.makeCodeLens (ideLogger)
2020-12-02 22:44:58.915676955 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":259,"character":0},"end":{"line":259,"character":16}},"context":{"diagnostics":[]}}}
2020-12-02 22:44:58.915929303 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":5}}
2020-12-02 22:44:58.916128555 [ThreadId 172] - CodeAction was cancelled
2020-12-02 22:44:58.916232227 [ThreadId 170] - Cancelled request IdInt 5
2020-12-02 22:44:58.916485779 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":5}
2020-12-02 22:48:40.267082688 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":0},"method":"$/progress"}
2020-12-02 22:48:40.266970396 [ThreadId 97] - Session loading result: Right (ComponentOptions {componentOptions = ["-fbuilding-cabal-package","-O0","-outputdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-odir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-hidir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-stubdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-i","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-isrc","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/autogen","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-optP-include","-optP/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/autogen/cabal_macros.h","-this-unit-id","cardano-cli-1.24.0-inplace","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","/home/jordan/.cabal/store/ghc-8.10.2/package.db","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/packagedb/ghc-8.10.2","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/package.conf.inplace","-package-id","aeson-1.5.4.1-778a06fa5c9318198c793c5f8e2ca8d95fb38f4f10ed2bb32743f99d3f297246","-package-id","aeson-pretty-0.8.8-9b8e5a813f7409b128fda52cd6ba78fcfcdafe24319cbe51431a74775267e91b","-package-id","attoparsec-0.13.2.4-b396c2be954a9ffb3e95bbdaa6fb35ac8c27f1db8915f7964aec17a75da742b8","-package-id","base-4.14.1.0","-package-id","base16-bytestring-1.0.1.0-9f11fc286491f106a9ef784dbd62d74f1270ad38dd03d9b8cbaa41c1bbf814c8","-package-id","base58-bytestring-0.1.0-05a60df8b198010614f5302714ff68e040396e56ff7519d163761623c0de2d98","-package-id","bech32-1.1.0-ae5f2a1a89c10d7c25e2ebed7b7fb0cd489664bd6e6c0de80e0c1dff37d17063","-package-id","binary-0.8.8.0","-package-id","bytestring-0.10.10.0","-package-id","canonical-json-0.6.0.0-ac56e854cb5bbbf28e7a139a204e07dbf874c3bdd188ad7c5a2e0a6c8225de5c","-package-id","cardano-api-1.24.0-inplace","-package-id","cardano-binary-1.5.0-inplace","-package-id","cardano-config-0.1.0.0-inplace","-package-id","cardano-crypto-1.1.0-inplace","-package-id","cardano-crypto-class-2.0.0-inplace","-package-id","cardano-crypto-wrapper-1.3.0-inplace","-package-id","cardano-ledger-0.1.0.0-inplace","-package-id","cardano-ledger-shelley-ma-0.1.0.0-inplace","-package-id","cardano-node-1.24.0-inplace","-package-id","cardano-prelude-0.1.0.0-inplace","-package-id","cardano-slotting-0.1.0.0-inplace","-package-id","cborg-0.2.4.0-4a245966fd5882ffb16d2ef07bb992473fd41fea0a4e61c4acd669aab7242ef9","-package-id","containers-0.6.2.1","-package-id","contra-tracer-0.1.0.0-inplace","-package-id","cryptonite-0.27-8826084f96fb9db464240662656382b25f16ff766ee68e8d02dd9d995db86b80","-package-id","directory-1.3.6.0","-package-id","filepath-1.4.2.1","-package-id","formatting-6.3.7-330f1aaaee1a6193dee6fd50994a301f73441c53ff813f4d131c0e6261ec6d04","-package-id","io-sim-classes-0.2.0.0-inplace","-package-id","iproute-1.7.9-43bc36e75965a204ad802bfb667361131efd65210901659e34179dc2da9d1118","-package-id","memory-0.15.0-618aae508e33731dca15e11c7e941c9d1279b1ed04bf74d2a2b887208cef7d4c","-package-id","microlens-0.4.11.2-d5b93158a7575c34794f2b317f4229428f42a1b93a426edc629c3cc3b601d83f","-package-id","network-3.1.2.0-f313f458cfb9472e49923061663feda9781129bd7a55b5c51b8bf13fb9eff621","-package-id","network-mux-0.1.0.0-inplace","-package-id","network-uri-2.6.3.0-5bbc25b922944130d3a812c001fbe448d17321f63665fc89b3c6ab483fba8ba1","-package-id","optparse-applicative-0.16.0.0-6005665cbdc6c67c10623d1a27ae7079df56bfb349d4c1af4f0d72cbfdeabd79","-package-id","ouroboros-consensus-0.1.0.0-inplace","-package-id","ouroboros-consensus-byron-0.1.0.0-inplace","-package-id","ouroboros-consensus-cardano-0.1.0.0-inplace","-package-id","ouroboros-consensus-shelley-0.1.0.0-inplace","-package-id","ouroboros-network-0.1.0.0-inplace","-package-id","ouroboros-network-framework-0.1.0.0-inplace","-package-id","parsec-3.1.14.0","-package-id","primitive-0.7.1.0-f012577575c0a83a7acb71352c37f9c2228aa22d38df742952e879128e014616","-package-id","process-1.6.9.0","-package-id","scientific-0.3.6.2-8634ec87686367cd9854d817075c6b174f7c80b793cfe710d1a33fad0d669b83","-package-id","shelley-spec-ledger-0.1.0.0-inplace","-package-id","small-steps-0.1.0.0-inplace","-package-id","split-0.2.3.4-fc1699d7aa70bfb0825b796155271fb7cf155c2e532eed2811833e645ca6d844","-package-id","text-1.2.3.2","-package-id","time-1.9.3","-package-id","transformers-0.5.6.2","-package-id","transformers-except-0.1.1-dff5057c0148093fdb22eb905288dea1dc40636273c3c43c25d303bb31f7e9cb","-package-id","unix-2.7.2.2","-package-id","unordered-containers-0.2.13.0-4cfa23410683cfe8b97b82ed15f0d30134b196b546cbf1fdf2d0a9054d02c7db","-package-id","utf8-string-1.0.1.1-d2e6cd8a2f3a2275cd8ab0c899c2cda2466b2849b34f41573a4d3c6fe2038a5a","-package-id","vector-0.12.1.2-9df9fc999682f51f3e81c90fce28e7b7f7243cc5f3e33ff871c9d5a147125c1d","-XHaskell2010","-XNoImplicitPrelude","-XOverloadedStrings","Cardano.CLI.Helpers","Cardano.CLI.Parsers","Cardano.CLI.Run","Cardano.CLI.Types","Cardano.CLI.Environment","Cardano.CLI.Byron.Commands","Cardano.CLI.Byron.Parsers","Cardano.CLI.Byron.Run","Cardano.CLI.Byron.Delegation","Cardano.CLI.Byron.Genesis","Cardano.CLI.Byron.Key","Cardano.CLI.Byron.Legacy","Cardano.CLI.Byron.Tx","Cardano.CLI.Byron.Query","Cardano.CLI.Byron.UpdateProposal","Cardano.CLI.Byron.Vote","Cardano.CLI.Shelley.Commands","Cardano.CLI.Shelley.Key","Cardano.CLI.Shelley.Orphans","Cardano.CLI.Shelley.Parsers","Cardano.CLI.Shelley.Run","Cardano.CLI.Shelley.Run.Address","Cardano.CLI.Shelley.Run.Address.Info","Cardano.CLI.Shelley.Run.Genesis","Cardano.CLI.Shelley.Run.Governance","Cardano.CLI.Shelley.Run.Key","Cardano.CLI.Shelley.Run.Node","Cardano.CLI.Shelley.Run.Pool","Cardano.CLI.Shelley.Run.Query","Cardano.CLI.Shelley.Run.StakeAddress","Cardano.CLI.Shelley.Run.TextView","Cardano.CLI.Shelley.Run.Transaction","Cardano.CLI.Mary.TxOutParser","Cardano.CLI.Mary.ValueParser","Cardano.CLI.TopHandler","Paths_cardano_cli","-Wall","-Wincomplete-record-updates","-Wincomplete-uni-patterns","-Wredundant-constraints","-Wpartial-fields","-Wcompat","-hide-all-packages","-Werror"], componentRoot = "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli", componentDependencies = ["cardano-cli/cardano-cli.cabal","cabal.project","cabal.project.local"]},"/usr/local/lib/ghc-8.10.2")
2020-12-02 22:48:40.472222117 [ThreadId 97] - Using interface files cache dir: /home/jordan/.cache/ghcide/cardano-cli-1.24.0-inplace-034b560baa29292bc6353ab201ea8f8112974f87
2020-12-02 22:48:40.472762103 [ThreadId 97] - Making new HscEnv[cardano-cli-1.24.0-inplace]
2020-12-02 22:48:40.521741282 [ThreadId 97] - New Component Cache HscEnvEq: (([],Just HscEnvEq 11),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-cli/cardano-cli.cabal",Just 2020-12-02 09:21:26.419901309 UTC)])
2020-12-02 22:48:40.624654391 [ThreadId 97] - Known files updated: fromList [(TargetModule Cardano.CLI.Shelley.Run.Query,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Query.hs"]),(TargetModule Cardano.CLI.Byron.UpdateProposal,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/UpdateProposal.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Pool,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Pool.hs"]),(TargetModule Cardano.CLI.Shelley.Run.TextView,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/TextView.hs"]),(TargetModule Cardano.CLI.Byron.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Genesis.hs"]),(TargetModule Cardano.CLI.Shelley.Run,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run.hs"]),(TargetModule Cardano.CLI.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Types.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Key.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Governance,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Governance.hs"]),(TargetModule Paths_cardano_cli,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/autogen/Paths_cardano_cli.hs"]),(TargetModule Cardano.CLI.Byron.Commands,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Commands.hs"]),(TargetModule Cardano.CLI.Run,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Run.hs"]),(TargetModule Cardano.CLI.Helpers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Helpers.hs"]),(TargetModule Cardano.CLI.Shelley.Orphans,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Orphans.hs"]),(TargetModule Cardano.CLI.Byron.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Key.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"]),(TargetModule Cardano.CLI.Shelley.Parsers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"]),(TargetModule Cardano.CLI.Shelley.Run.StakeAddress,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/StakeAddress.hs"]),(TargetModule Cardano.CLI.Environment,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Environment.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Transaction,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"]),(TargetModule Cardano.CLI.Byron.Run,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Run.hs"]),(TargetModule Cardano.CLI.Mary.TxOutParser,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Mary/TxOutParser.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Address,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Node,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Node.hs"]),(TargetModule Cardano.CLI.Mary.ValueParser,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Mary/ValueParser.hs"]),(TargetModule Cardano.CLI.Parsers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Parsers.hs"]),(TargetModule Cardano.CLI.Byron.Delegation,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Delegation.hs"]),(TargetModule Cardano.CLI.Byron.Vote,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Vote.hs"]),(TargetModule Cardano.CLI.Shelley.Commands,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Address.Info,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address/Info.hs"]),(TargetModule Cardano.CLI.Byron.Legacy,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Legacy.hs"]),(TargetModule Cardano.CLI.Byron.Query,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Query.hs"]),(TargetModule Cardano.CLI.Shelley.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Key.hs"]),(TargetModule Cardano.CLI.Byron.Tx,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Tx.hs"]),(TargetModule Cardano.CLI.Byron.Parsers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Parsers.hs"]),(TargetModule Cardano.CLI.TopHandler,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/TopHandler.hs"])]
2020-12-02 22:48:40.625595541 [ThreadId 97] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 22:48:40.625705896 [ThreadId 140] - Finishing build session(exception: AsyncCancelled)
2020-12-02 22:48:40.655184198 [ThreadId 312] - Consulting the cradle for "cardano-api/src/Cardano/Api/Script.hs"
2020-12-02 22:48:40.656068597 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":1},"method":"window/workDoneProgress/create","id":3}
2020-12-02 22:48:40.656253273 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","cancellable":false,"title":"Setting up cardano-node (for cardano-api/src/Cardano/Api/Script.hs)"},"token":1},"method":"$/progress"}
2020-12-02 22:48:40.65663513 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":3,"result":null}
2020-12-02 22:48:40.656774437 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":3,\"result\":null}"
2020-12-02 22:48:40.679275107 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"11/39"},"token":"3"},"method":"$/progress"}
2020-12-02 22:52:10.184143687 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":1},"method":"$/progress"}
2020-12-02 22:52:10.184000873 [ThreadId 312] - Session loading result: Right (ComponentOptions {componentOptions = ["-fbuilding-cabal-package","-O0","-outputdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-odir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-hidir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-stubdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-i","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-isrc","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-optP-include","-optP/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen/cabal_macros.h","-this-unit-id","cardano-api-1.24.0-inplace","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","/home/jordan/.cabal/store/ghc-8.10.2/package.db","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/packagedb/ghc-8.10.2","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/package.conf.inplace","-package-id","aeson-1.5.4.1-778a06fa5c9318198c793c5f8e2ca8d95fb38f4f10ed2bb32743f99d3f297246","-package-id","aeson-pretty-0.8.8-9b8e5a813f7409b128fda52cd6ba78fcfcdafe24319cbe51431a74775267e91b","-package-id","attoparsec-0.13.2.4-b396c2be954a9ffb3e95bbdaa6fb35ac8c27f1db8915f7964aec17a75da742b8","-package-id","base-4.14.1.0","-package-id","base16-bytestring-1.0.1.0-9f11fc286491f106a9ef784dbd62d74f1270ad38dd03d9b8cbaa41c1bbf814c8","-package-id","base58-bytestring-0.1.0-05a60df8b198010614f5302714ff68e040396e56ff7519d163761623c0de2d98","-package-id","base64-0.4.2.2-f3d429f1b298e2d466e9311305c47c04a6d9a575e1b8a3f034d63e7d23e4db48","-package-id","bech32-1.1.0-ae5f2a1a89c10d7c25e2ebed7b7fb0cd489664bd6e6c0de80e0c1dff37d17063","-package-id","bytestring-0.10.10.0","-package-id","cardano-binary-1.5.0-inplace","-package-id","cardano-config-0.1.0.0-inplace","-package-id","cardano-crypto-1.1.0-inplace","-package-id","cardano-crypto-class-2.0.0-inplace","-package-id","cardano-crypto-wrapper-1.3.0-inplace","-package-id","cardano-ledger-0.1.0.0-inplace","-package-id","cardano-ledger-shelley-ma-0.1.0.0-inplace","-package-id","cardano-prelude-0.1.0.0-inplace","-package-id","cardano-slotting-0.1.0.0-inplace","-package-id","cborg-0.2.4.0-4a245966fd5882ffb16d2ef07bb992473fd41fea0a4e61c4acd669aab7242ef9","-package-id","containers-0.6.2.1","-package-id","contra-tracer-0.1.0.0-inplace","-package-id","cryptonite-0.27-8826084f96fb9db464240662656382b25f16ff766ee68e8d02dd9d995db86b80","-package-id","directory-1.3.6.0","-package-id","filepath-1.4.2.1","-package-id","formatting-6.3.7-330f1aaaee1a6193dee6fd50994a301f73441c53ff813f4d131c0e6261ec6d04","-package-id","io-sim-classes-0.2.0.0-inplace","-package-id","iohk-monitoring-0.1.10.1-inplace","-package-id","iproute-1.7.9-43bc36e75965a204ad802bfb667361131efd65210901659e34179dc2da9d1118","-package-id","memory-0.15.0-618aae508e33731dca15e11c7e941c9d1279b1ed04bf74d2a2b887208cef7d4c","-package-id","network-3.1.2.0-f313f458cfb9472e49923061663feda9781129bd7a55b5c51b8bf13fb9eff621","-package-id","network-mux-0.1.0.0-inplace","-package-id","network-uri-2.6.3.0-5bbc25b922944130d3a812c001fbe448d17321f63665fc89b3c6ab483fba8ba1","-package-id","nothunks-0.1.1.0-79bfe850d8c797b8b11355d5e36d13d317a1777729736319881d061a6bbdcf98","-package-id","ouroboros-consensus-0.1.0.0-inplace","-package-id","ouroboros-consensus-byron-0.1.0.0-inplace","-package-id","ouroboros-consensus-cardano-0.1.0.0-inplace","-package-id","ouroboros-consensus-shelley-0.1.0.0-inplace","-package-id","ouroboros-network-0.1.0.0-inplace","-package-id","ouroboros-network-framework-0.1.0.0-inplace","-package-id","scientific-0.3.6.2-8634ec87686367cd9854d817075c6b174f7c80b793cfe710d1a33fad0d669b83","-package-id","serialise-0.2.3.0-2d2b69476413a92a4cff76cdbea89b5f9e9991e103cca95a6e05888ca3848e83","-package-id","shelley-spec-ledger-0.1.0.0-inplace","-package-id","stm-2.5.0.0","-package-id","text-1.2.3.2","-package-id","time-1.9.3","-package-id","transformers-0.5.6.2","-package-id","transformers-except-0.1.1-dff5057c0148093fdb22eb905288dea1dc40636273c3c43c25d303bb31f7e9cb","-package-id","typed-protocols-0.1.0.0-inplace","-package-id","typed-protocols-examples-0.1.0.0-inplace","-package-id","unordered-containers-0.2.13.0-4cfa23410683cfe8b97b82ed15f0d30134b196b546cbf1fdf2d0a9054d02c7db","-package-id","vector-0.12.1.2-9df9fc999682f51f3e81c90fce28e7b7f7243cc5f3e33ff871c9d5a147125c1d","-XHaskell2010","-XNoImplicitPrelude","-XOverloadedStrings","Cardano.API","Cardano.Api.Byron","Cardano.Api.Crypto.Ed25519Bip32","Cardano.Api.LocalChainSync","Cardano.Api.Protocol","Cardano.Api.Protocol.Byron","Cardano.Api.Protocol.Cardano","Cardano.Api.Protocol.Shelley","Cardano.Api.Protocol.Types","Cardano.Api.Shelley","Cardano.Api.Shelley.Genesis","Cardano.Api.TxSubmit","Cardano.Api.Typed","Cardano.Api.TxSubmit.ErrorRender","Cardano.Api.TxSubmit.Types","Cardano.Api.Address","Cardano.Api.Certificate","Cardano.Api.Eras","Cardano.Api.Error","Cardano.Api.Fees","Cardano.Api.Hash","Cardano.Api.HasTypeProxy","Cardano.Api.Key","Cardano.Api.KeysByron","Cardano.Api.KeysShelley","Cardano.Api.KeysPraos","Cardano.Api.NetworkId","Cardano.Api.OperationalCertificate","Cardano.Api.ProtocolParameters","Cardano.Api.Script","Cardano.Api.SerialiseBech32","Cardano.Api.SerialiseCBOR","Cardano.Api.SerialiseJSON","Cardano.Api.SerialiseRaw","Cardano.Api.SerialiseTextEnvelope","Cardano.Api.StakePoolMetadata","Cardano.Api.Tx","Cardano.Api.TxBody","Cardano.Api.TxMetadata","Cardano.Api.Utils","Cardano.Api.Value","-Wall","-Wincomplete-record-updates","-Wincomplete-uni-patterns","-Wredundant-constraints","-Wpartial-fields","-Wcompat","-hide-all-packages","-Werror"], componentRoot = "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api", componentDependencies = ["cardano-api/cardano-api.cabal","cabal.project","cabal.project.local"]},"/usr/local/lib/ghc-8.10.2")
2020-12-02 22:52:10.311221141 [ThreadId 312] - Using interface files cache dir: /home/jordan/.cache/ghcide/cardano-api-1.24.0-inplace-04573879897e8c84891c4ddfb50e69055b43dad3
2020-12-02 22:52:10.31163545 [ThreadId 312] - Using interface files cache dir: /home/jordan/.cache/ghcide/cardano-cli-1.24.0-inplace-758a39064dde9f14d38c6e6661939f9d208dccc2
2020-12-02 22:52:10.311821933 [ThreadId 312] - Making new HscEnv[cardano-api-1.24.0-inplace,cardano-cli-1.24.0-inplace]
2020-12-02 22:52:10.352439787 [ThreadId 312] - New Component Cache HscEnvEq: (([],Just HscEnvEq 13),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-api/cardano-api.cabal",Just 2020-12-02 09:21:26.415901175 UTC)])
2020-12-02 22:52:10.408944838 [ThreadId 312] - New Component Cache HscEnvEq: (([],Just HscEnvEq 14),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-cli/cardano-cli.cabal",Just 2020-12-02 09:21:26.419901309 UTC)])
2020-12-02 22:52:10.526381307 [ThreadId 312] - Known files updated: fromList [(TargetModule Cardano.Api.TxBody,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs"]),(TargetModule Cardano.Api.Tx,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Query,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Query.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Query.hs"]),(TargetModule Cardano.CLI.Byron.UpdateProposal,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/UpdateProposal.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/UpdateProposal.hs"]),(TargetModule Cardano.Api.SerialiseRaw,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseRaw.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Pool,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Pool.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Pool.hs"]),(TargetModule Cardano.Api.Crypto.Ed25519Bip32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Crypto/Ed25519Bip32.hs"]),(TargetModule Cardano.CLI.Shelley.Run.TextView,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/TextView.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/TextView.hs"]),(TargetModule Cardano.CLI.Byron.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Genesis.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Genesis.hs"]),(TargetModule Cardano.Api.SerialiseJSON,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseJSON.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"]),(TargetModule Cardano.Api.Typed,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs"]),(TargetModule Cardano.API,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"]),(TargetModule Cardano.CLI.Shelley.Run,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run.hs"]),(TargetModule Cardano.CLI.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Types.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Types.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Key.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Key.hs"]),(TargetModule Cardano.Api.Shelley.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley/Genesis.hs"]),(TargetModule Cardano.Api.KeysShelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"]),(TargetModule Cardano.Api.SerialiseBech32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseBech32.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Governance,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Governance.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Governance.hs"]),(TargetModule Cardano.Api.Error,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Error.hs"]),(TargetModule Paths_cardano_cli,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/autogen/Paths_cardano_cli.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/autogen/Paths_cardano_cli.hs"]),(TargetModule Cardano.Api.StakePoolMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs"]),(TargetModule Cardano.Api.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Key.hs"]),(TargetModule Cardano.CLI.Byron.Commands,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Commands.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Commands.hs"]),(TargetModule Cardano.CLI.Run,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Run.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Run.hs"]),(TargetModule Cardano.CLI.Helpers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Helpers.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Helpers.hs"]),(TargetModule Cardano.CLI.Shelley.Orphans,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Orphans.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Orphans.hs"]),(TargetModule Cardano.Api.Hash,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Hash.hs"]),(TargetModule Cardano.Api.Protocol,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol.hs"]),(TargetModule Cardano.Api.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Byron.hs"]),(TargetModule Cardano.Api.OperationalCertificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs"]),(TargetModule Cardano.Api.Protocol.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Types.hs"]),(TargetModule Cardano.Api.NetworkId,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/NetworkId.hs"]),(TargetModule Cardano.CLI.Byron.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Key.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Key.hs"]),(TargetModule Cardano.Api.KeysPraos,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysPraos.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"]),(TargetModule Cardano.Api.Address,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs"]),(TargetModule Cardano.CLI.Shelley.Parsers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"]),(TargetModule Cardano.CLI.Shelley.Run.StakeAddress,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/StakeAddress.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/StakeAddress.hs"]),(TargetModule Cardano.CLI.Environment,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Environment.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Environment.hs"]),(TargetModule Cardano.Api.TxSubmit.ErrorRender,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/ErrorRender.hs"]),(TargetModule Cardano.Api.TxSubmit,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Transaction,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"]),(TargetModule Cardano.Api.Protocol.Cardano,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Cardano.hs"]),(TargetModule Cardano.Api.Certificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Certificate.hs"]),(TargetModule Cardano.CLI.Byron.Run,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Run.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Run.hs"]),(TargetModule Cardano.CLI.Mary.TxOutParser,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Mary/TxOutParser.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Mary/TxOutParser.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Address,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"]),(TargetModule Cardano.Api.Value,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs"]),(TargetModule Cardano.Api.TxSubmit.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/Types.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"]),(TargetModule Cardano.Api.LocalChainSync,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/LocalChainSync.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Node,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Node.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Node.hs"]),(TargetModule Cardano.CLI.Mary.ValueParser,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Mary/ValueParser.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Mary/ValueParser.hs"]),(TargetModule Cardano.Api.Script,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"]),(TargetModule Cardano.Api.Fees,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs"]),(TargetModule Cardano.CLI.Parsers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Parsers.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Parsers.hs"]),(TargetModule Cardano.CLI.Byron.Delegation,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Delegation.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Delegation.hs"]),(TargetModule Cardano.Api.ProtocolParameters,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/ProtocolParameters.hs"]),(TargetModule Cardano.Api.SerialiseCBOR,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseCBOR.hs"]),(TargetModule Cardano.Api.Protocol.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Shelley.hs"]),(TargetModule Cardano.CLI.Byron.Vote,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Vote.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Vote.hs"]),(TargetModule Cardano.CLI.Shelley.Commands,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs"]),(TargetModule Cardano.Api.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Address.Info,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address/Info.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address/Info.hs"]),(TargetModule Cardano.CLI.Byron.Legacy,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Legacy.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Legacy.hs"]),(TargetModule Cardano.CLI.Byron.Query,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Query.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Query.hs"]),(TargetModule Cardano.Api.TxMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxMetadata.hs"]),(TargetModule Cardano.Api.Eras,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Eras.hs"]),(TargetModule Cardano.Api.HasTypeProxy,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/HasTypeProxy.hs"]),(TargetModule Cardano.CLI.Shelley.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Key.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Key.hs"]),(TargetModule Cardano.CLI.Byron.Tx,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Tx.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Tx.hs"]),(TargetModule Cardano.Api.Protocol.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Byron.hs"]),(TargetModule Cardano.Api.Utils,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Utils.hs"]),(TargetModule Cardano.Api.SerialiseTextEnvelope,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseTextEnvelope.hs"]),(TargetModule Cardano.CLI.Byron.Parsers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Parsers.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Parsers.hs"]),(TargetModule Cardano.CLI.TopHandler,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/TopHandler.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/TopHandler.hs"]),(TargetModule Cardano.Api.KeysByron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysByron.hs"])]
2020-12-02 22:52:10.52878956 [ThreadId 199] - Finishing build session(exception: AsyncCancelled)
2020-12-02 22:52:10.528905545 [ThreadId 312] - Restarting build session (aborting the previous one took 0.00s)
2020-12-02 22:52:10.614376657 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"12/83"},"token":"3"},"method":"$/progress"}
2020-12-02 22:52:10.646463337 [ThreadId 456] - finish: C:GetParsedModule (took 0.11s)
2020-12-02 22:52:10.649374633 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":9,"character":7},"end":{"line":9,"character":38}},"kind":1,"children":[{"selectionRange":{"start":{"line":15,"character":0},"end":{"line":79,"character":34}},"kind":2,"children":[{"selectionRange":{"start":{"line":15,"character":0},"end":{"line":15,"character":32}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":15,"character":0},"end":{"line":15,"character":32}}},{"selectionRange":{"start":{"line":16,"character":0},"end":{"line":16,"character":29}},"kind":2,"name":"import Prelude","range":{"start":{"line":16,"character":0},"end":{"line":16,"character":29}}},{"selectionRange":{"start":{"line":18,"character":0},"end":{"line":18,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":18,"character":0},"end":{"line":18,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":19,"character":0},"end":{"line":19,"character":56}},"kind":2,"name":"import Data.Aeson.Encode.Pretty","range":{"start":{"line":19,"character":0},"end":{"line":19,"character":56}}},{"selectionRange":{"start":{"line":20,"character":0},"end":{"line":20,"character":39}},"kind":2,"name":"import Data.Binary.Get","range":{"start":{"line":20,"character":0},"end":{"line":20,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":21,"character":0},"end":{"line":21,"character":44}},"kind":2,"name":"import Data.ByteString.Char8","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":22,"character":0},"end":{"line":22,"character":50}},"kind":2,"name":"import Data.ByteString.Lazy.Char8","range":{"start":{"line":22,"character":0},"end":{"line":22,"character":50}},"detail":"qualified"},{"selectionRange":{"start":{"line":23,"character":0},"end":{"line":23,"character":37}},"kind":2,"name":"import Data.Coerce","range":{"start":{"line":23,"character":0},"end":{"line":23,"character":37}}},{"selectionRange":{"start":{"line":24,"character":0},"end":{"line":24,"character":34}},"kind":2,"name":"import Data.List","range":{"start":{"line":24,"character":0},"end":{"line":24,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":25,"character":0},"end":{"line":25,"character":40}},"kind":2,"name":"import Data.List.Split","range":{"start":{"line":25,"character":0},"end":{"line":25,"character":40}},"detail":"qualified"},{"selectionRange":{"start":{"line":26,"character":0},"end":{"line":26,"character":39}},"kind":2,"name":"import Data.Map.Strict","range":{"start":{"line":26,"character":0},"end":{"line":26,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":28,"character":0},"end":{"line":28,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":28,"character":0},"end":{"line":28,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":29,"character":0},"end":{"line":29,"character":41}},"kind":2,"name":"import Data.String","range":{"start":{"line":29,"character":0},"end":{"line":29,"character":41}}},{"selectionRange":{"start":{"line":30,"character":0},"end":{"line":30,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":30,"character":0},"end":{"line":30,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":31,"character":0},"end":{"line":31,"character":37}},"kind":2,"name":"import Data.Text.IO","range":{"start":{"line":31,"character":0},"end":{"line":31,"character":37}},"detail":"qualified"},{"selectionRange":{"start":{"line":32,"character":0},"end":{"line":32,"character":87}},"kind":2,"name":"import Data.Time.Clock","range":{"start":{"line":32,"character":0},"end":{"line":32,"character":87}}},{"selectionRange":{"start":{"line":34,"character":0},"end":{"line":34,"character":44}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":34,"character":0},"end":{"line":34,"character":44}}},{"selectionRange":{"start":{"line":36,"character":0},"end":{"line":36,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash","range":{"start":{"line":36,"character":0},"end":{"line":36,"character":52}}},{"selectionRange":{"start":{"line":37,"character":0},"end":{"line":37,"character":44}},"kind":2,"name":"import Cardano.Crypto.Hash","range":{"start":{"line":37,"character":0},"end":{"line":37,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":38,"character":0},"end":{"line":38,"character":48}},"kind":2,"name":"import Cardano.Crypto.Random","range":{"start":{"line":38,"character":0},"end":{"line":38,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":39,"character":0},"end":{"line":39,"character":40}},"kind":2,"name":"import Crypto.Random","range":{"start":{"line":39,"character":0},"end":{"line":39,"character":40}}},{"selectionRange":{"start":{"line":41,"character":0},"end":{"line":41,"character":57}},"kind":2,"name":"import Cardano.Ledger.Crypto","range":{"start":{"line":41,"character":0},"end":{"line":41,"character":57}}},{"selectionRange":{"start":{"line":43,"character":0},"end":{"line":43,"character":75}},"kind":2,"name":"import System.Directory","range":{"start":{"line":43,"character":0},"end":{"line":43,"character":75}}},{"selectionRange":{"start":{"line":44,"character":0},"end":{"line":44,"character":71}},"kind":2,"name":"import System.FilePath","range":{"start":{"line":44,"character":0},"end":{"line":44,"character":71}}},{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":45,"character":54}},"kind":2,"name":"import System.IO.Error","range":{"start":{"line":45,"character":0},"end":{"line":45,"character":54}}},{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":48,"character":32}},"kind":2,"name":"import Control.Monad.Trans.Except.Extra","range":{"start":{"line":47,"character":0},"end":{"line":48,"character":32}}},{"selectionRange":{"start":{"line":50,"character":0},"end":{"line":50,"character":46}},"kind":2,"name":"import Cardano.Crypto.Hash","range":{"start":{"line":50,"character":0},"end":{"line":50,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":52,"character":0},"end":{"line":52,"character":44}},"kind":2,"name":"import Cardano.Api.Shelley.Genesis","range":{"start":{"line":52,"character":0},"end":{"line":52,"character":44}}},{"selectionRange":{"start":{"line":53,"character":0},"end":{"line":53,"character":34}},"kind":2,"name":"import Cardano.Api.Typed","range":{"start":{"line":53,"character":0},"end":{"line":53,"character":34}}},{"selectionRange":{"start":{"line":54,"character":0},"end":{"line":54,"character":36}},"kind":2,"name":"import Cardano.Api.Shelley","range":{"start":{"line":54,"character":0},"end":{"line":54,"character":36}}},{"selectionRange":{"start":{"line":56,"character":0},"end":{"line":56,"character":70}},"kind":2,"name":"import Ouroboros.Consensus.BlockchainTime","range":{"start":{"line":56,"character":0},"end":{"line":56,"character":70}}},{"selectionRange":{"start":{"line":57,"character":0},"end":{"line":57,"character":70}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Protocol","range":{"start":{"line":57,"character":0},"end":{"line":57,"character":70}}},{"selectionRange":{"start":{"line":58,"character":0},"end":{"line":58,"character":77}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Node","range":{"start":{"line":58,"character":0},"end":{"line":58,"character":77}}},{"selectionRange":{"start":{"line":60,"character":0},"end":{"line":60,"character":50}},"kind":2,"name":"import Shelley.Spec.Ledger.API","range":{"start":{"line":60,"character":0},"end":{"line":60,"character":50}},"detail":"qualified"},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":51}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":51}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":56}},"kind":2,"name":"import Shelley.Spec.Ledger.BaseTypes","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":56}},"detail":"qualified"},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":38}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":38}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":47}},"kind":2,"name":"import Cardano.CLI.Helpers","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":47}}},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":45}},"kind":2,"name":"import Cardano.CLI.Shelley.Commands","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":45}}},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":40}},"kind":2,"name":"import Cardano.CLI.Shelley.Key","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":40}}},{"selectionRange":{"start":{"line":69,"character":0},"end":{"line":69,"character":57}},"kind":2,"name":"import Cardano.CLI.Shelley.Parsers","range":{"start":{"line":69,"character":0},"end":{"line":69,"character":57}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":48}},"kind":2,"name":"import Cardano.CLI.Shelley.Run.Address","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":48}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":73,"character":94}},"kind":2,"name":"import Cardano.CLI.Shelley.Run.Node","range":{"start":{"line":71,"character":0},"end":{"line":73,"character":94}}},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":75,"character":71}},"kind":2,"name":"import Cardano.CLI.Shelley.Run.Pool","range":{"start":{"line":74,"character":0},"end":{"line":75,"character":71}}},{"selectionRange":{"start":{"line":76,"character":0},"end":{"line":78,"character":77}},"kind":2,"name":"import Cardano.CLI.Shelley.Run.StakeAddress","range":{"start":{"line":76,"character":0},"end":{"line":78,"character":77}}},{"selectionRange":{"start":{"line":79,"character":0},"end":{"line":79,"character":34}},"kind":2,"name":"import Cardano.CLI.Types","range":{"start":{"line":79,"character":0},"end":{"line":79,"character":34}}}],"name":"imports","range":{"start":{"line":15,"character":0},"end":{"line":79,"character":34}}},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":97,"character":15}},"kind":23,"children":[{"selectionRange":{"start":{"line":84,"character":4},"end":{"line":84,"character":37}},"kind":9,"name":"ShelleyGenesisCmdAesonDecodeError","range":{"start":{"line":84,"character":4},"end":{"line":84,"character":53}}},{"selectionRange":{"start":{"line":85,"character":4},"end":{"line":85,"character":37}},"kind":9,"name":"ShelleyGenesisCmdGenesisFileError","range":{"start":{"line":85,"character":4},"end":{"line":85,"character":53}}},{"selectionRange":{"start":{"line":86,"character":4},"end":{"line":86,"character":30}},"kind":9,"name":"ShelleyGenesisCmdFileError","range":{"start":{"line":86,"character":4},"end":{"line":86,"character":46}}},{"selectionRange":{"start":{"line":87,"character":4},"end":{"line":87,"character":46}},"kind":9,"name":"ShelleyGenesisCmdMismatchedGenesisKeyFiles","range":{"start":{"line":87,"character":4},"end":{"line":87,"character":64}}},{"selectionRange":{"start":{"line":88,"character":4},"end":{"line":88,"character":33}},"kind":9,"name":"ShelleyGenesisCmdFilesNoIndex","range":{"start":{"line":88,"character":4},"end":{"line":88,"character":44}}},{"selectionRange":{"start":{"line":89,"character":4},"end":{"line":89,"character":34}},"kind":9,"name":"ShelleyGenesisCmdFilesDupIndex","range":{"start":{"line":89,"character":4},"end":{"line":89,"character":45}}},{"selectionRange":{"start":{"line":90,"character":4},"end":{"line":90,"character":41}},"kind":9,"name":"ShelleyGenesisCmdTextEnvReadFileError","range":{"start":{"line":90,"character":4},"end":{"line":90,"character":72}}},{"selectionRange":{"start":{"line":91,"character":4},"end":{"line":91,"character":53}},"kind":9,"name":"ShelleyGenesisCmdUnexpectedAddressVerificationKey","range":{"start":{"line":91,"character":4},"end":{"line":91,"character":108}}},{"selectionRange":{"start":{"line":92,"character":4},"end":{"line":92,"character":44}},"kind":9,"name":"ShelleyGenesisCmdTooFewPoolsForBulkCreds","range":{"start":{"line":92,"character":4},"end":{"line":92,"character":62}}},{"selectionRange":{"start":{"line":93,"character":4},"end":{"line":93,"character":36}},"kind":9,"name":"ShelleyGenesisCmdAddressCmdError","range":{"start":{"line":93,"character":4},"end":{"line":93,"character":60}}},{"selectionRange":{"start":{"line":94,"character":4},"end":{"line":94,"character":33}},"kind":9,"name":"ShelleyGenesisCmdNodeCmdError","range":{"start":{"line":94,"character":4},"end":{"line":94,"character":54}}},{"selectionRange":{"start":{"line":95,"character":4},"end":{"line":95,"character":33}},"kind":9,"name":"ShelleyGenesisCmdPoolCmdError","range":{"start":{"line":95,"character":4},"end":{"line":95,"character":54}}},{"selectionRange":{"start":{"line":96,"character":4},"end":{"line":96,"character":41}},"kind":9,"name":"ShelleyGenesisCmdStakeAddressCmdError","range":{"start":{"line":96,"character":4},"end":{"line":96,"character":70}}}],"name":"ShelleyGenesisCmdError","range":{"start":{"line":83,"character":0},"end":{"line":97,"character":15}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":130,"character":82}},"kind":12,"name":"renderShelleyGenesisCmdError","range":{"start":{"line":100,"character":0},"end":{"line":130,"character":82}}},{"selectionRange":{"start":{"line":134,"character":0},"end":{"line":143,"character":58}},"kind":12,"name":"runGenesisCmd","range":{"start":{"line":134,"character":0},"end":{"line":143,"character":58}}},{"selectionRange":{"start":{"line":151,"character":0},"end":{"line":164,"character":41}},"kind":12,"name":"runGenesisKeyGenGenesis","range":{"start":{"line":151,"character":0},"end":{"line":164,"character":41}}},{"selectionRange":{"start":{"line":171,"character":0},"end":{"line":196,"character":22}},"kind":12,"name":"runGenesisKeyGenDelegate","range":{"start":{"line":171,"character":0},"end":{"line":196,"character":22}}},{"selectionRange":{"start":{"line":201,"character":0},"end":{"line":214,"character":37}},"kind":12,"name":"runGenesisKeyGenDelegateVRF","range":{"start":{"line":201,"character":0},"end":{"line":214,"character":37}}},{"selectionRange":{"start":{"line":219,"character":0},"end":{"line":232,"character":54}},"kind":12,"name":"runGenesisKeyGenUTxO","range":{"start":{"line":219,"character":0},"end":{"line":232,"character":54}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":256,"character":51}},"kind":12,"name":"runGenesisKeyHash","range":{"start":{"line":236,"character":0},"end":{"line":256,"character":51}}},{"selectionRange":{"start":{"line":261,"character":0},"end":{"line":283,"character":75}},"kind":12,"name":"runGenesisVerKey","range":{"start":{"line":261,"character":0},"end":{"line":283,"character":75}}},{"selectionRange":{"start":{"line":285,"character":0},"end":{"line":288,"character":45}},"kind":23,"children":[{"selectionRange":{"start":{"line":286,"character":7},"end":{"line":286,"character":18}},"kind":9,"name":"AGenesisKey","range":{"start":{"line":286,"character":7},"end":{"line":286,"character":41}}},{"selectionRange":{"start":{"line":287,"character":7},"end":{"line":287,"character":26}},"kind":9,"name":"AGenesisDelegateKey","range":{"start":{"line":287,"character":7},"end":{"line":287,"character":49}}},{"selectionRange":{"start":{"line":288,"character":7},"end":{"line":288,"character":22}},"kind":9,"name":"AGenesisUTxOKey","range":{"start":{"line":288,"character":7},"end":{"line":288,"character":45}}}],"name":"SomeGenesisKey","range":{"start":{"line":285,"character":0},"end":{"line":288,"character":45}}},{"selectionRange":{"start":{"line":293,"character":0},"end":{"line":297,"character":51}},"kind":12,"name":"runGenesisTxIn","range":{"start":{"line":293,"character":0},"end":{"line":297,"character":51}}},{"selectionRange":{"start":{"line":302,"character":0},"end":{"line":308,"character":57}},"kind":12,"name":"runGenesisAddr","range":{"start":{"line":302,"character":0},"end":{"line":308,"character":57}}},{"selectionRange":{"start":{"line":311,"character":0},"end":{"line":312,"character":53}},"kind":12,"name":"writeOutput","range":{"start":{"line":311,"character":0},"end":{"line":312,"character":53}}},{"selectionRange":{"start":{"line":326,"character":0},"end":{"line":355,"character":37}},"kind":12,"name":"runGenesisCreate","range":{"start":{"line":326,"character":0},"end":{"line":355,"character":37}}},{"selectionRange":{"start":{"line":371,"character":0},"end":{"line":483,"character":66}},"kind":12,"name":"runGenesisCreateStaked","range":{"start":{"line":371,"character":0},"end":{"line":483,"character":66}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":511,"character":79}},"kind":12,"name":"createDelegateKeys","range":{"start":{"line":488,"character":0},"end":{"line":511,"character":79}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":519,"character":67}},"kind":12,"name":"createGenesisKeys","range":{"start":{"line":514,"character":0},"end":{"line":519,"character":67}}},{"selectionRange":{"start":{"line":523,"character":0},"end":{"line":528,"character":64}},"kind":12,"name":"createUtxoKeys","range":{"start":{"line":523,"character":0},"end":{"line":528,"character":64}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":558,"character":77}},"kind":12,"name":"createPoolCredentials","range":{"start":{"line":531,"character":0},"end":{"line":558,"character":77}}},{"selectionRange":{"start":{"line":561,"character":0},"end":{"line":574,"character":74}},"kind":12,"name":"createDelegatorCredentials","range":{"start":{"line":561,"character":0},"end":{"line":574,"character":74}}},{"selectionRange":{"start":{"line":576,"character":0},"end":{"line":581,"character":5}},"kind":23,"children":[{"selectionRange":{"start":{"line":577,"character":4},"end":{"line":577,"character":14}},"kind":9,"children":[{"selectionRange":{"start":{"line":578,"character":6},"end":{"line":578,"character":22}},"kind":8,"name":"dInitialUtxoAddr","range":{"start":{"line":578,"character":6},"end":{"line":578,"character":22}}},{"selectionRange":{"start":{"line":579,"character":6},"end":{"line":579,"character":19}},"kind":8,"name":"dDelegStaking","range":{"start":{"line":579,"character":6},"end":{"line":579,"character":19}}},{"selectionRange":{"start":{"line":580,"character":6},"end":{"line":580,"character":17}},"kind":8,"name":"dPoolParams","range":{"start":{"line":580,"character":6},"end":{"line":580,"character":17}}}],"name":"Delegation","range":{"start":{"line":577,"character":4},"end":{"line":581,"character":5}}}],"name":"Delegation","range":{"start":{"line":576,"character":0},"end":{"line":581,"character":5}}},{"selectionRange":{"start":{"line":584,"character":0},"end":{"line":612,"character":66}},"kind":12,"name":"buildPool","range":{"start":{"line":584,"character":0},"end":{"line":612,"character":66}}},{"selectionRange":{"start":{"line":615,"character":0},"end":{"line":638,"character":40}},"kind":12,"name":"writeBulkPoolCredentials","range":{"start":{"line":615,"character":0},"end":{"line":638,"character":40}}},{"selectionRange":{"start":{"line":641,"character":0},"end":{"line":666,"character":36}},"kind":12,"name":"computeDelegation","range":{"start":{"line":641,"character":0},"end":{"line":666,"character":36}}},{"selectionRange":{"start":{"line":668,"character":0},"end":{"line":672,"character":50}},"kind":12,"name":"getCurrentTimePlus30","range":{"start":{"line":668,"character":0},"end":{"line":672,"character":50}}},{"selectionRange":{"start":{"line":679,"character":0},"end":{"line":698,"character":21}},"kind":12,"name":"readShelleyGenesis","range":{"start":{"line":679,"character":0},"end":{"line":698,"character":21}}},{"selectionRange":{"start":{"line":715,"character":0},"end":{"line":771,"character":50}},"kind":12,"name":"updateTemplate","range":{"start":{"line":715,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":775,"character":113}},"kind":12,"name":"writeShelleyGenesis","range":{"start":{"line":774,"character":0},"end":{"line":775,"character":113}}},{"selectionRange":{"start":{"line":784,"character":0},"end":{"line":816,"character":18}},"kind":12,"name":"readGenDelegsMap","range":{"start":{"line":784,"character":0},"end":{"line":816,"character":18}}},{"selectionRange":{"start":{"line":821,"character":0},"end":{"line":833,"character":69}},"kind":12,"name":"readGenesisKeys","range":{"start":{"line":821,"character":0},"end":{"line":833,"character":69}}},{"selectionRange":{"start":{"line":838,"character":0},"end":{"line":850,"character":75}},"kind":12,"name":"readDelegateKeys","range":{"start":{"line":838,"character":0},"end":{"line":850,"character":75}}},{"selectionRange":{"start":{"line":854,"character":0},"end":{"line":871,"character":2}},"kind":12,"name":"readDelegateVrfKeys","range":{"start":{"line":854,"character":0},"end":{"line":871,"character":2}}},{"selectionRange":{"start":{"line":873,"character":0},"end":{"line":876,"character":22}},"kind":12,"name":"extractFileNameIndex","range":{"start":{"line":873,"character":0},"end":{"line":876,"character":22}}},{"selectionRange":{"start":{"line":880,"character":0},"end":{"line":893,"character":68}},"kind":12,"name":"extractFileNameIndexes","range":{"start":{"line":880,"character":0},"end":{"line":893,"character":68}}},{"selectionRange":{"start":{"line":897,"character":0},"end":{"line":913,"character":24}},"kind":12,"name":"readInitialFundAddresses","range":{"start":{"line":897,"character":0},"end":{"line":913,"character":24}}},{"selectionRange":{"start":{"line":915,"character":0},"end":{"line":920,"character":53}},"kind":12,"name":"runGenesisHashFile","range":{"start":{"line":915,"character":0},"end":{"line":920,"character":53}}}],"name":"Cardano.CLI.Shelley.Run.Genesis","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":1}
2020-12-02 22:52:10.658836606 [ThreadId 461] - finish: CodeAction (took 0.13s)
2020-12-02 22:52:10.658904988 [ThreadId 361] - finish: C:GetParsedModule (took 0.13s)
2020-12-02 22:52:10.661986445 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":6}
2020-12-02 22:52:10.717751774 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"16/87"},"token":"3"},"method":"$/progress"}
2020-12-02 22:52:10.957073258 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"27/95"},"token":"3"},"method":"$/progress"}
2020-12-02 22:52:11.195497402 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"38/102"},"token":"3"},"method":"$/progress"}
2020-12-02 22:52:11.296151471 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"47/107"},"token":"3"},"method":"$/progress"}
2020-12-02 22:52:11.396337079 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"59/111"},"token":"3"},"method":"$/progress"}
2020-12-02 22:52:11.770756731 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"60/111"},"token":"3"},"method":"$/progress"}
2020-12-02 22:52:11.852593465 [ThreadId 1737] - finish: codeLens (took 1.32s)
2020-12-02 22:52:11.852941578 [ThreadId 1738] - finish: kick (took 1.32s)
2020-12-02 22:52:11.853056115 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":"3"},"method":"$/progress"}
2020-12-02 22:52:11.853579419 [ThreadId 1748] - finish:  (took 0.00s)
2020-12-02 22:52:11.855264698 [ThreadId 7] - <--2--{"result":[{"command":{"command":"96041:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"newText":"import Control.Applicative ( Alternative((<|>)) )"}]}}],"title":"import Control.Applicative ( Alternative((<|>)) )"},"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"command":{"command":"96041:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"newText":"import Control.Monad ( when )"}]}}],"title":"import Control.Monad ( when )"},"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"command":{"command":"96041:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"newText":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"command":{"command":"96041:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"}]}}],"title":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"96041:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"96041:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( AsType(AsGenesisKey, AsStakeExtendedKey, AsPaymentExtendedKey,\n             AsGenesisExtendedKey, AsGenesisDelegateExtendedKey, AsPaymentKey,\n             AsStakeKey, AsStakePoolKey, AsSigningKey, AsVerificationKey,\n             AsGenesisUTxOKey, AsGenesisDelegateKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( AsType(AsGenesisKey, AsStakeExtendedKey, AsPaymentExtendedKey,\n             AsGenesisExtendedKey, AsGenesisDelegateExtendedKey, AsPaymentKey,\n             AsStakeKey, AsStakePoolKey, AsSigningKey, AsVerificationKey,\n             AsGenesisUTxOKey, AsGenesisDelegateKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"command":{"command":"96041:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"command":{"command":"96041:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"newText":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"}]}}],"title":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"command":{"command":"96041:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"newText":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"}]}}],"title":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"command":{"command":"96041:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"jsonrpc":"2.0","id":7}
2020-12-02 22:52:11.96634535 [ThreadId 1931] - finish: InitialLoad (took 1.43s)
2020-12-02 22:52:12.098353458 [ThreadId 1996] - finish: CodeAction:PackageExports (took 1.44s)
2020-12-02 22:52:12.098780119 [ThreadId 1997] - finish: importLens (took 0.00s)
2020-12-02 22:52:12.099102313 [ThreadId 1999] - finish: retrie (took 0.00s)
2020-12-02 22:52:12.127653912 [ThreadId 2024] - finish: tactic (took 0.03s)
2020-12-02 22:52:12.127954782 [ThreadId 2029] - finish: tactic (took 0.00s)
2020-12-02 22:52:12.128073823 [ThreadId 2030] - finish: tactic (took 0.00s)
2020-12-02 22:52:12.128321734 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":8}
2020-12-02 22:52:13.885070157 [ThreadId 2294] - finish: InitialLoad (took 3.35s)
2020-12-02 23:12:06.144525043 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":9,"method":"shutdown","params":null}
2020-12-02 23:12:06.144737032 [ThreadId 7] - <--2--{"result":null,"jsonrpc":"2.0","id":9}
2020-12-02 23:12:06.145109358 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"exit","params":null}
2020-12-03 08:03:48.922368905 [ThreadId 5] - 




haskell-lsp:Starting up server ...
2020-12-03 08:03:48.929729115 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":4528,"clientInfo":{"name":"vscode","version":"1.51.1"},"rootPath":"/home/jordan/Repos/Work/cardano-haskell/cardano-node","rootUri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"tokenTypes":["comment","keyword","number","regexp","operator","namespace","type","struct","class","interface","enum","typeParameter","function","member","macro","variable","parameter","property","label"],"tokenModifiers":["declaration","documentation","static","abstract","deprecated","async","readonly"]}},"window":{"workDoneProgress":true}},"trace":"off","workspaceFolders":[{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node","name":"cardano-node"}]}}
2020-12-03 08:03:48.940767207 [ThreadId 5] - haskell-lsp:initializeRequestHandler: setting current dir to project root:/home/jordan/Repos/Work/cardano-haskell/cardano-node
2020-12-03 08:03:48.979567395 [ThreadId 25] - Registering ide configuration: IdeConfiguration {workspaceFolders = fromList [NormalizedUri 709005359093181263 "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node"], clientSettings = hashed Nothing}
2020-12-03 08:03:48.981568628 [ThreadId 7] - <--2--{"result":{"capabilities":{"typeDefinitionProvider":true,"foldingRangeProvider":false,"textDocumentSync":{"openClose":true,"change":2,"save":{}},"workspace":{"workspaceFolders":{"supported":true,"changeNotifications":true}},"implementationProvider":true,"documentRangeFormattingProvider":true,"documentHighlightProvider":true,"executeCommandProvider":{"commands":["4658:eval:evalCommand","4658:ghcide:typesignature.add","4658:importLens:ImportLensCommand","4658:pragmas:addPragma","4658:retrie:retrieCommand","4658:tactic:tacticsAutoCommand","4658:tactic:tacticsIntrosCommand","4658:tactic:tacticsDestructCommand","4658:tactic:tacticsHomomorphismCommand","4658:tactic:tacticsDestructLambdaCaseCommand","4658:tactic:tacticsHomomorphismLambdaCaseCommand"]},"renameProvider":false,"colorProvider":false,"definitionProvider":true,"hoverProvider":true,"codeActionProvider":true,"completionProvider":{"triggerCharacters":["."],"resolveProvider":false},"codeLensProvider":{},"documentSymbolProvider":true,"documentFormattingProvider":true}},"jsonrpc":"2.0","id":0}
2020-12-03 08:03:49.112185347 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"initialized","params":{}}
2020-12-03 08:03:49.112679567 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"haskell":{"hlintOn":true,"maxNumberOfProblems":100,"diagnosticsOnChange":true,"liquidOn":false,"completionSnippetsOn":true,"formatOnImportOn":true,"formattingProvider":"stylish-haskell","trace":{"server":"messages"},"logFile":"hls.log","languageServerVariant":"haskell-language-server","serverExecutablePath":"~/.local/bin/haskell-language-server-8.10.2","updateBehavior":"keep-up-to-date","indentationRules":{"enabled":true},"hlint":{"executablePath":"/home/jordan/.cabal/bin/hlint","logLevel":"log"}}}}}
2020-12-03 08:03:49.112989675 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"registrations":[{"registerOptions":{"watchers":[{"kind":5,"globPattern":"**/*.hs"},{"kind":5,"globPattern":"**/*.hs-boot"},{"kind":5,"globPattern":"**/*.lhs"},{"kind":5,"globPattern":"**/*.lhs-boot"}]},"method":"workspace/didChangeWatchedFiles","id":"globalFileWatches"}]},"method":"client/registerCapability","id":0}
2020-12-03 08:03:49.112940625 [ThreadId 25] - Configuration changed: Object (fromList [("haskell",Object (fromList [("hlint",Object (fromList [("logLevel",String "log"),("executablePath",String "/home/jordan/.cabal/bin/hlint")])),("logFile",String "hls.log"),("updateBehavior",String "keep-up-to-date"),("hlintOn",Bool True),("formatOnImportOn",Bool True),("indentationRules",Object (fromList [("enabled",Bool True)])),("liquidOn",Bool False),("languageServerVariant",String "haskell-language-server"),("serverExecutablePath",String "~/.local/bin/haskell-language-server-8.10.2"),("diagnosticsOnChange",Bool True),("completionSnippetsOn",Bool True),("maxNumberOfProblems",Number 100.0),("formattingProvider",String "stylish-haskell"),("trace",Object (fromList [("server",String "messages")]))]))])
2020-12-03 08:03:49.113374666 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 08:03:49.113716751 [ThreadId 24] - Finishing build session(exception: AsyncCancelled)
2020-12-03 08:03:49.11487135 [ThreadId 65] - finish: kick (took 0.00s)
2020-12-03 08:03:49.113897864 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE DerivingVia #-}\n{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE TypeFamilies #-}\n\nmodule Cardano.Api.Script (\n    -- * Languages\n    SimpleScriptV1,\n    SimpleScriptV2,\n    ScriptLanguage(..),\n    SimpleScriptVersion(..),\n    PlutusScriptVersion,\n    AnyScriptLanguage(..),\n    IsScriptLanguage(..),\n    IsSimpleScriptLanguage(..),\n\n    -- * Scripts in a specific language\n    Script(..),\n\n    -- * Scripts in any language\n    ScriptInAnyLang(..),\n    toScriptInAnyLang,\n\n    -- * Scripts in an era\n    ScriptInEra(..),\n    toScriptInEra,\n    eraOfScriptInEra,\n\n    -- ** Languages supported in each era\n    ScriptLanguageInEra(..),\n    scriptLanguageSupportedInEra,\n    languageOfScriptLanguageInEra,\n    eraOfScriptLanguageInEra,\n\n    -- * The simple script language\n    SimpleScript(..),\n    TimeLocksSupported(..),\n    timeLocksSupported,\n    adjustSimpleScriptVersion,\n\n    -- * Script hashes\n    ScriptHash(..),\n    hashScript,\n\n    -- * Internal conversion functions\n    toShelleyScript,\n    toShelleyMultiSig,\n    fromShelleyMultiSig,\n    toAllegraTimelock,\n    fromAllegraTimelock,\n    toShelleyScriptHash,\n    fromShelleyScriptHash,\n\n    -- * Data family instances\n    AsType(..)\n  ) where\n\nimport           Prelude\n\nimport qualified Data.ByteString.Lazy as LBS\nimport           Data.Foldable (toList)\nimport           Data.Scientific (toBoundedInteger)\nimport           Data.String (IsString)\nimport           Data.Text (Text)\nimport qualified Data.Text as Text\nimport qualified Data.Text.Encoding as Text\nimport           Data.Type.Equality (TestEquality(..), (:~:)(Refl))\n\nimport           Data.Aeson (Value (..), object, (.:), (.=))\nimport qualified Data.Aeson as Aeson\nimport qualified Data.Aeson.Types as Aeson\nimport qualified Data.Sequence.Strict as Seq\nimport           Data.Vector (Vector)\nimport qualified Data.Vector as Vector\n\nimport           Control.Applicative\nimport           Control.Monad\n\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\nimport qualified Cardano.Crypto.Hash.Class as Crypto\n\nimport           Cardano.Slotting.Slot (SlotNo)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era  as Ledger\n\nimport qualified Cardano.Ledger.ShelleyMA.Timelocks as Timelock\nimport           Ouroboros.Consensus.Shelley.Eras\n                   (StandardAllegra, StandardCrypto, StandardShelley)\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Scripts as Shelley\n\nimport           Cardano.Api.Eras\nimport           Cardano.Api.Hash\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseJSON\nimport           Cardano.Api.SerialiseRaw\nimport           Cardano.Api.SerialiseTextEnvelope\n\n{- HLINT ignore \"Use section\" -}\n\n\n-- ----------------------------------------------------------------------------\n-- Types for script language and version\n--\n\n-- | The original simple script language which supports\n--\n-- * require a signature from a given key (by verification key hash)\n-- * n-way and combinator\n-- * n-way or combinator\n-- * m-of-n combinator\n--\n-- This version of the language was introduced in the 'ShelleyEra'.\n--\ndata SimpleScriptV1\n\n-- | The second version of the simple script language. It has all the features\n-- of 'SimpleScriptV1' plus new atomic predicates:\n--\n-- * require the time be before a given slot number\n-- * require the time be after a given slot number\n--\n-- This version of the language was introduced in the 'AllegraEra'.\n--\ndata SimpleScriptV2\n\n-- | Place holder type to show what the pattern is to extend to multiple\n-- languages, not just multiple versions of a single language.\n--\ndata PlutusScriptV1\n\ninstance HasTypeProxy SimpleScriptV1 where\n    data AsType SimpleScriptV1 = AsSimpleScriptV1\n    proxyToAsType _ = AsSimpleScriptV1\n\ninstance HasTypeProxy SimpleScriptV2 where\n    data AsType SimpleScriptV2 = AsSimpleScriptV2\n    proxyToAsType _ = AsSimpleScriptV2\n\ninstance HasTypeProxy PlutusScriptV1 where\n    data AsType PlutusScriptV1 = AsPlutusScriptV1\n    proxyToAsType _ = AsPlutusScriptV1\n\n\n-- ----------------------------------------------------------------------------\n-- Value level representation for script languages\n--\ndata ScriptLanguage lang where\n\n     SimpleScriptLanguage :: SimpleScriptVersion lang -> ScriptLanguage lang\n\n     PlutusScriptLanguage :: PlutusScriptVersion lang -> ScriptLanguage lang\n\nderiving instance (Eq   (ScriptLanguage lang))\nderiving instance (Show (ScriptLanguage lang))\n\ninstance TestEquality ScriptLanguage where\n    testEquality (SimpleScriptLanguage lang)\n                 (SimpleScriptLanguage lang') = testEquality lang lang'\n\n    testEquality (PlutusScriptLanguage lang)\n                 (PlutusScriptLanguage lang') = testEquality lang lang'\n\n    testEquality  _ _ = Nothing\n\n\ndata SimpleScriptVersion lang where\n\n     SimpleScriptV1 :: SimpleScriptVersion SimpleScriptV1\n     SimpleScriptV2 :: SimpleScriptVersion SimpleScriptV2\n\nderiving instance (Eq   (SimpleScriptVersion lang))\nderiving instance (Show (SimpleScriptVersion lang))\n\ninstance TestEquality SimpleScriptVersion where\n    testEquality SimpleScriptV1 SimpleScriptV1 = Just Refl\n    testEquality SimpleScriptV2 SimpleScriptV2 = Just Refl\n    testEquality _              _              = Nothing\n\n\ndata PlutusScriptVersion lang\n  -- For now, there are no such versions, but it'd be like this:\n  -- PlutusScriptV1 :: PlutusScriptVersion PlutusScriptV1\n\nderiving instance (Eq   (PlutusScriptVersion lang))\nderiving instance (Show (PlutusScriptVersion lang))\n\ninstance TestEquality PlutusScriptVersion where\n    testEquality lang = case lang of {}\n\n\ndata AnyScriptLanguage where\n     AnyScriptLanguage :: ScriptLanguage lang -> AnyScriptLanguage\n\nderiving instance (Show AnyScriptLanguage)\n\ninstance Eq AnyScriptLanguage where\n    AnyScriptLanguage lang == AnyScriptLanguage lang' =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> True -- since no constructors share types\n\ninstance Enum AnyScriptLanguage where\n    toEnum 0 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    toEnum 1 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n    toEnum _ = error \"AnyScriptLanguage.toEnum: bad argument\"\n\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)) = 0\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)) = 1\n    fromEnum (AnyScriptLanguage (PlutusScriptLanguage lang)) = case lang of {}\n\ninstance Bounded AnyScriptLanguage where\n    minBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    maxBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n\n\nclass HasTypeProxy lang => IsScriptLanguage lang where\n    scriptLanguage :: ScriptLanguage lang\n\ninstance IsScriptLanguage SimpleScriptV1 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV1\n\ninstance IsScriptLanguage SimpleScriptV2 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV2\n\n--instance IsScriptLanguage PlutusScriptV1 where\n--    scriptLanguage = PlutusScriptLanguage PlutusScriptV1\n\n\nclass IsScriptLanguage lang => IsSimpleScriptLanguage lang where\n    simpleScriptVersion :: SimpleScriptVersion lang\n\ninstance IsSimpleScriptLanguage SimpleScriptV1 where\n    simpleScriptVersion = SimpleScriptV1\n\ninstance IsSimpleScriptLanguage SimpleScriptV2 where\n    simpleScriptVersion = SimpleScriptV2\n\n\n\n-- ----------------------------------------------------------------------------\n-- Script type: covering all script languages\n--\n\n-- | A script in a particular language.\n--\n-- See also 'ScriptInAnyLang' for a script in any of the languages that is available within\n-- a particular era.\n--\n-- See also 'ScriptInEra' for a script in a language that is available within\n-- a particular era.\n--\ndata Script lang where\n\n     SimpleScript :: !(SimpleScriptVersion lang)\n                  -> !(SimpleScript lang)\n                  -> Script lang\n\n     -- Place holder type to show what the pattern is to extend to multiple\n     -- languages, not just multiple versions of a single language.\n     -- For now there are no values of PlutusScriptVersion so this branch\n     -- is inaccessible.\n     PlutusScript :: !(PlutusScriptVersion lang)\n                  -> ()\n                  -> Script lang\n\nderiving instance (Eq   (Script lang))\nderiving instance (Show (Script lang))\n\ninstance HasTypeProxy lang => HasTypeProxy (Script lang) where\n    data AsType (Script lang) = AsScript (AsType lang)\n    proxyToAsType _ = AsScript (proxyToAsType (Proxy :: Proxy lang))\n\ninstance IsScriptLanguage lang => SerialiseAsCBOR (Script lang) where\n    serialiseToCBOR (SimpleScript SimpleScriptV1 s) =\n      CBOR.serialize' (toShelleyMultiSig s)\n\n    serialiseToCBOR (SimpleScript SimpleScriptV2 s) =\n      CBOR.serialize' (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    deserialiseFromCBOR _ bs =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 ->\n              SimpleScript SimpleScriptV1\n            . fromShelleyMultiSig\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        SimpleScriptLanguage SimpleScriptV2 ->\n              SimpleScript SimpleScriptV2\n            . (fromAllegraTimelock TimeLocksInSimpleScriptV2\n                                :: Timelock.Timelock StandardAllegra\n                                -> SimpleScript SimpleScriptV2)\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        PlutusScriptLanguage v -> case v of {}\n\n\ninstance IsScriptLanguage lang => HasTextEnvelope (Script lang) where\n    textEnvelopeType _ =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 -> \"SimpleScriptV1\"\n        SimpleScriptLanguage SimpleScriptV2 -> \"SimpleScriptV2\"\n        PlutusScriptLanguage v -> case v of {}\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in any language\n--\n\n-- | Sometimes it is necessary to handle all languages without making static\n-- type distinctions between languages. For example, when reading external\n-- input, or before the era context is known.\n--\n-- Use 'toScriptInEra' to convert to a script in the context of an era.\n--\ndata ScriptInAnyLang where\n     ScriptInAnyLang :: ScriptLanguage lang\n                     -> Script lang\n                     -> ScriptInAnyLang\n\nderiving instance Show ScriptInAnyLang\n\n-- The GADT in the ScriptInAnyLang constructor requires a custom Eq instance\ninstance Eq ScriptInAnyLang where\n    (==) (ScriptInAnyLang lang  script)\n         (ScriptInAnyLang lang' script') =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\n-- | Convert a script in a specific statically-known language to a\n-- 'ScriptInAnyLang'.\n--\n-- No inverse to this is provided, just do case analysis on the 'ScriptLanguage'\n-- field within the 'ScriptInAnyLang' constructor.\n--\ntoScriptInAnyLang :: Script lang -> ScriptInAnyLang\ntoScriptInAnyLang s@(SimpleScript v _) =\n    ScriptInAnyLang (SimpleScriptLanguage v) s\n\ninstance HasTypeProxy ScriptInAnyLang where\n    data AsType ScriptInAnyLang = AsScriptInAnyLang\n    proxyToAsType _ = AsScriptInAnyLang\n\ninstance SerialiseAsCBOR ScriptInAnyLang where\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript _v s)) =\n      -- Note that the CBOR encoding here is compatible with the previous\n      -- serialisation format for the @Script@ type from @cardano-ledger-specs@.\n      --\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 0\n       <> toCBOR (toShelleyMultiSig s)\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript _v s)) =\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 1\n       <> toCBOR (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    serialiseToCBOR (ScriptInAnyLang (PlutusScriptLanguage v) _) = case v of {}\n\n    deserialiseFromCBOR AsScriptInAnyLang bs =\n        CBOR.decodeAnnotator \"Script\" decodeScript (LBS.fromStrict bs)\n      where\n        decodeScript :: CBOR.Decoder s (CBOR.Annotator ScriptInAnyLang)\n        decodeScript = do\n          CBOR.decodeListLenOf 2\n          tag <- CBOR.decodeWord8\n\n          case tag of\n            0 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Shelley.MultiSig StandardShelley -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                        . SimpleScript SimpleScriptV1\n                        . fromShelleyMultiSig\n\n            1 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Timelock.Timelock StandardAllegra -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                        . SimpleScript SimpleScriptV2\n                        . fromAllegraTimelock TimeLocksInSimpleScriptV2\n\n            _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag \"Script\" tag\n\ninstance HasTextEnvelope ScriptInAnyLang where\n    textEnvelopeType _ = \"Script\"\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in the context of a ledger era\n--\n\ndata ScriptInEra era where\n     ScriptInEra :: ScriptLanguageInEra lang era\n                 -> Script lang\n                 -> ScriptInEra era\n\nderiving instance Show (ScriptInEra era)\n\n-- The GADT in the ScriptInEra constructor requires a custom instance\ninstance Eq (ScriptInEra era) where\n    (==) (ScriptInEra langInEra  script)\n         (ScriptInEra langInEra' script') =\n      case testEquality (languageOfScriptLanguageInEra langInEra)\n                        (languageOfScriptLanguageInEra langInEra') of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\ndata ScriptLanguageInEra lang era where\n\n     SimpleScriptV1InShelley :: ScriptLanguageInEra SimpleScriptV1 ShelleyEra\n     SimpleScriptV1InAllegra :: ScriptLanguageInEra SimpleScriptV1 AllegraEra\n     SimpleScriptV1InMary    :: ScriptLanguageInEra SimpleScriptV1 MaryEra\n\n     SimpleScriptV2InAllegra :: ScriptLanguageInEra SimpleScriptV2 AllegraEra\n     SimpleScriptV2InMary    :: ScriptLanguageInEra SimpleScriptV2 MaryEra\n\nderiving instance Eq   (ScriptLanguageInEra lang era)\nderiving instance Show (ScriptLanguageInEra lang era)\n\ninstance HasTypeProxy era => HasTypeProxy (ScriptInEra era) where\n    data AsType (ScriptInEra era) = AsScriptInEra (AsType era)\n    proxyToAsType _ = AsScriptInEra (proxyToAsType (Proxy :: Proxy era))\n\ninstance IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era) where\n    serialiseToCBOR (ScriptInEra _lang s) =\n      serialiseToCBOR (toScriptInAnyLang s)\n\n    deserialiseFromCBOR (AsScriptInEra _) bs = do\n      s@(ScriptInAnyLang lang _) <- deserialiseFromCBOR AsScriptInAnyLang bs\n      case toScriptInEra cardanoEra s of\n        Just s' -> Right s'\n        Nothing ->\n          Left $ CBOR.DecoderErrorCustom\n                 (Text.pack (show (cardanoEra :: CardanoEra era)) <> \" Script\")\n                 (\"Script language \" <> Text.pack (show lang) <>\n                  \" not supported in this era\")\n\ninstance IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era) where\n    textEnvelopeType _ =\n      case shelleyBasedEra :: ShelleyBasedEra era of\n        ShelleyBasedEraShelley -> \"ScriptInEra ShelleyEra\"\n        ShelleyBasedEraAllegra -> \"ScriptInEra AllegraEra\"\n        ShelleyBasedEraMary    -> \"ScriptInEra MaryEra\"\n\n\n-- | Check if a given script language is supported in a given era, and if so\n-- return the evidence.\n--\nscriptLanguageSupportedInEra :: CardanoEra era\n                             -> ScriptLanguage lang\n                             -> Maybe (ScriptLanguageInEra lang era)\nscriptLanguageSupportedInEra era lang =\n    case (era, lang) of\n      (ShelleyEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InShelley\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InMary\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InMary\n\n      _ -> Nothing\n\nlanguageOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                              -> ScriptLanguage lang\nlanguageOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InAllegra -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InMary    -> SimpleScriptLanguage SimpleScriptV1\n\n      SimpleScriptV2InAllegra -> SimpleScriptLanguage SimpleScriptV2\n      SimpleScriptV2InMary    -> SimpleScriptLanguage SimpleScriptV2\n\neraOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                         -> ShelleyBasedEra era\neraOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> ShelleyBasedEraShelley\n\n      SimpleScriptV1InAllegra -> ShelleyBasedEraAllegra\n      SimpleScriptV2InAllegra -> ShelleyBasedEraAllegra\n\n      SimpleScriptV1InMary    -> ShelleyBasedEraMary\n      SimpleScriptV2InMary    -> ShelleyBasedEraMary\n\n\n-- | Given a target era and a script in some language, check if the language is\n-- supported in that era, and if so return a 'ScriptInEra'.\n--\ntoScriptInEra :: CardanoEra era -> ScriptInAnyLang -> Maybe (ScriptInEra era)\ntoScriptInEra era (ScriptInAnyLang lang s) = do\n    lang' <- scriptLanguageSupportedInEra era lang\n    return (ScriptInEra lang' s)\n\neraOfScriptInEra :: ScriptInEra era -> ShelleyBasedEra era\neraOfScriptInEra (ScriptInEra langInEra _) = eraOfScriptLanguageInEra langInEra\n\n\n-- ----------------------------------------------------------------------------\n-- Script Hash\n--\n\n-- | We have this type separate from the 'Hash' type to avoid the script\n-- hash type being parametrised by the era. The representation is era\n-- independent, and there are many places where we want to use a script\n-- hash where we don't want things to be era-parametrised.\n--\nnewtype ScriptHash = ScriptHash (Shelley.ScriptHash StandardShelley)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex ScriptHash\n\ninstance HasTypeProxy ScriptHash where\n    data AsType ScriptHash = AsScriptHash\n    proxyToAsType _ = AsScriptHash\n\ninstance SerialiseAsRawBytes ScriptHash where\n    serialiseToRawBytes (ScriptHash (Shelley.ScriptHash h)) =\n      Crypto.hashToBytes h\n\n    deserialiseFromRawBytes AsScriptHash bs =\n      ScriptHash . Shelley.ScriptHash <$> Crypto.hashFromBytes bs\n\n\nhashScript :: Script lang -> ScriptHash\nhashScript (SimpleScript SimpleScriptV1 s) =\n    -- For V1, we convert to the Shelley-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . Shelley.hashMultiSigScript\n  . toShelleyMultiSig\n  $ s\n\nhashScript (SimpleScript SimpleScriptV2 s) =\n    -- For V1, we convert to the Allegra-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . coerceShelleyScriptHash\n  . Timelock.hashTimelockScript\n  . (toAllegraTimelock :: SimpleScript SimpleScriptV2\n                       -> Timelock.Timelock StandardAllegra)\n  $ s\n\n\ntoShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                    => ScriptHash -> Shelley.ScriptHash ledgerera\ntoShelleyScriptHash (ScriptHash h) = coerceShelleyScriptHash h\n\nfromShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                      => Shelley.ScriptHash ledgerera -> ScriptHash\nfromShelleyScriptHash = ScriptHash . coerceShelleyScriptHash\n\ncoerceShelleyScriptHash :: Ledger.Crypto ledgereraA ~ Ledger.Crypto ledgereraB\n                        => Shelley.ScriptHash ledgereraA\n                        -> Shelley.ScriptHash ledgereraB\ncoerceShelleyScriptHash (Shelley.ScriptHash h) =\n    Shelley.ScriptHash (Crypto.castHash h)\n\n\n-- ----------------------------------------------------------------------------\n-- The simple native script language\n--\n\ndata SimpleScript lang where\n\n     RequireSignature  :: !(Hash PaymentKey)\n                       -> SimpleScript lang\n\n     RequireTimeBefore :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireTimeAfter  :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireAllOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireAnyOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireMOf        :: Int -> [SimpleScript lang] -> SimpleScript lang\n\nderiving instance Eq   (SimpleScript lang)\nderiving instance Show (SimpleScript lang)\n\n\n-- | Time lock feature in the 'SimpleScript' language.\n--\n-- The constructors of this type serve as evidence that the timelocks feature\n-- is supported in particular versions of the language.\n--\ndata TimeLocksSupported lang where\n     TimeLocksInSimpleScriptV2 :: TimeLocksSupported SimpleScriptV2\n\nderiving instance Eq   (TimeLocksSupported lang)\nderiving instance Show (TimeLocksSupported lang)\n\ntimeLocksSupported :: SimpleScriptVersion lang\n                   -> Maybe (TimeLocksSupported lang)\ntimeLocksSupported SimpleScriptV1 = Nothing\ntimeLocksSupported SimpleScriptV2 = Just TimeLocksInSimpleScriptV2\n\n\n-- | Try converting the 'SimpleScript' into a different version of the language.\n--\n-- This will work when the script only uses the features of the target language\n-- version. For example converting from 'SimpleScriptV2' to 'SimpleScriptV1'\n-- will work if the script happens not to use time locks feature. On the other\n-- hand converting 'SimpleScriptV1' to 'SimpleScriptV2' will always work because\n-- it is backwards compatible.\n--\nadjustSimpleScriptVersion :: SimpleScriptVersion lang'\n                          -> SimpleScript lang\n                          -> Maybe (SimpleScript lang')\nadjustSimpleScriptVersion target = go\n  where\n    go (RequireSignature sig) = pure (RequireSignature sig)\n\n    go (RequireTimeBefore _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeBefore supported slot)\n\n    go (RequireTimeAfter _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeAfter supported slot)\n\n    go (RequireAllOf ss) = RequireAllOf <$> traverse go ss\n    go (RequireAnyOf ss) = RequireAnyOf <$> traverse go ss\n    go (RequireMOf m ss) = RequireMOf m <$> traverse go ss\n\n\n-- ----------------------------------------------------------------------------\n-- Conversion functions\n--\n\ntoShelleyScript :: ScriptInEra era -> Ledger.Script (ShelleyLedgerEra era)\ntoShelleyScript (ScriptInEra langInEra (SimpleScript _ script)) =\n    case langInEra of\n      SimpleScriptV1InShelley -> toShelleyMultiSig script\n\n      SimpleScriptV1InAllegra -> toAllegraTimelock script\n      SimpleScriptV1InMary    -> toAllegraTimelock script\n      SimpleScriptV2InAllegra -> toAllegraTimelock script\n      SimpleScriptV2InMary    -> toAllegraTimelock script\n\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\ntoShelleyMultiSig :: SimpleScript SimpleScriptV1\n                  -> Shelley.MultiSig StandardShelley\ntoShelleyMultiSig = go\n  where\n    go :: SimpleScript SimpleScriptV1 -> Shelley.MultiSig StandardShelley\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Shelley.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Shelley.RequireAllOf (map go s)\n    go (RequireAnyOf s) = Shelley.RequireAnyOf (map go s)\n    go (RequireMOf m s) = Shelley.RequireMOf m (map go s)\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\nfromShelleyMultiSig :: Shelley.MultiSig StandardShelley -> SimpleScript lang\nfromShelleyMultiSig = go\n  where\n    go (Shelley.RequireSignature kh)\n                                = RequireSignature\n                                    (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Shelley.RequireAllOf s) = RequireAllOf (map go s)\n    go (Shelley.RequireAnyOf s) = RequireAnyOf (map go s)\n    go (Shelley.RequireMOf m s) = RequireMOf m (map go s)\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\ntoAllegraTimelock :: forall lang ledgerera.\n                     (Ledger.Era ledgerera,\n                      Ledger.Crypto ledgerera ~ StandardCrypto)\n                  => SimpleScript lang -> Timelock.Timelock ledgerera\ntoAllegraTimelock = go\n  where\n    go :: SimpleScript lang -> Timelock.Timelock ledgerera\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Timelock.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Timelock.RequireAllOf (Seq.fromList (map go s))\n    go (RequireAnyOf s) = Timelock.RequireAnyOf (Seq.fromList (map go s))\n    go (RequireMOf m s) = Timelock.RequireMOf m (Seq.fromList (map go s))\n    go (RequireTimeBefore _ t) = Timelock.RequireTimeExpire t\n    go (RequireTimeAfter  _ t) = Timelock.RequireTimeStart  t\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\nfromAllegraTimelock ::    (Ledger.Era ledgerera,\n                           Ledger.Crypto ledgerera ~ StandardCrypto)\n                       => TimeLocksSupported lang\n                       -> Timelock.Timelock ledgerera\n                       -> SimpleScript lang\nfromAllegraTimelock timelocks = go\n  where\n    go (Timelock.RequireSignature kh) = RequireSignature\n                                          (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Timelock.RequireTimeExpire t) = RequireTimeBefore timelocks t\n    go (Timelock.RequireTimeStart  t) = RequireTimeAfter  timelocks t\n    go (Timelock.RequireAllOf      s) = RequireAllOf (map go (toList s))\n    go (Timelock.RequireAnyOf      s) = RequireAnyOf (map go (toList s))\n    go (Timelock.RequireMOf      i s) = RequireMOf i (map go (toList s))\n\n\n-- ----------------------------------------------------------------------------\n-- JSON serialisation\n--\n\ninstance ToJSON (Script lang) where\n  toJSON (SimpleScript _ script) = toJSON script\n\ninstance ToJSON ScriptInAnyLang where\n  toJSON (ScriptInAnyLang _ script) = toJSON script\n\ninstance ToJSON (ScriptInEra era) where\n  toJSON (ScriptInEra _ script) = toJSON script\n\ninstance ToJSON (SimpleScript lang) where\n  toJSON (RequireSignature pKeyHash) =\n    object [ \"type\"    .= String \"sig\"\n           , \"keyHash\" .= Text.decodeUtf8 (serialiseToRawBytesHex pKeyHash)\n           ]\n  toJSON (RequireTimeBefore _ slot) =\n    object [ \"type\" .= String \"before\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireTimeAfter _ slot) =\n    object [ \"type\" .= String \"after\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireAnyOf reqScripts) =\n    object [ \"type\" .= String \"any\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireAllOf reqScripts) =\n    object [ \"type\" .= String \"all\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireMOf reqNum reqScripts) =\n    object [ \"type\" .= String \"atLeast\"\n           , \"required\" .= reqNum\n           , \"scripts\" .= map toJSON reqScripts\n           ]\n\n\ninstance IsScriptLanguage lang => FromJSON (Script lang) where\n  parseJSON v =\n    case scriptLanguage :: ScriptLanguage lang of\n      SimpleScriptLanguage lang -> SimpleScript lang <$>\n                                     parseSimpleScript lang v\n      PlutusScriptLanguage lang -> case lang of {}\n\n\ninstance FromJSON ScriptInAnyLang where\n  parseJSON v =\n      -- The SimpleScript language has the property that it is backwards\n      -- compatible, so we can parse as the latest version and then downgrade\n      -- to the minimum version that has all the features actually used.\n      toMinimumSimpleScriptVersion <$> parseSimpleScript SimpleScriptV2 v\n    where\n      --TODO: this will need to be adjusted when more versions are added\n      -- with appropriate helper functions it can probably be done in an\n      -- era-generic style\n      toMinimumSimpleScriptVersion s =\n        case adjustSimpleScriptVersion SimpleScriptV1 s of\n          Nothing -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript SimpleScriptV2 s)\n          Just s' -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsCardanoEra era => FromJSON (ScriptInEra era) where\n  parseJSON v =\n    case cardanoEra :: CardanoEra era of\n      ByronEra   -> fail \"Scripts are not supported in the Byron era\"\n\n      ShelleyEra -> ScriptInEra SimpleScriptV1InShelley\n                  . SimpleScript SimpleScriptV1\n                <$> parseSimpleScript SimpleScriptV1 v\n\n      --TODO: this will need to be adjusted when more versions are added.\n      -- It can probably be done in an era-generic style, with the use of\n      -- appropriate helper functions.\n      AllegraEra -> toMinimumSimpleScriptVersion\n                <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InAllegra\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InAllegra\n                                     (SimpleScript SimpleScriptV1 s')\n\n      MaryEra -> toMinimumSimpleScriptVersion\n             <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InMary\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InMary\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang) where\n  parseJSON = parseSimpleScript simpleScriptVersion\n\n\nparseSimpleScript :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseSimpleScript lang v = parseScriptSig          v\n                       <|> parseScriptBefore  lang v\n                       <|> parseScriptAfter   lang v\n                       <|> parseScriptAny     lang v\n                       <|> parseScriptAll     lang v\n                       <|> parseScriptAtLeast lang v\n\nparseScriptAny :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAny lang =\n    Aeson.withObject \"any\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"any\" -> do vs <- obj .: \"scripts\"\n                    RequireAnyOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"any\\\" script value not found\"\n\nparseScriptAll :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAll lang =\n    Aeson.withObject \"all\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"all\" -> do vs <- obj .: \"scripts\"\n                    RequireAllOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"all\\\" script value not found\"\n\nparseScriptAtLeast :: SimpleScriptVersion lang\n                   -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAtLeast lang =\n    Aeson.withObject \"atLeast\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"atLeast\" -> do\n          r  <- obj .: \"required\"\n          vs <- obj .: \"scripts\"\n          case r of\n            Number sci ->\n              case toBoundedInteger sci of\n                Just reqInt ->\n                  do scripts <- gatherSimpleScriptTerms lang vs\n                     let numScripts = length scripts\n                     when\n                       (reqInt > numScripts)\n                       (fail $ \"Required number of script signatures exceeds the number of scripts.\"\n                             <> \" Required number: \" <> show reqInt\n                             <> \" Number of scripts: \" <> show numScripts)\n                     return $ RequireMOf reqInt scripts\n                Nothing -> fail $ \"Error in \\\"required\\\" key: \"\n                                <> show sci <> \" is not a valid Int\"\n            _ -> fail \"\\\"required\\\" value should be an integer\"\n        _        -> fail \"\\\"atLeast\\\" script value not found\"\n\ngatherSimpleScriptTerms :: SimpleScriptVersion lang\n                        -> Vector Value -> Aeson.Parser [SimpleScript lang]\ngatherSimpleScriptTerms lang = mapM (parseSimpleScript lang) . Vector.toList\n\nparseScriptSig :: Value -> Aeson.Parser (SimpleScript lang)\nparseScriptSig =\n    Aeson.withObject \"sig\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"sig\" -> do k <- obj .: \"keyHash\"\n                    RequireSignature <$> parsePaymentKeyHash k\n        _     -> fail \"\\\"sig\\\" script value not found\"\n\nparseScriptBefore :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptBefore lang =\n    Aeson.withObject \"before\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"before\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeBefore supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"before\\\" not supported in \" ++ show lang)\n        _ -> fail \"\\\"before\\\" script value not found\"\n\nparseScriptAfter :: SimpleScriptVersion lang\n                 -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAfter lang =\n    Aeson.withObject \"after\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"after\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeAfter supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"after\\\" not supported in \" ++ show lang)\n        _       -> fail \"\\\"after\\\" script value not found\"\n\nparsePaymentKeyHash :: Text -> Aeson.Parser (Hash PaymentKey)\nparsePaymentKeyHash txt =\n    case deserialiseFromRawBytesHex (AsHash AsPaymentKey) (Text.encodeUtf8 txt) of\n      Just payKeyHash -> return payKeyHash\n      Nothing -> fail $ \"Error deserialising payment key hash: \" <> Text.unpack txt\n\n"}}}
2020-12-03 08:03:49.121021489 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-03 08:03:49.121337291 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 08:03:49.121420372 [ThreadId 44] - Finishing build session(exception: AsyncCancelled)
2020-12-03 08:03:49.121600452 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 08:03:49.1246407 [ThreadId 97] - Consulting the cradle for "cardano-api/src/Cardano/Api/Script.hs"
2020-12-03 08:03:49.129194544 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":0},"method":"window/workDoneProgress/create","id":1}
2020-12-03 08:03:49.12942633 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","cancellable":false,"title":"Setting up cardano-node (for cardano-api/src/Cardano/Api/Script.hs)"},"token":0},"method":"$/progress"}
2020-12-03 08:03:49.223431215 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":"1"},"method":"window/workDoneProgress/create","id":2}
2020-12-03 08:03:49.223575492 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","title":"Processing"},"token":"1"},"method":"$/progress"}
2020-12-03 08:03:49.255185816 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":0,"result":null}
2020-12-03 08:03:49.255366997 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":0,\"result\":null}"
2020-12-03 08:03:49.259120121 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":1,"result":null}
2020-12-03 08:03:49.259256856 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":null}"
2020-12-03 08:03:49.268255946 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 08:03:49.269271908 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":259,"character":0},"end":{"line":259,"character":16}},"context":{"diagnostics":[]}}}
2020-12-03 08:03:49.271022334 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":2,"result":null}
2020-12-03 08:03:49.271129982 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":2,\"result\":null}"
2020-12-03 08:03:49.323596738 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"1/2"},"token":"1"},"method":"$/progress"}
2020-12-03 08:03:49.340432779 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":1}}
2020-12-03 08:03:49.340653409 [ThreadId 107] - C:GetParsedModule was cancelled
2020-12-03 08:03:49.340754097 [ThreadId 105] - Cancelled request IdInt 1
2020-12-03 08:03:49.34076702 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 08:03:49.340951921 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":1}
2020-12-03 08:03:49.4103667 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}
2020-12-03 08:03:49.410561125 [ThreadId 112] - CodeAction was cancelled
2020-12-03 08:03:49.410642047 [ThreadId 110] - Cancelled request IdInt 2
2020-12-03 08:03:49.410724415 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":259,"character":0},"end":{"line":259,"character":16}},"context":{"diagnostics":[]}}}
2020-12-03 08:03:49.410793336 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":2}
2020-12-03 08:03:49.57348619 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":5,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 08:03:49.573691012 [ThreadId 129] - Plugin.makeCodeLens (ideLogger)
2020-12-03 08:07:23.731064093 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":0},"method":"$/progress"}
2020-12-03 08:07:23.730990916 [ThreadId 97] - Session loading result: Right (ComponentOptions {componentOptions = ["-fbuilding-cabal-package","-O0","-outputdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-odir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-hidir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-stubdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-i","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-isrc","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-optP-include","-optP/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen/cabal_macros.h","-this-unit-id","cardano-api-1.24.0-inplace","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","/home/jordan/.cabal/store/ghc-8.10.2/package.db","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/packagedb/ghc-8.10.2","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/package.conf.inplace","-package-id","aeson-1.5.4.1-778a06fa5c9318198c793c5f8e2ca8d95fb38f4f10ed2bb32743f99d3f297246","-package-id","aeson-pretty-0.8.8-9b8e5a813f7409b128fda52cd6ba78fcfcdafe24319cbe51431a74775267e91b","-package-id","attoparsec-0.13.2.4-b396c2be954a9ffb3e95bbdaa6fb35ac8c27f1db8915f7964aec17a75da742b8","-package-id","base-4.14.1.0","-package-id","base16-bytestring-1.0.1.0-9f11fc286491f106a9ef784dbd62d74f1270ad38dd03d9b8cbaa41c1bbf814c8","-package-id","base58-bytestring-0.1.0-05a60df8b198010614f5302714ff68e040396e56ff7519d163761623c0de2d98","-package-id","base64-0.4.2.2-f3d429f1b298e2d466e9311305c47c04a6d9a575e1b8a3f034d63e7d23e4db48","-package-id","bech32-1.1.0-ae5f2a1a89c10d7c25e2ebed7b7fb0cd489664bd6e6c0de80e0c1dff37d17063","-package-id","bytestring-0.10.10.0","-package-id","cardano-binary-1.5.0-inplace","-package-id","cardano-config-0.1.0.0-inplace","-package-id","cardano-crypto-1.1.0-inplace","-package-id","cardano-crypto-class-2.0.0-inplace","-package-id","cardano-crypto-wrapper-1.3.0-inplace","-package-id","cardano-ledger-0.1.0.0-inplace","-package-id","cardano-ledger-shelley-ma-0.1.0.0-inplace","-package-id","cardano-prelude-0.1.0.0-inplace","-package-id","cardano-slotting-0.1.0.0-inplace","-package-id","cborg-0.2.4.0-4a245966fd5882ffb16d2ef07bb992473fd41fea0a4e61c4acd669aab7242ef9","-package-id","containers-0.6.2.1","-package-id","contra-tracer-0.1.0.0-inplace","-package-id","cryptonite-0.27-8826084f96fb9db464240662656382b25f16ff766ee68e8d02dd9d995db86b80","-package-id","directory-1.3.6.0","-package-id","filepath-1.4.2.1","-package-id","formatting-6.3.7-330f1aaaee1a6193dee6fd50994a301f73441c53ff813f4d131c0e6261ec6d04","-package-id","io-sim-classes-0.2.0.0-inplace","-package-id","iohk-monitoring-0.1.10.1-inplace","-package-id","iproute-1.7.9-43bc36e75965a204ad802bfb667361131efd65210901659e34179dc2da9d1118","-package-id","memory-0.15.0-618aae508e33731dca15e11c7e941c9d1279b1ed04bf74d2a2b887208cef7d4c","-package-id","network-3.1.2.0-f313f458cfb9472e49923061663feda9781129bd7a55b5c51b8bf13fb9eff621","-package-id","network-mux-0.1.0.0-inplace","-package-id","network-uri-2.6.3.0-5bbc25b922944130d3a812c001fbe448d17321f63665fc89b3c6ab483fba8ba1","-package-id","nothunks-0.1.1.0-79bfe850d8c797b8b11355d5e36d13d317a1777729736319881d061a6bbdcf98","-package-id","ouroboros-consensus-0.1.0.0-inplace","-package-id","ouroboros-consensus-byron-0.1.0.0-inplace","-package-id","ouroboros-consensus-cardano-0.1.0.0-inplace","-package-id","ouroboros-consensus-shelley-0.1.0.0-inplace","-package-id","ouroboros-network-0.1.0.0-inplace","-package-id","ouroboros-network-framework-0.1.0.0-inplace","-package-id","scientific-0.3.6.2-8634ec87686367cd9854d817075c6b174f7c80b793cfe710d1a33fad0d669b83","-package-id","serialise-0.2.3.0-2d2b69476413a92a4cff76cdbea89b5f9e9991e103cca95a6e05888ca3848e83","-package-id","shelley-spec-ledger-0.1.0.0-inplace","-package-id","stm-2.5.0.0","-package-id","text-1.2.3.2","-package-id","time-1.9.3","-package-id","transformers-0.5.6.2","-package-id","transformers-except-0.1.1-dff5057c0148093fdb22eb905288dea1dc40636273c3c43c25d303bb31f7e9cb","-package-id","typed-protocols-0.1.0.0-inplace","-package-id","typed-protocols-examples-0.1.0.0-inplace","-package-id","unordered-containers-0.2.13.0-4cfa23410683cfe8b97b82ed15f0d30134b196b546cbf1fdf2d0a9054d02c7db","-package-id","vector-0.12.1.2-9df9fc999682f51f3e81c90fce28e7b7f7243cc5f3e33ff871c9d5a147125c1d","-XHaskell2010","-XNoImplicitPrelude","-XOverloadedStrings","Cardano.API","Cardano.Api.Byron","Cardano.Api.Crypto.Ed25519Bip32","Cardano.Api.LocalChainSync","Cardano.Api.Protocol","Cardano.Api.Protocol.Byron","Cardano.Api.Protocol.Cardano","Cardano.Api.Protocol.Shelley","Cardano.Api.Protocol.Types","Cardano.Api.Shelley","Cardano.Api.Shelley.Genesis","Cardano.Api.TxSubmit","Cardano.Api.Typed","Cardano.Api.TxSubmit.ErrorRender","Cardano.Api.TxSubmit.Types","Cardano.Api.Address","Cardano.Api.Certificate","Cardano.Api.Eras","Cardano.Api.Error","Cardano.Api.Fees","Cardano.Api.Hash","Cardano.Api.HasTypeProxy","Cardano.Api.Key","Cardano.Api.KeysByron","Cardano.Api.KeysShelley","Cardano.Api.KeysPraos","Cardano.Api.NetworkId","Cardano.Api.OperationalCertificate","Cardano.Api.ProtocolParameters","Cardano.Api.Script","Cardano.Api.SerialiseBech32","Cardano.Api.SerialiseCBOR","Cardano.Api.SerialiseJSON","Cardano.Api.SerialiseRaw","Cardano.Api.SerialiseTextEnvelope","Cardano.Api.StakePoolMetadata","Cardano.Api.Tx","Cardano.Api.TxBody","Cardano.Api.TxMetadata","Cardano.Api.Utils","Cardano.Api.Value","-Wall","-Wincomplete-record-updates","-Wincomplete-uni-patterns","-Wredundant-constraints","-Wpartial-fields","-Wcompat","-hide-all-packages","-Werror"], componentRoot = "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api", componentDependencies = ["cardano-api/cardano-api.cabal","cabal.project","cabal.project.local"]},"/usr/local/lib/ghc-8.10.2")
2020-12-03 08:07:23.944171462 [ThreadId 97] - Using interface files cache dir: /home/jordan/.cache/ghcide/cardano-api-1.24.0-inplace-04573879897e8c84891c4ddfb50e69055b43dad3
2020-12-03 08:07:23.944642139 [ThreadId 97] - Making new HscEnv[cardano-api-1.24.0-inplace]
2020-12-03 08:07:23.989655572 [ThreadId 97] - New Component Cache HscEnvEq: (([],Just HscEnvEq 7),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-api/cardano-api.cabal",Just 2020-12-02 09:21:26.415901175 UTC)])
2020-12-03 08:07:24.083934577 [ThreadId 97] - Known files updated: fromList [(TargetModule Cardano.Api.TxBody,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs"]),(TargetModule Cardano.Api.Tx,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Cardano.Api.SerialiseRaw,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseRaw.hs"]),(TargetModule Cardano.Api.Crypto.Ed25519Bip32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Crypto/Ed25519Bip32.hs"]),(TargetModule Cardano.Api.SerialiseJSON,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseJSON.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"]),(TargetModule Cardano.Api.Typed,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs"]),(TargetModule Cardano.API,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"]),(TargetModule Cardano.Api.Shelley.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley/Genesis.hs"]),(TargetModule Cardano.Api.KeysShelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"]),(TargetModule Cardano.Api.SerialiseBech32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseBech32.hs"]),(TargetModule Cardano.Api.Error,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Error.hs"]),(TargetModule Cardano.Api.StakePoolMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs"]),(TargetModule Cardano.Api.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Key.hs"]),(TargetModule Cardano.Api.Hash,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Hash.hs"]),(TargetModule Cardano.Api.Protocol,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol.hs"]),(TargetModule Cardano.Api.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Byron.hs"]),(TargetModule Cardano.Api.OperationalCertificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs"]),(TargetModule Cardano.Api.Protocol.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Types.hs"]),(TargetModule Cardano.Api.NetworkId,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/NetworkId.hs"]),(TargetModule Cardano.Api.KeysPraos,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysPraos.hs"]),(TargetModule Cardano.Api.Address,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs"]),(TargetModule Cardano.Api.TxSubmit.ErrorRender,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/ErrorRender.hs"]),(TargetModule Cardano.Api.TxSubmit,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit.hs"]),(TargetModule Cardano.Api.Protocol.Cardano,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Cardano.hs"]),(TargetModule Cardano.Api.Certificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Certificate.hs"]),(TargetModule Cardano.Api.Value,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs"]),(TargetModule Cardano.Api.TxSubmit.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/Types.hs"]),(TargetModule Cardano.Api.LocalChainSync,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/LocalChainSync.hs"]),(TargetModule Cardano.Api.Script,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"]),(TargetModule Cardano.Api.Fees,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs"]),(TargetModule Cardano.Api.ProtocolParameters,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/ProtocolParameters.hs"]),(TargetModule Cardano.Api.SerialiseCBOR,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseCBOR.hs"]),(TargetModule Cardano.Api.Protocol.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Shelley.hs"]),(TargetModule Cardano.Api.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley.hs"]),(TargetModule Cardano.Api.TxMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxMetadata.hs"]),(TargetModule Cardano.Api.Eras,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Eras.hs"]),(TargetModule Cardano.Api.HasTypeProxy,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/HasTypeProxy.hs"]),(TargetModule Cardano.Api.Protocol.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Byron.hs"]),(TargetModule Cardano.Api.Utils,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Utils.hs"]),(TargetModule Cardano.Api.SerialiseTextEnvelope,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseTextEnvelope.hs"]),(TargetModule Cardano.Api.KeysByron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysByron.hs"])]
2020-12-03 08:07:24.084929863 [ThreadId 69] - Finishing build session(exception: AsyncCancelled)
2020-12-03 08:07:24.085093481 [ThreadId 97] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 08:07:24.139882034 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"11/46"},"token":"1"},"method":"$/progress"}
2020-12-03 08:07:24.178132565 [ThreadId 231] - finish: C:GetParsedModule (took 0.09s)
2020-12-03 08:07:24.178320839 [ThreadId 231] - finish: CodeAction (took 0.09s)
2020-12-03 08:07:24.18668958 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":3}
2020-12-03 08:07:24.240785903 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"18/55"},"token":"1"},"method":"$/progress"}
2020-12-03 08:07:24.34390049 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"24/59"},"token":"1"},"method":"$/progress"}
2020-12-03 08:07:24.472453019 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"27/61"},"token":"1"},"method":"$/progress"}
2020-12-03 08:07:24.572605828 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"52/70"},"token":"1"},"method":"$/progress"}
2020-12-03 08:07:25.03868376 [ThreadId 973] - finish: codeLens (took 0.95s)
2020-12-03 08:07:25.039583812 [ThreadId 972] - finish: kick (took 0.95s)
2020-12-03 08:07:25.039714968 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":"1"},"method":"$/progress"}
2020-12-03 08:07:25.040104529 [ThreadId 983] - finish:  (took 0.00s)
2020-12-03 08:07:25.041564001 [ThreadId 7] - <--2--{"result":[{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"newText":"import Control.Applicative ( Alternative((<|>)) )"}]}}],"title":"import Control.Applicative ( Alternative((<|>)) )"},"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"newText":"import Control.Monad ( when )"}]}}],"title":"import Control.Monad ( when )"},"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"newText":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"}]}}],"title":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentExtendedKey, AsGenesisUTxOKey,\n             AsGenesisKey, AsGenesisExtendedKey, AsGenesisDelegateKey,\n             AsGenesisDelegateExtendedKey, AsPaymentKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentExtendedKey, AsGenesisUTxOKey,\n             AsGenesisKey, AsGenesisExtendedKey, AsGenesisDelegateKey,\n             AsGenesisDelegateExtendedKey, AsPaymentKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"newText":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"}]}}],"title":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"newText":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"}]}}],"title":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"jsonrpc":"2.0","id":5}
2020-12-03 08:07:25.105425869 [ThreadId 1150] - finish: InitialLoad (took 1.02s)
2020-12-03 08:07:25.218238682 [ThreadId 1152] - finish: CodeAction:PackageExports (took 1.04s)
2020-12-03 08:07:25.218546408 [ThreadId 1153] - finish: importLens (took 0.00s)
2020-12-03 08:07:25.223777577 [ThreadId 1155] - finish: retrie (took 0.00s)
2020-12-03 08:07:25.245913584 [ThreadId 1161] - finish: tactic (took 0.02s)
2020-12-03 08:07:25.246253529 [ThreadId 1166] - finish: tactic (took 0.00s)
2020-12-03 08:07:25.246439014 [ThreadId 1167] - finish: tactic (took 0.00s)
2020-12-03 08:07:25.246735348 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":4}
2020-12-03 08:13:06.190728004 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 08:13:06.19088234 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}
2020-12-03 08:13:06.191092291 [ThreadId 25] - Set files of interest to: []
2020-12-03 08:13:06.191211983 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 08:13:06.193214399 [ThreadId 1174] - Typechecking reverse dependencies forNormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs": [NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]
2020-12-03 08:13:06.193373054 [ThreadId 1174] - finish: ParentTC (took 0.00s)
2020-12-03 08:13:06.279464545 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE PatternSynonyms #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-- The Shelley ledger uses promoted data kinds which we have to use, but we do\n-- not export any from this API. We also use them unticked as nature intended.\n{-# LANGUAGE DataKinds #-}\n{-# OPTIONS_GHC -Wno-unticked-promoted-constructors #-}\n\n-- | Complete, signed transactions\n--\nmodule Cardano.Api.Tx (\n\n    -- * Signing transactions\n    -- | Creating transaction witnesses one by one, or all in one go.\n    Tx(..),\n    getTxBody,\n    getTxWitnesses,\n\n    -- ** Signing in one go\n    ShelleySigningKey(..),\n    toShelleySigningKey,\n    signByronTransaction,\n    signShelleyTransaction,\n    -- ** Incremental signing and separate witnesses\n    makeSignedTransaction,\n    Witness(..),\n    makeByronKeyWitness,\n    ShelleyWitnessSigningKey(..),\n    makeShelleyKeyWitness,\n    WitnessNetworkIdOrByronAddress (..),\n    makeShelleyBootstrapWitness,\n    makeScriptWitness,\n    makeShelleySignature,\n    getShelleyKeyWitnessVerificationKey,\n\n    -- * Data family instances\n    AsType(AsTx, AsByronTx, AsShelleyTx,\n           AsWitness, AsByronWitness, AsShelleyWitness),\n  ) where\n\nimport           Prelude\n\nimport           Data.Maybe\n\nimport           Data.ByteString (ByteString)\nimport qualified Data.ByteString as BS\nimport qualified Data.ByteString.Lazy as LBS\n\nimport qualified Data.Map.Strict as Map\nimport qualified Data.Set as Set\nimport qualified Data.Vector as Vector\n\n--\n-- Common types, consensus, network\n--\nimport           Cardano.Binary (Annotated (..))\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\n--\n-- Crypto API used by consensus and Shelley (and should be used by Byron)\n--\nimport qualified Cardano.Crypto.DSIGN.Class as Crypto\nimport qualified Cardano.Crypto.Util as Crypto\nimport qualified Cardano.Crypto.Wallet as Crypto.HD\n\n--\n-- Byron imports\n--\nimport qualified Cardano.Crypto.Hashing as Byron\nimport qualified Cardano.Crypto.ProtocolMagic as Byron\nimport qualified Cardano.Crypto.Signing as Byron\nimport qualified Cardano.Chain.Common as Byron\nimport qualified Cardano.Chain.UTxO as Byron\n\n--\n-- Shelley imports\n--\nimport           Ouroboros.Consensus.Shelley.Protocol.Crypto (StandardCrypto)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era as Ledger\nimport qualified Cardano.Ledger.Shelley.Constraints as Shelley\n\nimport qualified Shelley.Spec.Ledger.Address.Bootstrap as Shelley\nimport           Shelley.Spec.Ledger.BaseTypes (maybeToStrictMaybe, strictMaybeToMaybe)\nimport qualified Shelley.Spec.Ledger.Hashing as Shelley\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Tx as Shelley\n\nimport           Cardano.Api.Address\nimport           Cardano.Api.Certificate\nimport           Cardano.Api.Eras\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.Key\nimport           Cardano.Api.KeysByron\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.NetworkId\nimport           Cardano.Api.Script\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseTextEnvelope\nimport           Cardano.Api.TxBody\n\n\n-- ----------------------------------------------------------------------------\n-- Signed transactions\n--\n\ndata Tx era where\n\n     ByronTx\n       :: Byron.ATxAux ByteString\n       -> Tx ByronEra\n\n     ShelleyTx\n       :: ShelleyBasedEra era\n       -> Shelley.Tx (ShelleyLedgerEra era)\n       -> Tx era\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Eq (Tx era) where\n    (==) (ByronTx txA)\n         (ByronTx txB) = txA == txB\n\n    (==) (ShelleyTx era txA)\n         (ShelleyTx _   txB) =\n      case era of\n        ShelleyBasedEraShelley -> txA == txB\n        ShelleyBasedEraAllegra -> txA == txB\n        ShelleyBasedEraMary    -> txA == txB\n\n    (==) ByronTx{} (ShelleyTx era _) = case era of {}\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Show (Tx era) where\n    showsPrec p (ByronTx tx) =\n      showParen (p >= 11) $\n        showString \"ByronTx \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Tx era) where\n    data AsType (Tx era) = AsTx (AsType era)\n    proxyToAsType _ = AsTx (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronTx :: AsType (Tx ByronEra)\npattern AsByronTx   = AsTx AsByronEra\n{-# COMPLETE AsByronTx #-}\n\npattern AsShelleyTx :: AsType (Tx ShelleyEra)\npattern AsShelleyTx = AsTx AsShelleyEra\n{-# COMPLETE AsShelleyTx #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Tx era) where\n    serialiseToCBOR (ByronTx tx) = CBOR.recoverBytes tx\n\n    serialiseToCBOR (ShelleyTx era tx) =\n      case era of\n        ShelleyBasedEraShelley -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraAllegra -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraMary    -> serialiseShelleyBasedTx tx\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronTx <$>\n            CBOR.decodeFullAnnotatedBytes\n              \"Byron Tx\" fromCBOR (LBS.fromStrict bs)\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraShelley) bs\n        AllegraEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraAllegra) bs\n        MaryEra    -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraMary) bs\n\n-- | The serialisation format for the different Shelley-based eras are not the\n-- same, but they can be handled generally with one overloaded implementation.\n--\nserialiseShelleyBasedTx :: ToCBOR tx => tx -> ByteString\nserialiseShelleyBasedTx = CBOR.serialize'\n\ndeserialiseShelleyBasedTx :: FromCBOR (CBOR.Annotator tx)\n                          => (tx -> tx')\n                          -> ByteString\n                          -> Either CBOR.DecoderError tx'\ndeserialiseShelleyBasedTx mkTx bs =\n    mkTx <$> CBOR.decodeAnnotator \"Shelley Tx\" fromCBOR (LBS.fromStrict bs)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Tx era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxSignedByron\"\n        ShelleyEra -> \"TxSignedShelley\"\n        AllegraEra -> \"Tx AllegraEra\"\n        MaryEra    -> \"Tx MaryEra\"\n\n\ndata Witness era where\n\n     ByronKeyWitness\n       :: Byron.TxInWitness\n       -> Witness ByronEra\n\n     ShelleyBootstrapWitness\n       :: ShelleyBasedEra era\n       -> Shelley.BootstrapWitness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyKeyWitness\n       :: ShelleyBasedEra era\n       -> Shelley.WitVKey Shelley.Witness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyScriptWitness\n       :: ShelleyBasedEra era\n       -> Ledger.Script (ShelleyLedgerEra era)\n       -> Witness era\n\n\n-- The GADT in the Shelley cases requires a custom instance\ninstance Eq (Witness era) where\n    (==) (ByronKeyWitness wA)\n         (ByronKeyWitness wB) = wA == wB\n\n    (==) (ShelleyBootstrapWitness era wA)\n         (ShelleyBootstrapWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyKeyWitness era wA)\n         (ShelleyKeyWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyScriptWitness era wA)\n         (ShelleyScriptWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) _ _ = False\n\n-- The GADT in the ShelleyTx case requires a custom instance\n--TODO: once we start providing custom patterns we should do the show in terms\n-- of those. It'll be less verbose too!\ninstance Show (Witness era) where\n    showsPrec p (ByronKeyWitness tx) =\n      showParen (p >= 11) $\n        showString \"ByronKeyWitness \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Witness era) where\n    data AsType (Witness era) = AsWitness (AsType era)\n    proxyToAsType _ = AsWitness (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronWitness :: AsType (Witness ByronEra)\npattern AsByronWitness   = AsWitness AsByronEra\n{-# COMPLETE AsByronWitness #-}\n\npattern AsShelleyWitness :: AsType (Witness ShelleyEra)\npattern AsShelleyWitness = AsWitness AsShelleyEra\n{-# COMPLETE AsShelleyWitness #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Witness era) where\n    serialiseToCBOR (ByronKeyWitness wit) = CBOR.serialize' wit\n\n    serialiseToCBOR (ShelleyKeyWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedKeyWitness wit\n\n    serialiseToCBOR (ShelleyBootstrapWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedBootstrapWitness wit\n\n    serialiseToCBOR (ShelleyScriptWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedScriptWitness wit\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronKeyWitness <$> CBOR.decodeFull' bs\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> decodeShelleyBasedWitness ShelleyBasedEraShelley bs\n        AllegraEra -> decodeShelleyBasedWitness ShelleyBasedEraAllegra bs\n        MaryEra    -> decodeShelleyBasedWitness ShelleyBasedEraMary    bs\n\n\nencodeShelleyBasedKeyWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedKeyWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 0 <> toCBOR wit\n\nencodeShelleyBasedBootstrapWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedBootstrapWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 1 <> toCBOR wit\n\nencodeShelleyBasedScriptWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedScriptWitness wit =\n    CBOR.encodeListLen 2\n <> CBOR.encodeWord 2\n    -- We use an extra level of wrapping here to support the legacy\n    -- binary serialisation format for the @Script@ type from\n    -- @cardano-ledger-specs@.\n    --\n    -- TODO: make this go away by providing a WitnessSet type and only\n    -- providing serialisation for witness sets, using the serialisation\n    -- from the ledger lib rather than needing something custom here.\n    -- Signed transactions have witness sets, so this is an existing on-chain\n    -- stable format.\n <> CBOR.encodeListLen 2\n <> CBOR.encodeWord 0\n <> toCBOR wit\n\ndecodeShelleyBasedWitness :: forall era.\n                             Ledger.Era (ShelleyLedgerEra era)\n                          => FromCBOR (CBOR.Annotator (Ledger.Script (ShelleyLedgerEra era)))\n                          => ShelleyBasedEra era\n                          -> ByteString\n                          -> Either CBOR.DecoderError (Witness era)\ndecodeShelleyBasedWitness era =\n    CBOR.decodeAnnotator \"Shelley Witness\" decode . LBS.fromStrict\n  where\n    decode :: CBOR.Decoder s (CBOR.Annotator (Witness era))\n    decode =  do\n      CBOR.decodeListLenOf 2\n      t <- CBOR.decodeWord\n      case t of\n        0 -> fmap (fmap (ShelleyKeyWitness era)) fromCBOR\n        1 -> fmap (fmap (ShelleyBootstrapWitness era)) fromCBOR\n        -- We use an extra level of wrapping here to support the legacy\n        -- binary serialisation format for the @Script@ type from\n        -- @cardano-ledger-specs@.\n        2 -> do CBOR.decodeListLenOf 2\n                CBOR.decodeWordOf 0\n                fmap (fmap (ShelleyScriptWitness era)) fromCBOR\n        _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag\n                                \"Shelley Witness\" (fromIntegral t)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Witness era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxWitnessByron\"\n        ShelleyEra -> \"TxWitnessShelley\"\n        AllegraEra -> \"TxWitness AllegraEra\"\n        MaryEra    -> \"TxWitness MaryEra\"\n\n\ngetTxBody :: forall era. Tx era -> TxBody era\ngetTxBody (ByronTx Byron.ATxAux { Byron.aTaTx = txbody }) =\n    ByronTxBody txbody\n\ngetTxBody (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxBody tx\n      ShelleyBasedEraAllegra -> getShelleyTxBody tx\n      ShelleyBasedEraMary    -> getShelleyTxBody tx\n  where\n    getShelleyTxBody :: forall ledgerera.\n                        ShelleyLedgerEra era ~ ledgerera\n                     => Shelley.ShelleyBased ledgerera\n                     => Shelley.Tx ledgerera\n                     -> TxBody era\n    getShelleyTxBody Shelley.Tx {\n                       Shelley._body     = txbody,\n                       Shelley._metadata = txmetadata\n                     } =\n      ShelleyTxBody era txbody (strictMaybeToMaybe txmetadata)\n\n\ngetTxWitnesses :: forall era. Tx era -> [Witness era]\ngetTxWitnesses (ByronTx Byron.ATxAux { Byron.aTaWitness = witnesses }) =\n    map ByronKeyWitness\n  . Vector.toList\n  . unAnnotated\n  $ witnesses\n\ngetTxWitnesses (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxWitnesses tx\n      ShelleyBasedEraAllegra -> getShelleyTxWitnesses tx\n      ShelleyBasedEraMary    -> getShelleyTxWitnesses tx\n  where\n    getShelleyTxWitnesses :: forall ledgerera.\n                             ShelleyLedgerEra era ~ ledgerera\n                          => Shelley.ShelleyBased ledgerera\n                          => Shelley.Tx ledgerera\n                          -> [Witness era]\n    getShelleyTxWitnesses Shelley.Tx {\n                            Shelley._witnessSet =\n                              Shelley.WitnessSet\n                                addrWits\n                                msigWits\n                                bootWits\n                          } =\n        map (ShelleyBootstrapWitness era) (Set.elems bootWits)\n     ++ map (ShelleyKeyWitness       era) (Set.elems addrWits)\n     ++ map (ShelleyScriptWitness    era) (Map.elems msigWits)\n\n\nmakeSignedTransaction :: forall era.\n                         [Witness era]\n                      -> TxBody era\n                      -> Tx era\nmakeSignedTransaction witnesses (ByronTxBody txbody) =\n    ByronTx\n  . Byron.annotateTxAux\n  $ Byron.mkTxAux\n      (unAnnotated txbody)\n      (Vector.fromList [ w | ByronKeyWitness w <- witnesses ])\n\nmakeSignedTransaction witnesses (ShelleyTxBody era txbody txmetadata) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraAllegra -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraMary    -> makeShelleySignedTransaction txbody\n  where\n    makeShelleySignedTransaction :: forall ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Shelley.ValidateScript ledgerera\n                                 => Ledger.TxBody ledgerera\n                                 -> Tx era\n    makeShelleySignedTransaction txbody' =\n      ShelleyTx era $\n        Shelley.Tx\n          txbody'\n          (Shelley.WitnessSet\n            (Set.fromList [ w | ShelleyKeyWitness _ w <- witnesses ])\n            (Map.fromList [ (Shelley.hashScript sw, sw)\n                          | ShelleyScriptWitness _ sw <- witnesses ])\n            (Set.fromList [ w | ShelleyBootstrapWitness _ w <- witnesses ]))\n          (maybeToStrictMaybe txmetadata)\n\n\nmakeByronKeyWitness :: NetworkId\n                    -> TxBody ByronEra\n                    -> SigningKey ByronKey\n                    -> Witness ByronEra\nmakeByronKeyWitness _ (ShelleyTxBody era _ _) = case era of {}\nmakeByronKeyWitness nw (ByronTxBody txbody) =\n    let txhash :: Byron.Hash Byron.Tx\n        txhash = Byron.hashDecoded txbody\n\n        pm :: Byron.ProtocolMagicId\n        pm = toByronProtocolMagicId nw\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\(ByronSigningKey sk) ->\n        ByronKeyWitness $\n          Byron.VKWitness\n            (Byron.toVerification sk)\n            (Byron.sign pm Byron.SignTx sk (Byron.TxSigData txhash))\n\n-- | Either a network ID or a Byron address to be used in constructing a\n-- Shelley bootstrap witness.\ndata WitnessNetworkIdOrByronAddress\n  = WitnessNetworkId !NetworkId\n  -- ^ Network ID.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- the result will not consist of a derivation path. If that is required,\n  -- specify a 'WitnessByronAddress' value instead.\n  | WitnessByronAddress !(Address ByronAddr)\n  -- ^ Byron address.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- both the network ID and derivation path will be extracted from the\n  -- address and used in the construction of the witness.\n\nmakeShelleyBootstrapWitness :: forall era.\n                               IsShelleyBasedEra era\n                            => WitnessNetworkIdOrByronAddress\n                            -> TxBody era\n                            -> SigningKey ByronKey\n                            -> Witness era\nmakeShelleyBootstrapWitness _ ByronTxBody{} _ =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\nmakeShelleyBootstrapWitness nwOrAddr (ShelleyTxBody era txbody _) sk =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraAllegra -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraMary    -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n\nmakeShelleyBasedBootstrapWitness :: forall era ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Ledger.Crypto ledgerera ~ StandardCrypto\n                                 => ShelleyBasedEra era\n                                 -> WitnessNetworkIdOrByronAddress\n                                 -> Ledger.TxBody ledgerera\n                                 -> SigningKey ByronKey\n                                 -> Witness era\nmakeShelleyBasedBootstrapWitness era nwOrAddr txbody (ByronSigningKey sk) =\n    ShelleyBootstrapWitness era $\n      -- Byron era witnesses were weird. This reveals all that weirdness.\n      Shelley.BootstrapWitness {\n        Shelley.bwKey        = vk,\n        Shelley.bwSig        = signature,\n        Shelley.bwChainCode  = chainCode,\n        Shelley.bwAttributes = attributes\n      }\n  where\n    -- Starting with the easy bits: we /can/ convert the Byron verification key\n    -- to a the pair of a Shelley verification key plus the chain code.\n    --\n    (vk, chainCode) = Shelley.unpackByronVKey (Byron.toVerification sk)\n\n    -- Now the hairy bits.\n    --\n    -- Byron era signing keys were all /extended/ ed25519 keys. We have to\n    -- produce a signature using this extended signing key directly. They\n    -- /cannot/ be converted to a plain (non-extended) signing keys. Since we\n    -- now support extended signing keys for the Shelley too, we are able to\n    -- reuse that here.\n    --\n    signature :: Shelley.SignedDSIGN StandardCrypto\n                  (Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody)\n    signature = makeShelleySignature\n                  txhash\n                  -- Make the signature with the extended key directly:\n                  (ShelleyExtendedSigningKey (Byron.unSigningKey sk))\n\n    txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n    txhash = Shelley.hashAnnotated txbody\n    --TODO: use Shelley.eraIndTxBodyHash txbody once that function has a\n    -- suitably general type.\n\n    -- And finally we need to provide the extra suffix bytes necessary to\n    -- reconstruct the mini-Merkel tree that is a Byron address. The suffix\n    -- bytes are the serialised address attributes.\n    attributes =\n      CBOR.serialize' $\n        Byron.mkAttributes Byron.AddrAttributes {\n          Byron.aaVKDerivationPath = derivationPath,\n          Byron.aaNetworkMagic     = networkMagic\n        }\n\n    -- The 'WitnessNetworkIdOrByronAddress' value converted to an 'Either'.\n    eitherNwOrAddr :: Either NetworkId (Address ByronAddr)\n    eitherNwOrAddr =\n      case nwOrAddr of\n        WitnessNetworkId nw -> Left nw\n        WitnessByronAddress addr -> Right addr\n\n    unByronAddr :: Address ByronAddr -> Byron.Address\n    unByronAddr (ByronAddress addr) = addr\n\n    unAddrAttrs :: Address ByronAddr -> Byron.AddrAttributes\n    unAddrAttrs = Byron.attrData . Byron.addrAttributes . unByronAddr\n\n    derivationPath :: Maybe Byron.HDAddressPayload\n    derivationPath =\n      either\n        (const Nothing)\n        (Byron.aaVKDerivationPath . unAddrAttrs)\n        eitherNwOrAddr\n\n    networkMagic :: Byron.NetworkMagic\n    networkMagic =\n      either\n        toByronNetworkMagic\n        (Byron.aaNetworkMagic . unAddrAttrs)\n        eitherNwOrAddr\n\n\ndata ShelleyWitnessSigningKey =\n       WitnessPaymentKey         (SigningKey PaymentKey)\n     | WitnessPaymentExtendedKey (SigningKey PaymentExtendedKey)\n     | WitnessStakeKey           (SigningKey StakeKey)\n     | WitnessStakeExtendedKey   (SigningKey StakeExtendedKey)\n     | WitnessStakePoolKey       (SigningKey StakePoolKey)\n     | WitnessGenesisKey         (SigningKey GenesisKey)\n     | WitnessGenesisExtendedKey (SigningKey GenesisExtendedKey)\n     | WitnessGenesisDelegateKey (SigningKey GenesisDelegateKey)\n     | WitnessGenesisDelegateExtendedKey\n                                 (SigningKey GenesisDelegateExtendedKey)\n     | WitnessGenesisUTxOKey     (SigningKey GenesisUTxOKey)\n\n\nmakeShelleyKeyWitness :: forall era.\n                         IsShelleyBasedEra era\n                      => TxBody era\n                      -> ShelleyWitnessSigningKey\n                      -> Witness era\nmakeShelleyKeyWitness (ShelleyTxBody era txbody _) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraAllegra -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraMary    -> makeShelleyBasedKeyWitness txbody\n  where\n    makeShelleyBasedKeyWitness :: forall ledgerera.\n                                  ShelleyLedgerEra era ~ ledgerera\n                               => Shelley.ShelleyBased ledgerera\n                               => Ledger.Crypto ledgerera ~ StandardCrypto\n                               => Ledger.TxBody ledgerera\n                               -> ShelleyWitnessSigningKey\n                               -> Witness era\n    makeShelleyBasedKeyWitness txbody' =\n\n     let txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n         txhash = Shelley.hashAnnotated txbody'\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\wsk ->\n        let sk        = toShelleySigningKey wsk\n            vk        = getShelleyKeyWitnessVerificationKey sk\n            signature = makeShelleySignature txhash sk\n         in ShelleyKeyWitness era $\n              Shelley.WitVKey vk signature\n\nmakeShelleyKeyWitness ByronTxBody{} =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\n\n-- | We support making key witnesses with both normal and extended signing keys.\n--\ndata ShelleySigningKey =\n       -- | A normal ed25519 signing key\n       ShelleyNormalSigningKey   (Shelley.SignKeyDSIGN StandardCrypto)\n\n       -- | An extended ed25519 signing key\n     | ShelleyExtendedSigningKey Crypto.HD.XPrv\n\n\ntoShelleySigningKey :: ShelleyWitnessSigningKey -> ShelleySigningKey\ntoShelleySigningKey key = case key of\n  WitnessPaymentKey     (PaymentSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessStakeKey       (StakeSigningKey       sk) -> ShelleyNormalSigningKey sk\n  WitnessStakePoolKey   (StakePoolSigningKey   sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisKey     (GenesisSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisUTxOKey (GenesisUTxOSigningKey sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisDelegateKey (GenesisDelegateSigningKey sk) ->\n    ShelleyNormalSigningKey sk\n\n  -- The cases for extended keys\n  WitnessPaymentExtendedKey (PaymentExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessStakeExtendedKey (StakeExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisExtendedKey (GenesisExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisDelegateExtendedKey (GenesisDelegateExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n\ngetShelleyKeyWitnessVerificationKey\n  :: ShelleySigningKey\n  -> Shelley.VKey Shelley.Witness StandardCrypto\ngetShelleyKeyWitnessVerificationKey (ShelleyNormalSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . getVerificationKey\n    . PaymentSigningKey\n    $ sk\n\ngetShelleyKeyWitnessVerificationKey (ShelleyExtendedSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . (castVerificationKey :: VerificationKey PaymentExtendedKey\n                           -> VerificationKey PaymentKey)\n    . getVerificationKey\n    . PaymentExtendedSigningKey\n    $ sk\n\n\nmakeShelleySignature\n  :: Crypto.SignableRepresentation tosign\n  => tosign\n  -> ShelleySigningKey\n  -> Shelley.SignedDSIGN StandardCrypto tosign\nmakeShelleySignature tosign (ShelleyNormalSigningKey sk) =\n    Crypto.signedDSIGN () tosign sk\n\nmakeShelleySignature tosign (ShelleyExtendedSigningKey sk) =\n    fromXSignature $\n      Crypto.HD.sign\n        BS.empty  -- passphrase for (unused) in-memory encryption\n        sk\n        (Crypto.getSignableRepresentation tosign)\n  where\n    fromXSignature :: Crypto.HD.XSignature\n                   -> Shelley.SignedDSIGN StandardCrypto b\n    fromXSignature =\n        Crypto.SignedDSIGN\n      . fromMaybe impossible\n      . Crypto.rawDeserialiseSigDSIGN\n      . Crypto.HD.unXSignature\n\n    impossible =\n      error \"makeShelleyKeyWitnessSignature: byron and shelley signature sizes do not match\"\n\n\nmakeScriptWitness :: forall era. ScriptInEra era -> Witness era\nmakeScriptWitness s = ShelleyScriptWitness\n                        (eraOfScriptInEra s)\n                        (toShelleyScript s)\n\n\n-- order of signing keys must match txins\nsignByronTransaction :: NetworkId\n                     -> TxBody ByronEra\n                     -> [SigningKey ByronKey]\n                     -> Tx ByronEra\nsignByronTransaction nw txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeByronKeyWitness nw txbody) sks\n\n-- signing keys is a set\nsignShelleyTransaction :: IsShelleyBasedEra era\n                       => TxBody era\n                       -> [ShelleyWitnessSigningKey]\n                       -> Tx era\nsignShelleyTransaction txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeShelleyKeyWitness txbody) sks\n\n"}}}
2020-12-03 08:13:06.283038955 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs",Modified)]
2020-12-03 08:13:06.283270947 [ThreadId 139] - Finishing build session(exception: AsyncCancelled)
2020-12-03 08:13:06.283334586 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 08:13:06.283484308 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 08:13:06.291484831 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 08:13:06.294055593 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":7,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 08:13:06.298179232 [ThreadId 1244] - finish: CodeAction (took 0.01s)
2020-12-03 08:13:06.298187798 [ThreadId 1245] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 08:13:06.299052158 [ThreadId 1252] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 08:13:06.299333157 [ThreadId 1253] - finish: importLens (took 0.00s)
2020-12-03 08:13:06.299726951 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":15,"character":7},"end":{"line":15,"character":21}},"kind":1,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}},"kind":2,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}}},{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}},"kind":2,"name":"import Data.Maybe","range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}}},{"selectionRange":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}}},{"selectionRange":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"kind":2,"name":"import Data.Map.Strict","range":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"kind":2,"name":"import Data.Set","range":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"detail":"qualified"},{"selectionRange":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"kind":2,"name":"import Cardano.Crypto.DSIGN.Class","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"kind":2,"name":"import Cardano.Crypto.Util","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"kind":2,"name":"import Cardano.Crypto.Wallet","range":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"kind":2,"name":"import Cardano.Crypto.Hashing","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"kind":2,"name":"import Cardano.Crypto.ProtocolMagic","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"detail":"qualified"},{"selectionRange":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"kind":2,"name":"import Cardano.Crypto.Signing","range":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"kind":2,"name":"import Cardano.Chain.Common","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"kind":2,"name":"import Cardano.Chain.UTxO","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Protocol.Crypto","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}}},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"kind":2,"name":"import Cardano.Ledger.Shelley.Constraints","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"detail":"qualified"},{"selectionRange":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"kind":2,"name":"import Shelley.Spec.Ledger.Address.Bootstrap","range":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}},"kind":2,"name":"import Shelley.Spec.Ledger.BaseTypes","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}}},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Hashing","range":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"kind":2,"name":"import Shelley.Spec.Ledger.Tx","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"detail":"qualified"},{"selectionRange":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}},"kind":2,"name":"import Cardano.Api.Address","range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}}},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}},"kind":2,"name":"import Cardano.Api.Certificate","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}},"kind":2,"name":"import Cardano.Api.Key","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}},"kind":2,"name":"import Cardano.Api.KeysByron","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}},"kind":2,"name":"import Cardano.Api.NetworkId","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}},"kind":2,"name":"import Cardano.Api.Script","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}}},{"selectionRange":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}}},{"selectionRange":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}}},{"selectionRange":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}},"kind":2,"name":"import Cardano.Api.TxBody","range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}}}],"name":"imports","range":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}}},{"selectionRange":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}},"kind":23,"children":[{"selectionRange":{"start":{"line":115,"character":5},"end":{"line":115,"character":12}},"kind":9,"name":"ByronTx","range":{"start":{"line":115,"character":5},"end":{"line":117,"character":21}}},{"selectionRange":{"start":{"line":119,"character":5},"end":{"line":119,"character":14}},"kind":9,"name":"ShelleyTx","range":{"start":{"line":119,"character":5},"end":{"line":122,"character":16}}}],"name":"Tx","range":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}}},{"selectionRange":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}},"kind":11,"name":"Eq (Tx era)","range":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}}},{"selectionRange":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}},"kind":11,"name":"Show (Tx era)","range":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}}},{"selectionRange":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Tx era)","range":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}}},{"selectionRange":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Tx era)","range":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}}},{"selectionRange":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}},"kind":12,"name":"serialiseShelleyBasedTx","range":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}}},{"selectionRange":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}},"kind":12,"name":"deserialiseShelleyBasedTx","range":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}}},{"selectionRange":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Tx era)","range":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}}},{"selectionRange":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":223,"character":5},"end":{"line":223,"character":20}},"kind":9,"name":"ByronKeyWitness","range":{"start":{"line":223,"character":5},"end":{"line":225,"character":26}}},{"selectionRange":{"start":{"line":227,"character":5},"end":{"line":227,"character":28}},"kind":9,"name":"ShelleyBootstrapWitness","range":{"start":{"line":227,"character":5},"end":{"line":230,"character":21}}},{"selectionRange":{"start":{"line":232,"character":5},"end":{"line":232,"character":22}},"kind":9,"name":"ShelleyKeyWitness","range":{"start":{"line":232,"character":5},"end":{"line":235,"character":21}}},{"selectionRange":{"start":{"line":237,"character":5},"end":{"line":237,"character":25}},"kind":9,"name":"ShelleyScriptWitness","range":{"start":{"line":237,"character":5},"end":{"line":240,"character":21}}}],"name":"Witness","range":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}}},{"selectionRange":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}},"kind":11,"name":"Eq (Witness era)","range":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}}},{"selectionRange":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}},"kind":11,"name":"Show (Witness era)","range":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}}},{"selectionRange":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Witness era)","range":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}}},{"selectionRange":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Witness era)","range":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}}},{"selectionRange":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}},"kind":12,"name":"encodeShelleyBasedKeyWitness","range":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}}},{"selectionRange":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}},"kind":12,"name":"encodeShelleyBasedBootstrapWitness","range":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}}},{"selectionRange":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}},"kind":12,"name":"encodeShelleyBasedScriptWitness","range":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}}},{"selectionRange":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}},"kind":12,"name":"decodeShelleyBasedWitness","range":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}}},{"selectionRange":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Witness era)","range":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}},"kind":12,"name":"getTxBody","range":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}}},{"selectionRange":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}},"kind":12,"name":"getTxWitnesses","range":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}}},{"selectionRange":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}},"kind":12,"name":"makeSignedTransaction","range":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}}},{"selectionRange":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}},"kind":12,"name":"makeByronKeyWitness","range":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}}},{"selectionRange":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":544,"character":4},"end":{"line":544,"character":20}},"kind":9,"name":"WitnessNetworkId","range":{"start":{"line":544,"character":4},"end":{"line":549,"character":51}}},{"selectionRange":{"start":{"line":550,"character":4},"end":{"line":550,"character":23}},"kind":9,"name":"WitnessByronAddress","range":{"start":{"line":550,"character":4},"end":{"line":555,"character":57}}}],"name":"WitnessNetworkIdOrByronAddress","range":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}}},{"selectionRange":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}},"kind":12,"name":"makeShelleyBootstrapWitness","range":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}}},{"selectionRange":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}},"kind":12,"name":"makeShelleyBasedBootstrapWitness","range":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}},"kind":23,"children":[{"selectionRange":{"start":{"line":658,"character":7},"end":{"line":658,"character":24}},"kind":9,"name":"WitnessPaymentKey","range":{"start":{"line":658,"character":7},"end":{"line":658,"character":56}}},{"selectionRange":{"start":{"line":659,"character":7},"end":{"line":659,"character":32}},"kind":9,"name":"WitnessPaymentExtendedKey","range":{"start":{"line":659,"character":7},"end":{"line":659,"character":64}}},{"selectionRange":{"start":{"line":660,"character":7},"end":{"line":660,"character":22}},"kind":9,"name":"WitnessStakeKey","range":{"start":{"line":660,"character":7},"end":{"line":660,"character":54}}},{"selectionRange":{"start":{"line":661,"character":7},"end":{"line":661,"character":30}},"kind":9,"name":"WitnessStakeExtendedKey","range":{"start":{"line":661,"character":7},"end":{"line":661,"character":62}}},{"selectionRange":{"start":{"line":662,"character":7},"end":{"line":662,"character":26}},"kind":9,"name":"WitnessStakePoolKey","range":{"start":{"line":662,"character":7},"end":{"line":662,"character":58}}},{"selectionRange":{"start":{"line":663,"character":7},"end":{"line":663,"character":24}},"kind":9,"name":"WitnessGenesisKey","range":{"start":{"line":663,"character":7},"end":{"line":663,"character":56}}},{"selectionRange":{"start":{"line":664,"character":7},"end":{"line":664,"character":32}},"kind":9,"name":"WitnessGenesisExtendedKey","range":{"start":{"line":664,"character":7},"end":{"line":664,"character":64}}},{"selectionRange":{"start":{"line":665,"character":7},"end":{"line":665,"character":32}},"kind":9,"name":"WitnessGenesisDelegateKey","range":{"start":{"line":665,"character":7},"end":{"line":665,"character":64}}},{"selectionRange":{"start":{"line":666,"character":7},"end":{"line":666,"character":40}},"kind":9,"name":"WitnessGenesisDelegateExtendedKey","range":{"start":{"line":666,"character":7},"end":{"line":667,"character":72}}},{"selectionRange":{"start":{"line":668,"character":7},"end":{"line":668,"character":28}},"kind":9,"name":"WitnessGenesisUTxOKey","range":{"start":{"line":668,"character":7},"end":{"line":668,"character":60}}}],"name":"ShelleyWitnessSigningKey","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}}},{"selectionRange":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}},"kind":12,"name":"makeShelleyKeyWitness","range":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}}},{"selectionRange":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}},"kind":23,"children":[{"selectionRange":{"start":{"line":711,"character":7},"end":{"line":711,"character":30}},"kind":9,"name":"ShelleyNormalSigningKey","range":{"start":{"line":711,"character":7},"end":{"line":711,"character":70}}},{"selectionRange":{"start":{"line":714,"character":7},"end":{"line":714,"character":32}},"kind":9,"name":"ShelleyExtendedSigningKey","range":{"start":{"line":714,"character":7},"end":{"line":714,"character":47}}}],"name":"ShelleySigningKey","range":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}},"kind":12,"name":"toShelleySigningKey","range":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}}},{"selectionRange":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}},"kind":12,"name":"getShelleyKeyWitnessVerificationKey","range":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}}},{"selectionRange":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}},"kind":12,"name":"makeShelleySignature","range":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}}},{"selectionRange":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}},"kind":12,"name":"makeScriptWitness","range":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}}},{"selectionRange":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}},"kind":12,"name":"signByronTransaction","range":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}}},{"selectionRange":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}},"kind":12,"name":"signShelleyTransaction","range":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}}}],"name":"Cardano.Api.Tx","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":7}
2020-12-03 08:13:06.38438057 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":"64"},"method":"window/workDoneProgress/create","id":3}
2020-12-03 08:13:06.384509356 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","title":"Processing"},"token":"64"},"method":"$/progress"}
2020-12-03 08:13:06.384955295 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":3,"result":null}
2020-12-03 08:13:06.385059371 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":3,\"result\":null}"
2020-12-03 08:13:07.216456332 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"85/87"},"token":"64"},"method":"$/progress"}
2020-12-03 08:13:07.216387507 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":8,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 08:13:07.216920419 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":609,"character":16},"end":{"line":609,"character":36}},"context":{"diagnostics":[]}}}
2020-12-03 08:13:07.217030576 [ThreadId 1642] - Plugin.makeCodeLens (ideLogger)
2020-12-03 08:13:07.217181408 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":6}}
2020-12-03 08:13:07.217389348 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 08:13:07.217503176 [ThreadId 1234] - retrie was cancelled
2020-12-03 08:13:07.217763654 [ThreadId 1232] - Cancelled request IdInt 6
2020-12-03 08:13:07.217803071 [ThreadId 1646] - finish: CodeAction (took 0.00s)
2020-12-03 08:13:07.218067405 [ThreadId 1654] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 08:13:07.218210428 [ThreadId 1657] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 08:13:07.218767224 [ThreadId 1659] - finish: importLens (took 0.00s)
2020-12-03 08:13:07.22136815 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":15,"character":7},"end":{"line":15,"character":21}},"kind":1,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}},"kind":2,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}}},{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}},"kind":2,"name":"import Data.Maybe","range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}}},{"selectionRange":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}}},{"selectionRange":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"kind":2,"name":"import Data.Map.Strict","range":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"kind":2,"name":"import Data.Set","range":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"detail":"qualified"},{"selectionRange":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"kind":2,"name":"import Cardano.Crypto.DSIGN.Class","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"kind":2,"name":"import Cardano.Crypto.Util","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"kind":2,"name":"import Cardano.Crypto.Wallet","range":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"kind":2,"name":"import Cardano.Crypto.Hashing","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"kind":2,"name":"import Cardano.Crypto.ProtocolMagic","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"detail":"qualified"},{"selectionRange":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"kind":2,"name":"import Cardano.Crypto.Signing","range":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"kind":2,"name":"import Cardano.Chain.Common","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"kind":2,"name":"import Cardano.Chain.UTxO","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Protocol.Crypto","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}}},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"kind":2,"name":"import Cardano.Ledger.Shelley.Constraints","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"detail":"qualified"},{"selectionRange":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"kind":2,"name":"import Shelley.Spec.Ledger.Address.Bootstrap","range":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}},"kind":2,"name":"import Shelley.Spec.Ledger.BaseTypes","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}}},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Hashing","range":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"kind":2,"name":"import Shelley.Spec.Ledger.Tx","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"detail":"qualified"},{"selectionRange":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}},"kind":2,"name":"import Cardano.Api.Address","range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}}},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}},"kind":2,"name":"import Cardano.Api.Certificate","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}},"kind":2,"name":"import Cardano.Api.Key","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}},"kind":2,"name":"import Cardano.Api.KeysByron","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}},"kind":2,"name":"import Cardano.Api.NetworkId","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}},"kind":2,"name":"import Cardano.Api.Script","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}}},{"selectionRange":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}}},{"selectionRange":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}}},{"selectionRange":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}},"kind":2,"name":"import Cardano.Api.TxBody","range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}}}],"name":"imports","range":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}}},{"selectionRange":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}},"kind":23,"children":[{"selectionRange":{"start":{"line":115,"character":5},"end":{"line":115,"character":12}},"kind":9,"name":"ByronTx","range":{"start":{"line":115,"character":5},"end":{"line":117,"character":21}}},{"selectionRange":{"start":{"line":119,"character":5},"end":{"line":119,"character":14}},"kind":9,"name":"ShelleyTx","range":{"start":{"line":119,"character":5},"end":{"line":122,"character":16}}}],"name":"Tx","range":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}}},{"selectionRange":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}},"kind":11,"name":"Eq (Tx era)","range":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}}},{"selectionRange":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}},"kind":11,"name":"Show (Tx era)","range":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}}},{"selectionRange":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Tx era)","range":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}}},{"selectionRange":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Tx era)","range":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}}},{"selectionRange":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}},"kind":12,"name":"serialiseShelleyBasedTx","range":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}}},{"selectionRange":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}},"kind":12,"name":"deserialiseShelleyBasedTx","range":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}}},{"selectionRange":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Tx era)","range":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}}},{"selectionRange":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":223,"character":5},"end":{"line":223,"character":20}},"kind":9,"name":"ByronKeyWitness","range":{"start":{"line":223,"character":5},"end":{"line":225,"character":26}}},{"selectionRange":{"start":{"line":227,"character":5},"end":{"line":227,"character":28}},"kind":9,"name":"ShelleyBootstrapWitness","range":{"start":{"line":227,"character":5},"end":{"line":230,"character":21}}},{"selectionRange":{"start":{"line":232,"character":5},"end":{"line":232,"character":22}},"kind":9,"name":"ShelleyKeyWitness","range":{"start":{"line":232,"character":5},"end":{"line":235,"character":21}}},{"selectionRange":{"start":{"line":237,"character":5},"end":{"line":237,"character":25}},"kind":9,"name":"ShelleyScriptWitness","range":{"start":{"line":237,"character":5},"end":{"line":240,"character":21}}}],"name":"Witness","range":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}}},{"selectionRange":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}},"kind":11,"name":"Eq (Witness era)","range":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}}},{"selectionRange":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}},"kind":11,"name":"Show (Witness era)","range":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}}},{"selectionRange":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Witness era)","range":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}}},{"selectionRange":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Witness era)","range":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}}},{"selectionRange":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}},"kind":12,"name":"encodeShelleyBasedKeyWitness","range":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}}},{"selectionRange":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}},"kind":12,"name":"encodeShelleyBasedBootstrapWitness","range":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}}},{"selectionRange":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}},"kind":12,"name":"encodeShelleyBasedScriptWitness","range":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}}},{"selectionRange":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}},"kind":12,"name":"decodeShelleyBasedWitness","range":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}}},{"selectionRange":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Witness era)","range":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}},"kind":12,"name":"getTxBody","range":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}}},{"selectionRange":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}},"kind":12,"name":"getTxWitnesses","range":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}}},{"selectionRange":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}},"kind":12,"name":"makeSignedTransaction","range":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}}},{"selectionRange":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}},"kind":12,"name":"makeByronKeyWitness","range":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}}},{"selectionRange":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":544,"character":4},"end":{"line":544,"character":20}},"kind":9,"name":"WitnessNetworkId","range":{"start":{"line":544,"character":4},"end":{"line":549,"character":51}}},{"selectionRange":{"start":{"line":550,"character":4},"end":{"line":550,"character":23}},"kind":9,"name":"WitnessByronAddress","range":{"start":{"line":550,"character":4},"end":{"line":555,"character":57}}}],"name":"WitnessNetworkIdOrByronAddress","range":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}}},{"selectionRange":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}},"kind":12,"name":"makeShelleyBootstrapWitness","range":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}}},{"selectionRange":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}},"kind":12,"name":"makeShelleyBasedBootstrapWitness","range":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}},"kind":23,"children":[{"selectionRange":{"start":{"line":658,"character":7},"end":{"line":658,"character":24}},"kind":9,"name":"WitnessPaymentKey","range":{"start":{"line":658,"character":7},"end":{"line":658,"character":56}}},{"selectionRange":{"start":{"line":659,"character":7},"end":{"line":659,"character":32}},"kind":9,"name":"WitnessPaymentExtendedKey","range":{"start":{"line":659,"character":7},"end":{"line":659,"character":64}}},{"selectionRange":{"start":{"line":660,"character":7},"end":{"line":660,"character":22}},"kind":9,"name":"WitnessStakeKey","range":{"start":{"line":660,"character":7},"end":{"line":660,"character":54}}},{"selectionRange":{"start":{"line":661,"character":7},"end":{"line":661,"character":30}},"kind":9,"name":"WitnessStakeExtendedKey","range":{"start":{"line":661,"character":7},"end":{"line":661,"character":62}}},{"selectionRange":{"start":{"line":662,"character":7},"end":{"line":662,"character":26}},"kind":9,"name":"WitnessStakePoolKey","range":{"start":{"line":662,"character":7},"end":{"line":662,"character":58}}},{"selectionRange":{"start":{"line":663,"character":7},"end":{"line":663,"character":24}},"kind":9,"name":"WitnessGenesisKey","range":{"start":{"line":663,"character":7},"end":{"line":663,"character":56}}},{"selectionRange":{"start":{"line":664,"character":7},"end":{"line":664,"character":32}},"kind":9,"name":"WitnessGenesisExtendedKey","range":{"start":{"line":664,"character":7},"end":{"line":664,"character":64}}},{"selectionRange":{"start":{"line":665,"character":7},"end":{"line":665,"character":32}},"kind":9,"name":"WitnessGenesisDelegateKey","range":{"start":{"line":665,"character":7},"end":{"line":665,"character":64}}},{"selectionRange":{"start":{"line":666,"character":7},"end":{"line":666,"character":40}},"kind":9,"name":"WitnessGenesisDelegateExtendedKey","range":{"start":{"line":666,"character":7},"end":{"line":667,"character":72}}},{"selectionRange":{"start":{"line":668,"character":7},"end":{"line":668,"character":28}},"kind":9,"name":"WitnessGenesisUTxOKey","range":{"start":{"line":668,"character":7},"end":{"line":668,"character":60}}}],"name":"ShelleyWitnessSigningKey","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}}},{"selectionRange":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}},"kind":12,"name":"makeShelleyKeyWitness","range":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}}},{"selectionRange":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}},"kind":23,"children":[{"selectionRange":{"start":{"line":711,"character":7},"end":{"line":711,"character":30}},"kind":9,"name":"ShelleyNormalSigningKey","range":{"start":{"line":711,"character":7},"end":{"line":711,"character":70}}},{"selectionRange":{"start":{"line":714,"character":7},"end":{"line":714,"character":32}},"kind":9,"name":"ShelleyExtendedSigningKey","range":{"start":{"line":714,"character":7},"end":{"line":714,"character":47}}}],"name":"ShelleySigningKey","range":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}},"kind":12,"name":"toShelleySigningKey","range":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}}},{"selectionRange":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}},"kind":12,"name":"getShelleyKeyWitnessVerificationKey","range":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}}},{"selectionRange":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}},"kind":12,"name":"makeShelleySignature","range":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}}},{"selectionRange":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}},"kind":12,"name":"makeScriptWitness","range":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}}},{"selectionRange":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}},"kind":12,"name":"signByronTransaction","range":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}}},{"selectionRange":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}},"kind":12,"name":"signShelleyTransaction","range":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}}}],"name":"Cardano.Api.Tx","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":10}
2020-12-03 08:13:07.225825918 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":6}
2020-12-03 08:13:07.286410126 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":768,"character":0},"end":{"line":768,"character":20}},"context":{"diagnostics":[]}}}
2020-12-03 08:13:07.28662114 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":9}}
2020-12-03 08:13:07.28681954 [ThreadId 1645] - retrie was cancelled
2020-12-03 08:13:07.286895736 [ThreadId 1643] - Cancelled request IdInt 9
2020-12-03 08:13:07.286936651 [ThreadId 1715] - finish: CodeAction (took 0.00s)
2020-12-03 08:13:07.287081428 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":9}
2020-12-03 08:13:07.287085774 [ThreadId 1718] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 08:13:07.287575796 [ThreadId 1720] - finish: importLens (took 0.00s)
2020-12-03 08:13:07.316746783 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"86/87"},"token":"64"},"method":"$/progress"}
2020-12-03 08:13:07.443407552 [ThreadId 1729] - finish: retrie (took 0.16s)
2020-12-03 08:13:07.443570792 [ThreadId 1726] - finish: retrie (took 1.14s)
2020-12-03 08:13:07.443677718 [ThreadId 1727] - finish: codeLens (took 0.23s)
2020-12-03 08:13:07.443717139 [ThreadId 1725] - finish: kick (took 1.16s)
2020-12-03 08:13:07.44370676 [ThreadId 1728] - finish: retrie (took 0.22s)
2020-12-03 08:13:07.443803431 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":"64"},"method":"$/progress"}
2020-12-03 08:13:07.444688396 [ThreadId 1737] - finish:  (took 0.00s)
2020-12-03 08:13:07.446244353 [ThreadId 7] - <--2--{"result":[{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}},"newText":"import Data.Maybe ( fromMaybe )"}]}}],"title":"import Data.Maybe ( fromMaybe )"},"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}},"newText":"import Cardano.Api.Address\n    ( AsType,\n      StakeExtendedKey,\n      StakeKey,\n      Address(ByronAddress),\n      ByronAddr )"}]}}],"title":"import Cardano.Api.Address\n    ( AsType,\n      StakeExtendedKey,\n      StakeKey,\n      Address(ByronAddress),\n      ByronAddr )"},"range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}},"newText":"import Cardano.Api.Certificate ( AsType(AsShelleyEra, AsByronEra) )"}]}}],"title":"import Cardano.Api.Certificate ( AsType(AsShelleyEra, AsByronEra) )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Eras\n    ( ByronEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( ByronEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}},"newText":"import Cardano.Api.Key\n    ( CastVerificationKeyRole(castVerificationKey),\n      Key(getVerificationKey, SigningKey, VerificationKey) )"}]}}],"title":"import Cardano.Api.Key\n    ( CastVerificationKeyRole(castVerificationKey),\n      Key(getVerificationKey, SigningKey, VerificationKey) )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}},"newText":"import Cardano.Api.KeysByron\n    ( SigningKey(PaymentExtendedSigningKey, ByronSigningKey,\n                 StakeSigningKey, StakePoolSigningKey, GenesisSigningKey,\n                 GenesisUTxOSigningKey, GenesisDelegateSigningKey,\n                 StakeExtendedSigningKey, GenesisExtendedSigningKey,\n                 GenesisDelegateExtendedSigningKey, PaymentSigningKey),\n      VerificationKey(PaymentVerificationKey),\n      ByronKey )"}]}}],"title":"import Cardano.Api.KeysByron\n    ( SigningKey(PaymentExtendedSigningKey, ByronSigningKey,\n                 StakeSigningKey, StakePoolSigningKey, GenesisSigningKey,\n                 GenesisUTxOSigningKey, GenesisDelegateSigningKey,\n                 StakeExtendedSigningKey, GenesisExtendedSigningKey,\n                 GenesisDelegateExtendedSigningKey, PaymentSigningKey),\n      VerificationKey(PaymentVerificationKey),\n      ByronKey )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( GenesisDelegateExtendedKey,\n      GenesisDelegateKey,\n      GenesisExtendedKey,\n      GenesisKey,\n      GenesisUTxOKey,\n      PaymentExtendedKey,\n      PaymentKey,\n      StakePoolKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( GenesisDelegateExtendedKey,\n      GenesisDelegateKey,\n      GenesisExtendedKey,\n      GenesisKey,\n      GenesisUTxOKey,\n      PaymentExtendedKey,\n      PaymentKey,\n      StakePoolKey )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}},"newText":"import Cardano.Api.NetworkId\n    ( toByronNetworkMagic, toByronProtocolMagicId, NetworkId )"}]}}],"title":"import Cardano.Api.NetworkId\n    ( toByronNetworkMagic, toByronProtocolMagicId, NetworkId )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}},"newText":"import Cardano.Api.Script\n    ( ScriptInEra, eraOfScriptInEra, toShelleyScript )"}]}}],"title":"import Cardano.Api.Script\n    ( ScriptInEra, eraOfScriptInEra, toShelleyScript )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}}},{"command":{"command":"4658:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}},"newText":"import Cardano.Api.TxBody ( TxBody(..) )"}]}}],"title":"import Cardano.Api.TxBody ( TxBody(..) )"},"range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}}}],"jsonrpc":"2.0","id":8}
2020-12-03 08:13:07.461055314 [ThreadId 1740] - finish: tactic (took 0.02s)
2020-12-03 08:13:07.461273576 [ThreadId 1745] - finish: tactic (took 0.00s)
2020-12-03 08:13:07.461353698 [ThreadId 1746] - finish: tactic (took 0.00s)
2020-12-03 08:13:07.461651156 [ThreadId 7] - <--2--{"result":[{"command":{"command":"4658:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":false,"rewrites":[{"tag":"Unfold","contents":"Cardano.Api.Tx.makeShelleySignature"}],"originatingFile":[3498212937235029284,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"],"description":"Unfold makeShelleySignature"}],"title":"Unfold makeShelleySignature"},"kind":"refactor.inline","title":"Unfold makeShelleySignature"},{"command":{"command":"4658:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":true,"rewrites":[{"tag":"Unfold","contents":"Cardano.Api.Tx.makeShelleySignature"}],"originatingFile":[3498212937235029284,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"],"description":"Unfold makeShelleySignature in current file"}],"title":"Unfold makeShelleySignature in current file"},"kind":"refactor.inline","title":"Unfold makeShelleySignature in current file"},{"command":{"command":"4658:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":false,"rewrites":[{"tag":"Fold","contents":"Cardano.Api.Tx.makeShelleySignature"}],"originatingFile":[3498212937235029284,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"],"description":"Fold makeShelleySignature"}],"title":"Fold makeShelleySignature"},"kind":"refactor.extract","title":"Fold makeShelleySignature"},{"command":{"command":"4658:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":true,"rewrites":[{"tag":"Fold","contents":"Cardano.Api.Tx.makeShelleySignature"}],"originatingFile":[3498212937235029284,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"],"description":"Fold makeShelleySignature in current file"}],"title":"Fold makeShelleySignature in current file"},"kind":"refactor.extract","title":"Fold makeShelleySignature in current file"}],"jsonrpc":"2.0","id":11}
2020-12-03 08:13:16.990917988 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":12,"method":"shutdown","params":null}
2020-12-03 08:13:16.991107899 [ThreadId 7] - <--2--{"result":null,"jsonrpc":"2.0","id":12}
2020-12-03 08:13:16.99150901 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"exit","params":null}
2020-12-03 08:34:35.526383745 [ThreadId 5] - 




haskell-lsp:Starting up server ...
2020-12-03 08:34:35.526867013 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":9574,"clientInfo":{"name":"vscode","version":"1.51.1"},"rootPath":"/home/jordan/Repos/Work/cardano-haskell/cardano-node","rootUri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true},"callHierarchy":{"dynamicRegistration":true},"semanticTokens":{"dynamicRegistration":true,"tokenTypes":["comment","keyword","number","regexp","operator","namespace","type","struct","class","interface","enum","typeParameter","function","member","macro","variable","parameter","property","label"],"tokenModifiers":["declaration","documentation","static","abstract","deprecated","async","readonly"]}},"window":{"workDoneProgress":true}},"trace":"off","workspaceFolders":[{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node","name":"cardano-node"}]}}
2020-12-03 08:34:35.528089431 [ThreadId 5] - haskell-lsp:initializeRequestHandler: setting current dir to project root:/home/jordan/Repos/Work/cardano-haskell/cardano-node
2020-12-03 08:34:35.54933178 [ThreadId 25] - Registering ide configuration: IdeConfiguration {workspaceFolders = fromList [NormalizedUri 709005359093181263 "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node"], clientSettings = hashed Nothing}
2020-12-03 08:34:35.550006985 [ThreadId 7] - <--2--{"result":{"capabilities":{"typeDefinitionProvider":true,"foldingRangeProvider":false,"textDocumentSync":{"openClose":true,"change":2,"save":{}},"workspace":{"workspaceFolders":{"supported":true,"changeNotifications":true}},"implementationProvider":true,"documentRangeFormattingProvider":true,"documentHighlightProvider":true,"executeCommandProvider":{"commands":["9683:eval:evalCommand","9683:ghcide:typesignature.add","9683:importLens:ImportLensCommand","9683:pragmas:addPragma","9683:retrie:retrieCommand","9683:tactic:tacticsAutoCommand","9683:tactic:tacticsIntrosCommand","9683:tactic:tacticsDestructCommand","9683:tactic:tacticsHomomorphismCommand","9683:tactic:tacticsDestructLambdaCaseCommand","9683:tactic:tacticsHomomorphismLambdaCaseCommand"]},"renameProvider":false,"colorProvider":false,"definitionProvider":true,"hoverProvider":true,"codeActionProvider":true,"completionProvider":{"triggerCharacters":["."],"resolveProvider":false},"codeLensProvider":{},"documentSymbolProvider":true,"documentFormattingProvider":true}},"jsonrpc":"2.0","id":0}
2020-12-03 08:34:35.550941485 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"initialized","params":{}}
2020-12-03 08:34:35.551225463 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"registrations":[{"registerOptions":{"watchers":[{"kind":5,"globPattern":"**/*.hs"},{"kind":5,"globPattern":"**/*.hs-boot"},{"kind":5,"globPattern":"**/*.lhs"},{"kind":5,"globPattern":"**/*.lhs-boot"}]},"method":"workspace/didChangeWatchedFiles","id":"globalFileWatches"}]},"method":"client/registerCapability","id":0}
2020-12-03 08:34:35.551288219 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"haskell":{"hlintOn":true,"maxNumberOfProblems":100,"diagnosticsOnChange":true,"liquidOn":false,"completionSnippetsOn":true,"formatOnImportOn":true,"formattingProvider":"stylish-haskell","trace":{"server":"messages"},"logFile":"hls.log","languageServerVariant":"haskell-language-server","serverExecutablePath":"~/.local/bin/haskell-language-server-8.10.2","updateBehavior":"keep-up-to-date","indentationRules":{"enabled":true},"hlint":{"executablePath":"/home/jordan/.cabal/bin/hlint","logLevel":"log"}}}}}
2020-12-03 08:34:35.55148193 [ThreadId 25] - Configuration changed: Object (fromList [("haskell",Object (fromList [("hlint",Object (fromList [("logLevel",String "log"),("executablePath",String "/home/jordan/.cabal/bin/hlint")])),("logFile",String "hls.log"),("updateBehavior",String "keep-up-to-date"),("hlintOn",Bool True),("formatOnImportOn",Bool True),("indentationRules",Object (fromList [("enabled",Bool True)])),("liquidOn",Bool False),("languageServerVariant",String "haskell-language-server"),("serverExecutablePath",String "~/.local/bin/haskell-language-server-8.10.2"),("diagnosticsOnChange",Bool True),("completionSnippetsOn",Bool True),("maxNumberOfProblems",Number 100.0),("formattingProvider",String "stylish-haskell"),("trace",Object (fromList [("server",String "messages")]))]))])
2020-12-03 08:34:35.551693167 [ThreadId 24] - Finishing build session(exception: AsyncCancelled)
2020-12-03 08:34:35.551756216 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 08:34:35.554838615 [ThreadId 65] - finish: kick (took 0.00s)
2020-12-03 08:34:35.5519154 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE PatternSynonyms #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-- The Shelley ledger uses promoted data kinds which we have to use, but we do\n-- not export any from this API. We also use them unticked as nature intended.\n{-# LANGUAGE DataKinds #-}\n{-# OPTIONS_GHC -Wno-unticked-promoted-constructors #-}\n\n-- | Complete, signed transactions\n--\nmodule Cardano.Api.Tx (\n\n    -- * Signing transactions\n    -- | Creating transaction witnesses one by one, or all in one go.\n    Tx(..),\n    getTxBody,\n    getTxWitnesses,\n\n    -- ** Signing in one go\n    ShelleySigningKey(..),\n    toShelleySigningKey,\n    signByronTransaction,\n    signShelleyTransaction,\n    -- ** Incremental signing and separate witnesses\n    makeSignedTransaction,\n    Witness(..),\n    makeByronKeyWitness,\n    ShelleyWitnessSigningKey(..),\n    makeShelleyKeyWitness,\n    WitnessNetworkIdOrByronAddress (..),\n    makeShelleyBootstrapWitness,\n    makeScriptWitness,\n    makeShelleySignature,\n    getShelleyKeyWitnessVerificationKey,\n\n    -- * Data family instances\n    AsType(AsTx, AsByronTx, AsShelleyTx,\n           AsWitness, AsByronWitness, AsShelleyWitness),\n  ) where\n\nimport           Prelude\n\nimport           Data.Maybe\n\nimport           Data.ByteString (ByteString)\nimport qualified Data.ByteString as BS\nimport qualified Data.ByteString.Lazy as LBS\n\nimport qualified Data.Map.Strict as Map\nimport qualified Data.Set as Set\nimport qualified Data.Vector as Vector\n\n--\n-- Common types, consensus, network\n--\nimport           Cardano.Binary (Annotated (..))\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\n--\n-- Crypto API used by consensus and Shelley (and should be used by Byron)\n--\nimport qualified Cardano.Crypto.DSIGN.Class as Crypto\nimport qualified Cardano.Crypto.Util as Crypto\nimport qualified Cardano.Crypto.Wallet as Crypto.HD\n\n--\n-- Byron imports\n--\nimport qualified Cardano.Crypto.Hashing as Byron\nimport qualified Cardano.Crypto.ProtocolMagic as Byron\nimport qualified Cardano.Crypto.Signing as Byron\nimport qualified Cardano.Chain.Common as Byron\nimport qualified Cardano.Chain.UTxO as Byron\n\n--\n-- Shelley imports\n--\nimport           Ouroboros.Consensus.Shelley.Protocol.Crypto (StandardCrypto)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era as Ledger\nimport qualified Cardano.Ledger.Shelley.Constraints as Shelley\n\nimport qualified Shelley.Spec.Ledger.Address.Bootstrap as Shelley\nimport           Shelley.Spec.Ledger.BaseTypes (maybeToStrictMaybe, strictMaybeToMaybe)\nimport qualified Shelley.Spec.Ledger.Hashing as Shelley\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Tx as Shelley\n\nimport           Cardano.Api.Address\nimport           Cardano.Api.Certificate\nimport           Cardano.Api.Eras\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.Key\nimport           Cardano.Api.KeysByron\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.NetworkId\nimport           Cardano.Api.Script\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseTextEnvelope\nimport           Cardano.Api.TxBody\n\n\n-- ----------------------------------------------------------------------------\n-- Signed transactions\n--\n\ndata Tx era where\n\n     ByronTx\n       :: Byron.ATxAux ByteString\n       -> Tx ByronEra\n\n     ShelleyTx\n       :: ShelleyBasedEra era\n       -> Shelley.Tx (ShelleyLedgerEra era)\n       -> Tx era\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Eq (Tx era) where\n    (==) (ByronTx txA)\n         (ByronTx txB) = txA == txB\n\n    (==) (ShelleyTx era txA)\n         (ShelleyTx _   txB) =\n      case era of\n        ShelleyBasedEraShelley -> txA == txB\n        ShelleyBasedEraAllegra -> txA == txB\n        ShelleyBasedEraMary    -> txA == txB\n\n    (==) ByronTx{} (ShelleyTx era _) = case era of {}\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Show (Tx era) where\n    showsPrec p (ByronTx tx) =\n      showParen (p >= 11) $\n        showString \"ByronTx \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Tx era) where\n    data AsType (Tx era) = AsTx (AsType era)\n    proxyToAsType _ = AsTx (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronTx :: AsType (Tx ByronEra)\npattern AsByronTx   = AsTx AsByronEra\n{-# COMPLETE AsByronTx #-}\n\npattern AsShelleyTx :: AsType (Tx ShelleyEra)\npattern AsShelleyTx = AsTx AsShelleyEra\n{-# COMPLETE AsShelleyTx #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Tx era) where\n    serialiseToCBOR (ByronTx tx) = CBOR.recoverBytes tx\n\n    serialiseToCBOR (ShelleyTx era tx) =\n      case era of\n        ShelleyBasedEraShelley -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraAllegra -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraMary    -> serialiseShelleyBasedTx tx\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronTx <$>\n            CBOR.decodeFullAnnotatedBytes\n              \"Byron Tx\" fromCBOR (LBS.fromStrict bs)\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraShelley) bs\n        AllegraEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraAllegra) bs\n        MaryEra    -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraMary) bs\n\n-- | The serialisation format for the different Shelley-based eras are not the\n-- same, but they can be handled generally with one overloaded implementation.\n--\nserialiseShelleyBasedTx :: ToCBOR tx => tx -> ByteString\nserialiseShelleyBasedTx = CBOR.serialize'\n\ndeserialiseShelleyBasedTx :: FromCBOR (CBOR.Annotator tx)\n                          => (tx -> tx')\n                          -> ByteString\n                          -> Either CBOR.DecoderError tx'\ndeserialiseShelleyBasedTx mkTx bs =\n    mkTx <$> CBOR.decodeAnnotator \"Shelley Tx\" fromCBOR (LBS.fromStrict bs)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Tx era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxSignedByron\"\n        ShelleyEra -> \"TxSignedShelley\"\n        AllegraEra -> \"Tx AllegraEra\"\n        MaryEra    -> \"Tx MaryEra\"\n\n\ndata Witness era where\n\n     ByronKeyWitness\n       :: Byron.TxInWitness\n       -> Witness ByronEra\n\n     ShelleyBootstrapWitness\n       :: ShelleyBasedEra era\n       -> Shelley.BootstrapWitness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyKeyWitness\n       :: ShelleyBasedEra era\n       -> Shelley.WitVKey Shelley.Witness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyScriptWitness\n       :: ShelleyBasedEra era\n       -> Ledger.Script (ShelleyLedgerEra era)\n       -> Witness era\n\n\n-- The GADT in the Shelley cases requires a custom instance\ninstance Eq (Witness era) where\n    (==) (ByronKeyWitness wA)\n         (ByronKeyWitness wB) = wA == wB\n\n    (==) (ShelleyBootstrapWitness era wA)\n         (ShelleyBootstrapWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyKeyWitness era wA)\n         (ShelleyKeyWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyScriptWitness era wA)\n         (ShelleyScriptWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) _ _ = False\n\n-- The GADT in the ShelleyTx case requires a custom instance\n--TODO: once we start providing custom patterns we should do the show in terms\n-- of those. It'll be less verbose too!\ninstance Show (Witness era) where\n    showsPrec p (ByronKeyWitness tx) =\n      showParen (p >= 11) $\n        showString \"ByronKeyWitness \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Witness era) where\n    data AsType (Witness era) = AsWitness (AsType era)\n    proxyToAsType _ = AsWitness (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronWitness :: AsType (Witness ByronEra)\npattern AsByronWitness   = AsWitness AsByronEra\n{-# COMPLETE AsByronWitness #-}\n\npattern AsShelleyWitness :: AsType (Witness ShelleyEra)\npattern AsShelleyWitness = AsWitness AsShelleyEra\n{-# COMPLETE AsShelleyWitness #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Witness era) where\n    serialiseToCBOR (ByronKeyWitness wit) = CBOR.serialize' wit\n\n    serialiseToCBOR (ShelleyKeyWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedKeyWitness wit\n\n    serialiseToCBOR (ShelleyBootstrapWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedBootstrapWitness wit\n\n    serialiseToCBOR (ShelleyScriptWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedScriptWitness wit\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronKeyWitness <$> CBOR.decodeFull' bs\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> decodeShelleyBasedWitness ShelleyBasedEraShelley bs\n        AllegraEra -> decodeShelleyBasedWitness ShelleyBasedEraAllegra bs\n        MaryEra    -> decodeShelleyBasedWitness ShelleyBasedEraMary    bs\n\n\nencodeShelleyBasedKeyWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedKeyWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 0 <> toCBOR wit\n\nencodeShelleyBasedBootstrapWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedBootstrapWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 1 <> toCBOR wit\n\nencodeShelleyBasedScriptWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedScriptWitness wit =\n    CBOR.encodeListLen 2\n <> CBOR.encodeWord 2\n    -- We use an extra level of wrapping here to support the legacy\n    -- binary serialisation format for the @Script@ type from\n    -- @cardano-ledger-specs@.\n    --\n    -- TODO: make this go away by providing a WitnessSet type and only\n    -- providing serialisation for witness sets, using the serialisation\n    -- from the ledger lib rather than needing something custom here.\n    -- Signed transactions have witness sets, so this is an existing on-chain\n    -- stable format.\n <> CBOR.encodeListLen 2\n <> CBOR.encodeWord 0\n <> toCBOR wit\n\ndecodeShelleyBasedWitness :: forall era.\n                             Ledger.Era (ShelleyLedgerEra era)\n                          => FromCBOR (CBOR.Annotator (Ledger.Script (ShelleyLedgerEra era)))\n                          => ShelleyBasedEra era\n                          -> ByteString\n                          -> Either CBOR.DecoderError (Witness era)\ndecodeShelleyBasedWitness era =\n    CBOR.decodeAnnotator \"Shelley Witness\" decode . LBS.fromStrict\n  where\n    decode :: CBOR.Decoder s (CBOR.Annotator (Witness era))\n    decode =  do\n      CBOR.decodeListLenOf 2\n      t <- CBOR.decodeWord\n      case t of\n        0 -> fmap (fmap (ShelleyKeyWitness era)) fromCBOR\n        1 -> fmap (fmap (ShelleyBootstrapWitness era)) fromCBOR\n        -- We use an extra level of wrapping here to support the legacy\n        -- binary serialisation format for the @Script@ type from\n        -- @cardano-ledger-specs@.\n        2 -> do CBOR.decodeListLenOf 2\n                CBOR.decodeWordOf 0\n                fmap (fmap (ShelleyScriptWitness era)) fromCBOR\n        _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag\n                                \"Shelley Witness\" (fromIntegral t)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Witness era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxWitnessByron\"\n        ShelleyEra -> \"TxWitnessShelley\"\n        AllegraEra -> \"TxWitness AllegraEra\"\n        MaryEra    -> \"TxWitness MaryEra\"\n\n\ngetTxBody :: forall era. Tx era -> TxBody era\ngetTxBody (ByronTx Byron.ATxAux { Byron.aTaTx = txbody }) =\n    ByronTxBody txbody\n\ngetTxBody (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxBody tx\n      ShelleyBasedEraAllegra -> getShelleyTxBody tx\n      ShelleyBasedEraMary    -> getShelleyTxBody tx\n  where\n    getShelleyTxBody :: forall ledgerera.\n                        ShelleyLedgerEra era ~ ledgerera\n                     => Shelley.ShelleyBased ledgerera\n                     => Shelley.Tx ledgerera\n                     -> TxBody era\n    getShelleyTxBody Shelley.Tx {\n                       Shelley._body     = txbody,\n                       Shelley._metadata = txmetadata\n                     } =\n      ShelleyTxBody era txbody (strictMaybeToMaybe txmetadata)\n\n\ngetTxWitnesses :: forall era. Tx era -> [Witness era]\ngetTxWitnesses (ByronTx Byron.ATxAux { Byron.aTaWitness = witnesses }) =\n    map ByronKeyWitness\n  . Vector.toList\n  . unAnnotated\n  $ witnesses\n\ngetTxWitnesses (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxWitnesses tx\n      ShelleyBasedEraAllegra -> getShelleyTxWitnesses tx\n      ShelleyBasedEraMary    -> getShelleyTxWitnesses tx\n  where\n    getShelleyTxWitnesses :: forall ledgerera.\n                             ShelleyLedgerEra era ~ ledgerera\n                          => Shelley.ShelleyBased ledgerera\n                          => Shelley.Tx ledgerera\n                          -> [Witness era]\n    getShelleyTxWitnesses Shelley.Tx {\n                            Shelley._witnessSet =\n                              Shelley.WitnessSet\n                                addrWits\n                                msigWits\n                                bootWits\n                          } =\n        map (ShelleyBootstrapWitness era) (Set.elems bootWits)\n     ++ map (ShelleyKeyWitness       era) (Set.elems addrWits)\n     ++ map (ShelleyScriptWitness    era) (Map.elems msigWits)\n\n\nmakeSignedTransaction :: forall era.\n                         [Witness era]\n                      -> TxBody era\n                      -> Tx era\nmakeSignedTransaction witnesses (ByronTxBody txbody) =\n    ByronTx\n  . Byron.annotateTxAux\n  $ Byron.mkTxAux\n      (unAnnotated txbody)\n      (Vector.fromList [ w | ByronKeyWitness w <- witnesses ])\n\nmakeSignedTransaction witnesses (ShelleyTxBody era txbody txmetadata) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraAllegra -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraMary    -> makeShelleySignedTransaction txbody\n  where\n    makeShelleySignedTransaction :: forall ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Shelley.ValidateScript ledgerera\n                                 => Ledger.TxBody ledgerera\n                                 -> Tx era\n    makeShelleySignedTransaction txbody' =\n      ShelleyTx era $\n        Shelley.Tx\n          txbody'\n          (Shelley.WitnessSet\n            (Set.fromList [ w | ShelleyKeyWitness _ w <- witnesses ])\n            (Map.fromList [ (Shelley.hashScript sw, sw)\n                          | ShelleyScriptWitness _ sw <- witnesses ])\n            (Set.fromList [ w | ShelleyBootstrapWitness _ w <- witnesses ]))\n          (maybeToStrictMaybe txmetadata)\n\n\nmakeByronKeyWitness :: NetworkId\n                    -> TxBody ByronEra\n                    -> SigningKey ByronKey\n                    -> Witness ByronEra\nmakeByronKeyWitness _ (ShelleyTxBody era _ _) = case era of {}\nmakeByronKeyWitness nw (ByronTxBody txbody) =\n    let txhash :: Byron.Hash Byron.Tx\n        txhash = Byron.hashDecoded txbody\n\n        pm :: Byron.ProtocolMagicId\n        pm = toByronProtocolMagicId nw\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\(ByronSigningKey sk) ->\n        ByronKeyWitness $\n          Byron.VKWitness\n            (Byron.toVerification sk)\n            (Byron.sign pm Byron.SignTx sk (Byron.TxSigData txhash))\n\n-- | Either a network ID or a Byron address to be used in constructing a\n-- Shelley bootstrap witness.\ndata WitnessNetworkIdOrByronAddress\n  = WitnessNetworkId !NetworkId\n  -- ^ Network ID.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- the result will not consist of a derivation path. If that is required,\n  -- specify a 'WitnessByronAddress' value instead.\n  | WitnessByronAddress !(Address ByronAddr)\n  -- ^ Byron address.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- both the network ID and derivation path will be extracted from the\n  -- address and used in the construction of the witness.\n\nmakeShelleyBootstrapWitness :: forall era.\n                               IsShelleyBasedEra era\n                            => WitnessNetworkIdOrByronAddress\n                            -> TxBody era\n                            -> SigningKey ByronKey\n                            -> Witness era\nmakeShelleyBootstrapWitness _ ByronTxBody{} _ =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\nmakeShelleyBootstrapWitness nwOrAddr (ShelleyTxBody era txbody _) sk =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraAllegra -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraMary    -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n\nmakeShelleyBasedBootstrapWitness :: forall era ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Ledger.Crypto ledgerera ~ StandardCrypto\n                                 => ShelleyBasedEra era\n                                 -> WitnessNetworkIdOrByronAddress\n                                 -> Ledger.TxBody ledgerera\n                                 -> SigningKey ByronKey\n                                 -> Witness era\nmakeShelleyBasedBootstrapWitness era nwOrAddr txbody (ByronSigningKey sk) =\n    ShelleyBootstrapWitness era $\n      -- Byron era witnesses were weird. This reveals all that weirdness.\n      Shelley.BootstrapWitness {\n        Shelley.bwKey        = vk,\n        Shelley.bwSig        = signature,\n        Shelley.bwChainCode  = chainCode,\n        Shelley.bwAttributes = attributes\n      }\n  where\n    -- Starting with the easy bits: we /can/ convert the Byron verification key\n    -- to a the pair of a Shelley verification key plus the chain code.\n    --\n    (vk, chainCode) = Shelley.unpackByronVKey (Byron.toVerification sk)\n\n    -- Now the hairy bits.\n    --\n    -- Byron era signing keys were all /extended/ ed25519 keys. We have to\n    -- produce a signature using this extended signing key directly. They\n    -- /cannot/ be converted to a plain (non-extended) signing keys. Since we\n    -- now support extended signing keys for the Shelley too, we are able to\n    -- reuse that here.\n    --\n    signature :: Shelley.SignedDSIGN StandardCrypto\n                  (Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody)\n    signature = makeShelleySignature\n                  txhash\n                  -- Make the signature with the extended key directly:\n                  (ShelleyExtendedSigningKey (Byron.unSigningKey sk))\n\n    txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n    txhash = Shelley.hashAnnotated txbody\n    --TODO: use Shelley.eraIndTxBodyHash txbody once that function has a\n    -- suitably general type.\n\n    -- And finally we need to provide the extra suffix bytes necessary to\n    -- reconstruct the mini-Merkel tree that is a Byron address. The suffix\n    -- bytes are the serialised address attributes.\n    attributes =\n      CBOR.serialize' $\n        Byron.mkAttributes Byron.AddrAttributes {\n          Byron.aaVKDerivationPath = derivationPath,\n          Byron.aaNetworkMagic     = networkMagic\n        }\n\n    -- The 'WitnessNetworkIdOrByronAddress' value converted to an 'Either'.\n    eitherNwOrAddr :: Either NetworkId (Address ByronAddr)\n    eitherNwOrAddr =\n      case nwOrAddr of\n        WitnessNetworkId nw -> Left nw\n        WitnessByronAddress addr -> Right addr\n\n    unByronAddr :: Address ByronAddr -> Byron.Address\n    unByronAddr (ByronAddress addr) = addr\n\n    unAddrAttrs :: Address ByronAddr -> Byron.AddrAttributes\n    unAddrAttrs = Byron.attrData . Byron.addrAttributes . unByronAddr\n\n    derivationPath :: Maybe Byron.HDAddressPayload\n    derivationPath =\n      either\n        (const Nothing)\n        (Byron.aaVKDerivationPath . unAddrAttrs)\n        eitherNwOrAddr\n\n    networkMagic :: Byron.NetworkMagic\n    networkMagic =\n      either\n        toByronNetworkMagic\n        (Byron.aaNetworkMagic . unAddrAttrs)\n        eitherNwOrAddr\n\n\ndata ShelleyWitnessSigningKey =\n       WitnessPaymentKey         (SigningKey PaymentKey)\n     | WitnessPaymentExtendedKey (SigningKey PaymentExtendedKey)\n     | WitnessStakeKey           (SigningKey StakeKey)\n     | WitnessStakeExtendedKey   (SigningKey StakeExtendedKey)\n     | WitnessStakePoolKey       (SigningKey StakePoolKey)\n     | WitnessGenesisKey         (SigningKey GenesisKey)\n     | WitnessGenesisExtendedKey (SigningKey GenesisExtendedKey)\n     | WitnessGenesisDelegateKey (SigningKey GenesisDelegateKey)\n     | WitnessGenesisDelegateExtendedKey\n                                 (SigningKey GenesisDelegateExtendedKey)\n     | WitnessGenesisUTxOKey     (SigningKey GenesisUTxOKey)\n\n\nmakeShelleyKeyWitness :: forall era.\n                         IsShelleyBasedEra era\n                      => TxBody era\n                      -> ShelleyWitnessSigningKey\n                      -> Witness era\nmakeShelleyKeyWitness (ShelleyTxBody era txbody _) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraAllegra -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraMary    -> makeShelleyBasedKeyWitness txbody\n  where\n    makeShelleyBasedKeyWitness :: forall ledgerera.\n                                  ShelleyLedgerEra era ~ ledgerera\n                               => Shelley.ShelleyBased ledgerera\n                               => Ledger.Crypto ledgerera ~ StandardCrypto\n                               => Ledger.TxBody ledgerera\n                               -> ShelleyWitnessSigningKey\n                               -> Witness era\n    makeShelleyBasedKeyWitness txbody' =\n\n     let txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n         txhash = Shelley.hashAnnotated txbody'\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\wsk ->\n        let sk        = toShelleySigningKey wsk\n            vk        = getShelleyKeyWitnessVerificationKey sk\n            signature = makeShelleySignature txhash sk\n         in ShelleyKeyWitness era $\n              Shelley.WitVKey vk signature\n\nmakeShelleyKeyWitness ByronTxBody{} =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\n\n-- | We support making key witnesses with both normal and extended signing keys.\n--\ndata ShelleySigningKey =\n       -- | A normal ed25519 signing key\n       ShelleyNormalSigningKey   (Shelley.SignKeyDSIGN StandardCrypto)\n\n       -- | An extended ed25519 signing key\n     | ShelleyExtendedSigningKey Crypto.HD.XPrv\n\n\ntoShelleySigningKey :: ShelleyWitnessSigningKey -> ShelleySigningKey\ntoShelleySigningKey key = case key of\n  WitnessPaymentKey     (PaymentSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessStakeKey       (StakeSigningKey       sk) -> ShelleyNormalSigningKey sk\n  WitnessStakePoolKey   (StakePoolSigningKey   sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisKey     (GenesisSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisUTxOKey (GenesisUTxOSigningKey sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisDelegateKey (GenesisDelegateSigningKey sk) ->\n    ShelleyNormalSigningKey sk\n\n  -- The cases for extended keys\n  WitnessPaymentExtendedKey (PaymentExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessStakeExtendedKey (StakeExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisExtendedKey (GenesisExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisDelegateExtendedKey (GenesisDelegateExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n\ngetShelleyKeyWitnessVerificationKey\n  :: ShelleySigningKey\n  -> Shelley.VKey Shelley.Witness StandardCrypto\ngetShelleyKeyWitnessVerificationKey (ShelleyNormalSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . getVerificationKey\n    . PaymentSigningKey\n    $ sk\n\ngetShelleyKeyWitnessVerificationKey (ShelleyExtendedSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . (castVerificationKey :: VerificationKey PaymentExtendedKey\n                           -> VerificationKey PaymentKey)\n    . getVerificationKey\n    . PaymentExtendedSigningKey\n    $ sk\n\n\nmakeShelleySignature\n  :: Crypto.SignableRepresentation tosign\n  => tosign\n  -> ShelleySigningKey\n  -> Shelley.SignedDSIGN StandardCrypto tosign\nmakeShelleySignature tosign (ShelleyNormalSigningKey sk) =\n    Crypto.signedDSIGN () tosign sk\n\nmakeShelleySignature tosign (ShelleyExtendedSigningKey sk) =\n    fromXSignature $\n      Crypto.HD.sign\n        BS.empty  -- passphrase for (unused) in-memory encryption\n        sk\n        (Crypto.getSignableRepresentation tosign)\n  where\n    fromXSignature :: Crypto.HD.XSignature\n                   -> Shelley.SignedDSIGN StandardCrypto b\n    fromXSignature =\n        Crypto.SignedDSIGN\n      . fromMaybe impossible\n      . Crypto.rawDeserialiseSigDSIGN\n      . Crypto.HD.unXSignature\n\n    impossible =\n      error \"makeShelleyKeyWitnessSignature: byron and shelley signature sizes do not match\"\n\n\nmakeScriptWitness :: forall era. ScriptInEra era -> Witness era\nmakeScriptWitness s = ShelleyScriptWitness\n                        (eraOfScriptInEra s)\n                        (toShelleyScript s)\n\n\n-- order of signing keys must match txins\nsignByronTransaction :: NetworkId\n                     -> TxBody ByronEra\n                     -> [SigningKey ByronKey]\n                     -> Tx ByronEra\nsignByronTransaction nw txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeByronKeyWitness nw txbody) sks\n\n-- signing keys is a set\nsignShelleyTransaction :: IsShelleyBasedEra era\n                       => TxBody era\n                       -> [ShelleyWitnessSigningKey]\n                       -> Tx era\nsignShelleyTransaction txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeShelleyKeyWitness txbody) sks\n\n"}}}
2020-12-03 08:34:35.558227472 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":0,"result":null}
2020-12-03 08:34:35.558315134 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":0,\"result\":null}"
2020-12-03 08:34:35.558525112 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs",Modified)]
2020-12-03 08:34:35.55909838 [ThreadId 44] - Finishing build session(exception: AsyncCancelled)
2020-12-03 08:34:35.559192157 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 08:34:35.559295688 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 08:34:35.561266625 [ThreadId 97] - Consulting the cradle for "cardano-api/src/Cardano/Api/Tx.hs"
2020-12-03 08:34:35.562339761 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":0},"method":"window/workDoneProgress/create","id":1}
2020-12-03 08:34:35.56246999 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","cancellable":false,"title":"Setting up cardano-node (for cardano-api/src/Cardano/Api/Tx.hs)"},"token":0},"method":"$/progress"}
2020-12-03 08:34:35.564728491 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":1,"result":null}
2020-12-03 08:34:35.564897127 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":null}"
2020-12-03 08:34:35.575629026 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 08:34:35.576202945 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":768,"character":0},"end":{"line":768,"character":20}},"context":{"diagnostics":[]}}}
2020-12-03 08:34:35.660995069 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":"3"},"method":"window/workDoneProgress/create","id":2}
2020-12-03 08:34:35.661157504 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","title":"Processing"},"token":"3"},"method":"$/progress"}
2020-12-03 08:34:35.661609483 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":2,"result":null}
2020-12-03 08:34:35.661703718 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":2,\"result\":null}"
2020-12-03 08:34:35.761207529 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"1/2"},"token":"3"},"method":"$/progress"}
2020-12-03 08:34:35.81885215 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 08:34:35.81915093 [ThreadId 117] - Plugin.makeCodeLens (ideLogger)
2020-12-03 08:34:36.659694248 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}
2020-12-03 08:34:36.65990133 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":768,"character":0},"end":{"line":768,"character":20}},"context":{"diagnostics":[]}}}
2020-12-03 08:34:36.659944001 [ThreadId 112] - CodeAction was cancelled
2020-12-03 08:34:36.660053991 [ThreadId 110] - Cancelled request IdInt 2
2020-12-03 08:34:36.660266593 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":2}
2020-12-03 08:34:47.917399564 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise5.hs","type":1},{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise6.hs","type":1}]}}
2020-12-03 08:34:47.917705502 [ThreadId 25] - Files created or deleted: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise5.hs",True),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise6.hs",True)]
2020-12-03 08:34:47.918579897 [ThreadId 69] - Finishing build session(exception: AsyncCancelled)
2020-12-03 08:34:47.918703974 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 08:38:10.458303391 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":0},"method":"$/progress"}
2020-12-03 08:38:10.458214398 [ThreadId 97] - Session loading result: Right (ComponentOptions {componentOptions = ["-fbuilding-cabal-package","-O0","-outputdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-odir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-hidir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-stubdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-i","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-isrc","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build","-optP-include","-optP/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/build/autogen/cabal_macros.h","-this-unit-id","cardano-api-1.24.0-inplace","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","/home/jordan/.cabal/store/ghc-8.10.2/package.db","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/packagedb/ghc-8.10.2","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-api-1.24.0/package.conf.inplace","-package-id","aeson-1.5.4.1-778a06fa5c9318198c793c5f8e2ca8d95fb38f4f10ed2bb32743f99d3f297246","-package-id","aeson-pretty-0.8.8-9b8e5a813f7409b128fda52cd6ba78fcfcdafe24319cbe51431a74775267e91b","-package-id","attoparsec-0.13.2.4-b396c2be954a9ffb3e95bbdaa6fb35ac8c27f1db8915f7964aec17a75da742b8","-package-id","base-4.14.1.0","-package-id","base16-bytestring-1.0.1.0-9f11fc286491f106a9ef784dbd62d74f1270ad38dd03d9b8cbaa41c1bbf814c8","-package-id","base58-bytestring-0.1.0-05a60df8b198010614f5302714ff68e040396e56ff7519d163761623c0de2d98","-package-id","base64-0.4.2.2-f3d429f1b298e2d466e9311305c47c04a6d9a575e1b8a3f034d63e7d23e4db48","-package-id","bech32-1.1.0-ae5f2a1a89c10d7c25e2ebed7b7fb0cd489664bd6e6c0de80e0c1dff37d17063","-package-id","bytestring-0.10.10.0","-package-id","cardano-binary-1.5.0-inplace","-package-id","cardano-config-0.1.0.0-inplace","-package-id","cardano-crypto-1.1.0-inplace","-package-id","cardano-crypto-class-2.0.0-inplace","-package-id","cardano-crypto-wrapper-1.3.0-inplace","-package-id","cardano-ledger-0.1.0.0-inplace","-package-id","cardano-ledger-shelley-ma-0.1.0.0-inplace","-package-id","cardano-prelude-0.1.0.0-inplace","-package-id","cardano-slotting-0.1.0.0-inplace","-package-id","cborg-0.2.4.0-4a245966fd5882ffb16d2ef07bb992473fd41fea0a4e61c4acd669aab7242ef9","-package-id","containers-0.6.2.1","-package-id","contra-tracer-0.1.0.0-inplace","-package-id","cryptonite-0.27-8826084f96fb9db464240662656382b25f16ff766ee68e8d02dd9d995db86b80","-package-id","directory-1.3.6.0","-package-id","filepath-1.4.2.1","-package-id","formatting-6.3.7-330f1aaaee1a6193dee6fd50994a301f73441c53ff813f4d131c0e6261ec6d04","-package-id","io-sim-classes-0.2.0.0-inplace","-package-id","iohk-monitoring-0.1.10.1-inplace","-package-id","iproute-1.7.9-43bc36e75965a204ad802bfb667361131efd65210901659e34179dc2da9d1118","-package-id","memory-0.15.0-618aae508e33731dca15e11c7e941c9d1279b1ed04bf74d2a2b887208cef7d4c","-package-id","network-3.1.2.0-f313f458cfb9472e49923061663feda9781129bd7a55b5c51b8bf13fb9eff621","-package-id","network-mux-0.1.0.0-inplace","-package-id","network-uri-2.6.3.0-5bbc25b922944130d3a812c001fbe448d17321f63665fc89b3c6ab483fba8ba1","-package-id","nothunks-0.1.1.0-79bfe850d8c797b8b11355d5e36d13d317a1777729736319881d061a6bbdcf98","-package-id","ouroboros-consensus-0.1.0.0-inplace","-package-id","ouroboros-consensus-byron-0.1.0.0-inplace","-package-id","ouroboros-consensus-cardano-0.1.0.0-inplace","-package-id","ouroboros-consensus-shelley-0.1.0.0-inplace","-package-id","ouroboros-network-0.1.0.0-inplace","-package-id","ouroboros-network-framework-0.1.0.0-inplace","-package-id","scientific-0.3.6.2-8634ec87686367cd9854d817075c6b174f7c80b793cfe710d1a33fad0d669b83","-package-id","serialise-0.2.3.0-2d2b69476413a92a4cff76cdbea89b5f9e9991e103cca95a6e05888ca3848e83","-package-id","shelley-spec-ledger-0.1.0.0-inplace","-package-id","stm-2.5.0.0","-package-id","text-1.2.3.2","-package-id","time-1.9.3","-package-id","transformers-0.5.6.2","-package-id","transformers-except-0.1.1-dff5057c0148093fdb22eb905288dea1dc40636273c3c43c25d303bb31f7e9cb","-package-id","typed-protocols-0.1.0.0-inplace","-package-id","typed-protocols-examples-0.1.0.0-inplace","-package-id","unordered-containers-0.2.13.0-4cfa23410683cfe8b97b82ed15f0d30134b196b546cbf1fdf2d0a9054d02c7db","-package-id","vector-0.12.1.2-9df9fc999682f51f3e81c90fce28e7b7f7243cc5f3e33ff871c9d5a147125c1d","-XHaskell2010","-XNoImplicitPrelude","-XOverloadedStrings","Cardano.API","Cardano.Api.Byron","Cardano.Api.Crypto.Ed25519Bip32","Cardano.Api.LocalChainSync","Cardano.Api.Protocol","Cardano.Api.Protocol.Byron","Cardano.Api.Protocol.Cardano","Cardano.Api.Protocol.Shelley","Cardano.Api.Protocol.Types","Cardano.Api.Shelley","Cardano.Api.Shelley.Genesis","Cardano.Api.TxSubmit","Cardano.Api.Typed","Cardano.Api.TxSubmit.ErrorRender","Cardano.Api.TxSubmit.Types","Cardano.Api.Address","Cardano.Api.Certificate","Cardano.Api.Eras","Cardano.Api.Error","Cardano.Api.Fees","Cardano.Api.Hash","Cardano.Api.HasTypeProxy","Cardano.Api.Key","Cardano.Api.KeysByron","Cardano.Api.KeysShelley","Cardano.Api.KeysPraos","Cardano.Api.NetworkId","Cardano.Api.OperationalCertificate","Cardano.Api.ProtocolParameters","Cardano.Api.Script","Cardano.Api.SerialiseBech32","Cardano.Api.SerialiseCBOR","Cardano.Api.SerialiseJSON","Cardano.Api.SerialiseRaw","Cardano.Api.SerialiseTextEnvelope","Cardano.Api.StakePoolMetadata","Cardano.Api.Tx","Cardano.Api.TxBody","Cardano.Api.TxMetadata","Cardano.Api.Utils","Cardano.Api.Value","-Wall","-Wincomplete-record-updates","-Wincomplete-uni-patterns","-Wredundant-constraints","-Wpartial-fields","-Wcompat","-hide-all-packages","-Werror"], componentRoot = "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api", componentDependencies = ["cardano-api/cardano-api.cabal","cabal.project","cabal.project.local"]},"/usr/local/lib/ghc-8.10.2")
2020-12-03 08:38:10.587228607 [ThreadId 97] - Using interface files cache dir: /home/jordan/.cache/ghcide/cardano-api-1.24.0-inplace-04573879897e8c84891c4ddfb50e69055b43dad3
2020-12-03 08:38:10.587689176 [ThreadId 97] - Making new HscEnv[cardano-api-1.24.0-inplace]
2020-12-03 08:38:10.627247306 [ThreadId 97] - New Component Cache HscEnvEq: (([],Just HscEnvEq 6),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-api/cardano-api.cabal",Just 2020-12-02 09:21:26.415901175 UTC)])
2020-12-03 08:38:10.714226269 [ThreadId 97] - Known files updated: fromList [(TargetModule Cardano.Api.TxBody,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs"]),(TargetModule Cardano.Api.Tx,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Cardano.Api.SerialiseRaw,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseRaw.hs"]),(TargetModule Cardano.Api.Crypto.Ed25519Bip32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Crypto/Ed25519Bip32.hs"]),(TargetModule Cardano.Api.SerialiseJSON,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseJSON.hs"]),(TargetModule Cardano.Api.Typed,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs"]),(TargetModule Cardano.API,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"]),(TargetModule Cardano.Api.Shelley.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley/Genesis.hs"]),(TargetModule Cardano.Api.KeysShelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"]),(TargetModule Cardano.Api.SerialiseBech32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseBech32.hs"]),(TargetModule Cardano.Api.Error,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Error.hs"]),(TargetModule Cardano.Api.StakePoolMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs"]),(TargetModule Cardano.Api.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Key.hs"]),(TargetModule Cardano.Api.Hash,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Hash.hs"]),(TargetModule Cardano.Api.Protocol,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol.hs"]),(TargetModule Cardano.Api.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Byron.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Cardano.Api.OperationalCertificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs"]),(TargetModule Cardano.Api.Protocol.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Types.hs"]),(TargetModule Cardano.Api.NetworkId,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/NetworkId.hs"]),(TargetModule Cardano.Api.KeysPraos,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysPraos.hs"]),(TargetModule Cardano.Api.Address,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs"]),(TargetModule Cardano.Api.TxSubmit.ErrorRender,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/ErrorRender.hs"]),(TargetModule Cardano.Api.TxSubmit,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit.hs"]),(TargetModule Cardano.Api.Protocol.Cardano,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Cardano.hs"]),(TargetModule Cardano.Api.Certificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Certificate.hs"]),(TargetModule Cardano.Api.Value,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs"]),(TargetModule Cardano.Api.TxSubmit.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/Types.hs"]),(TargetModule Cardano.Api.LocalChainSync,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/LocalChainSync.hs"]),(TargetModule Cardano.Api.Script,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"]),(TargetModule Cardano.Api.Fees,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs"]),(TargetModule Cardano.Api.ProtocolParameters,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/ProtocolParameters.hs"]),(TargetModule Cardano.Api.SerialiseCBOR,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseCBOR.hs"]),(TargetModule Cardano.Api.Protocol.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Shelley.hs"]),(TargetModule Cardano.Api.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley.hs"]),(TargetModule Cardano.Api.TxMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxMetadata.hs"]),(TargetModule Cardano.Api.Eras,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Eras.hs"]),(TargetModule Cardano.Api.HasTypeProxy,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/HasTypeProxy.hs"]),(TargetModule Cardano.Api.Protocol.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Byron.hs"]),(TargetModule Cardano.Api.Utils,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Utils.hs"]),(TargetModule Cardano.Api.SerialiseTextEnvelope,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseTextEnvelope.hs"]),(TargetModule Cardano.Api.KeysByron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysByron.hs"])]
2020-12-03 08:38:10.71515948 [ThreadId 130] - Finishing build session(exception: AsyncCancelled)
2020-12-03 08:38:10.715279031 [ThreadId 97] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 08:38:10.786779146 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"7/47"},"token":"3"},"method":"$/progress"}
2020-12-03 08:38:10.789647606 [ThreadId 253] - finish: C:GetParsedModule (took 0.07s)
2020-12-03 08:38:10.789626058 [ThreadId 250] - finish: CodeAction (took 0.07s)
2020-12-03 08:38:10.79175615 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":15,"character":7},"end":{"line":15,"character":21}},"kind":1,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}},"kind":2,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}}},{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}},"kind":2,"name":"import Data.Maybe","range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}}},{"selectionRange":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}}},{"selectionRange":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"kind":2,"name":"import Data.Map.Strict","range":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"kind":2,"name":"import Data.Set","range":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"detail":"qualified"},{"selectionRange":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"kind":2,"name":"import Cardano.Crypto.DSIGN.Class","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"kind":2,"name":"import Cardano.Crypto.Util","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"kind":2,"name":"import Cardano.Crypto.Wallet","range":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"kind":2,"name":"import Cardano.Crypto.Hashing","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"kind":2,"name":"import Cardano.Crypto.ProtocolMagic","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"detail":"qualified"},{"selectionRange":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"kind":2,"name":"import Cardano.Crypto.Signing","range":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"kind":2,"name":"import Cardano.Chain.Common","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"kind":2,"name":"import Cardano.Chain.UTxO","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Protocol.Crypto","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}}},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"kind":2,"name":"import Cardano.Ledger.Shelley.Constraints","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"detail":"qualified"},{"selectionRange":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"kind":2,"name":"import Shelley.Spec.Ledger.Address.Bootstrap","range":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}},"kind":2,"name":"import Shelley.Spec.Ledger.BaseTypes","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}}},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Hashing","range":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"kind":2,"name":"import Shelley.Spec.Ledger.Tx","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"detail":"qualified"},{"selectionRange":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}},"kind":2,"name":"import Cardano.Api.Address","range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}}},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}},"kind":2,"name":"import Cardano.Api.Certificate","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}},"kind":2,"name":"import Cardano.Api.Key","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}},"kind":2,"name":"import Cardano.Api.KeysByron","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}},"kind":2,"name":"import Cardano.Api.NetworkId","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}},"kind":2,"name":"import Cardano.Api.Script","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}}},{"selectionRange":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}}},{"selectionRange":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}}},{"selectionRange":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}},"kind":2,"name":"import Cardano.Api.TxBody","range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}}}],"name":"imports","range":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}}},{"selectionRange":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}},"kind":23,"children":[{"selectionRange":{"start":{"line":115,"character":5},"end":{"line":115,"character":12}},"kind":9,"name":"ByronTx","range":{"start":{"line":115,"character":5},"end":{"line":117,"character":21}}},{"selectionRange":{"start":{"line":119,"character":5},"end":{"line":119,"character":14}},"kind":9,"name":"ShelleyTx","range":{"start":{"line":119,"character":5},"end":{"line":122,"character":16}}}],"name":"Tx","range":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}}},{"selectionRange":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}},"kind":11,"name":"Eq (Tx era)","range":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}}},{"selectionRange":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}},"kind":11,"name":"Show (Tx era)","range":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}}},{"selectionRange":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Tx era)","range":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}}},{"selectionRange":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Tx era)","range":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}}},{"selectionRange":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}},"kind":12,"name":"serialiseShelleyBasedTx","range":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}}},{"selectionRange":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}},"kind":12,"name":"deserialiseShelleyBasedTx","range":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}}},{"selectionRange":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Tx era)","range":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}}},{"selectionRange":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":223,"character":5},"end":{"line":223,"character":20}},"kind":9,"name":"ByronKeyWitness","range":{"start":{"line":223,"character":5},"end":{"line":225,"character":26}}},{"selectionRange":{"start":{"line":227,"character":5},"end":{"line":227,"character":28}},"kind":9,"name":"ShelleyBootstrapWitness","range":{"start":{"line":227,"character":5},"end":{"line":230,"character":21}}},{"selectionRange":{"start":{"line":232,"character":5},"end":{"line":232,"character":22}},"kind":9,"name":"ShelleyKeyWitness","range":{"start":{"line":232,"character":5},"end":{"line":235,"character":21}}},{"selectionRange":{"start":{"line":237,"character":5},"end":{"line":237,"character":25}},"kind":9,"name":"ShelleyScriptWitness","range":{"start":{"line":237,"character":5},"end":{"line":240,"character":21}}}],"name":"Witness","range":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}}},{"selectionRange":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}},"kind":11,"name":"Eq (Witness era)","range":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}}},{"selectionRange":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}},"kind":11,"name":"Show (Witness era)","range":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}}},{"selectionRange":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Witness era)","range":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}}},{"selectionRange":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Witness era)","range":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}}},{"selectionRange":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}},"kind":12,"name":"encodeShelleyBasedKeyWitness","range":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}}},{"selectionRange":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}},"kind":12,"name":"encodeShelleyBasedBootstrapWitness","range":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}}},{"selectionRange":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}},"kind":12,"name":"encodeShelleyBasedScriptWitness","range":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}}},{"selectionRange":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}},"kind":12,"name":"decodeShelleyBasedWitness","range":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}}},{"selectionRange":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Witness era)","range":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}},"kind":12,"name":"getTxBody","range":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}}},{"selectionRange":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}},"kind":12,"name":"getTxWitnesses","range":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}}},{"selectionRange":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}},"kind":12,"name":"makeSignedTransaction","range":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}}},{"selectionRange":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}},"kind":12,"name":"makeByronKeyWitness","range":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}}},{"selectionRange":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":544,"character":4},"end":{"line":544,"character":20}},"kind":9,"name":"WitnessNetworkId","range":{"start":{"line":544,"character":4},"end":{"line":549,"character":51}}},{"selectionRange":{"start":{"line":550,"character":4},"end":{"line":550,"character":23}},"kind":9,"name":"WitnessByronAddress","range":{"start":{"line":550,"character":4},"end":{"line":555,"character":57}}}],"name":"WitnessNetworkIdOrByronAddress","range":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}}},{"selectionRange":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}},"kind":12,"name":"makeShelleyBootstrapWitness","range":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}}},{"selectionRange":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}},"kind":12,"name":"makeShelleyBasedBootstrapWitness","range":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}},"kind":23,"children":[{"selectionRange":{"start":{"line":658,"character":7},"end":{"line":658,"character":24}},"kind":9,"name":"WitnessPaymentKey","range":{"start":{"line":658,"character":7},"end":{"line":658,"character":56}}},{"selectionRange":{"start":{"line":659,"character":7},"end":{"line":659,"character":32}},"kind":9,"name":"WitnessPaymentExtendedKey","range":{"start":{"line":659,"character":7},"end":{"line":659,"character":64}}},{"selectionRange":{"start":{"line":660,"character":7},"end":{"line":660,"character":22}},"kind":9,"name":"WitnessStakeKey","range":{"start":{"line":660,"character":7},"end":{"line":660,"character":54}}},{"selectionRange":{"start":{"line":661,"character":7},"end":{"line":661,"character":30}},"kind":9,"name":"WitnessStakeExtendedKey","range":{"start":{"line":661,"character":7},"end":{"line":661,"character":62}}},{"selectionRange":{"start":{"line":662,"character":7},"end":{"line":662,"character":26}},"kind":9,"name":"WitnessStakePoolKey","range":{"start":{"line":662,"character":7},"end":{"line":662,"character":58}}},{"selectionRange":{"start":{"line":663,"character":7},"end":{"line":663,"character":24}},"kind":9,"name":"WitnessGenesisKey","range":{"start":{"line":663,"character":7},"end":{"line":663,"character":56}}},{"selectionRange":{"start":{"line":664,"character":7},"end":{"line":664,"character":32}},"kind":9,"name":"WitnessGenesisExtendedKey","range":{"start":{"line":664,"character":7},"end":{"line":664,"character":64}}},{"selectionRange":{"start":{"line":665,"character":7},"end":{"line":665,"character":32}},"kind":9,"name":"WitnessGenesisDelegateKey","range":{"start":{"line":665,"character":7},"end":{"line":665,"character":64}}},{"selectionRange":{"start":{"line":666,"character":7},"end":{"line":666,"character":40}},"kind":9,"name":"WitnessGenesisDelegateExtendedKey","range":{"start":{"line":666,"character":7},"end":{"line":667,"character":72}}},{"selectionRange":{"start":{"line":668,"character":7},"end":{"line":668,"character":28}},"kind":9,"name":"WitnessGenesisUTxOKey","range":{"start":{"line":668,"character":7},"end":{"line":668,"character":60}}}],"name":"ShelleyWitnessSigningKey","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}}},{"selectionRange":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}},"kind":12,"name":"makeShelleyKeyWitness","range":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}}},{"selectionRange":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}},"kind":23,"children":[{"selectionRange":{"start":{"line":711,"character":7},"end":{"line":711,"character":30}},"kind":9,"name":"ShelleyNormalSigningKey","range":{"start":{"line":711,"character":7},"end":{"line":711,"character":70}}},{"selectionRange":{"start":{"line":714,"character":7},"end":{"line":714,"character":32}},"kind":9,"name":"ShelleyExtendedSigningKey","range":{"start":{"line":714,"character":7},"end":{"line":714,"character":47}}}],"name":"ShelleySigningKey","range":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}},"kind":12,"name":"toShelleySigningKey","range":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}}},{"selectionRange":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}},"kind":12,"name":"getShelleyKeyWitnessVerificationKey","range":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}}},{"selectionRange":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}},"kind":12,"name":"makeShelleySignature","range":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}}},{"selectionRange":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}},"kind":12,"name":"makeScriptWitness","range":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}}},{"selectionRange":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}},"kind":12,"name":"signByronTransaction","range":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}}},{"selectionRange":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}},"kind":12,"name":"signShelleyTransaction","range":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}}}],"name":"Cardano.Api.Tx","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":1}
2020-12-03 08:38:10.895084786 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"12/52"},"token":"3"},"method":"$/progress"}
2020-12-03 08:38:11.068902506 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"33/63"},"token":"3"},"method":"$/progress"}
2020-12-03 08:38:11.167946834 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"66/77"},"token":"3"},"method":"$/progress"}
2020-12-03 08:38:11.588188147 [ThreadId 1079] - finish: codeLens (took 0.87s)
2020-12-03 08:38:11.588543093 [ThreadId 1080] - finish: kick (took 0.87s)
2020-12-03 08:38:11.588636522 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":"3"},"method":"$/progress"}
2020-12-03 08:38:11.589418063 [ThreadId 1089] - finish:  (took 0.00s)
2020-12-03 08:38:11.590894689 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}},"newText":"import Data.Maybe ( fromMaybe )"}]}}],"title":"import Data.Maybe ( fromMaybe )"},"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}},"newText":"import Cardano.Api.Address\n    ( AsType,\n      StakeExtendedKey,\n      StakeKey,\n      Address(ByronAddress),\n      ByronAddr )"}]}}],"title":"import Cardano.Api.Address\n    ( AsType,\n      StakeExtendedKey,\n      StakeKey,\n      Address(ByronAddress),\n      ByronAddr )"},"range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}},"newText":"import Cardano.Api.Certificate ( AsType(AsShelleyEra, AsByronEra) )"}]}}],"title":"import Cardano.Api.Certificate ( AsType(AsShelleyEra, AsByronEra) )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Eras\n    ( ByronEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( ByronEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}},"newText":"import Cardano.Api.Key\n    ( CastVerificationKeyRole(castVerificationKey),\n      Key(getVerificationKey, SigningKey, VerificationKey) )"}]}}],"title":"import Cardano.Api.Key\n    ( CastVerificationKeyRole(castVerificationKey),\n      Key(getVerificationKey, SigningKey, VerificationKey) )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}},"newText":"import Cardano.Api.KeysByron\n    ( SigningKey(PaymentExtendedSigningKey, ByronSigningKey,\n                 StakeSigningKey, StakePoolSigningKey, GenesisSigningKey,\n                 GenesisUTxOSigningKey, GenesisDelegateSigningKey,\n                 StakeExtendedSigningKey, GenesisExtendedSigningKey,\n                 GenesisDelegateExtendedSigningKey, PaymentSigningKey),\n      VerificationKey(PaymentVerificationKey),\n      ByronKey )"}]}}],"title":"import Cardano.Api.KeysByron\n    ( SigningKey(PaymentExtendedSigningKey, ByronSigningKey,\n                 StakeSigningKey, StakePoolSigningKey, GenesisSigningKey,\n                 GenesisUTxOSigningKey, GenesisDelegateSigningKey,\n                 StakeExtendedSigningKey, GenesisExtendedSigningKey,\n                 GenesisDelegateExtendedSigningKey, PaymentSigningKey),\n      VerificationKey(PaymentVerificationKey),\n      ByronKey )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( GenesisDelegateExtendedKey,\n      GenesisDelegateKey,\n      GenesisExtendedKey,\n      GenesisKey,\n      GenesisUTxOKey,\n      PaymentExtendedKey,\n      PaymentKey,\n      StakePoolKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( GenesisDelegateExtendedKey,\n      GenesisDelegateKey,\n      GenesisExtendedKey,\n      GenesisKey,\n      GenesisUTxOKey,\n      PaymentExtendedKey,\n      PaymentKey,\n      StakePoolKey )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}},"newText":"import Cardano.Api.NetworkId\n    ( toByronNetworkMagic, toByronProtocolMagicId, NetworkId )"}]}}],"title":"import Cardano.Api.NetworkId\n    ( toByronNetworkMagic, toByronProtocolMagicId, NetworkId )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}},"newText":"import Cardano.Api.Script\n    ( eraOfScriptInEra, toShelleyScript, ScriptInEra )"}]}}],"title":"import Cardano.Api.Script\n    ( eraOfScriptInEra, toShelleyScript, ScriptInEra )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}},"newText":"import Cardano.Api.TxBody ( TxBody(..) )"}]}}],"title":"import Cardano.Api.TxBody ( TxBody(..) )"},"range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}}}],"jsonrpc":"2.0","id":3}
2020-12-03 08:38:11.649260439 [ThreadId 1186] - finish: InitialLoad (took 0.93s)
2020-12-03 08:38:11.764949432 [ThreadId 1188] - finish: CodeAction:PackageExports (took 0.98s)
2020-12-03 08:38:11.765255144 [ThreadId 1189] - finish: importLens (took 0.00s)
2020-12-03 08:38:11.765662325 [ThreadId 1191] - finish: retrie (took 0.00s)
2020-12-03 08:38:11.78055431 [ThreadId 1197] - finish: tactic (took 0.01s)
2020-12-03 08:38:11.780887542 [ThreadId 1202] - finish: tactic (took 0.00s)
2020-12-03 08:38:11.781089156 [ThreadId 1203] - finish: tactic (took 0.00s)
2020-12-03 08:38:11.781405436 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":false,"rewrites":[{"tag":"Unfold","contents":"Cardano.Api.Tx.makeShelleySignature"}],"originatingFile":[3498212937235029284,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"],"description":"Unfold makeShelleySignature"}],"title":"Unfold makeShelleySignature"},"kind":"refactor.inline","title":"Unfold makeShelleySignature"},{"command":{"command":"9683:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":true,"rewrites":[{"tag":"Unfold","contents":"Cardano.Api.Tx.makeShelleySignature"}],"originatingFile":[3498212937235029284,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"],"description":"Unfold makeShelleySignature in current file"}],"title":"Unfold makeShelleySignature in current file"},"kind":"refactor.inline","title":"Unfold makeShelleySignature in current file"},{"command":{"command":"9683:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":false,"rewrites":[{"tag":"Fold","contents":"Cardano.Api.Tx.makeShelleySignature"}],"originatingFile":[3498212937235029284,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"],"description":"Fold makeShelleySignature"}],"title":"Fold makeShelleySignature"},"kind":"refactor.extract","title":"Fold makeShelleySignature"},{"command":{"command":"9683:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":true,"rewrites":[{"tag":"Fold","contents":"Cardano.Api.Tx.makeShelleySignature"}],"originatingFile":[3498212937235029284,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"],"description":"Fold makeShelleySignature in current file"}],"title":"Fold makeShelleySignature in current file"},"kind":"refactor.extract","title":"Fold makeShelleySignature in current file"}],"jsonrpc":"2.0","id":4}
2020-12-03 08:39:45.692829493 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise5.hs","type":3},{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise6.hs","type":3}]}}
2020-12-03 08:39:45.693250529 [ThreadId 25] - Files created or deleted: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise5.hs",False),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise6.hs",False)]
2020-12-03 08:39:45.694286659 [ThreadId 167] - Finishing build session(exception: AsyncCancelled)
2020-12-03 08:39:45.694542622 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 08:39:45.743038948 [ThreadId 1631] - finish: kick (took 0.05s)
2020-12-03 08:41:12.097905016 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 08:41:12.098138071 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}
2020-12-03 08:41:12.098335872 [ThreadId 25] - Set files of interest to: []
2020-12-03 08:41:12.098497298 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 08:41:12.106497296 [ThreadId 1819] - Typechecking reverse dependencies forNormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs": [NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs"]
2020-12-03 08:41:12.109612697 [ThreadId 1887] - finish: ParentTC (took 0.01s)
2020-12-03 09:40:30.571091764 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE DerivingVia #-}\n{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE TypeFamilies #-}\n\nmodule Cardano.Api.Script (\n    -- * Languages\n    SimpleScriptV1,\n    SimpleScriptV2,\n    ScriptLanguage(..),\n    SimpleScriptVersion(..),\n    PlutusScriptVersion,\n    AnyScriptLanguage(..),\n    IsScriptLanguage(..),\n    IsSimpleScriptLanguage(..),\n\n    -- * Scripts in a specific language\n    Script(..),\n\n    -- * Scripts in any language\n    ScriptInAnyLang(..),\n    toScriptInAnyLang,\n\n    -- * Scripts in an era\n    ScriptInEra(..),\n    toScriptInEra,\n    eraOfScriptInEra,\n\n    -- ** Languages supported in each era\n    ScriptLanguageInEra(..),\n    scriptLanguageSupportedInEra,\n    languageOfScriptLanguageInEra,\n    eraOfScriptLanguageInEra,\n\n    -- * The simple script language\n    SimpleScript(..),\n    TimeLocksSupported(..),\n    timeLocksSupported,\n    adjustSimpleScriptVersion,\n\n    -- * Script hashes\n    ScriptHash(..),\n    hashScript,\n\n    -- * Internal conversion functions\n    toShelleyScript,\n    toShelleyMultiSig,\n    fromShelleyMultiSig,\n    toAllegraTimelock,\n    fromAllegraTimelock,\n    toShelleyScriptHash,\n    fromShelleyScriptHash,\n\n    -- * Data family instances\n    AsType(..)\n  ) where\n\nimport           Prelude\n\nimport qualified Data.ByteString.Lazy as LBS\nimport           Data.Foldable (toList)\nimport           Data.Scientific (toBoundedInteger)\nimport           Data.String (IsString)\nimport           Data.Text (Text)\nimport qualified Data.Text as Text\nimport qualified Data.Text.Encoding as Text\nimport           Data.Type.Equality (TestEquality(..), (:~:)(Refl))\n\nimport           Data.Aeson (Value (..), object, (.:), (.=))\nimport qualified Data.Aeson as Aeson\nimport qualified Data.Aeson.Types as Aeson\nimport qualified Data.Sequence.Strict as Seq\nimport           Data.Vector (Vector)\nimport qualified Data.Vector as Vector\n\nimport           Control.Applicative\nimport           Control.Monad\n\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\nimport qualified Cardano.Crypto.Hash.Class as Crypto\n\nimport           Cardano.Slotting.Slot (SlotNo)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era  as Ledger\n\nimport qualified Cardano.Ledger.ShelleyMA.Timelocks as Timelock\nimport           Ouroboros.Consensus.Shelley.Eras\n                   (StandardAllegra, StandardCrypto, StandardShelley)\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Scripts as Shelley\n\nimport           Cardano.Api.Eras\nimport           Cardano.Api.Hash\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseJSON\nimport           Cardano.Api.SerialiseRaw\nimport           Cardano.Api.SerialiseTextEnvelope\n\n{- HLINT ignore \"Use section\" -}\n\n\n-- ----------------------------------------------------------------------------\n-- Types for script language and version\n--\n\n-- | The original simple script language which supports\n--\n-- * require a signature from a given key (by verification key hash)\n-- * n-way and combinator\n-- * n-way or combinator\n-- * m-of-n combinator\n--\n-- This version of the language was introduced in the 'ShelleyEra'.\n--\ndata SimpleScriptV1\n\n-- | The second version of the simple script language. It has all the features\n-- of 'SimpleScriptV1' plus new atomic predicates:\n--\n-- * require the time be before a given slot number\n-- * require the time be after a given slot number\n--\n-- This version of the language was introduced in the 'AllegraEra'.\n--\ndata SimpleScriptV2\n\n-- | Place holder type to show what the pattern is to extend to multiple\n-- languages, not just multiple versions of a single language.\n--\ndata PlutusScriptV1\n\ninstance HasTypeProxy SimpleScriptV1 where\n    data AsType SimpleScriptV1 = AsSimpleScriptV1\n    proxyToAsType _ = AsSimpleScriptV1\n\ninstance HasTypeProxy SimpleScriptV2 where\n    data AsType SimpleScriptV2 = AsSimpleScriptV2\n    proxyToAsType _ = AsSimpleScriptV2\n\ninstance HasTypeProxy PlutusScriptV1 where\n    data AsType PlutusScriptV1 = AsPlutusScriptV1\n    proxyToAsType _ = AsPlutusScriptV1\n\n\n-- ----------------------------------------------------------------------------\n-- Value level representation for script languages\n--\ndata ScriptLanguage lang where\n\n     SimpleScriptLanguage :: SimpleScriptVersion lang -> ScriptLanguage lang\n\n     PlutusScriptLanguage :: PlutusScriptVersion lang -> ScriptLanguage lang\n\nderiving instance (Eq   (ScriptLanguage lang))\nderiving instance (Show (ScriptLanguage lang))\n\ninstance TestEquality ScriptLanguage where\n    testEquality (SimpleScriptLanguage lang)\n                 (SimpleScriptLanguage lang') = testEquality lang lang'\n\n    testEquality (PlutusScriptLanguage lang)\n                 (PlutusScriptLanguage lang') = testEquality lang lang'\n\n    testEquality  _ _ = Nothing\n\n\ndata SimpleScriptVersion lang where\n\n     SimpleScriptV1 :: SimpleScriptVersion SimpleScriptV1\n     SimpleScriptV2 :: SimpleScriptVersion SimpleScriptV2\n\nderiving instance (Eq   (SimpleScriptVersion lang))\nderiving instance (Show (SimpleScriptVersion lang))\n\ninstance TestEquality SimpleScriptVersion where\n    testEquality SimpleScriptV1 SimpleScriptV1 = Just Refl\n    testEquality SimpleScriptV2 SimpleScriptV2 = Just Refl\n    testEquality _              _              = Nothing\n\n\ndata PlutusScriptVersion lang\n  -- For now, there are no such versions, but it'd be like this:\n  -- PlutusScriptV1 :: PlutusScriptVersion PlutusScriptV1\n\nderiving instance (Eq   (PlutusScriptVersion lang))\nderiving instance (Show (PlutusScriptVersion lang))\n\ninstance TestEquality PlutusScriptVersion where\n    testEquality lang = case lang of {}\n\n\ndata AnyScriptLanguage where\n     AnyScriptLanguage :: ScriptLanguage lang -> AnyScriptLanguage\n\nderiving instance (Show AnyScriptLanguage)\n\ninstance Eq AnyScriptLanguage where\n    AnyScriptLanguage lang == AnyScriptLanguage lang' =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> True -- since no constructors share types\n\ninstance Enum AnyScriptLanguage where\n    toEnum 0 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    toEnum 1 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n    toEnum _ = error \"AnyScriptLanguage.toEnum: bad argument\"\n\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)) = 0\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)) = 1\n    fromEnum (AnyScriptLanguage (PlutusScriptLanguage lang)) = case lang of {}\n\ninstance Bounded AnyScriptLanguage where\n    minBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    maxBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n\n\nclass HasTypeProxy lang => IsScriptLanguage lang where\n    scriptLanguage :: ScriptLanguage lang\n\ninstance IsScriptLanguage SimpleScriptV1 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV1\n\ninstance IsScriptLanguage SimpleScriptV2 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV2\n\n--instance IsScriptLanguage PlutusScriptV1 where\n--    scriptLanguage = PlutusScriptLanguage PlutusScriptV1\n\n\nclass IsScriptLanguage lang => IsSimpleScriptLanguage lang where\n    simpleScriptVersion :: SimpleScriptVersion lang\n\ninstance IsSimpleScriptLanguage SimpleScriptV1 where\n    simpleScriptVersion = SimpleScriptV1\n\ninstance IsSimpleScriptLanguage SimpleScriptV2 where\n    simpleScriptVersion = SimpleScriptV2\n\n\n\n-- ----------------------------------------------------------------------------\n-- Script type: covering all script languages\n--\n\n-- | A script in a particular language.\n--\n-- See also 'ScriptInAnyLang' for a script in any of the languages that is available within\n-- a particular era.\n--\n-- See also 'ScriptInEra' for a script in a language that is available within\n-- a particular era.\n--\ndata Script lang where\n\n     SimpleScript :: !(SimpleScriptVersion lang)\n                  -> !(SimpleScript lang)\n                  -> Script lang\n\n     -- Place holder type to show what the pattern is to extend to multiple\n     -- languages, not just multiple versions of a single language.\n     -- For now there are no values of PlutusScriptVersion so this branch\n     -- is inaccessible.\n     PlutusScript :: !(PlutusScriptVersion lang)\n                  -> ()\n                  -> Script lang\n\nderiving instance (Eq   (Script lang))\nderiving instance (Show (Script lang))\n\ninstance HasTypeProxy lang => HasTypeProxy (Script lang) where\n    data AsType (Script lang) = AsScript (AsType lang)\n    proxyToAsType _ = AsScript (proxyToAsType (Proxy :: Proxy lang))\n\ninstance IsScriptLanguage lang => SerialiseAsCBOR (Script lang) where\n    serialiseToCBOR (SimpleScript SimpleScriptV1 s) =\n      CBOR.serialize' (toShelleyMultiSig s)\n\n    serialiseToCBOR (SimpleScript SimpleScriptV2 s) =\n      CBOR.serialize' (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    deserialiseFromCBOR _ bs =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 ->\n              SimpleScript SimpleScriptV1\n            . fromShelleyMultiSig\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        SimpleScriptLanguage SimpleScriptV2 ->\n              SimpleScript SimpleScriptV2\n            . (fromAllegraTimelock TimeLocksInSimpleScriptV2\n                                :: Timelock.Timelock StandardAllegra\n                                -> SimpleScript SimpleScriptV2)\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        PlutusScriptLanguage v -> case v of {}\n\n\ninstance IsScriptLanguage lang => HasTextEnvelope (Script lang) where\n    textEnvelopeType _ =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 -> \"SimpleScriptV1\"\n        SimpleScriptLanguage SimpleScriptV2 -> \"SimpleScriptV2\"\n        PlutusScriptLanguage v -> case v of {}\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in any language\n--\n\n-- | Sometimes it is necessary to handle all languages without making static\n-- type distinctions between languages. For example, when reading external\n-- input, or before the era context is known.\n--\n-- Use 'toScriptInEra' to convert to a script in the context of an era.\n--\ndata ScriptInAnyLang where\n     ScriptInAnyLang :: ScriptLanguage lang\n                     -> Script lang\n                     -> ScriptInAnyLang\n\nderiving instance Show ScriptInAnyLang\n\n-- The GADT in the ScriptInAnyLang constructor requires a custom Eq instance\ninstance Eq ScriptInAnyLang where\n    (==) (ScriptInAnyLang lang  script)\n         (ScriptInAnyLang lang' script') =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\n-- | Convert a script in a specific statically-known language to a\n-- 'ScriptInAnyLang'.\n--\n-- No inverse to this is provided, just do case analysis on the 'ScriptLanguage'\n-- field within the 'ScriptInAnyLang' constructor.\n--\ntoScriptInAnyLang :: Script lang -> ScriptInAnyLang\ntoScriptInAnyLang s@(SimpleScript v _) =\n    ScriptInAnyLang (SimpleScriptLanguage v) s\n\ninstance HasTypeProxy ScriptInAnyLang where\n    data AsType ScriptInAnyLang = AsScriptInAnyLang\n    proxyToAsType _ = AsScriptInAnyLang\n\ninstance SerialiseAsCBOR ScriptInAnyLang where\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript _v s)) =\n      -- Note that the CBOR encoding here is compatible with the previous\n      -- serialisation format for the @Script@ type from @cardano-ledger-specs@.\n      --\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 0\n       <> toCBOR (toShelleyMultiSig s)\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript _v s)) =\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 1\n       <> toCBOR (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    serialiseToCBOR (ScriptInAnyLang (PlutusScriptLanguage v) _) = case v of {}\n\n    deserialiseFromCBOR AsScriptInAnyLang bs =\n        CBOR.decodeAnnotator \"Script\" decodeScript (LBS.fromStrict bs)\n      where\n        decodeScript :: CBOR.Decoder s (CBOR.Annotator ScriptInAnyLang)\n        decodeScript = do\n          CBOR.decodeListLenOf 2\n          tag <- CBOR.decodeWord8\n\n          case tag of\n            0 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Shelley.MultiSig StandardShelley -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                        . SimpleScript SimpleScriptV1\n                        . fromShelleyMultiSig\n\n            1 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Timelock.Timelock StandardAllegra -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                        . SimpleScript SimpleScriptV2\n                        . fromAllegraTimelock TimeLocksInSimpleScriptV2\n\n            _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag \"Script\" tag\n\ninstance HasTextEnvelope ScriptInAnyLang where\n    textEnvelopeType _ = \"Script\"\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in the context of a ledger era\n--\n\ndata ScriptInEra era where\n     ScriptInEra :: ScriptLanguageInEra lang era\n                 -> Script lang\n                 -> ScriptInEra era\n\nderiving instance Show (ScriptInEra era)\n\n-- The GADT in the ScriptInEra constructor requires a custom instance\ninstance Eq (ScriptInEra era) where\n    (==) (ScriptInEra langInEra  script)\n         (ScriptInEra langInEra' script') =\n      case testEquality (languageOfScriptLanguageInEra langInEra)\n                        (languageOfScriptLanguageInEra langInEra') of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\ndata ScriptLanguageInEra lang era where\n\n     SimpleScriptV1InShelley :: ScriptLanguageInEra SimpleScriptV1 ShelleyEra\n     SimpleScriptV1InAllegra :: ScriptLanguageInEra SimpleScriptV1 AllegraEra\n     SimpleScriptV1InMary    :: ScriptLanguageInEra SimpleScriptV1 MaryEra\n\n     SimpleScriptV2InAllegra :: ScriptLanguageInEra SimpleScriptV2 AllegraEra\n     SimpleScriptV2InMary    :: ScriptLanguageInEra SimpleScriptV2 MaryEra\n\nderiving instance Eq   (ScriptLanguageInEra lang era)\nderiving instance Show (ScriptLanguageInEra lang era)\n\ninstance HasTypeProxy era => HasTypeProxy (ScriptInEra era) where\n    data AsType (ScriptInEra era) = AsScriptInEra (AsType era)\n    proxyToAsType _ = AsScriptInEra (proxyToAsType (Proxy :: Proxy era))\n\ninstance IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era) where\n    serialiseToCBOR (ScriptInEra _lang s) =\n      serialiseToCBOR (toScriptInAnyLang s)\n\n    deserialiseFromCBOR (AsScriptInEra _) bs = do\n      s@(ScriptInAnyLang lang _) <- deserialiseFromCBOR AsScriptInAnyLang bs\n      case toScriptInEra cardanoEra s of\n        Just s' -> Right s'\n        Nothing ->\n          Left $ CBOR.DecoderErrorCustom\n                 (Text.pack (show (cardanoEra :: CardanoEra era)) <> \" Script\")\n                 (\"Script language \" <> Text.pack (show lang) <>\n                  \" not supported in this era\")\n\ninstance IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era) where\n    textEnvelopeType _ =\n      case shelleyBasedEra :: ShelleyBasedEra era of\n        ShelleyBasedEraShelley -> \"ScriptInEra ShelleyEra\"\n        ShelleyBasedEraAllegra -> \"ScriptInEra AllegraEra\"\n        ShelleyBasedEraMary    -> \"ScriptInEra MaryEra\"\n\n\n-- | Check if a given script language is supported in a given era, and if so\n-- return the evidence.\n--\nscriptLanguageSupportedInEra :: CardanoEra era\n                             -> ScriptLanguage lang\n                             -> Maybe (ScriptLanguageInEra lang era)\nscriptLanguageSupportedInEra era lang =\n    case (era, lang) of\n      (ShelleyEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InShelley\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InMary\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InMary\n\n      _ -> Nothing\n\nlanguageOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                              -> ScriptLanguage lang\nlanguageOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InAllegra -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InMary    -> SimpleScriptLanguage SimpleScriptV1\n\n      SimpleScriptV2InAllegra -> SimpleScriptLanguage SimpleScriptV2\n      SimpleScriptV2InMary    -> SimpleScriptLanguage SimpleScriptV2\n\neraOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                         -> ShelleyBasedEra era\neraOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> ShelleyBasedEraShelley\n\n      SimpleScriptV1InAllegra -> ShelleyBasedEraAllegra\n      SimpleScriptV2InAllegra -> ShelleyBasedEraAllegra\n\n      SimpleScriptV1InMary    -> ShelleyBasedEraMary\n      SimpleScriptV2InMary    -> ShelleyBasedEraMary\n\n\n-- | Given a target era and a script in some language, check if the language is\n-- supported in that era, and if so return a 'ScriptInEra'.\n--\ntoScriptInEra :: CardanoEra era -> ScriptInAnyLang -> Maybe (ScriptInEra era)\ntoScriptInEra era (ScriptInAnyLang lang s) = do\n    lang' <- scriptLanguageSupportedInEra era lang\n    return (ScriptInEra lang' s)\n\neraOfScriptInEra :: ScriptInEra era -> ShelleyBasedEra era\neraOfScriptInEra (ScriptInEra langInEra _) = eraOfScriptLanguageInEra langInEra\n\n\n-- ----------------------------------------------------------------------------\n-- Script Hash\n--\n\n-- | We have this type separate from the 'Hash' type to avoid the script\n-- hash type being parametrised by the era. The representation is era\n-- independent, and there are many places where we want to use a script\n-- hash where we don't want things to be era-parametrised.\n--\nnewtype ScriptHash = ScriptHash (Shelley.ScriptHash StandardShelley)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex ScriptHash\n\ninstance HasTypeProxy ScriptHash where\n    data AsType ScriptHash = AsScriptHash\n    proxyToAsType _ = AsScriptHash\n\ninstance SerialiseAsRawBytes ScriptHash where\n    serialiseToRawBytes (ScriptHash (Shelley.ScriptHash h)) =\n      Crypto.hashToBytes h\n\n    deserialiseFromRawBytes AsScriptHash bs =\n      ScriptHash . Shelley.ScriptHash <$> Crypto.hashFromBytes bs\n\n\nhashScript :: Script lang -> ScriptHash\nhashScript (SimpleScript SimpleScriptV1 s) =\n    -- For V1, we convert to the Shelley-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . Shelley.hashMultiSigScript\n  . toShelleyMultiSig\n  $ s\n\nhashScript (SimpleScript SimpleScriptV2 s) =\n    -- For V1, we convert to the Allegra-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . coerceShelleyScriptHash\n  . Timelock.hashTimelockScript\n  . (toAllegraTimelock :: SimpleScript SimpleScriptV2\n                       -> Timelock.Timelock StandardAllegra)\n  $ s\n\n\ntoShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                    => ScriptHash -> Shelley.ScriptHash ledgerera\ntoShelleyScriptHash (ScriptHash h) = coerceShelleyScriptHash h\n\nfromShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                      => Shelley.ScriptHash ledgerera -> ScriptHash\nfromShelleyScriptHash = ScriptHash . coerceShelleyScriptHash\n\ncoerceShelleyScriptHash :: Ledger.Crypto ledgereraA ~ Ledger.Crypto ledgereraB\n                        => Shelley.ScriptHash ledgereraA\n                        -> Shelley.ScriptHash ledgereraB\ncoerceShelleyScriptHash (Shelley.ScriptHash h) =\n    Shelley.ScriptHash (Crypto.castHash h)\n\n\n-- ----------------------------------------------------------------------------\n-- The simple native script language\n--\n\ndata SimpleScript lang where\n\n     RequireSignature  :: !(Hash PaymentKey)\n                       -> SimpleScript lang\n\n     RequireTimeBefore :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireTimeAfter  :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireAllOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireAnyOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireMOf        :: Int -> [SimpleScript lang] -> SimpleScript lang\n\nderiving instance Eq   (SimpleScript lang)\nderiving instance Show (SimpleScript lang)\n\n\n-- | Time lock feature in the 'SimpleScript' language.\n--\n-- The constructors of this type serve as evidence that the timelocks feature\n-- is supported in particular versions of the language.\n--\ndata TimeLocksSupported lang where\n     TimeLocksInSimpleScriptV2 :: TimeLocksSupported SimpleScriptV2\n\nderiving instance Eq   (TimeLocksSupported lang)\nderiving instance Show (TimeLocksSupported lang)\n\ntimeLocksSupported :: SimpleScriptVersion lang\n                   -> Maybe (TimeLocksSupported lang)\ntimeLocksSupported SimpleScriptV1 = Nothing\ntimeLocksSupported SimpleScriptV2 = Just TimeLocksInSimpleScriptV2\n\n\n-- | Try converting the 'SimpleScript' into a different version of the language.\n--\n-- This will work when the script only uses the features of the target language\n-- version. For example converting from 'SimpleScriptV2' to 'SimpleScriptV1'\n-- will work if the script happens not to use time locks feature. On the other\n-- hand converting 'SimpleScriptV1' to 'SimpleScriptV2' will always work because\n-- it is backwards compatible.\n--\nadjustSimpleScriptVersion :: SimpleScriptVersion lang'\n                          -> SimpleScript lang\n                          -> Maybe (SimpleScript lang')\nadjustSimpleScriptVersion target = go\n  where\n    go (RequireSignature sig) = pure (RequireSignature sig)\n\n    go (RequireTimeBefore _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeBefore supported slot)\n\n    go (RequireTimeAfter _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeAfter supported slot)\n\n    go (RequireAllOf ss) = RequireAllOf <$> traverse go ss\n    go (RequireAnyOf ss) = RequireAnyOf <$> traverse go ss\n    go (RequireMOf m ss) = RequireMOf m <$> traverse go ss\n\n\n-- ----------------------------------------------------------------------------\n-- Conversion functions\n--\n\ntoShelleyScript :: ScriptInEra era -> Ledger.Script (ShelleyLedgerEra era)\ntoShelleyScript (ScriptInEra langInEra (SimpleScript _ script)) =\n    case langInEra of\n      SimpleScriptV1InShelley -> toShelleyMultiSig script\n\n      SimpleScriptV1InAllegra -> toAllegraTimelock script\n      SimpleScriptV1InMary    -> toAllegraTimelock script\n      SimpleScriptV2InAllegra -> toAllegraTimelock script\n      SimpleScriptV2InMary    -> toAllegraTimelock script\n\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\ntoShelleyMultiSig :: SimpleScript SimpleScriptV1\n                  -> Shelley.MultiSig StandardShelley\ntoShelleyMultiSig = go\n  where\n    go :: SimpleScript SimpleScriptV1 -> Shelley.MultiSig StandardShelley\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Shelley.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Shelley.RequireAllOf (map go s)\n    go (RequireAnyOf s) = Shelley.RequireAnyOf (map go s)\n    go (RequireMOf m s) = Shelley.RequireMOf m (map go s)\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\nfromShelleyMultiSig :: Shelley.MultiSig StandardShelley -> SimpleScript lang\nfromShelleyMultiSig = go\n  where\n    go (Shelley.RequireSignature kh)\n                                = RequireSignature\n                                    (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Shelley.RequireAllOf s) = RequireAllOf (map go s)\n    go (Shelley.RequireAnyOf s) = RequireAnyOf (map go s)\n    go (Shelley.RequireMOf m s) = RequireMOf m (map go s)\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\ntoAllegraTimelock :: forall lang ledgerera.\n                     (Ledger.Era ledgerera,\n                      Ledger.Crypto ledgerera ~ StandardCrypto)\n                  => SimpleScript lang -> Timelock.Timelock ledgerera\ntoAllegraTimelock = go\n  where\n    go :: SimpleScript lang -> Timelock.Timelock ledgerera\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Timelock.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Timelock.RequireAllOf (Seq.fromList (map go s))\n    go (RequireAnyOf s) = Timelock.RequireAnyOf (Seq.fromList (map go s))\n    go (RequireMOf m s) = Timelock.RequireMOf m (Seq.fromList (map go s))\n    go (RequireTimeBefore _ t) = Timelock.RequireTimeExpire t\n    go (RequireTimeAfter  _ t) = Timelock.RequireTimeStart  t\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\nfromAllegraTimelock ::    (Ledger.Era ledgerera,\n                           Ledger.Crypto ledgerera ~ StandardCrypto)\n                       => TimeLocksSupported lang\n                       -> Timelock.Timelock ledgerera\n                       -> SimpleScript lang\nfromAllegraTimelock timelocks = go\n  where\n    go (Timelock.RequireSignature kh) = RequireSignature\n                                          (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Timelock.RequireTimeExpire t) = RequireTimeBefore timelocks t\n    go (Timelock.RequireTimeStart  t) = RequireTimeAfter  timelocks t\n    go (Timelock.RequireAllOf      s) = RequireAllOf (map go (toList s))\n    go (Timelock.RequireAnyOf      s) = RequireAnyOf (map go (toList s))\n    go (Timelock.RequireMOf      i s) = RequireMOf i (map go (toList s))\n\n\n-- ----------------------------------------------------------------------------\n-- JSON serialisation\n--\n\ninstance ToJSON (Script lang) where\n  toJSON (SimpleScript _ script) = toJSON script\n\ninstance ToJSON ScriptInAnyLang where\n  toJSON (ScriptInAnyLang _ script) = toJSON script\n\ninstance ToJSON (ScriptInEra era) where\n  toJSON (ScriptInEra _ script) = toJSON script\n\ninstance ToJSON (SimpleScript lang) where\n  toJSON (RequireSignature pKeyHash) =\n    object [ \"type\"    .= String \"sig\"\n           , \"keyHash\" .= Text.decodeUtf8 (serialiseToRawBytesHex pKeyHash)\n           ]\n  toJSON (RequireTimeBefore _ slot) =\n    object [ \"type\" .= String \"before\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireTimeAfter _ slot) =\n    object [ \"type\" .= String \"after\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireAnyOf reqScripts) =\n    object [ \"type\" .= String \"any\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireAllOf reqScripts) =\n    object [ \"type\" .= String \"all\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireMOf reqNum reqScripts) =\n    object [ \"type\" .= String \"atLeast\"\n           , \"required\" .= reqNum\n           , \"scripts\" .= map toJSON reqScripts\n           ]\n\n\ninstance IsScriptLanguage lang => FromJSON (Script lang) where\n  parseJSON v =\n    case scriptLanguage :: ScriptLanguage lang of\n      SimpleScriptLanguage lang -> SimpleScript lang <$>\n                                     parseSimpleScript lang v\n      PlutusScriptLanguage lang -> case lang of {}\n\n\ninstance FromJSON ScriptInAnyLang where\n  parseJSON v =\n      -- The SimpleScript language has the property that it is backwards\n      -- compatible, so we can parse as the latest version and then downgrade\n      -- to the minimum version that has all the features actually used.\n      toMinimumSimpleScriptVersion <$> parseSimpleScript SimpleScriptV2 v\n    where\n      --TODO: this will need to be adjusted when more versions are added\n      -- with appropriate helper functions it can probably be done in an\n      -- era-generic style\n      toMinimumSimpleScriptVersion s =\n        case adjustSimpleScriptVersion SimpleScriptV1 s of\n          Nothing -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript SimpleScriptV2 s)\n          Just s' -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsCardanoEra era => FromJSON (ScriptInEra era) where\n  parseJSON v =\n    case cardanoEra :: CardanoEra era of\n      ByronEra   -> fail \"Scripts are not supported in the Byron era\"\n\n      ShelleyEra -> ScriptInEra SimpleScriptV1InShelley\n                  . SimpleScript SimpleScriptV1\n                <$> parseSimpleScript SimpleScriptV1 v\n\n      --TODO: this will need to be adjusted when more versions are added.\n      -- It can probably be done in an era-generic style, with the use of\n      -- appropriate helper functions.\n      AllegraEra -> toMinimumSimpleScriptVersion\n                <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InAllegra\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InAllegra\n                                     (SimpleScript SimpleScriptV1 s')\n\n      MaryEra -> toMinimumSimpleScriptVersion\n             <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InMary\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InMary\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang) where\n  parseJSON = parseSimpleScript simpleScriptVersion\n\n\nparseSimpleScript :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseSimpleScript lang v = parseScriptSig          v\n                       <|> parseScriptBefore  lang v\n                       <|> parseScriptAfter   lang v\n                       <|> parseScriptAny     lang v\n                       <|> parseScriptAll     lang v\n                       <|> parseScriptAtLeast lang v\n\nparseScriptAny :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAny lang =\n    Aeson.withObject \"any\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"any\" -> do vs <- obj .: \"scripts\"\n                    RequireAnyOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"any\\\" script value not found\"\n\nparseScriptAll :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAll lang =\n    Aeson.withObject \"all\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"all\" -> do vs <- obj .: \"scripts\"\n                    RequireAllOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"all\\\" script value not found\"\n\nparseScriptAtLeast :: SimpleScriptVersion lang\n                   -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAtLeast lang =\n    Aeson.withObject \"atLeast\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"atLeast\" -> do\n          r  <- obj .: \"required\"\n          vs <- obj .: \"scripts\"\n          case r of\n            Number sci ->\n              case toBoundedInteger sci of\n                Just reqInt ->\n                  do scripts <- gatherSimpleScriptTerms lang vs\n                     let numScripts = length scripts\n                     when\n                       (reqInt > numScripts)\n                       (fail $ \"Required number of script signatures exceeds the number of scripts.\"\n                             <> \" Required number: \" <> show reqInt\n                             <> \" Number of scripts: \" <> show numScripts)\n                     return $ RequireMOf reqInt scripts\n                Nothing -> fail $ \"Error in \\\"required\\\" key: \"\n                                <> show sci <> \" is not a valid Int\"\n            _ -> fail \"\\\"required\\\" value should be an integer\"\n        _        -> fail \"\\\"atLeast\\\" script value not found\"\n\ngatherSimpleScriptTerms :: SimpleScriptVersion lang\n                        -> Vector Value -> Aeson.Parser [SimpleScript lang]\ngatherSimpleScriptTerms lang = mapM (parseSimpleScript lang) . Vector.toList\n\nparseScriptSig :: Value -> Aeson.Parser (SimpleScript lang)\nparseScriptSig =\n    Aeson.withObject \"sig\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"sig\" -> do k <- obj .: \"keyHash\"\n                    RequireSignature <$> parsePaymentKeyHash k\n        _     -> fail \"\\\"sig\\\" script value not found\"\n\nparseScriptBefore :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptBefore lang =\n    Aeson.withObject \"before\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"before\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeBefore supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"before\\\" not supported in \" ++ show lang)\n        _ -> fail \"\\\"before\\\" script value not found\"\n\nparseScriptAfter :: SimpleScriptVersion lang\n                 -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAfter lang =\n    Aeson.withObject \"after\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"after\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeAfter supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"after\\\" not supported in \" ++ show lang)\n        _       -> fail \"\\\"after\\\" script value not found\"\n\nparsePaymentKeyHash :: Text -> Aeson.Parser (Hash PaymentKey)\nparsePaymentKeyHash txt =\n    case deserialiseFromRawBytesHex (AsHash AsPaymentKey) (Text.encodeUtf8 txt) of\n      Just payKeyHash -> return payKeyHash\n      Nothing -> fail $ \"Error deserialising payment key hash: \" <> Text.unpack txt\n\n"}}}
2020-12-03 09:40:30.573671294 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 09:40:30.573792285 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-03 09:40:30.573955374 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 09:40:30.57415493 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:40:30.574149746 [ThreadId 1209] - Finishing build session(exception: AsyncCancelled)
2020-12-03 09:40:30.574423859 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 09:40:30.583337651 [ThreadId 1956] - finish: CodeAction (took 0.01s)
2020-12-03 09:40:30.583336811 [ThreadId 1958] - finish: C:GetParsedModule (took 0.01s)
2020-12-03 09:40:30.583501336 [ThreadId 1965] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 09:40:30.583764582 [ThreadId 1966] - finish: importLens (took 0.00s)
2020-12-03 09:40:30.584795994 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":6}
2020-12-03 09:40:31.088801612 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":7,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 09:40:31.088811803 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":"63"},"method":"window/workDoneProgress/create","id":3}
2020-12-03 09:40:31.089002123 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":259,"character":0},"end":{"line":259,"character":16}},"context":{"diagnostics":[]}}}
2020-12-03 09:40:31.089026141 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","title":"Processing"},"token":"63"},"method":"$/progress"}
2020-12-03 09:40:31.089029406 [ThreadId 2202] - Plugin.makeCodeLens (ideLogger)
2020-12-03 09:40:31.089090771 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":5}}
2020-12-03 09:40:31.089227073 [ThreadId 1907] - retrie was cancelled
2020-12-03 09:40:31.089287537 [ThreadId 1905] - Cancelled request IdInt 5
2020-12-03 09:40:31.089321478 [ThreadId 2206] - finish: CodeAction (took 0.00s)
2020-12-03 09:40:31.089402335 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":5}
2020-12-03 09:40:31.089406629 [ThreadId 2211] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 09:40:31.089630006 [ThreadId 2213] - finish: importLens (took 0.00s)
2020-12-03 09:40:31.08983091 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":3,"result":null}
2020-12-03 09:40:31.08987225 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":3,\"result\":null}"
2020-12-03 09:40:31.125136661 [ThreadId 2221] - finish: retrie (took 0.04s)
2020-12-03 09:40:31.125097718 [ThreadId 2220] - finish: codeLens (took 0.04s)
2020-12-03 09:40:31.125140849 [ThreadId 2219] - finish: retrie (took 0.54s)
2020-12-03 09:40:31.125329225 [ThreadId 2218] - finish: kick (took 0.55s)
2020-12-03 09:40:31.125388996 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":"63"},"method":"$/progress"}
2020-12-03 09:40:31.125799496 [ThreadId 2229] - finish:  (took 0.00s)
2020-12-03 09:40:31.126658593 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"newText":"import Control.Applicative ( Alternative((<|>)) )"}]}}],"title":"import Control.Applicative ( Alternative((<|>)) )"},"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"newText":"import Control.Monad ( when )"}]}}],"title":"import Control.Monad ( when )"},"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"newText":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"}]}}],"title":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"newText":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"}]}}],"title":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"newText":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"}]}}],"title":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"jsonrpc":"2.0","id":7}
2020-12-03 09:40:31.141193877 [ThreadId 2232] - finish: tactic (took 0.02s)
2020-12-03 09:40:31.141382547 [ThreadId 2237] - finish: tactic (took 0.00s)
2020-12-03 09:40:31.141434402 [ThreadId 2238] - finish: tactic (took 0.00s)
2020-12-03 09:40:31.14163235 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":8}
2020-12-03 09:40:31.234579839 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":9,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":266,"character":37}}}
2020-12-03 09:40:31.23475674 [ThreadId 2243] - DocumentHighlight request at position 267:38 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:40:31.234963404 [ThreadId 2245] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:40:31.235016838 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":9}
2020-12-03 09:40:31.483891439 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":266,"character":37},"end":{"line":266,"character":37}},"context":{"diagnostics":[]}}}
2020-12-03 09:40:31.484210573 [ThreadId 2250] - finish: CodeAction (took 0.00s)
2020-12-03 09:40:31.484391607 [ThreadId 2252] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 09:40:31.484618993 [ThreadId 2254] - finish: importLens (took 0.00s)
2020-12-03 09:40:31.484750219 [ThreadId 2256] - finish: retrie (took 0.00s)
2020-12-03 09:40:31.484972659 [ThreadId 2258] - finish: tactic (took 0.00s)
2020-12-03 09:40:31.485063682 [ThreadId 2260] - finish: tactic (took 0.00s)
2020-12-03 09:40:31.485112137 [ThreadId 2262] - finish: tactic (took 0.00s)
2020-12-03 09:40:31.485221054 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":10}
2020-12-03 09:40:31.790242981 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":11,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":266,"character":37}}}
2020-12-03 09:40:31.790452946 [ThreadId 2267] - Definition request at position 267:38 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:40:31.790597532 [ThreadId 2268] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:40:31.79072237 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":11}
2020-12-03 09:40:32.747222709 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":730,"character":3},"end":{"line":730,"character":7}},"context":{"diagnostics":[]}}}
2020-12-03 09:40:32.747549453 [ThreadId 2274] - finish: CodeAction (took 0.00s)
2020-12-03 09:40:32.747677365 [ThreadId 2276] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 09:40:32.747899718 [ThreadId 2278] - finish: importLens (took 0.00s)
2020-12-03 09:40:32.74802575 [ThreadId 2280] - finish: retrie (took 0.00s)
2020-12-03 09:40:32.748214117 [ThreadId 2282] - finish: tactic (took 0.00s)
2020-12-03 09:40:32.74825207 [ThreadId 2284] - finish: tactic (took 0.00s)
2020-12-03 09:40:32.748342687 [ThreadId 2286] - finish: tactic (took 0.00s)
2020-12-03 09:40:32.748436274 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":12}
2020-12-03 09:42:46.095248388 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":766,"character":46}}}
2020-12-03 09:42:46.095400722 [ThreadId 2291] - GhcIde.hover entered (ideLogger)
2020-12-03 09:42:46.09551431 [ThreadId 2291] - Hover request at position 767:47 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:42:46.095653389 [ThreadId 2292] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:42:46.115888758 [ThreadId 2301] - finish: C:GetDocMap (took 0.02s)
2020-12-03 09:42:46.116429725 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nScript\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:260:1*\n\n\nA script in a particular language. \n\nSee also  `ScriptInAnyLang`  for a script in any of the languages that is available within\n a particular era. \n\nSee also  `ScriptInEra`  for a script in a language that is available within\n a particular era.\n\n\n\n"},"range":{"start":{"line":766,"character":44},"end":{"line":766,"character":50}}},"jsonrpc":"2.0","id":13}
2020-12-03 09:42:48.202265688 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":771,"character":38}}}
2020-12-03 09:42:48.202469171 [ThreadId 2305] - GhcIde.hover entered (ideLogger)
2020-12-03 09:42:48.202620101 [ThreadId 2305] - Hover request at position 772:39 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:42:48.202780689 [ThreadId 2306] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:42:48.202811207 [ThreadId 2309] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:42:48.202931582 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\n_ :: Parser (Script lang)\n```\n"},"range":{"start":{"line":771,"character":35},"end":{"line":771,"character":50}}},"jsonrpc":"2.0","id":14}
2020-12-03 09:42:53.769038946 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":15,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":770,"character":50}}}
2020-12-03 09:42:53.769263126 [ThreadId 2313] - DocumentHighlight request at position 771:51 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:42:53.769428273 [ThreadId 2315] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:42:53.769618276 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":770,"character":37},"end":{"line":770,"character":54}}},{"kind":2,"range":{"start":{"line":779,"character":39},"end":{"line":779,"character":56}}},{"kind":2,"range":{"start":{"line":799,"character":20},"end":{"line":799,"character":37}}},{"kind":2,"range":{"start":{"line":805,"character":20},"end":{"line":805,"character":37}}},{"kind":2,"range":{"start":{"line":815,"character":17},"end":{"line":815,"character":34}}},{"kind":2,"range":{"start":{"line":826,"character":14},"end":{"line":826,"character":31}}},{"kind":2,"range":{"start":{"line":829,"character":0},"end":{"line":829,"character":17}}},{"kind":3,"range":{"start":{"line":831,"character":0},"end":{"line":831,"character":17}}},{"kind":2,"range":{"start":{"line":886,"character":37},"end":{"line":886,"character":54}}}],"jsonrpc":"2.0","id":15}
2020-12-03 09:42:54.164625218 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":770,"character":37},"end":{"line":770,"character":54}},"context":{"diagnostics":[]}}}
2020-12-03 09:42:54.165027155 [ThreadId 2320] - finish: CodeAction (took 0.00s)
2020-12-03 09:42:54.165197573 [ThreadId 2322] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 09:42:54.165440175 [ThreadId 2324] - finish: importLens (took 0.00s)
2020-12-03 09:42:54.16562728 [ThreadId 2326] - finish: retrie (took 0.00s)
2020-12-03 09:42:54.165766071 [ThreadId 2328] - finish: tactic (took 0.00s)
2020-12-03 09:42:54.165797055 [ThreadId 2330] - finish: tactic (took 0.00s)
2020-12-03 09:42:54.165876056 [ThreadId 2332] - finish: tactic (took 0.00s)
2020-12-03 09:42:54.165995284 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":16}
2020-12-03 09:42:54.539072136 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":770,"character":51}}}
2020-12-03 09:42:54.539190248 [ThreadId 2337] - GhcIde.hover entered (ideLogger)
2020-12-03 09:42:54.539286165 [ThreadId 2337] - Hover request at position 771:52 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:42:54.539477346 [ThreadId 2338] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:42:54.539479102 [ThreadId 2341] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:42:54.539733148 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nparseSimpleScript :: forall lang.\nSimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:832:1*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: SimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n"},"range":{"start":{"line":770,"character":37},"end":{"line":770,"character":54}}},"jsonrpc":"2.0","id":17}
2020-12-03 09:42:54.670905746 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":18,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":770,"character":51}}}
2020-12-03 09:42:54.671171977 [ThreadId 2345] - Definition request at position 771:52 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:42:54.671370766 [ThreadId 2346] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:42:54.671588701 [ThreadId 7] - <--2--{"result":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","range":{"start":{"line":831,"character":0},"end":{"line":831,"character":17}}},"jsonrpc":"2.0","id":18}
2020-12-03 09:42:54.975953632 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":19,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":770,"character":52}}}
2020-12-03 09:42:54.976150801 [ThreadId 2351] - Definition request at position 771:53 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:42:54.976315051 [ThreadId 2352] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:42:54.976413346 [ThreadId 7] - <--2--{"result":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","range":{"start":{"line":831,"character":0},"end":{"line":831,"character":17}}},"jsonrpc":"2.0","id":19}
2020-12-03 09:42:57.231361135 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":779,"character":39},"end":{"line":779,"character":56}},"context":{"diagnostics":[]}}}
2020-12-03 09:42:57.231843799 [ThreadId 2358] - finish: CodeAction (took 0.00s)
2020-12-03 09:42:57.23208821 [ThreadId 2360] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 09:42:57.232369764 [ThreadId 2362] - finish: importLens (took 0.00s)
2020-12-03 09:42:57.232616226 [ThreadId 2364] - finish: retrie (took 0.00s)
2020-12-03 09:42:57.232851411 [ThreadId 2366] - finish: tactic (took 0.00s)
2020-12-03 09:42:57.232959616 [ThreadId 2368] - finish: tactic (took 0.00s)
2020-12-03 09:42:57.233022548 [ThreadId 2370] - finish: tactic (took 0.00s)
2020-12-03 09:42:57.23321077 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":20}
2020-12-03 09:44:46.255050286 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":21,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":802,"character":69}}}
2020-12-03 09:44:46.25529755 [ThreadId 2375] - GhcIde.hover entered (ideLogger)
2020-12-03 09:44:46.255420414 [ThreadId 2375] - Hover request at position 803:70 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:44:46.255665838 [ThreadId 2377] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:44:46.255700389 [ThreadId 2379] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:44:46.255757573 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":795,"character":6},"end":{"line":822,"character":69}}},"jsonrpc":"2.0","id":21}
2020-12-03 09:44:46.702239139 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":22,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":802,"character":67}}}
2020-12-03 09:44:46.702363217 [ThreadId 2383] - GhcIde.hover entered (ideLogger)
2020-12-03 09:44:46.702440144 [ThreadId 2383] - Hover request at position 803:68 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:44:46.702597786 [ThreadId 2385] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:44:46.702623434 [ThreadId 2387] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:44:46.702708389 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":795,"character":6},"end":{"line":822,"character":69}}},"jsonrpc":"2.0","id":22}
2020-12-03 09:44:48.484778178 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":23,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":801,"character":49}}}
2020-12-03 09:44:48.484927404 [ThreadId 2391] - GhcIde.hover entered (ideLogger)
2020-12-03 09:44:48.48500642 [ThreadId 2391] - Hover request at position 802:50 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:44:48.485168049 [ThreadId 2392] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:44:48.485174134 [ThreadId 2394] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:44:48.48532316 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":795,"character":6},"end":{"line":822,"character":69}}},"jsonrpc":"2.0","id":23}
2020-12-03 09:44:50.156471616 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":24,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":809,"character":50}}}
2020-12-03 09:44:50.156629574 [ThreadId 2399] - GhcIde.hover entered (ideLogger)
2020-12-03 09:44:50.156711653 [ThreadId 2399] - Hover request at position 810:51 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:44:50.156922496 [ThreadId 2401] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:44:50.156936304 [ThreadId 2403] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:44:50.157016904 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nSimpleScriptV2InAllegra\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:430:6*\n\n\n\n"},"range":{"start":{"line":809,"character":37},"end":{"line":809,"character":60}}},"jsonrpc":"2.0","id":24}
2020-12-03 09:52:18.726414732 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":25,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":810,"character":55}}}
2020-12-03 09:52:18.726726393 [ThreadId 2407] - Definition request at position 811:56 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:52:18.727039959 [ThreadId 2408] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:52:18.727133628 [ThreadId 7] - <--2--{"result":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}},"jsonrpc":"2.0","id":25}
2020-12-03 09:52:18.881917024 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":810,"character":54}}}
2020-12-03 09:52:18.88210306 [ThreadId 2413] - GhcIde.hover entered (ideLogger)
2020-12-03 09:52:18.88220493 [ThreadId 2413] - Hover request at position 811:55 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:52:18.882370675 [ThreadId 2414] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:52:18.882382967 [ThreadId 2416] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:52:18.882490125 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nSimpleScriptV2\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:177:6*\n\n\n\n"},"range":{"start":{"line":810,"character":51},"end":{"line":810,"character":65}}},"jsonrpc":"2.0","id":26}
2020-12-03 09:52:35.91377379 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":27,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":810,"character":54}}}
2020-12-03 09:52:35.913946937 [ThreadId 2421] - GhcIde.hover entered (ideLogger)
2020-12-03 09:52:35.914023836 [ThreadId 2421] - Hover request at position 811:55 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:52:35.914163903 [ThreadId 2422] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:52:35.914214993 [ThreadId 2425] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:52:35.914440995 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nSimpleScriptV2\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:177:6*\n\n\n\n"},"range":{"start":{"line":810,"character":51},"end":{"line":810,"character":65}}},"jsonrpc":"2.0","id":27}
2020-12-03 09:53:31.189716588 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 09:53:31.190156924 [ThreadId 2430] - finish: CodeAction (took 0.00s)
2020-12-03 09:53:31.190267464 [ThreadId 2432] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 09:53:31.190443728 [ThreadId 2434] - finish: importLens (took 0.00s)
2020-12-03 09:53:31.190587876 [ThreadId 2436] - finish: retrie (took 0.00s)
2020-12-03 09:53:31.190722748 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":29,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 09:53:31.190842751 [ThreadId 2441] - finish: tactic (took 0.00s)
2020-12-03 09:53:31.19085343 [ThreadId 2443] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 09:53:31.190889801 [ThreadId 2445] - finish: tactic (took 0.00s)
2020-12-03 09:53:31.190932483 [ThreadId 2448] - finish: tactic (took 0.00s)
2020-12-03 09:53:31.191945998 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":29}
2020-12-03 09:53:31.194620598 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":28}
2020-12-03 09:53:31.548779584 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":30,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 09:53:31.548909517 [ThreadId 2453] - Plugin.makeCodeLens (ideLogger)
2020-12-03 09:53:31.549209234 [ThreadId 2454] - finish: codeLens (took 0.00s)
2020-12-03 09:53:31.549412809 [ThreadId 2456] - finish:  (took 0.00s)
2020-12-03 09:53:31.549770794 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"newText":"import Control.Applicative ( Alternative((<|>)) )"}]}}],"title":"import Control.Applicative ( Alternative((<|>)) )"},"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"newText":"import Control.Monad ( when )"}]}}],"title":"import Control.Monad ( when )"},"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"newText":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"}]}}],"title":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"newText":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"}]}}],"title":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"newText":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"}]}}],"title":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"jsonrpc":"2.0","id":30}
2020-12-03 09:53:39.970862512 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":31,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":777,"character":63}}}
2020-12-03 09:53:39.971017453 [ThreadId 2461] - GhcIde.hover entered (ideLogger)
2020-12-03 09:53:39.971127389 [ThreadId 2461] - Hover request at position 778:64 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:53:39.971252119 [ThreadId 2463] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:53:39.971369277 [ThreadId 2465] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:53:39.971440912 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":775,"character":14},"end":{"line":789,"character":69}}},"jsonrpc":"2.0","id":31}
2020-12-03 09:53:40.421783497 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":32,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":777,"character":65}}}
2020-12-03 09:53:40.421934875 [ThreadId 2469] - GhcIde.hover entered (ideLogger)
2020-12-03 09:53:40.422005804 [ThreadId 2469] - Hover request at position 778:66 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:53:40.422215261 [ThreadId 2471] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:53:40.422265882 [ThreadId 2473] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:53:40.422285635 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":775,"character":14},"end":{"line":789,"character":69}}},"jsonrpc":"2.0","id":32}
2020-12-03 09:53:42.140975747 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":33,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":781,"character":68}}}
2020-12-03 09:53:42.141130206 [ThreadId 2477] - GhcIde.hover entered (ideLogger)
2020-12-03 09:53:42.141211092 [ThreadId 2477] - Hover request at position 782:69 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:53:42.141363525 [ThreadId 2478] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:53:42.141391445 [ThreadId 2481] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:53:42.141482483 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":775,"character":14},"end":{"line":789,"character":69}}},"jsonrpc":"2.0","id":33}
2020-12-03 09:53:50.419642779 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":779,"character":31}}}
2020-12-03 09:53:50.419805802 [ThreadId 2485] - GhcIde.hover entered (ideLogger)
2020-12-03 09:53:50.419888137 [ThreadId 2485] - Hover request at position 780:32 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:53:50.420118965 [ThreadId 2487] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:53:50.42014919 [ThreadId 2489] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:53:50.420382684 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\ntoMinimumSimpleScriptVersion :: SimpleScript SimpleScriptV2 -> ScriptInAnyLang\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:785:7*\n\n\n\n"},"range":{"start":{"line":779,"character":6},"end":{"line":779,"character":34}}},"jsonrpc":"2.0","id":34}
2020-12-03 09:53:54.671484822 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":35,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":774,"character":28}}}
2020-12-03 09:53:54.671636472 [ThreadId 2493] - GhcIde.hover entered (ideLogger)
2020-12-03 09:53:54.671712656 [ThreadId 2493] - Hover request at position 775:29 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:53:54.671919338 [ThreadId 2495] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:53:54.671935388 [ThreadId 2497] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:53:54.672482164 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nScriptInAnyLang\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:323:1*\n\n\nSometimes it is necessary to handle all languages without making static\n type distinctions between languages. For example, when reading external\n input, or before the era context is known. \n\nUse  `toScriptInEra`  to convert to a script in the context of an era.\n\n\n\n"},"range":{"start":{"line":774,"character":18},"end":{"line":774,"character":33}}},"jsonrpc":"2.0","id":35}
2020-12-03 09:53:54.937079164 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":36,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":774,"character":31}}}
2020-12-03 09:53:54.937339451 [ThreadId 2501] - DocumentHighlight request at position 775:32 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:53:54.937547312 [ThreadId 2502] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:53:54.937743369 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":22,"character":4},"end":{"line":22,"character":19}}},{"kind":3,"range":{"start":{"line":322,"character":5},"end":{"line":322,"character":20}}},{"kind":2,"range":{"start":{"line":325,"character":24},"end":{"line":325,"character":39}}},{"kind":2,"range":{"start":{"line":327,"character":23},"end":{"line":327,"character":38}}},{"kind":2,"range":{"start":{"line":330,"character":12},"end":{"line":330,"character":27}}},{"kind":2,"range":{"start":{"line":344,"character":36},"end":{"line":344,"character":51}}},{"kind":2,"range":{"start":{"line":348,"character":22},"end":{"line":348,"character":37}}},{"kind":2,"range":{"start":{"line":349,"character":16},"end":{"line":349,"character":31}}},{"kind":2,"range":{"start":{"line":352,"character":25},"end":{"line":352,"character":40}}},{"kind":2,"range":{"start":{"line":376,"character":55},"end":{"line":376,"character":70}}},{"kind":2,"range":{"start":{"line":384,"character":63},"end":{"line":384,"character":78}}},{"kind":2,"range":{"start":{"line":391,"character":64},"end":{"line":391,"character":79}}},{"kind":2,"range":{"start":{"line":398,"character":25},"end":{"line":398,"character":40}}},{"kind":2,"range":{"start":{"line":513,"character":35},"end":{"line":513,"character":50}}},{"kind":2,"range":{"start":{"line":736,"character":16},"end":{"line":736,"character":31}}},{"kind":2,"range":{"start":{"line":774,"character":18},"end":{"line":774,"character":33}}}],"jsonrpc":"2.0","id":36}
2020-12-03 09:53:55.341974184 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":37,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":774,"character":18},"end":{"line":774,"character":33}},"context":{"diagnostics":[]}}}
2020-12-03 09:53:55.342298955 [ThreadId 2508] - finish: CodeAction (took 0.00s)
2020-12-03 09:53:55.342411522 [ThreadId 2510] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 09:53:55.342586911 [ThreadId 2512] - finish: importLens (took 0.00s)
2020-12-03 09:53:55.342726851 [ThreadId 2514] - finish: retrie (took 0.00s)
2020-12-03 09:53:55.342864691 [ThreadId 2516] - finish: tactic (took 0.00s)
2020-12-03 09:53:55.342911552 [ThreadId 2518] - finish: tactic (took 0.00s)
2020-12-03 09:53:55.342952718 [ThreadId 2520] - finish: tactic (took 0.00s)
2020-12-03 09:53:55.343029695 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":37}
2020-12-03 09:53:55.495717366 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":774,"character":31}}}
2020-12-03 09:53:55.49588485 [ThreadId 2525] - GhcIde.hover entered (ideLogger)
2020-12-03 09:53:55.495967187 [ThreadId 2525] - Hover request at position 775:32 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 09:53:55.496154328 [ThreadId 2527] - finish: C:GetHieAst (took 0.00s)
2020-12-03 09:53:55.496182817 [ThreadId 2529] - finish: C:GetDocMap (took 0.00s)
2020-12-03 09:53:55.496645786 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nScriptInAnyLang\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:323:1*\n\n\nSometimes it is necessary to handle all languages without making static\n type distinctions between languages. For example, when reading external\n input, or before the era context is known. \n\nUse  `toScriptInEra`  to convert to a script in the context of an era.\n\n\n\n"},"range":{"start":{"line":774,"character":18},"end":{"line":774,"character":33}}},"jsonrpc":"2.0","id":38}
2020-12-03 09:53:56.754941396 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":39,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":793,"character":15},"end":{"line":793,"character":15}},"context":{"diagnostics":[]}}}
2020-12-03 09:53:56.755294489 [ThreadId 2534] - finish: CodeAction (took 0.00s)
2020-12-03 09:53:56.755437024 [ThreadId 2536] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 09:53:56.755678991 [ThreadId 2538] - finish: importLens (took 0.00s)
2020-12-03 09:53:56.75582253 [ThreadId 2540] - finish: retrie (took 0.00s)
2020-12-03 09:53:56.755948541 [ThreadId 2542] - finish: tactic (took 0.00s)
2020-12-03 09:53:56.755992812 [ThreadId 2544] - finish: tactic (took 0.00s)
2020-12-03 09:53:56.756041359 [ThreadId 2546] - finish: tactic (took 0.00s)
2020-12-03 09:53:56.756122405 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":39}
2020-12-03 10:05:09.025622052 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":40,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":778,"character":40}}}
2020-12-03 10:05:09.025755391 [ThreadId 2551] - GhcIde.hover entered (ideLogger)
2020-12-03 10:05:09.02584679 [ThreadId 2551] - Hover request at position 779:41 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 10:05:09.0260302 [ThreadId 2552] - finish: C:GetHieAst (took 0.00s)
2020-12-03 10:05:09.026073755 [ThreadId 2555] - finish: C:GetDocMap (took 0.00s)
2020-12-03 10:05:09.026127926 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":775,"character":14},"end":{"line":789,"character":69}}},"jsonrpc":"2.0","id":40}
2020-12-03 10:36:56.356563226 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":41,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 10:36:56.357059453 [ThreadId 2560] - finish: CodeAction (took 0.00s)
2020-12-03 10:36:56.357187837 [ThreadId 2562] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 10:36:56.357343462 [ThreadId 2564] - finish: importLens (took 0.00s)
2020-12-03 10:36:56.357512078 [ThreadId 2566] - finish: retrie (took 0.00s)
2020-12-03 10:36:56.35779813 [ThreadId 2568] - finish: tactic (took 0.00s)
2020-12-03 10:36:56.35791099 [ThreadId 2570] - finish: tactic (took 0.00s)
2020-12-03 10:36:56.357928985 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":42,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 10:36:56.357955659 [ThreadId 2572] - finish: tactic (took 0.00s)
2020-12-03 10:36:56.358044065 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":41}
2020-12-03 10:36:56.358183792 [ThreadId 2578] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 10:36:56.359362073 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":42}
2020-12-03 10:36:56.55275577 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":43,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 10:36:56.552952073 [ThreadId 2583] - Plugin.makeCodeLens (ideLogger)
2020-12-03 10:36:56.553282162 [ThreadId 2584] - finish: codeLens (took 0.00s)
2020-12-03 10:36:56.553434474 [ThreadId 2586] - finish:  (took 0.00s)
2020-12-03 10:36:56.553798819 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"newText":"import Control.Applicative ( Alternative((<|>)) )"}]}}],"title":"import Control.Applicative ( Alternative((<|>)) )"},"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"newText":"import Control.Monad ( when )"}]}}],"title":"import Control.Monad ( when )"},"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"newText":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"}]}}],"title":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"newText":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"}]}}],"title":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"newText":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"}]}}],"title":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"jsonrpc":"2.0","id":43}
2020-12-03 10:36:56.561167041 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":44,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":793,"character":15},"end":{"line":793,"character":15}},"context":{"diagnostics":[]}}}
2020-12-03 10:36:56.561436989 [ThreadId 2592] - finish: CodeAction (took 0.00s)
2020-12-03 10:36:56.561506014 [ThreadId 2594] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 10:36:56.561645254 [ThreadId 2596] - finish: importLens (took 0.00s)
2020-12-03 10:36:56.561823247 [ThreadId 2598] - finish: retrie (took 0.00s)
2020-12-03 10:36:56.561940321 [ThreadId 2600] - finish: tactic (took 0.00s)
2020-12-03 10:36:56.562050813 [ThreadId 2602] - finish: tactic (took 0.00s)
2020-12-03 10:36:56.562144813 [ThreadId 2604] - finish: tactic (took 0.00s)
2020-12-03 10:36:56.562223512 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":44}
2020-12-03 10:37:08.950410307 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":45,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 10:37:08.950934673 [ThreadId 2610] - finish: CodeAction (took 0.00s)
2020-12-03 10:37:08.951062998 [ThreadId 2612] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 10:37:08.951358074 [ThreadId 2614] - finish: importLens (took 0.00s)
2020-12-03 10:37:08.95156152 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":46,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 10:37:08.95161959 [ThreadId 2616] - finish: retrie (took 0.00s)
2020-12-03 10:37:08.951874164 [ThreadId 2621] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 10:37:08.951921056 [ThreadId 2624] - finish: tactic (took 0.00s)
2020-12-03 10:37:08.951975755 [ThreadId 2626] - finish: tactic (took 0.00s)
2020-12-03 10:37:08.952024385 [ThreadId 2628] - finish: tactic (took 0.00s)
2020-12-03 10:37:08.952810887 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":46}
2020-12-03 10:37:08.954880767 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":45}
2020-12-03 10:37:09.149699339 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":47,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 10:37:09.149887148 [ThreadId 2633] - Plugin.makeCodeLens (ideLogger)
2020-12-03 10:37:09.150341625 [ThreadId 2634] - finish: codeLens (took 0.00s)
2020-12-03 10:37:09.150555174 [ThreadId 2636] - finish:  (took 0.00s)
2020-12-03 10:37:09.151023034 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"newText":"import Control.Applicative ( Alternative((<|>)) )"}]}}],"title":"import Control.Applicative ( Alternative((<|>)) )"},"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"newText":"import Control.Monad ( when )"}]}}],"title":"import Control.Monad ( when )"},"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"newText":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"}]}}],"title":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"newText":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"}]}}],"title":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"newText":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"}]}}],"title":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"jsonrpc":"2.0","id":47}
2020-12-03 10:37:09.151855345 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":793,"character":15},"end":{"line":793,"character":15}},"context":{"diagnostics":[]}}}
2020-12-03 10:37:09.152075087 [ThreadId 2642] - finish: CodeAction (took 0.00s)
2020-12-03 10:37:09.152126115 [ThreadId 2644] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 10:37:09.152250166 [ThreadId 2646] - finish: importLens (took 0.00s)
2020-12-03 10:37:09.152379251 [ThreadId 2648] - finish: retrie (took 0.00s)
2020-12-03 10:37:09.152519447 [ThreadId 2650] - finish: tactic (took 0.00s)
2020-12-03 10:37:09.15256762 [ThreadId 2652] - finish: tactic (took 0.00s)
2020-12-03 10:37:09.152612652 [ThreadId 2654] - finish: tactic (took 0.00s)
2020-12-03 10:37:09.152696895 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":48}
2020-12-03 10:37:59.215175251 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 10:37:59.215318756 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}
2020-12-03 10:37:59.21545865 [ThreadId 25] - Set files of interest to: []
2020-12-03 10:37:59.215592124 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 10:37:59.222367145 [ThreadId 2922] - Typechecking reverse dependencies forNormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs": [NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]
2020-12-03 10:37:59.239056506 [ThreadId 3086] - finish: ParentTC (took 0.02s)
2020-12-03 13:02:29.930914956 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE DerivingVia #-}\n{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE TypeFamilies #-}\n\nmodule Cardano.Api.Script (\n    -- * Languages\n    SimpleScriptV1,\n    SimpleScriptV2,\n    ScriptLanguage(..),\n    SimpleScriptVersion(..),\n    PlutusScriptVersion,\n    AnyScriptLanguage(..),\n    IsScriptLanguage(..),\n    IsSimpleScriptLanguage(..),\n\n    -- * Scripts in a specific language\n    Script(..),\n\n    -- * Scripts in any language\n    ScriptInAnyLang(..),\n    toScriptInAnyLang,\n\n    -- * Scripts in an era\n    ScriptInEra(..),\n    toScriptInEra,\n    eraOfScriptInEra,\n\n    -- ** Languages supported in each era\n    ScriptLanguageInEra(..),\n    scriptLanguageSupportedInEra,\n    languageOfScriptLanguageInEra,\n    eraOfScriptLanguageInEra,\n\n    -- * The simple script language\n    SimpleScript(..),\n    TimeLocksSupported(..),\n    timeLocksSupported,\n    adjustSimpleScriptVersion,\n\n    -- * Script hashes\n    ScriptHash(..),\n    hashScript,\n\n    -- * Internal conversion functions\n    toShelleyScript,\n    toShelleyMultiSig,\n    fromShelleyMultiSig,\n    toAllegraTimelock,\n    fromAllegraTimelock,\n    toShelleyScriptHash,\n    fromShelleyScriptHash,\n\n    -- * Data family instances\n    AsType(..)\n  ) where\n\nimport           Prelude\n\nimport qualified Data.ByteString.Lazy as LBS\nimport           Data.Foldable (toList)\nimport           Data.Scientific (toBoundedInteger)\nimport           Data.String (IsString)\nimport           Data.Text (Text)\nimport qualified Data.Text as Text\nimport qualified Data.Text.Encoding as Text\nimport           Data.Type.Equality (TestEquality(..), (:~:)(Refl))\n\nimport           Data.Aeson (Value (..), object, (.:), (.=))\nimport qualified Data.Aeson as Aeson\nimport qualified Data.Aeson.Types as Aeson\nimport qualified Data.Sequence.Strict as Seq\nimport           Data.Vector (Vector)\nimport qualified Data.Vector as Vector\n\nimport           Control.Applicative\nimport           Control.Monad\n\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\nimport qualified Cardano.Crypto.Hash.Class as Crypto\n\nimport           Cardano.Slotting.Slot (SlotNo)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era  as Ledger\n\nimport qualified Cardano.Ledger.ShelleyMA.Timelocks as Timelock\nimport           Ouroboros.Consensus.Shelley.Eras\n                   (StandardAllegra, StandardCrypto, StandardShelley)\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Scripts as Shelley\n\nimport           Cardano.Api.Eras\nimport           Cardano.Api.Hash\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseJSON\nimport           Cardano.Api.SerialiseRaw\nimport           Cardano.Api.SerialiseTextEnvelope\n\n{- HLINT ignore \"Use section\" -}\n\n\n-- ----------------------------------------------------------------------------\n-- Types for script language and version\n--\n\n-- | The original simple script language which supports\n--\n-- * require a signature from a given key (by verification key hash)\n-- * n-way and combinator\n-- * n-way or combinator\n-- * m-of-n combinator\n--\n-- This version of the language was introduced in the 'ShelleyEra'.\n--\ndata SimpleScriptV1\n\n-- | The second version of the simple script language. It has all the features\n-- of 'SimpleScriptV1' plus new atomic predicates:\n--\n-- * require the time be before a given slot number\n-- * require the time be after a given slot number\n--\n-- This version of the language was introduced in the 'AllegraEra'.\n--\ndata SimpleScriptV2\n\n-- | Place holder type to show what the pattern is to extend to multiple\n-- languages, not just multiple versions of a single language.\n--\ndata PlutusScriptV1\n\ninstance HasTypeProxy SimpleScriptV1 where\n    data AsType SimpleScriptV1 = AsSimpleScriptV1\n    proxyToAsType _ = AsSimpleScriptV1\n\ninstance HasTypeProxy SimpleScriptV2 where\n    data AsType SimpleScriptV2 = AsSimpleScriptV2\n    proxyToAsType _ = AsSimpleScriptV2\n\ninstance HasTypeProxy PlutusScriptV1 where\n    data AsType PlutusScriptV1 = AsPlutusScriptV1\n    proxyToAsType _ = AsPlutusScriptV1\n\n\n-- ----------------------------------------------------------------------------\n-- Value level representation for script languages\n--\ndata ScriptLanguage lang where\n\n     SimpleScriptLanguage :: SimpleScriptVersion lang -> ScriptLanguage lang\n\n     PlutusScriptLanguage :: PlutusScriptVersion lang -> ScriptLanguage lang\n\nderiving instance (Eq   (ScriptLanguage lang))\nderiving instance (Show (ScriptLanguage lang))\n\ninstance TestEquality ScriptLanguage where\n    testEquality (SimpleScriptLanguage lang)\n                 (SimpleScriptLanguage lang') = testEquality lang lang'\n\n    testEquality (PlutusScriptLanguage lang)\n                 (PlutusScriptLanguage lang') = testEquality lang lang'\n\n    testEquality  _ _ = Nothing\n\n\ndata SimpleScriptVersion lang where\n\n     SimpleScriptV1 :: SimpleScriptVersion SimpleScriptV1\n     SimpleScriptV2 :: SimpleScriptVersion SimpleScriptV2\n\nderiving instance (Eq   (SimpleScriptVersion lang))\nderiving instance (Show (SimpleScriptVersion lang))\n\ninstance TestEquality SimpleScriptVersion where\n    testEquality SimpleScriptV1 SimpleScriptV1 = Just Refl\n    testEquality SimpleScriptV2 SimpleScriptV2 = Just Refl\n    testEquality _              _              = Nothing\n\n\ndata PlutusScriptVersion lang\n  -- For now, there are no such versions, but it'd be like this:\n  -- PlutusScriptV1 :: PlutusScriptVersion PlutusScriptV1\n\nderiving instance (Eq   (PlutusScriptVersion lang))\nderiving instance (Show (PlutusScriptVersion lang))\n\ninstance TestEquality PlutusScriptVersion where\n    testEquality lang = case lang of {}\n\n\ndata AnyScriptLanguage where\n     AnyScriptLanguage :: ScriptLanguage lang -> AnyScriptLanguage\n\nderiving instance (Show AnyScriptLanguage)\n\ninstance Eq AnyScriptLanguage where\n    AnyScriptLanguage lang == AnyScriptLanguage lang' =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> True -- since no constructors share types\n\ninstance Enum AnyScriptLanguage where\n    toEnum 0 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    toEnum 1 = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n    toEnum _ = error \"AnyScriptLanguage.toEnum: bad argument\"\n\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)) = 0\n    fromEnum (AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)) = 1\n    fromEnum (AnyScriptLanguage (PlutusScriptLanguage lang)) = case lang of {}\n\ninstance Bounded AnyScriptLanguage where\n    minBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV1)\n    maxBound = AnyScriptLanguage (SimpleScriptLanguage SimpleScriptV2)\n\n\nclass HasTypeProxy lang => IsScriptLanguage lang where\n    scriptLanguage :: ScriptLanguage lang\n\ninstance IsScriptLanguage SimpleScriptV1 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV1\n\ninstance IsScriptLanguage SimpleScriptV2 where\n    scriptLanguage = SimpleScriptLanguage SimpleScriptV2\n\n--instance IsScriptLanguage PlutusScriptV1 where\n--    scriptLanguage = PlutusScriptLanguage PlutusScriptV1\n\n\nclass IsScriptLanguage lang => IsSimpleScriptLanguage lang where\n    simpleScriptVersion :: SimpleScriptVersion lang\n\ninstance IsSimpleScriptLanguage SimpleScriptV1 where\n    simpleScriptVersion = SimpleScriptV1\n\ninstance IsSimpleScriptLanguage SimpleScriptV2 where\n    simpleScriptVersion = SimpleScriptV2\n\n\n\n-- ----------------------------------------------------------------------------\n-- Script type: covering all script languages\n--\n\n-- | A script in a particular language.\n--\n-- See also 'ScriptInAnyLang' for a script in any of the languages that is available within\n-- a particular era.\n--\n-- See also 'ScriptInEra' for a script in a language that is available within\n-- a particular era.\n--\ndata Script lang where\n\n     SimpleScript :: !(SimpleScriptVersion lang)\n                  -> !(SimpleScript lang)\n                  -> Script lang\n\n     -- Place holder type to show what the pattern is to extend to multiple\n     -- languages, not just multiple versions of a single language.\n     -- For now there are no values of PlutusScriptVersion so this branch\n     -- is inaccessible.\n     PlutusScript :: !(PlutusScriptVersion lang)\n                  -> ()\n                  -> Script lang\n\nderiving instance (Eq   (Script lang))\nderiving instance (Show (Script lang))\n\ninstance HasTypeProxy lang => HasTypeProxy (Script lang) where\n    data AsType (Script lang) = AsScript (AsType lang)\n    proxyToAsType _ = AsScript (proxyToAsType (Proxy :: Proxy lang))\n\ninstance IsScriptLanguage lang => SerialiseAsCBOR (Script lang) where\n    serialiseToCBOR (SimpleScript SimpleScriptV1 s) =\n      CBOR.serialize' (toShelleyMultiSig s)\n\n    serialiseToCBOR (SimpleScript SimpleScriptV2 s) =\n      CBOR.serialize' (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    deserialiseFromCBOR _ bs =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 ->\n              SimpleScript SimpleScriptV1\n            . fromShelleyMultiSig\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        SimpleScriptLanguage SimpleScriptV2 ->\n              SimpleScript SimpleScriptV2\n            . (fromAllegraTimelock TimeLocksInSimpleScriptV2\n                                :: Timelock.Timelock StandardAllegra\n                                -> SimpleScript SimpleScriptV2)\n          <$> CBOR.decodeAnnotator \"Script\" fromCBOR (LBS.fromStrict bs)\n\n        PlutusScriptLanguage v -> case v of {}\n\n\ninstance IsScriptLanguage lang => HasTextEnvelope (Script lang) where\n    textEnvelopeType _ =\n      case scriptLanguage :: ScriptLanguage lang of\n        SimpleScriptLanguage SimpleScriptV1 -> \"SimpleScriptV1\"\n        SimpleScriptLanguage SimpleScriptV2 -> \"SimpleScriptV2\"\n        PlutusScriptLanguage v -> case v of {}\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in any language\n--\n\n-- | Sometimes it is necessary to handle all languages without making static\n-- type distinctions between languages. For example, when reading external\n-- input, or before the era context is known.\n--\n-- Use 'toScriptInEra' to convert to a script in the context of an era.\n--\ndata ScriptInAnyLang where\n     ScriptInAnyLang :: ScriptLanguage lang\n                     -> Script lang\n                     -> ScriptInAnyLang\n\nderiving instance Show ScriptInAnyLang\n\n-- The GADT in the ScriptInAnyLang constructor requires a custom Eq instance\ninstance Eq ScriptInAnyLang where\n    (==) (ScriptInAnyLang lang  script)\n         (ScriptInAnyLang lang' script') =\n      case testEquality lang lang' of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\n-- | Convert a script in a specific statically-known language to a\n-- 'ScriptInAnyLang'.\n--\n-- No inverse to this is provided, just do case analysis on the 'ScriptLanguage'\n-- field within the 'ScriptInAnyLang' constructor.\n--\ntoScriptInAnyLang :: Script lang -> ScriptInAnyLang\ntoScriptInAnyLang s@(SimpleScript v _) =\n    ScriptInAnyLang (SimpleScriptLanguage v) s\n\ninstance HasTypeProxy ScriptInAnyLang where\n    data AsType ScriptInAnyLang = AsScriptInAnyLang\n    proxyToAsType _ = AsScriptInAnyLang\n\ninstance SerialiseAsCBOR ScriptInAnyLang where\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript _v s)) =\n      -- Note that the CBOR encoding here is compatible with the previous\n      -- serialisation format for the @Script@ type from @cardano-ledger-specs@.\n      --\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 0\n       <> toCBOR (toShelleyMultiSig s)\n\n    serialiseToCBOR (ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript _v s)) =\n      CBOR.serializeEncoding' $\n          CBOR.encodeListLen 2\n       <> CBOR.encodeWord 1\n       <> toCBOR (toAllegraTimelock s :: Timelock.Timelock StandardAllegra)\n\n    serialiseToCBOR (ScriptInAnyLang (PlutusScriptLanguage v) _) = case v of {}\n\n    deserialiseFromCBOR AsScriptInAnyLang bs =\n        CBOR.decodeAnnotator \"Script\" decodeScript (LBS.fromStrict bs)\n      where\n        decodeScript :: CBOR.Decoder s (CBOR.Annotator ScriptInAnyLang)\n        decodeScript = do\n          CBOR.decodeListLenOf 2\n          tag <- CBOR.decodeWord8\n\n          case tag of\n            0 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Shelley.MultiSig StandardShelley -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                        . SimpleScript SimpleScriptV1\n                        . fromShelleyMultiSig\n\n            1 -> fmap (fmap convert) fromCBOR\n              where\n                convert :: Timelock.Timelock StandardAllegra -> ScriptInAnyLang\n                convert = ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                        . SimpleScript SimpleScriptV2\n                        . fromAllegraTimelock TimeLocksInSimpleScriptV2\n\n            _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag \"Script\" tag\n\ninstance HasTextEnvelope ScriptInAnyLang where\n    textEnvelopeType _ = \"Script\"\n\n\n-- ----------------------------------------------------------------------------\n-- Scripts in the context of a ledger era\n--\n\ndata ScriptInEra era where\n     ScriptInEra :: ScriptLanguageInEra lang era\n                 -> Script lang\n                 -> ScriptInEra era\n\nderiving instance Show (ScriptInEra era)\n\n-- The GADT in the ScriptInEra constructor requires a custom instance\ninstance Eq (ScriptInEra era) where\n    (==) (ScriptInEra langInEra  script)\n         (ScriptInEra langInEra' script') =\n      case testEquality (languageOfScriptLanguageInEra langInEra)\n                        (languageOfScriptLanguageInEra langInEra') of\n        Nothing   -> False\n        Just Refl -> script == script'\n\n\ndata ScriptLanguageInEra lang era where\n\n     SimpleScriptV1InShelley :: ScriptLanguageInEra SimpleScriptV1 ShelleyEra\n     SimpleScriptV1InAllegra :: ScriptLanguageInEra SimpleScriptV1 AllegraEra\n     SimpleScriptV1InMary    :: ScriptLanguageInEra SimpleScriptV1 MaryEra\n\n     SimpleScriptV2InAllegra :: ScriptLanguageInEra SimpleScriptV2 AllegraEra\n     SimpleScriptV2InMary    :: ScriptLanguageInEra SimpleScriptV2 MaryEra\n\nderiving instance Eq   (ScriptLanguageInEra lang era)\nderiving instance Show (ScriptLanguageInEra lang era)\n\ninstance HasTypeProxy era => HasTypeProxy (ScriptInEra era) where\n    data AsType (ScriptInEra era) = AsScriptInEra (AsType era)\n    proxyToAsType _ = AsScriptInEra (proxyToAsType (Proxy :: Proxy era))\n\ninstance IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era) where\n    serialiseToCBOR (ScriptInEra _lang s) =\n      serialiseToCBOR (toScriptInAnyLang s)\n\n    deserialiseFromCBOR (AsScriptInEra _) bs = do\n      s@(ScriptInAnyLang lang _) <- deserialiseFromCBOR AsScriptInAnyLang bs\n      case toScriptInEra cardanoEra s of\n        Just s' -> Right s'\n        Nothing ->\n          Left $ CBOR.DecoderErrorCustom\n                 (Text.pack (show (cardanoEra :: CardanoEra era)) <> \" Script\")\n                 (\"Script language \" <> Text.pack (show lang) <>\n                  \" not supported in this era\")\n\ninstance IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era) where\n    textEnvelopeType _ =\n      case shelleyBasedEra :: ShelleyBasedEra era of\n        ShelleyBasedEraShelley -> \"ScriptInEra ShelleyEra\"\n        ShelleyBasedEraAllegra -> \"ScriptInEra AllegraEra\"\n        ShelleyBasedEraMary    -> \"ScriptInEra MaryEra\"\n\n\n-- | Check if a given script language is supported in a given era, and if so\n-- return the evidence.\n--\nscriptLanguageSupportedInEra :: CardanoEra era\n                             -> ScriptLanguage lang\n                             -> Maybe (ScriptLanguageInEra lang era)\nscriptLanguageSupportedInEra era lang =\n    case (era, lang) of\n      (ShelleyEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InShelley\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV1) ->\n        Just SimpleScriptV1InMary\n\n      (AllegraEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InAllegra\n\n      (MaryEra, SimpleScriptLanguage SimpleScriptV2) ->\n        Just SimpleScriptV2InMary\n\n      _ -> Nothing\n\nlanguageOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                              -> ScriptLanguage lang\nlanguageOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InAllegra -> SimpleScriptLanguage SimpleScriptV1\n      SimpleScriptV1InMary    -> SimpleScriptLanguage SimpleScriptV1\n\n      SimpleScriptV2InAllegra -> SimpleScriptLanguage SimpleScriptV2\n      SimpleScriptV2InMary    -> SimpleScriptLanguage SimpleScriptV2\n\neraOfScriptLanguageInEra :: ScriptLanguageInEra lang era\n                         -> ShelleyBasedEra era\neraOfScriptLanguageInEra langInEra =\n    case langInEra of\n      SimpleScriptV1InShelley -> ShelleyBasedEraShelley\n\n      SimpleScriptV1InAllegra -> ShelleyBasedEraAllegra\n      SimpleScriptV2InAllegra -> ShelleyBasedEraAllegra\n\n      SimpleScriptV1InMary    -> ShelleyBasedEraMary\n      SimpleScriptV2InMary    -> ShelleyBasedEraMary\n\n\n-- | Given a target era and a script in some language, check if the language is\n-- supported in that era, and if so return a 'ScriptInEra'.\n--\ntoScriptInEra :: CardanoEra era -> ScriptInAnyLang -> Maybe (ScriptInEra era)\ntoScriptInEra era (ScriptInAnyLang lang s) = do\n    lang' <- scriptLanguageSupportedInEra era lang\n    return (ScriptInEra lang' s)\n\neraOfScriptInEra :: ScriptInEra era -> ShelleyBasedEra era\neraOfScriptInEra (ScriptInEra langInEra _) = eraOfScriptLanguageInEra langInEra\n\n\n-- ----------------------------------------------------------------------------\n-- Script Hash\n--\n\n-- | We have this type separate from the 'Hash' type to avoid the script\n-- hash type being parametrised by the era. The representation is era\n-- independent, and there are many places where we want to use a script\n-- hash where we don't want things to be era-parametrised.\n--\nnewtype ScriptHash = ScriptHash (Shelley.ScriptHash StandardShelley)\n  deriving stock (Eq, Ord)\n  deriving (Show, IsString) via UsingRawBytesHex ScriptHash\n\ninstance HasTypeProxy ScriptHash where\n    data AsType ScriptHash = AsScriptHash\n    proxyToAsType _ = AsScriptHash\n\ninstance SerialiseAsRawBytes ScriptHash where\n    serialiseToRawBytes (ScriptHash (Shelley.ScriptHash h)) =\n      Crypto.hashToBytes h\n\n    deserialiseFromRawBytes AsScriptHash bs =\n      ScriptHash . Shelley.ScriptHash <$> Crypto.hashFromBytes bs\n\n\nhashScript :: Script lang -> ScriptHash\nhashScript (SimpleScript SimpleScriptV1 s) =\n    -- For V1, we convert to the Shelley-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . Shelley.hashMultiSigScript\n  . toShelleyMultiSig\n  $ s\n\nhashScript (SimpleScript SimpleScriptV2 s) =\n    -- For V1, we convert to the Allegra-era version specifically and hash that.\n    -- Later ledger eras have to be compatible anyway.\n    ScriptHash\n  . coerceShelleyScriptHash\n  . Timelock.hashTimelockScript\n  . (toAllegraTimelock :: SimpleScript SimpleScriptV2\n                       -> Timelock.Timelock StandardAllegra)\n  $ s\n\n\ntoShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                    => ScriptHash -> Shelley.ScriptHash ledgerera\ntoShelleyScriptHash (ScriptHash h) = coerceShelleyScriptHash h\n\nfromShelleyScriptHash :: Ledger.Crypto ledgerera ~ StandardCrypto\n                      => Shelley.ScriptHash ledgerera -> ScriptHash\nfromShelleyScriptHash = ScriptHash . coerceShelleyScriptHash\n\ncoerceShelleyScriptHash :: Ledger.Crypto ledgereraA ~ Ledger.Crypto ledgereraB\n                        => Shelley.ScriptHash ledgereraA\n                        -> Shelley.ScriptHash ledgereraB\ncoerceShelleyScriptHash (Shelley.ScriptHash h) =\n    Shelley.ScriptHash (Crypto.castHash h)\n\n\n-- ----------------------------------------------------------------------------\n-- The simple native script language\n--\n\ndata SimpleScript lang where\n\n     RequireSignature  :: !(Hash PaymentKey)\n                       -> SimpleScript lang\n\n     RequireTimeBefore :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireTimeAfter  :: !(TimeLocksSupported lang)\n                       -> !SlotNo\n                       -> SimpleScript lang\n\n     RequireAllOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireAnyOf      ::        [SimpleScript lang] -> SimpleScript lang\n     RequireMOf        :: Int -> [SimpleScript lang] -> SimpleScript lang\n\nderiving instance Eq   (SimpleScript lang)\nderiving instance Show (SimpleScript lang)\n\n\n-- | Time lock feature in the 'SimpleScript' language.\n--\n-- The constructors of this type serve as evidence that the timelocks feature\n-- is supported in particular versions of the language.\n--\ndata TimeLocksSupported lang where\n     TimeLocksInSimpleScriptV2 :: TimeLocksSupported SimpleScriptV2\n\nderiving instance Eq   (TimeLocksSupported lang)\nderiving instance Show (TimeLocksSupported lang)\n\ntimeLocksSupported :: SimpleScriptVersion lang\n                   -> Maybe (TimeLocksSupported lang)\ntimeLocksSupported SimpleScriptV1 = Nothing\ntimeLocksSupported SimpleScriptV2 = Just TimeLocksInSimpleScriptV2\n\n\n-- | Try converting the 'SimpleScript' into a different version of the language.\n--\n-- This will work when the script only uses the features of the target language\n-- version. For example converting from 'SimpleScriptV2' to 'SimpleScriptV1'\n-- will work if the script happens not to use time locks feature. On the other\n-- hand converting 'SimpleScriptV1' to 'SimpleScriptV2' will always work because\n-- it is backwards compatible.\n--\nadjustSimpleScriptVersion :: SimpleScriptVersion lang'\n                          -> SimpleScript lang\n                          -> Maybe (SimpleScript lang')\nadjustSimpleScriptVersion target = go\n  where\n    go (RequireSignature sig) = pure (RequireSignature sig)\n\n    go (RequireTimeBefore _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeBefore supported slot)\n\n    go (RequireTimeAfter _ slot) = do\n      supported <- timeLocksSupported target\n      pure (RequireTimeAfter supported slot)\n\n    go (RequireAllOf ss) = RequireAllOf <$> traverse go ss\n    go (RequireAnyOf ss) = RequireAnyOf <$> traverse go ss\n    go (RequireMOf m ss) = RequireMOf m <$> traverse go ss\n\n\n-- ----------------------------------------------------------------------------\n-- Conversion functions\n--\n\ntoShelleyScript :: ScriptInEra era -> Ledger.Script (ShelleyLedgerEra era)\ntoShelleyScript (ScriptInEra langInEra (SimpleScript _ script)) =\n    case langInEra of\n      SimpleScriptV1InShelley -> toShelleyMultiSig script\n\n      SimpleScriptV1InAllegra -> toAllegraTimelock script\n      SimpleScriptV1InMary    -> toAllegraTimelock script\n      SimpleScriptV2InAllegra -> toAllegraTimelock script\n      SimpleScriptV2InMary    -> toAllegraTimelock script\n\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\ntoShelleyMultiSig :: SimpleScript SimpleScriptV1\n                  -> Shelley.MultiSig StandardShelley\ntoShelleyMultiSig = go\n  where\n    go :: SimpleScript SimpleScriptV1 -> Shelley.MultiSig StandardShelley\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Shelley.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Shelley.RequireAllOf (map go s)\n    go (RequireAnyOf s) = Shelley.RequireAnyOf (map go s)\n    go (RequireMOf m s) = Shelley.RequireMOf m (map go s)\n\n-- | Conversion for the 'Shelley.MultiSig' language used by the Shelley era.\n--\nfromShelleyMultiSig :: Shelley.MultiSig StandardShelley -> SimpleScript lang\nfromShelleyMultiSig = go\n  where\n    go (Shelley.RequireSignature kh)\n                                = RequireSignature\n                                    (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Shelley.RequireAllOf s) = RequireAllOf (map go s)\n    go (Shelley.RequireAnyOf s) = RequireAnyOf (map go s)\n    go (Shelley.RequireMOf m s) = RequireMOf m (map go s)\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\ntoAllegraTimelock :: forall lang ledgerera.\n                     (Ledger.Era ledgerera,\n                      Ledger.Crypto ledgerera ~ StandardCrypto)\n                  => SimpleScript lang -> Timelock.Timelock ledgerera\ntoAllegraTimelock = go\n  where\n    go :: SimpleScript lang -> Timelock.Timelock ledgerera\n    go (RequireSignature (PaymentKeyHash kh))\n                        = Timelock.RequireSignature (Shelley.coerceKeyRole kh)\n    go (RequireAllOf s) = Timelock.RequireAllOf (Seq.fromList (map go s))\n    go (RequireAnyOf s) = Timelock.RequireAnyOf (Seq.fromList (map go s))\n    go (RequireMOf m s) = Timelock.RequireMOf m (Seq.fromList (map go s))\n    go (RequireTimeBefore _ t) = Timelock.RequireTimeExpire t\n    go (RequireTimeAfter  _ t) = Timelock.RequireTimeStart  t\n\n-- | Conversion for the 'Timelock.Timelock' language that is shared between the\n-- Allegra and Mary eras.\n--\nfromAllegraTimelock ::    (Ledger.Era ledgerera,\n                           Ledger.Crypto ledgerera ~ StandardCrypto)\n                       => TimeLocksSupported lang\n                       -> Timelock.Timelock ledgerera\n                       -> SimpleScript lang\nfromAllegraTimelock timelocks = go\n  where\n    go (Timelock.RequireSignature kh) = RequireSignature\n                                          (PaymentKeyHash (Shelley.coerceKeyRole kh))\n    go (Timelock.RequireTimeExpire t) = RequireTimeBefore timelocks t\n    go (Timelock.RequireTimeStart  t) = RequireTimeAfter  timelocks t\n    go (Timelock.RequireAllOf      s) = RequireAllOf (map go (toList s))\n    go (Timelock.RequireAnyOf      s) = RequireAnyOf (map go (toList s))\n    go (Timelock.RequireMOf      i s) = RequireMOf i (map go (toList s))\n\n\n-- ----------------------------------------------------------------------------\n-- JSON serialisation\n--\n\ninstance ToJSON (Script lang) where\n  toJSON (SimpleScript _ script) = toJSON script\n\ninstance ToJSON ScriptInAnyLang where\n  toJSON (ScriptInAnyLang _ script) = toJSON script\n\ninstance ToJSON (ScriptInEra era) where\n  toJSON (ScriptInEra _ script) = toJSON script\n\ninstance ToJSON (SimpleScript lang) where\n  toJSON (RequireSignature pKeyHash) =\n    object [ \"type\"    .= String \"sig\"\n           , \"keyHash\" .= Text.decodeUtf8 (serialiseToRawBytesHex pKeyHash)\n           ]\n  toJSON (RequireTimeBefore _ slot) =\n    object [ \"type\" .= String \"before\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireTimeAfter _ slot) =\n    object [ \"type\" .= String \"after\"\n           , \"slot\" .= slot\n           ]\n  toJSON (RequireAnyOf reqScripts) =\n    object [ \"type\" .= String \"any\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireAllOf reqScripts) =\n    object [ \"type\" .= String \"all\", \"scripts\" .= map toJSON reqScripts ]\n  toJSON (RequireMOf reqNum reqScripts) =\n    object [ \"type\" .= String \"atLeast\"\n           , \"required\" .= reqNum\n           , \"scripts\" .= map toJSON reqScripts\n           ]\n\n\ninstance IsScriptLanguage lang => FromJSON (Script lang) where\n  parseJSON v =\n    case scriptLanguage :: ScriptLanguage lang of\n      SimpleScriptLanguage lang -> SimpleScript lang <$>\n                                     parseSimpleScript lang v\n      PlutusScriptLanguage lang -> case lang of {}\n\n\ninstance FromJSON ScriptInAnyLang where\n  parseJSON v =\n      -- The SimpleScript language has the property that it is backwards\n      -- compatible, so we can parse as the latest version and then downgrade\n      -- to the minimum version that has all the features actually used.\n      toMinimumSimpleScriptVersion <$> parseSimpleScript SimpleScriptV2 v\n    where\n      --TODO: this will need to be adjusted when more versions are added\n      -- with appropriate helper functions it can probably be done in an\n      -- era-generic style\n      toMinimumSimpleScriptVersion s =\n        case adjustSimpleScriptVersion SimpleScriptV1 s of\n          Nothing -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV2)\n                                     (SimpleScript SimpleScriptV2 s)\n          Just s' -> ScriptInAnyLang (SimpleScriptLanguage SimpleScriptV1)\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsCardanoEra era => FromJSON (ScriptInEra era) where\n  parseJSON v =\n    case cardanoEra :: CardanoEra era of\n      ByronEra   -> fail \"Scripts are not supported in the Byron era\"\n\n      ShelleyEra -> ScriptInEra SimpleScriptV1InShelley\n                  . SimpleScript SimpleScriptV1\n                <$> parseSimpleScript SimpleScriptV1 v\n\n      --TODO: this will need to be adjusted when more versions are added.\n      -- It can probably be done in an era-generic style, with the use of\n      -- appropriate helper functions.\n      AllegraEra -> toMinimumSimpleScriptVersion\n                <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InAllegra\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InAllegra\n                                     (SimpleScript SimpleScriptV1 s')\n\n      MaryEra -> toMinimumSimpleScriptVersion\n             <$> parseSimpleScript SimpleScriptV2 v\n        where\n          toMinimumSimpleScriptVersion s =\n            case adjustSimpleScriptVersion SimpleScriptV1 s of\n              Nothing -> ScriptInEra SimpleScriptV2InMary\n                                     (SimpleScript SimpleScriptV2 s)\n              Just s' -> ScriptInEra SimpleScriptV1InMary\n                                     (SimpleScript SimpleScriptV1 s')\n\n\ninstance IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang) where\n  parseJSON = parseSimpleScript simpleScriptVersion\n\n\nparseSimpleScript :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseSimpleScript lang v = parseScriptSig          v\n                       <|> parseScriptBefore  lang v\n                       <|> parseScriptAfter   lang v\n                       <|> parseScriptAny     lang v\n                       <|> parseScriptAll     lang v\n                       <|> parseScriptAtLeast lang v\n\nparseScriptAny :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAny lang =\n    Aeson.withObject \"any\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"any\" -> do vs <- obj .: \"scripts\"\n                    RequireAnyOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"any\\\" script value not found\"\n\nparseScriptAll :: SimpleScriptVersion lang\n               -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAll lang =\n    Aeson.withObject \"all\" $ \\obj -> do\n      t <- obj .: \"type\"\n      case t :: Text of\n        \"all\" -> do vs <- obj .: \"scripts\"\n                    RequireAllOf <$> gatherSimpleScriptTerms lang vs\n        _ -> fail \"\\\"all\\\" script value not found\"\n\nparseScriptAtLeast :: SimpleScriptVersion lang\n                   -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAtLeast lang =\n    Aeson.withObject \"atLeast\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"atLeast\" -> do\n          r  <- obj .: \"required\"\n          vs <- obj .: \"scripts\"\n          case r of\n            Number sci ->\n              case toBoundedInteger sci of\n                Just reqInt ->\n                  do scripts <- gatherSimpleScriptTerms lang vs\n                     let numScripts = length scripts\n                     when\n                       (reqInt > numScripts)\n                       (fail $ \"Required number of script signatures exceeds the number of scripts.\"\n                             <> \" Required number: \" <> show reqInt\n                             <> \" Number of scripts: \" <> show numScripts)\n                     return $ RequireMOf reqInt scripts\n                Nothing -> fail $ \"Error in \\\"required\\\" key: \"\n                                <> show sci <> \" is not a valid Int\"\n            _ -> fail \"\\\"required\\\" value should be an integer\"\n        _        -> fail \"\\\"atLeast\\\" script value not found\"\n\ngatherSimpleScriptTerms :: SimpleScriptVersion lang\n                        -> Vector Value -> Aeson.Parser [SimpleScript lang]\ngatherSimpleScriptTerms lang = mapM (parseSimpleScript lang) . Vector.toList\n\nparseScriptSig :: Value -> Aeson.Parser (SimpleScript lang)\nparseScriptSig =\n    Aeson.withObject \"sig\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"sig\" -> do k <- obj .: \"keyHash\"\n                    RequireSignature <$> parsePaymentKeyHash k\n        _     -> fail \"\\\"sig\\\" script value not found\"\n\nparseScriptBefore :: SimpleScriptVersion lang\n                  -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptBefore lang =\n    Aeson.withObject \"before\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"before\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeBefore supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"before\\\" not supported in \" ++ show lang)\n        _ -> fail \"\\\"before\\\" script value not found\"\n\nparseScriptAfter :: SimpleScriptVersion lang\n                 -> Value -> Aeson.Parser (SimpleScript lang)\nparseScriptAfter lang =\n    Aeson.withObject \"after\" $ \\obj -> do\n      v <- obj .: \"type\"\n      case v :: Text of\n        \"after\" ->\n          case timeLocksSupported lang of\n            Just supported -> RequireTimeAfter supported <$> obj .: \"slot\"\n            Nothing -> fail (\"type \\\"after\\\" not supported in \" ++ show lang)\n        _       -> fail \"\\\"after\\\" script value not found\"\n\nparsePaymentKeyHash :: Text -> Aeson.Parser (Hash PaymentKey)\nparsePaymentKeyHash txt =\n    case deserialiseFromRawBytesHex (AsHash AsPaymentKey) (Text.encodeUtf8 txt) of\n      Just payKeyHash -> return payKeyHash\n      Nothing -> fail $ \"Error deserialising payment key hash: \" <> Text.unpack txt\n\n"}}}
2020-12-03 13:02:29.933887745 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":49,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:02:29.934035251 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-03 13:02:29.934704505 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:02:29.93492143 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:02:29.93500832 [ThreadId 1891] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:02:29.936389298 [ThreadId 3141] - finish: CodeAction (took 0.00s)
2020-12-03 13:02:29.936517145 [ThreadId 3148] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:02:29.936830864 [ThreadId 3153] - finish: importLens (took 0.00s)
2020-12-03 13:02:29.936846925 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":50,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 13:02:29.937136983 [ThreadId 3178] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 13:02:29.938466893 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":50}
2020-12-03 13:02:29.942870803 [ThreadId 3366] - finish: retrie (took 0.01s)
2020-12-03 13:02:29.943149452 [ThreadId 3370] - finish: tactic (took 0.00s)
2020-12-03 13:02:29.943219309 [ThreadId 3365] - finish: kick (took 0.01s)
2020-12-03 13:02:29.943238166 [ThreadId 3374] - finish: tactic (took 0.00s)
2020-12-03 13:02:29.943284731 [ThreadId 3375] - finish: tactic (took 0.00s)
2020-12-03 13:02:29.943375322 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":49}
2020-12-03 13:02:30.158336353 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":51,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 13:02:30.158597514 [ThreadId 3380] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:02:30.158990276 [ThreadId 3381] - finish: codeLens (took 0.00s)
2020-12-03 13:02:30.159382552 [ThreadId 3386] - finish:  (took 0.00s)
2020-12-03 13:02:30.160115608 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"newText":"import Control.Applicative ( Alternative((<|>)) )"}]}}],"title":"import Control.Applicative ( Alternative((<|>)) )"},"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"newText":"import Control.Monad ( when )"}]}}],"title":"import Control.Monad ( when )"},"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"newText":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"}]}}],"title":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"newText":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"}]}}],"title":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"newText":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"}]}}],"title":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"jsonrpc":"2.0","id":51}
2020-12-03 13:02:30.182076558 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":52,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":44,"character":4},"end":{"line":44,"character":14}},"context":{"diagnostics":[]}}}
2020-12-03 13:02:30.182656035 [ThreadId 3391] - finish: CodeAction (took 0.00s)
2020-12-03 13:02:30.18278429 [ThreadId 3393] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:02:30.183191082 [ThreadId 3395] - finish: importLens (took 0.00s)
2020-12-03 13:02:30.183445358 [ThreadId 3397] - finish: retrie (took 0.00s)
2020-12-03 13:02:30.183703009 [ThreadId 3399] - finish: tactic (took 0.00s)
2020-12-03 13:02:30.183763047 [ThreadId 3401] - finish: tactic (took 0.00s)
2020-12-03 13:02:30.183823617 [ThreadId 3403] - finish: tactic (took 0.00s)
2020-12-03 13:02:30.18393935 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":52}
2020-12-03 13:05:59.368155043 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":53,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":43,"character":17}}}
2020-12-03 13:05:59.368368259 [ThreadId 3408] - GhcIde.hover entered (ideLogger)
2020-12-03 13:05:59.368547782 [ThreadId 3408] - Hover request at position 44:18 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:05:59.368780589 [ThreadId 3410] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:05:59.368842505 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":18}}},"jsonrpc":"2.0","id":53}
2020-12-03 13:05:59.369124046 [ThreadId 3416] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:10:46.081708694 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":54,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:10:46.082262135 [ThreadId 3420] - finish: CodeAction (took 0.00s)
2020-12-03 13:10:46.082410308 [ThreadId 3422] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:10:46.08273152 [ThreadId 3424] - finish: importLens (took 0.00s)
2020-12-03 13:10:46.083062061 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":55,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 13:10:46.08315857 [ThreadId 3426] - finish: retrie (took 0.00s)
2020-12-03 13:10:46.083358577 [ThreadId 3431] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 13:10:46.08344602 [ThreadId 3433] - finish: tactic (took 0.00s)
2020-12-03 13:10:46.083514239 [ThreadId 3436] - finish: tactic (took 0.00s)
2020-12-03 13:10:46.083592045 [ThreadId 3438] - finish: tactic (took 0.00s)
2020-12-03 13:10:46.084552952 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":55}
2020-12-03 13:10:46.086699913 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":54}
2020-12-03 13:10:46.282268201 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":56,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 13:10:46.282424054 [ThreadId 3443] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:10:46.282760509 [ThreadId 3444] - finish: codeLens (took 0.00s)
2020-12-03 13:10:46.283136361 [ThreadId 3446] - finish:  (took 0.00s)
2020-12-03 13:10:46.283925027 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"newText":"import Control.Applicative ( Alternative((<|>)) )"}]}}],"title":"import Control.Applicative ( Alternative((<|>)) )"},"range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"newText":"import Control.Monad ( when )"}]}}],"title":"import Control.Monad ( when )"},"range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"newText":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( AsType,\n      AsType(AsByronEra, AsMary, AsAllegra, AsShelley, AsByron,\n             AsMaryEra, AsAllegraEra, AsShelleyEra),\n      AllegraEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      MaryEra,\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"}]}}],"title":"import Cardano.Api.Hash ( AsType(AsHash), Hash )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( AsType(AsVerificationKey, AsStakePoolKey, AsStakeKey,\n             AsStakeExtendedKey, AsPaymentKey, AsPaymentExtendedKey,\n             AsGenesisUTxOKey, AsGenesisKey, AsGenesisExtendedKey,\n             AsGenesisDelegateKey, AsGenesisDelegateExtendedKey, AsSigningKey),\n      Hash(PaymentKeyHash),\n      PaymentKey )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"newText":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"}]}}],"title":"import Cardano.Api.SerialiseJSON\n    ( FromJSON(parseJSON), ToJSON(toJSON) )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"newText":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"}]}}],"title":"import Cardano.Api.SerialiseRaw\n    ( deserialiseFromRawBytesHex,\n      serialiseToRawBytesHex,\n      SerialiseAsRawBytes(..),\n      UsingRawBytesHex(..) )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"jsonrpc":"2.0","id":56}
2020-12-03 13:10:46.304810661 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":57,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":547,"character":0},"end":{"line":547,"character":10}},"context":{"diagnostics":[]}}}
2020-12-03 13:10:46.305347811 [ThreadId 3452] - finish: CodeAction (took 0.00s)
2020-12-03 13:10:46.30547232 [ThreadId 3454] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:10:46.305725179 [ThreadId 3456] - finish: importLens (took 0.00s)
2020-12-03 13:10:46.30595587 [ThreadId 3458] - finish: retrie (took 0.00s)
2020-12-03 13:10:46.306166853 [ThreadId 3460] - finish: tactic (took 0.00s)
2020-12-03 13:10:46.306237134 [ThreadId 3462] - finish: tactic (took 0.00s)
2020-12-03 13:10:46.306313407 [ThreadId 3464] - finish: tactic (took 0.00s)
2020-12-03 13:10:46.306447215 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":57}
2020-12-03 13:10:47.045315764 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":58,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":547,"character":39}}}
2020-12-03 13:10:47.045514472 [ThreadId 3469] - GhcIde.hover entered (ideLogger)
2020-12-03 13:10:47.045642495 [ThreadId 3469] - Hover request at position 548:40 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:10:47.045869603 [ThreadId 3471] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:10:47.045897101 [ThreadId 3473] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:10:47.046454535 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nScriptHash\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:532:1*\n\n\nWe have this type separate from the  `Hash`  type to avoid the script\n hash type being parametrised by the era. The representation is era\n independent, and there are many places where we want to use a script\n hash where we don't want things to be era-parametrised.\n\n\n\n"},"range":{"start":{"line":547,"character":29},"end":{"line":547,"character":39}}},"jsonrpc":"2.0","id":58}
2020-12-03 13:12:00.392051015 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":59,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":556,"character":44},"end":{"line":556,"character":44}},"context":{"diagnostics":[]}}}
2020-12-03 13:12:00.392745404 [ThreadId 3478] - finish: CodeAction (took 0.00s)
2020-12-03 13:12:00.392882577 [ThreadId 3480] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:12:00.393108505 [ThreadId 3482] - finish: importLens (took 0.00s)
2020-12-03 13:12:00.393346542 [ThreadId 3484] - finish: retrie (took 0.00s)
2020-12-03 13:12:00.3935626 [ThreadId 3486] - finish: tactic (took 0.00s)
2020-12-03 13:12:00.393672152 [ThreadId 3488] - finish: tactic (took 0.00s)
2020-12-03 13:12:00.393776465 [ThreadId 3490] - finish: tactic (took 0.00s)
2020-12-03 13:12:00.393921939 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":59}
2020-12-03 13:12:04.57300686 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":60,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 13:12:04.57346867 [ThreadId 3496] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 13:12:04.575017488 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":60}
2020-12-03 13:12:04.779881793 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":61,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":322,"character":5},"end":{"line":322,"character":20}},"context":{"diagnostics":[]}}}
2020-12-03 13:12:04.780420527 [ThreadId 3502] - finish: CodeAction (took 0.00s)
2020-12-03 13:12:04.780616828 [ThreadId 3504] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:12:04.780956224 [ThreadId 3506] - finish: importLens (took 0.00s)
2020-12-03 13:12:04.781300031 [ThreadId 3508] - finish: retrie (took 0.00s)
2020-12-03 13:12:04.781468594 [ThreadId 3510] - finish: tactic (took 0.00s)
2020-12-03 13:12:04.781661811 [ThreadId 3512] - finish: tactic (took 0.00s)
2020-12-03 13:12:04.781729367 [ThreadId 3514] - finish: tactic (took 0.00s)
2020-12-03 13:12:04.781843478 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":61}
2020-12-03 13:12:37.985273713 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":62,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":316,"character":65}}}
2020-12-03 13:12:37.985509168 [ThreadId 3519] - GhcIde.hover entered (ideLogger)
2020-12-03 13:12:37.985659817 [ThreadId 3519] - Hover request at position 317:66 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:12:37.985891859 [ThreadId 3520] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:12:37.985999981 [ThreadId 3523] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:12:37.98609068 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":8,"character":4},"end":{"line":925,"character":83}}},"jsonrpc":"2.0","id":62}
2020-12-03 13:13:18.341931333 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":63,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":338,"character":43}}}
2020-12-03 13:13:18.342177229 [ThreadId 3527] - GhcIde.hover entered (ideLogger)
2020-12-03 13:13:18.347065366 [ThreadId 3527] - Hover request at position 339:44 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:13:18.347287489 [ThreadId 3528] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:13:18.3473146 [ThreadId 3531] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:13:18.347470056 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":8,"character":4},"end":{"line":925,"character":83}}},"jsonrpc":"2.0","id":63}
2020-12-03 13:13:31.762243333 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":64,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":30,"character":39}}}
2020-12-03 13:13:31.762439141 [ThreadId 3535] - GhcIde.hover entered (ideLogger)
2020-12-03 13:13:31.762582401 [ThreadId 3535] - Hover request at position 31:40 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:13:31.762818746 [ThreadId 3536] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:13:31.762906722 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":41}}},"jsonrpc":"2.0","id":64}
2020-12-03 13:13:31.76293364 [ThreadId 3539] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:13:43.696707613 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":65,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":23,"character":15}}}
2020-12-03 13:13:43.697037651 [ThreadId 3543] - DocumentHighlight request at position 24:16 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:13:43.697393376 [ThreadId 3545] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:13:43.697417111 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":21}}},{"kind":2,"range":{"start":{"line":344,"character":0},"end":{"line":344,"character":17}}},{"kind":3,"range":{"start":{"line":345,"character":0},"end":{"line":345,"character":17}}},{"kind":2,"range":{"start":{"line":441,"character":23},"end":{"line":441,"character":40}}}],"jsonrpc":"2.0","id":65}
2020-12-03 13:13:44.131670938 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":66,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":21}},"context":{"diagnostics":[]}}}
2020-12-03 13:13:44.132159133 [ThreadId 3550] - finish: CodeAction (took 0.00s)
2020-12-03 13:13:44.132358424 [ThreadId 3552] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:13:44.132653788 [ThreadId 3554] - finish: importLens (took 0.00s)
2020-12-03 13:13:44.132937309 [ThreadId 3556] - finish: retrie (took 0.00s)
2020-12-03 13:13:44.133218696 [ThreadId 3558] - finish: tactic (took 0.00s)
2020-12-03 13:13:44.133334778 [ThreadId 3560] - finish: tactic (took 0.00s)
2020-12-03 13:13:44.133420755 [ThreadId 3562] - finish: tactic (took 0.00s)
2020-12-03 13:13:44.133524199 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":66}
2020-12-03 13:13:44.539956106 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":67,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":23,"character":15}}}
2020-12-03 13:13:44.540221652 [ThreadId 3567] - Definition request at position 24:16 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:13:44.540492879 [ThreadId 3568] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:13:44.540638074 [ThreadId 7] - <--2--{"result":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","range":{"start":{"line":345,"character":0},"end":{"line":345,"character":17}}},"jsonrpc":"2.0","id":67}
2020-12-03 13:13:46.01853403 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":68,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":344,"character":0},"end":{"line":344,"character":17}},"context":{"diagnostics":[]}}}
2020-12-03 13:13:46.018977915 [ThreadId 3574] - finish: CodeAction (took 0.00s)
2020-12-03 13:13:46.019139986 [ThreadId 3576] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:13:46.019371092 [ThreadId 3578] - finish: importLens (took 0.00s)
2020-12-03 13:13:46.019626277 [ThreadId 3580] - finish: retrie (took 0.00s)
2020-12-03 13:13:46.01990715 [ThreadId 3582] - finish: tactic (took 0.00s)
2020-12-03 13:13:46.020010513 [ThreadId 3584] - finish: tactic (took 0.00s)
2020-12-03 13:13:46.020090227 [ThreadId 3586] - finish: tactic (took 0.00s)
2020-12-03 13:13:46.020197438 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":68}
2020-12-03 13:15:03.577094453 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":69,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":354,"character":42}}}
2020-12-03 13:15:03.577361518 [ThreadId 3591] - GhcIde.hover entered (ideLogger)
2020-12-03 13:15:03.577529472 [ThreadId 3591] - Hover request at position 355:43 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:15:03.57781212 [ThreadId 3592] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:15:03.577855378 [ThreadId 3595] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:15:03.5780457 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nSimpleScriptLanguage\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:157:6*\n\n\n\n"},"range":{"start":{"line":354,"character":38},"end":{"line":354,"character":58}}},"jsonrpc":"2.0","id":69}
2020-12-03 13:15:05.366764243 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":70,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":344,"character":51}}}
2020-12-03 13:15:05.366931386 [ThreadId 3599] - GhcIde.hover entered (ideLogger)
2020-12-03 13:15:05.367130941 [ThreadId 3599] - Hover request at position 345:52 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:15:05.367298153 [ThreadId 3600] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:15:05.367345723 [ThreadId 3603] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:15:05.367981087 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nScriptInAnyLang\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:323:1*\n\n\nSometimes it is necessary to handle all languages without making static\n type distinctions between languages. For example, when reading external\n input, or before the era context is known. \n\nUse  `toScriptInEra`  to convert to a script in the context of an era.\n\n\n\n"},"range":{"start":{"line":344,"character":36},"end":{"line":344,"character":51}}},"jsonrpc":"2.0","id":70}
2020-12-03 13:15:08.321756031 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":71,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":344,"character":10}}}
2020-12-03 13:15:08.321971264 [ThreadId 3607] - GhcIde.hover entered (ideLogger)
2020-12-03 13:15:08.32215641 [ThreadId 3607] - Hover request at position 345:11 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:15:08.322389322 [ThreadId 3608] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:15:08.322466579 [ThreadId 3611] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:15:08.322993721 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\ntoScriptInAnyLang\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:346:1*\n\n\nConvert a script in a specific statically-known language to a\n  `ScriptInAnyLang` . \n\nNo inverse to this is provided, just do case analysis on the  `ScriptLanguage` \n field within the  `ScriptInAnyLang`  constructor.\n\n\n\n"},"range":{"start":{"line":344,"character":0},"end":{"line":344,"character":17}}},"jsonrpc":"2.0","id":71}
2020-12-03 13:15:08.61208737 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":72,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":345,"character":11}}}
2020-12-03 13:15:08.612284955 [ThreadId 3615] - GhcIde.hover entered (ideLogger)
2020-12-03 13:15:08.612391105 [ThreadId 3615] - Hover request at position 346:12 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:15:08.612567969 [ThreadId 3616] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:15:08.612596465 [ThreadId 3619] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:15:08.613172186 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\ntoScriptInAnyLang :: Script lang -> ScriptInAnyLang\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:346:1*\n\n\nConvert a script in a specific statically-known language to a\n  `ScriptInAnyLang` . \n\nNo inverse to this is provided, just do case analysis on the  `ScriptLanguage` \n field within the  `ScriptInAnyLang`  constructor.\n\n\n\n"},"range":{"start":{"line":345,"character":0},"end":{"line":345,"character":17}}},"jsonrpc":"2.0","id":72}
2020-12-03 13:15:09.496767952 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":73,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":345,"character":10}}}
2020-12-03 13:15:09.497096334 [ThreadId 3623] - DocumentHighlight request at position 346:11 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:15:09.497389942 [ThreadId 3624] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:15:09.49750842 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":21}}},{"kind":2,"range":{"start":{"line":344,"character":0},"end":{"line":344,"character":17}}},{"kind":3,"range":{"start":{"line":345,"character":0},"end":{"line":345,"character":17}}},{"kind":2,"range":{"start":{"line":441,"character":23},"end":{"line":441,"character":40}}}],"jsonrpc":"2.0","id":73}
2020-12-03 13:15:09.728478814 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":74,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":345,"character":10},"end":{"line":345,"character":10}},"context":{"diagnostics":[]}}}
2020-12-03 13:15:09.728999935 [ThreadId 3630] - finish: CodeAction (took 0.00s)
2020-12-03 13:15:09.729116047 [ThreadId 3632] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:15:09.729495733 [ThreadId 3634] - finish: importLens (took 0.00s)
2020-12-03 13:15:09.729749967 [ThreadId 3636] - finish: retrie (took 0.00s)
2020-12-03 13:15:09.730044454 [ThreadId 3638] - finish: tactic (took 0.00s)
2020-12-03 13:15:09.730141113 [ThreadId 3640] - finish: tactic (took 0.00s)
2020-12-03 13:15:09.730291273 [ThreadId 3642] - finish: tactic (took 0.00s)
2020-12-03 13:15:09.730535161 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":false,"rewrites":[{"tag":"Unfold","contents":"Cardano.Api.Script.toScriptInAnyLang"}],"originatingFile":[-908989567535900483,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"],"description":"Unfold toScriptInAnyLang"}],"title":"Unfold toScriptInAnyLang"},"kind":"refactor.inline","title":"Unfold toScriptInAnyLang"},{"command":{"command":"9683:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":true,"rewrites":[{"tag":"Unfold","contents":"Cardano.Api.Script.toScriptInAnyLang"}],"originatingFile":[-908989567535900483,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"],"description":"Unfold toScriptInAnyLang in current file"}],"title":"Unfold toScriptInAnyLang in current file"},"kind":"refactor.inline","title":"Unfold toScriptInAnyLang in current file"},{"command":{"command":"9683:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":false,"rewrites":[{"tag":"Fold","contents":"Cardano.Api.Script.toScriptInAnyLang"}],"originatingFile":[-908989567535900483,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"],"description":"Fold toScriptInAnyLang"}],"title":"Fold toScriptInAnyLang"},"kind":"refactor.extract","title":"Fold toScriptInAnyLang"},{"command":{"command":"9683:retrie:retrieCommand","arguments":[{"restrictToOriginatingFile":true,"rewrites":[{"tag":"Fold","contents":"Cardano.Api.Script.toScriptInAnyLang"}],"originatingFile":[-908989567535900483,"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"],"description":"Fold toScriptInAnyLang in current file"}],"title":"Fold toScriptInAnyLang in current file"},"kind":"refactor.extract","title":"Fold toScriptInAnyLang in current file"}],"jsonrpc":"2.0","id":74}
2020-12-03 13:15:09.795864721 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":75,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":345,"character":10}}}
2020-12-03 13:15:09.796202355 [ThreadId 3647] - GhcIde.hover entered (ideLogger)
2020-12-03 13:15:09.796350344 [ThreadId 3647] - Hover request at position 346:11 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:15:09.796535081 [ThreadId 3648] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:15:09.79656032 [ThreadId 3651] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:15:09.797093818 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\ntoScriptInAnyLang :: Script lang -> ScriptInAnyLang\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:346:1*\n\n\nConvert a script in a specific statically-known language to a\n  `ScriptInAnyLang` . \n\nNo inverse to this is provided, just do case analysis on the  `ScriptLanguage` \n field within the  `ScriptInAnyLang`  constructor.\n\n\n\n"},"range":{"start":{"line":345,"character":0},"end":{"line":345,"character":17}}},"jsonrpc":"2.0","id":75}
2020-12-03 13:15:10.064940983 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":76,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":344,"character":10}}}
2020-12-03 13:15:10.065158701 [ThreadId 3655] - GhcIde.hover entered (ideLogger)
2020-12-03 13:15:10.065278216 [ThreadId 3655] - Hover request at position 345:11 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:15:10.065481494 [ThreadId 3656] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:15:10.065510248 [ThreadId 3659] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:15:10.06599579 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\ntoScriptInAnyLang\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:346:1*\n\n\nConvert a script in a specific statically-known language to a\n  `ScriptInAnyLang` . \n\nNo inverse to this is provided, just do case analysis on the  `ScriptLanguage` \n field within the  `ScriptInAnyLang`  constructor.\n\n\n\n"},"range":{"start":{"line":344,"character":0},"end":{"line":344,"character":17}}},"jsonrpc":"2.0","id":76}
2020-12-03 13:15:10.632556246 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":77,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":344,"character":0},"end":{"line":344,"character":17}},"context":{"diagnostics":[]}}}
2020-12-03 13:15:10.633124875 [ThreadId 3664] - finish: CodeAction (took 0.00s)
2020-12-03 13:15:10.633256151 [ThreadId 3666] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:15:10.633574638 [ThreadId 3668] - finish: importLens (took 0.00s)
2020-12-03 13:15:10.63383526 [ThreadId 3670] - finish: retrie (took 0.00s)
2020-12-03 13:15:10.634030423 [ThreadId 3672] - finish: tactic (took 0.00s)
2020-12-03 13:15:10.634124015 [ThreadId 3674] - finish: tactic (took 0.00s)
2020-12-03 13:15:10.63419111 [ThreadId 3676] - finish: tactic (took 0.00s)
2020-12-03 13:15:10.634303749 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":77}
2020-12-03 13:15:28.424870569 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":78,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":349,"character":25}}}
2020-12-03 13:15:28.425088508 [ThreadId 3681] - GhcIde.hover entered (ideLogger)
2020-12-03 13:15:28.425235358 [ThreadId 3681] - Hover request at position 350:26 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:15:28.425472394 [ThreadId 3682] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:15:28.425544089 [ThreadId 3685] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:15:28.426433057 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nScriptInAnyLang\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:323:1*\n\n\nSometimes it is necessary to handle all languages without making static\n type distinctions between languages. For example, when reading external\n input, or before the era context is known. \n\nUse  `toScriptInEra`  to convert to a script in the context of an era.\n\n\n\n"},"range":{"start":{"line":349,"character":16},"end":{"line":349,"character":31}}},"jsonrpc":"2.0","id":78}
2020-12-03 13:15:59.253610412 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":79,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":344,"character":51}}}
2020-12-03 13:15:59.253918086 [ThreadId 3689] - DocumentHighlight request at position 345:52 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:15:59.254255906 [ThreadId 3690] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:15:59.254464436 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":22,"character":4},"end":{"line":22,"character":19}}},{"kind":3,"range":{"start":{"line":322,"character":5},"end":{"line":322,"character":20}}},{"kind":2,"range":{"start":{"line":325,"character":24},"end":{"line":325,"character":39}}},{"kind":2,"range":{"start":{"line":327,"character":23},"end":{"line":327,"character":38}}},{"kind":2,"range":{"start":{"line":330,"character":12},"end":{"line":330,"character":27}}},{"kind":2,"range":{"start":{"line":344,"character":36},"end":{"line":344,"character":51}}},{"kind":2,"range":{"start":{"line":348,"character":22},"end":{"line":348,"character":37}}},{"kind":2,"range":{"start":{"line":349,"character":16},"end":{"line":349,"character":31}}},{"kind":2,"range":{"start":{"line":352,"character":25},"end":{"line":352,"character":40}}},{"kind":2,"range":{"start":{"line":376,"character":55},"end":{"line":376,"character":70}}},{"kind":2,"range":{"start":{"line":384,"character":63},"end":{"line":384,"character":78}}},{"kind":2,"range":{"start":{"line":391,"character":64},"end":{"line":391,"character":79}}},{"kind":2,"range":{"start":{"line":398,"character":25},"end":{"line":398,"character":40}}},{"kind":2,"range":{"start":{"line":513,"character":35},"end":{"line":513,"character":50}}},{"kind":2,"range":{"start":{"line":736,"character":16},"end":{"line":736,"character":31}}},{"kind":2,"range":{"start":{"line":774,"character":18},"end":{"line":774,"character":33}}}],"jsonrpc":"2.0","id":79}
2020-12-03 13:15:59.497710482 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":80,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":344,"character":51},"end":{"line":344,"character":51}},"context":{"diagnostics":[]}}}
2020-12-03 13:15:59.498247228 [ThreadId 3696] - finish: CodeAction (took 0.00s)
2020-12-03 13:15:59.49847533 [ThreadId 3698] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:15:59.498903803 [ThreadId 3700] - finish: importLens (took 0.00s)
2020-12-03 13:15:59.499145814 [ThreadId 3702] - finish: retrie (took 0.00s)
2020-12-03 13:15:59.499358366 [ThreadId 3704] - finish: tactic (took 0.00s)
2020-12-03 13:15:59.499417774 [ThreadId 3706] - finish: tactic (took 0.00s)
2020-12-03 13:15:59.499478066 [ThreadId 3708] - finish: tactic (took 0.00s)
2020-12-03 13:15:59.499582267 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":80}
2020-12-03 13:15:59.834725789 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":81,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":344,"character":51}}}
2020-12-03 13:15:59.83497206 [ThreadId 3713] - Definition request at position 345:52 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:15:59.835162547 [ThreadId 3714] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:15:59.835338567 [ThreadId 7] - <--2--{"result":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},"jsonrpc":"2.0","id":81}
2020-12-03 13:16:00.452925033 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":82,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":357,"character":23},"end":{"line":357,"character":24}},"context":{"diagnostics":[]}}}
2020-12-03 13:16:00.45339015 [ThreadId 3720] - finish: CodeAction (took 0.00s)
2020-12-03 13:16:00.453572321 [ThreadId 3722] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:16:00.453892772 [ThreadId 3724] - finish: importLens (took 0.00s)
2020-12-03 13:16:00.454274274 [ThreadId 3726] - finish: retrie (took 0.00s)
2020-12-03 13:16:00.454510908 [ThreadId 3728] - finish: tactic (took 0.00s)
2020-12-03 13:16:00.454586091 [ThreadId 3730] - finish: tactic (took 0.00s)
2020-12-03 13:16:00.454656155 [ThreadId 3732] - finish: tactic (took 0.00s)
2020-12-03 13:16:00.454775401 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":82}
2020-12-03 13:16:01.087095364 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":83,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":357,"character":52},"end":{"line":357,"character":56}},"context":{"diagnostics":[]}}}
2020-12-03 13:16:01.08759621 [ThreadId 3738] - finish: CodeAction (took 0.00s)
2020-12-03 13:16:01.087765133 [ThreadId 3740] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:16:01.088064559 [ThreadId 3742] - finish: importLens (took 0.00s)
2020-12-03 13:16:01.088335828 [ThreadId 3744] - finish: retrie (took 0.00s)
2020-12-03 13:16:01.088545374 [ThreadId 3746] - finish: tactic (took 0.00s)
2020-12-03 13:16:01.088607797 [ThreadId 3748] - finish: tactic (took 0.00s)
2020-12-03 13:16:01.088651223 [ThreadId 3750] - finish: tactic (took 0.00s)
2020-12-03 13:16:01.088778381 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":83}
2020-12-03 13:16:01.773766161 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":84,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":766,"character":34},"end":{"line":766,"character":42}},"context":{"diagnostics":[]}}}
2020-12-03 13:16:01.774314026 [ThreadId 3756] - finish: CodeAction (took 0.00s)
2020-12-03 13:16:01.774469052 [ThreadId 3758] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:16:01.774833536 [ThreadId 3760] - finish: importLens (took 0.00s)
2020-12-03 13:16:01.775247189 [ThreadId 3762] - finish: retrie (took 0.00s)
2020-12-03 13:16:01.77548714 [ThreadId 3764] - finish: tactic (took 0.00s)
2020-12-03 13:16:01.775651018 [ThreadId 3766] - finish: tactic (took 0.00s)
2020-12-03 13:16:01.775789206 [ThreadId 3768] - finish: tactic (took 0.00s)
2020-12-03 13:16:01.77601888 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":84}
2020-12-03 13:20:05.338228152 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":85,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":769,"character":22}}}
2020-12-03 13:20:05.338586496 [ThreadId 3773] - GhcIde.hover entered (ideLogger)
2020-12-03 13:20:05.338720203 [ThreadId 3773] - Hover request at position 770:23 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:20:05.339135704 [ThreadId 3775] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:20:05.33923815 [ThreadId 3777] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:20:05.339325664 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nSimpleScriptLanguage\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:157:6*\n\n\n\n"},"range":{"start":{"line":769,"character":6},"end":{"line":769,"character":26}}},"jsonrpc":"2.0","id":85}
2020-12-03 13:20:08.119252437 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":86,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":770,"character":46}}}
2020-12-03 13:20:08.119478105 [ThreadId 3781] - GhcIde.hover entered (ideLogger)
2020-12-03 13:20:08.119635903 [ThreadId 3781] - Hover request at position 771:47 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:20:08.119825838 [ThreadId 3782] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:20:08.119917962 [ThreadId 3785] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:20:08.120249606 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nparseSimpleScript :: forall lang.\nSimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:832:1*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: SimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n"},"range":{"start":{"line":770,"character":37},"end":{"line":770,"character":54}}},"jsonrpc":"2.0","id":86}
2020-12-03 13:20:13.753696592 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":87,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":770,"character":52}}}
2020-12-03 13:20:13.753835438 [ThreadId 3789] - GhcIde.hover entered (ideLogger)
2020-12-03 13:20:13.753963878 [ThreadId 3789] - Hover request at position 771:53 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:20:13.754222242 [ThreadId 3791] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:20:13.754257331 [ThreadId 3793] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:20:13.754563242 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nparseSimpleScript :: forall lang.\nSimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:832:1*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: SimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n"},"range":{"start":{"line":770,"character":37},"end":{"line":770,"character":54}}},"jsonrpc":"2.0","id":87}
2020-12-03 13:20:14.059494469 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":88,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":770,"character":46}}}
2020-12-03 13:20:14.059730627 [ThreadId 3797] - GhcIde.hover entered (ideLogger)
2020-12-03 13:20:14.059853171 [ThreadId 3797] - Hover request at position 771:47 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:20:14.060030123 [ThreadId 3799] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:20:14.060081793 [ThreadId 3801] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:20:14.060300896 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nparseSimpleScript :: forall lang.\nSimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:832:1*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: SimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n"},"range":{"start":{"line":770,"character":37},"end":{"line":770,"character":54}}},"jsonrpc":"2.0","id":88}
2020-12-03 13:20:14.539246812 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":89,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":769,"character":50}}}
2020-12-03 13:20:14.539494446 [ThreadId 3805] - GhcIde.hover entered (ideLogger)
2020-12-03 13:20:14.539604361 [ThreadId 3805] - Hover request at position 770:51 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:20:14.539804979 [ThreadId 3806] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:20:14.539862558 [ThreadId 3808] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:20:14.540227515 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nlang :: SimpleScriptVersion lang\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:770:28*\n\n\n\n"},"range":{"start":{"line":769,"character":48},"end":{"line":769,"character":52}}},"jsonrpc":"2.0","id":89}
2020-12-03 13:22:26.959163459 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":90,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":766,"character":46}}}
2020-12-03 13:22:26.959362262 [ThreadId 3813] - GhcIde.hover entered (ideLogger)
2020-12-03 13:22:26.959503007 [ThreadId 3813] - Hover request at position 767:47 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:22:26.959696275 [ThreadId 3814] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:22:26.959806337 [ThreadId 3817] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:22:26.960442601 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nScript\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:260:1*\n\n\nA script in a particular language. \n\nSee also  `ScriptInAnyLang`  for a script in any of the languages that is available within\n a particular era. \n\nSee also  `ScriptInEra`  for a script in a language that is available within\n a particular era.\n\n\n\n"},"range":{"start":{"line":766,"character":44},"end":{"line":766,"character":50}}},"jsonrpc":"2.0","id":90}
2020-12-03 13:22:28.377790907 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":91,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":766,"character":44}}}
2020-12-03 13:22:28.378102946 [ThreadId 3821] - DocumentHighlight request at position 767:45 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:22:28.378410495 [ThreadId 3822] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:22:28.378695834 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":19,"character":4},"end":{"line":19,"character":10}}},{"kind":3,"range":{"start":{"line":259,"character":5},"end":{"line":259,"character":11}}},{"kind":2,"range":{"start":{"line":263,"character":21},"end":{"line":263,"character":27}}},{"kind":2,"range":{"start":{"line":271,"character":21},"end":{"line":271,"character":27}}},{"kind":2,"range":{"start":{"line":273,"character":25},"end":{"line":273,"character":31}}},{"kind":2,"range":{"start":{"line":274,"character":25},"end":{"line":274,"character":31}}},{"kind":2,"range":{"start":{"line":276,"character":44},"end":{"line":276,"character":50}}},{"kind":2,"range":{"start":{"line":277,"character":17},"end":{"line":277,"character":23}}},{"kind":2,"range":{"start":{"line":280,"character":51},"end":{"line":280,"character":57}}},{"kind":2,"range":{"start":{"line":304,"character":51},"end":{"line":304,"character":57}}},{"kind":2,"range":{"start":{"line":324,"character":24},"end":{"line":324,"character":30}}},{"kind":2,"range":{"start":{"line":344,"character":21},"end":{"line":344,"character":27}}},{"kind":2,"range":{"start":{"line":408,"character":20},"end":{"line":408,"character":26}}},{"kind":2,"range":{"start":{"line":547,"character":14},"end":{"line":547,"character":20}}},{"kind":2,"range":{"start":{"line":733,"character":17},"end":{"line":733,"character":23}}},{"kind":2,"range":{"start":{"line":766,"character":44},"end":{"line":766,"character":50}}}],"jsonrpc":"2.0","id":91}
2020-12-03 13:22:28.884233901 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":92,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":766,"character":44},"end":{"line":767,"character":15}},"context":{"diagnostics":[]}}}
2020-12-03 13:22:28.884886153 [ThreadId 3828] - finish: CodeAction (took 0.00s)
2020-12-03 13:22:28.885037426 [ThreadId 3830] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:22:28.885298568 [ThreadId 3832] - finish: importLens (took 0.00s)
2020-12-03 13:22:28.885609133 [ThreadId 3834] - finish: retrie (took 0.00s)
2020-12-03 13:22:28.885878404 [ThreadId 3836] - finish: tactic (took 0.00s)
2020-12-03 13:22:28.886014334 [ThreadId 3838] - finish: tactic (took 0.00s)
2020-12-03 13:22:28.886088581 [ThreadId 3840] - finish: tactic (took 0.00s)
2020-12-03 13:22:28.886222768 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":92}
2020-12-03 13:22:29.737038048 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":93,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":766,"character":44},"end":{"line":766,"character":55}},"context":{"diagnostics":[]}}}
2020-12-03 13:22:29.737560692 [ThreadId 3846] - finish: CodeAction (took 0.00s)
2020-12-03 13:22:29.737804635 [ThreadId 3848] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:22:29.73823934 [ThreadId 3850] - finish: importLens (took 0.00s)
2020-12-03 13:22:29.738489166 [ThreadId 3852] - finish: retrie (took 0.00s)
2020-12-03 13:22:29.73871995 [ThreadId 3854] - finish: tactic (took 0.00s)
2020-12-03 13:22:29.738803767 [ThreadId 3856] - finish: tactic (took 0.00s)
2020-12-03 13:22:29.738864238 [ThreadId 3858] - finish: tactic (took 0.00s)
2020-12-03 13:22:29.738988398 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":93}
2020-12-03 13:22:30.04728964 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":94,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":766,"character":54}}}
2020-12-03 13:22:30.047507519 [ThreadId 3863] - GhcIde.hover entered (ideLogger)
2020-12-03 13:22:30.047621802 [ThreadId 3863] - Hover request at position 767:55 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:22:30.047844822 [ThreadId 3865] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:22:30.047919283 [ThreadId 3867] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:22:30.048037286 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nlang\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:767:1*\n\n\n\n"},"range":{"start":{"line":766,"character":51},"end":{"line":766,"character":55}}},"jsonrpc":"2.0","id":94}
2020-12-03 13:22:30.195503772 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":95,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":766,"character":55}}}
2020-12-03 13:22:30.195762745 [ThreadId 3871] - Definition request at position 767:56 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:22:30.196003116 [ThreadId 3872] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:22:30.196179028 [ThreadId 7] - <--2--{"result":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},"jsonrpc":"2.0","id":95}
2020-12-03 13:22:30.537222876 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":96,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":766,"character":55}}}
2020-12-03 13:22:30.537497109 [ThreadId 3877] - Definition request at position 767:56 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:22:30.537802939 [ThreadId 3878] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:22:30.53797282 [ThreadId 7] - <--2--{"result":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},"jsonrpc":"2.0","id":96}
2020-12-03 13:22:32.66064544 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":97,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":259,"character":5},"end":{"line":259,"character":16}},"context":{"diagnostics":[]}}}
2020-12-03 13:22:32.661188694 [ThreadId 3884] - finish: CodeAction (took 0.00s)
2020-12-03 13:22:32.661423179 [ThreadId 3886] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:22:32.661796325 [ThreadId 3888] - finish: importLens (took 0.00s)
2020-12-03 13:22:32.662087465 [ThreadId 3890] - finish: retrie (took 0.00s)
2020-12-03 13:22:32.662325658 [ThreadId 3892] - finish: tactic (took 0.00s)
2020-12-03 13:22:32.662508594 [ThreadId 3894] - finish: tactic (took 0.00s)
2020-12-03 13:22:32.662573616 [ThreadId 3896] - finish: tactic (took 0.00s)
2020-12-03 13:22:32.66269952 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":97}
2020-12-03 13:22:46.226621166 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":98,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":252,"character":2},"end":{"line":252,"character":2}},"context":{"diagnostics":[]}}}
2020-12-03 13:22:46.227121226 [ThreadId 3902] - finish: CodeAction (took 0.00s)
2020-12-03 13:22:46.227287526 [ThreadId 3904] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:22:46.227542458 [ThreadId 3906] - finish: importLens (took 0.00s)
2020-12-03 13:22:46.22776107 [ThreadId 3908] - finish: retrie (took 0.00s)
2020-12-03 13:22:46.228083845 [ThreadId 3910] - finish: tactic (took 0.00s)
2020-12-03 13:22:46.228150574 [ThreadId 3912] - finish: tactic (took 0.00s)
2020-12-03 13:22:46.228240205 [ThreadId 3914] - finish: tactic (took 0.00s)
2020-12-03 13:22:46.228413118 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":98}
2020-12-03 13:22:46.767741108 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":99,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":280,"character":9},"end":{"line":280,"character":25}},"context":{"diagnostics":[]}}}
2020-12-03 13:22:46.768373658 [ThreadId 3920] - finish: CodeAction (took 0.00s)
2020-12-03 13:22:46.76854562 [ThreadId 3922] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:22:46.768855062 [ThreadId 3924] - finish: importLens (took 0.00s)
2020-12-03 13:22:46.769093068 [ThreadId 3926] - finish: retrie (took 0.00s)
2020-12-03 13:22:46.769288898 [ThreadId 3928] - finish: tactic (took 0.00s)
2020-12-03 13:22:46.769410845 [ThreadId 3930] - finish: tactic (took 0.00s)
2020-12-03 13:22:46.769525304 [ThreadId 3932] - finish: tactic (took 0.00s)
2020-12-03 13:22:46.769626959 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":99}
2020-12-03 13:22:48.030434564 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":100,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":285,"character":57}}}
2020-12-03 13:22:48.030616493 [ThreadId 3937] - GhcIde.hover entered (ideLogger)
2020-12-03 13:22:48.030740233 [ThreadId 3937] - Hover request at position 286:58 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:22:48.030982842 [ThreadId 3939] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:22:48.031022434 [ThreadId 3941] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:22:48.031145036 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nTimelock :: * -> *\n```\n\n*Defined in ‘Cardano.Ledger.ShelleyMA.Timelocks’*\n\n\n\n"},"range":{"start":{"line":285,"character":46},"end":{"line":285,"character":63}}},"jsonrpc":"2.0","id":100}
2020-12-03 13:23:13.596987755 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":273,"character":21}}}
2020-12-03 13:23:13.597213141 [ThreadId 3945] - GhcIde.hover entered (ideLogger)
2020-12-03 13:23:13.597370237 [ThreadId 3945] - Hover request at position 274:22 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:13.597725453 [ThreadId 3947] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:13.59778643 [ThreadId 3949] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:23:13.599891136 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nEq :: * -> Constraint\n```\n\n*Defined in ‘GHC.Classes’*\n\n\nThe  `Eq`  class defines equality ( `==` ) and inequality ( `/=` ).\n All the basic datatypes exported by the  `Prelude`  are instances of  `Eq` ,\n and  `Eq`  may be derived for any datatype whose constituents are also\n instances of  `Eq` . \n\nThe Haskell Report defines no laws for  `Eq` . However,  `==`  is customarily\n expected to implement an equivalence relationship where two values comparing\n equal are indistinguishable by \"public\" functions, with a \"public\" function\n being one not allowing to see implementation details. For example, for a\n type representing non-normalised natural numbers modulo 100, a \"public\"\n function doesn't make the difference between 1 and 201. It is expected to\n have the following properties: \n+ ****Reflexivity****: `x == x`  =  `True`\n+ ****Symmetry****: `x == y`  =  `y == x`\n+ ****Transitivity****: if  `x == y && y == z`  =  `True` , then  `x == z`  =  `True`\n+ ****Substitutivity****: if  `x == y`  =  `True`  and  `f`  is a \"public\" function\n whose return type is an instance of  `Eq` , then  `f x == f y`  =  `True`\n+ ****Negation****: `x /= y`  =  `not (x == y)`\n \n\nMinimal complete definition: either  `==`  or  `/=` .\n\n\n[Documentation](file:///usr/local/share/doc/ghc-8.10.2/html/libraries/ghc-prim-0.6.1/GHC-Classes.html#t:Eq)\n[Source](file:///usr/local/share/doc/ghc-8.10.2/html/libraries/ghc-prim-0.6.1/src/GHC-Classes.html#Eq)\n\n"},"range":{"start":{"line":273,"character":19},"end":{"line":273,"character":21}}},"jsonrpc":"2.0","id":101}
2020-12-03 13:23:14.096582773 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":102,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":276,"character":36}}}
2020-12-03 13:23:14.096774925 [ThreadId 3953] - GhcIde.hover entered (ideLogger)
2020-12-03 13:23:14.096924283 [ThreadId 3953] - Hover request at position 277:37 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:14.097194061 [ThreadId 3957] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:23:14.097162555 [ThreadId 3954] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:14.097437588 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nHasTypeProxy :: * -> Constraint\n```\n\n*Defined in ‘Cardano.Api.HasTypeProxy’*\n\n\n\n"},"range":{"start":{"line":276,"character":30},"end":{"line":276,"character":42}}},"jsonrpc":"2.0","id":102}
2020-12-03 13:23:22.751202924 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":103,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":292,"character":1}}}
2020-12-03 13:23:22.751428743 [ThreadId 3961] - GhcIde.hover entered (ideLogger)
2020-12-03 13:23:22.751578226 [ThreadId 3961] - Hover request at position 293:2 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:22.751828286 [ThreadId 3964] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:23:22.751851194 [ThreadId 3962] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:22.752051587 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\n_ :: Either DecoderError (Script lang)\n```\n"},"range":{"start":{"line":290,"character":14},"end":{"line":292,"character":72}}},"jsonrpc":"2.0","id":103}
2020-12-03 13:23:27.687930764 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":104,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 13:23:27.688423511 [ThreadId 3970] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 13:23:27.690484482 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":104}
2020-12-03 13:23:27.905282778 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":105,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":263,"character":21},"end":{"line":263,"character":28}},"context":{"diagnostics":[]}}}
2020-12-03 13:23:27.905815309 [ThreadId 3976] - finish: CodeAction (took 0.00s)
2020-12-03 13:23:27.905983126 [ThreadId 3978] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:23:27.90631114 [ThreadId 3980] - finish: importLens (took 0.00s)
2020-12-03 13:23:27.906588986 [ThreadId 3982] - finish: retrie (took 0.00s)
2020-12-03 13:23:27.906829543 [ThreadId 3984] - finish: tactic (took 0.00s)
2020-12-03 13:23:27.907010378 [ThreadId 3986] - finish: tactic (took 0.00s)
2020-12-03 13:23:27.90707283 [ThreadId 3988] - finish: tactic (took 0.00s)
2020-12-03 13:23:27.90726479 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":105}
2020-12-03 13:23:28.228323888 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":106,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 13:23:28.22876299 [ThreadId 3994] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 13:23:28.22991947 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":106}
2020-12-03 13:23:28.491008782 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":107,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":259,"character":5},"end":{"line":259,"character":12}},"context":{"diagnostics":[]}}}
2020-12-03 13:23:28.491567279 [ThreadId 4000] - finish: CodeAction (took 0.00s)
2020-12-03 13:23:28.491663464 [ThreadId 4002] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:23:28.491903654 [ThreadId 4004] - finish: importLens (took 0.00s)
2020-12-03 13:23:28.492222664 [ThreadId 4006] - finish: retrie (took 0.00s)
2020-12-03 13:23:28.492498697 [ThreadId 4008] - finish: tactic (took 0.00s)
2020-12-03 13:23:28.492616687 [ThreadId 4010] - finish: tactic (took 0.00s)
2020-12-03 13:23:28.492677088 [ThreadId 4012] - finish: tactic (took 0.00s)
2020-12-03 13:23:28.492784201 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":107}
2020-12-03 13:23:29.815049113 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":108,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":259,"character":22}}}
2020-12-03 13:23:29.815232936 [ThreadId 4017] - GhcIde.hover entered (ideLogger)
2020-12-03 13:23:29.815355569 [ThreadId 4017] - Hover request at position 260:23 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:29.815734384 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},"jsonrpc":"2.0","id":108}
2020-12-03 13:23:29.815748964 [ThreadId 4019] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:29.815815202 [ThreadId 4021] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:23:35.422925836 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":109,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":261,"character":34}}}
2020-12-03 13:23:35.42313154 [ThreadId 4025] - GhcIde.hover entered (ideLogger)
2020-12-03 13:23:35.423248802 [ThreadId 4025] - Hover request at position 262:35 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:35.423454943 [ThreadId 4027] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:35.423534495 [ThreadId 4029] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:23:35.423588878 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nSimpleScriptVersion\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:174:1*\n\n\n\n"},"range":{"start":{"line":261,"character":23},"end":{"line":261,"character":42}}},"jsonrpc":"2.0","id":109}
2020-12-03 13:23:36.042495452 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":110,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":261,"character":35}}}
2020-12-03 13:23:36.042744437 [ThreadId 4033] - DocumentHighlight request at position 262:36 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:36.042979994 [ThreadId 4034] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:36.043094568 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":12,"character":4},"end":{"line":12,"character":23}}},{"kind":2,"range":{"start":{"line":156,"character":29},"end":{"line":156,"character":48}}},{"kind":3,"range":{"start":{"line":173,"character":5},"end":{"line":173,"character":24}}},{"kind":2,"range":{"start":{"line":175,"character":23},"end":{"line":175,"character":42}}},{"kind":2,"range":{"start":{"line":176,"character":23},"end":{"line":176,"character":42}}},{"kind":2,"range":{"start":{"line":178,"character":25},"end":{"line":178,"character":44}}},{"kind":2,"range":{"start":{"line":179,"character":25},"end":{"line":179,"character":44}}},{"kind":2,"range":{"start":{"line":181,"character":22},"end":{"line":181,"character":41}}},{"kind":2,"range":{"start":{"line":237,"character":27},"end":{"line":237,"character":46}}},{"kind":2,"range":{"start":{"line":261,"character":23},"end":{"line":261,"character":42}}},{"kind":2,"range":{"start":{"line":618,"character":22},"end":{"line":618,"character":41}}},{"kind":2,"range":{"start":{"line":632,"character":29},"end":{"line":632,"character":48}}},{"kind":2,"range":{"start":{"line":829,"character":21},"end":{"line":829,"character":40}}},{"kind":2,"range":{"start":{"line":838,"character":18},"end":{"line":838,"character":37}}},{"kind":2,"range":{"start":{"line":848,"character":18},"end":{"line":848,"character":37}}},{"kind":2,"range":{"start":{"line":858,"character":22},"end":{"line":858,"character":41}}},{"kind":2,"range":{"start":{"line":884,"character":27},"end":{"line":884,"character":46}}},{"kind":2,"range":{"start":{"line":897,"character":21},"end":{"line":897,"character":40}}},{"kind":2,"range":{"start":{"line":909,"character":20},"end":{"line":909,"character":39}}}],"jsonrpc":"2.0","id":110}
2020-12-03 13:23:36.394466278 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":111,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":261,"character":23},"end":{"line":261,"character":42}},"context":{"diagnostics":[]}}}
2020-12-03 13:23:36.395006323 [ThreadId 4040] - finish: CodeAction (took 0.00s)
2020-12-03 13:23:36.395154827 [ThreadId 4042] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:23:36.39562925 [ThreadId 4044] - finish: importLens (took 0.00s)
2020-12-03 13:23:36.395904213 [ThreadId 4046] - finish: retrie (took 0.00s)
2020-12-03 13:23:36.396093975 [ThreadId 4048] - finish: tactic (took 0.00s)
2020-12-03 13:23:36.396155872 [ThreadId 4050] - finish: tactic (took 0.00s)
2020-12-03 13:23:36.396276377 [ThreadId 4052] - finish: tactic (took 0.00s)
2020-12-03 13:23:36.396381606 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":111}
2020-12-03 13:23:37.227096081 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":112,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":261,"character":36}}}
2020-12-03 13:23:37.227445554 [ThreadId 4057] - Definition request at position 262:37 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:37.227706104 [ThreadId 4058] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:37.227812013 [ThreadId 7] - <--2--{"result":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},"jsonrpc":"2.0","id":112}
2020-12-03 13:23:39.342764604 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":113,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":618,"character":22},"end":{"line":618,"character":41}},"context":{"diagnostics":[]}}}
2020-12-03 13:23:39.343301213 [ThreadId 4064] - finish: CodeAction (took 0.00s)
2020-12-03 13:23:39.343496285 [ThreadId 4066] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:23:39.343867937 [ThreadId 4068] - finish: importLens (took 0.00s)
2020-12-03 13:23:39.344170998 [ThreadId 4070] - finish: retrie (took 0.00s)
2020-12-03 13:23:39.344463575 [ThreadId 4072] - finish: tactic (took 0.00s)
2020-12-03 13:23:39.344524983 [ThreadId 4074] - finish: tactic (took 0.00s)
2020-12-03 13:23:39.344590397 [ThreadId 4076] - finish: tactic (took 0.00s)
2020-12-03 13:23:39.344705271 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":113}
2020-12-03 13:23:41.432424493 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":114,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":632,"character":29},"end":{"line":632,"character":48}},"context":{"diagnostics":[]}}}
2020-12-03 13:23:41.432871665 [ThreadId 4082] - finish: CodeAction (took 0.00s)
2020-12-03 13:23:41.433039799 [ThreadId 4084] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:23:41.433333926 [ThreadId 4086] - finish: importLens (took 0.00s)
2020-12-03 13:23:41.433657003 [ThreadId 4088] - finish: retrie (took 0.00s)
2020-12-03 13:23:41.43392144 [ThreadId 4090] - finish: tactic (took 0.00s)
2020-12-03 13:23:41.433995219 [ThreadId 4092] - finish: tactic (took 0.00s)
2020-12-03 13:23:41.434056881 [ThreadId 4094] - finish: tactic (took 0.00s)
2020-12-03 13:23:41.434180001 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":114}
2020-12-03 13:23:41.900624988 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":115,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":829,"character":21},"end":{"line":829,"character":40}},"context":{"diagnostics":[]}}}
2020-12-03 13:23:41.901142354 [ThreadId 4100] - finish: CodeAction (took 0.00s)
2020-12-03 13:23:41.901279287 [ThreadId 4102] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:23:41.90174712 [ThreadId 4104] - finish: importLens (took 0.00s)
2020-12-03 13:23:41.902110244 [ThreadId 4106] - finish: retrie (took 0.00s)
2020-12-03 13:23:41.902455381 [ThreadId 4108] - finish: tactic (took 0.00s)
2020-12-03 13:23:41.902591047 [ThreadId 4110] - finish: tactic (took 0.00s)
2020-12-03 13:23:41.902693286 [ThreadId 4112] - finish: tactic (took 0.00s)
2020-12-03 13:23:41.902872551 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":115}
2020-12-03 13:23:42.724677424 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":116,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":838,"character":18},"end":{"line":838,"character":37}},"context":{"diagnostics":[]}}}
2020-12-03 13:23:42.72526762 [ThreadId 4118] - finish: CodeAction (took 0.00s)
2020-12-03 13:23:42.725636685 [ThreadId 4120] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:23:42.726034471 [ThreadId 4122] - finish: importLens (took 0.00s)
2020-12-03 13:23:42.726433273 [ThreadId 4124] - finish: retrie (took 0.00s)
2020-12-03 13:23:42.72675404 [ThreadId 4126] - finish: tactic (took 0.00s)
2020-12-03 13:23:42.726817865 [ThreadId 4128] - finish: tactic (took 0.00s)
2020-12-03 13:23:42.726879503 [ThreadId 4130] - finish: tactic (took 0.00s)
2020-12-03 13:23:42.727007268 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":116}
2020-12-03 13:23:46.423332595 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":117,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":31,"character":25}}}
2020-12-03 13:23:46.423514832 [ThreadId 4135] - GhcIde.hover entered (ideLogger)
2020-12-03 13:23:46.423623238 [ThreadId 4135] - Hover request at position 32:26 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:46.423802458 [ThreadId 4136] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:46.42387619 [ThreadId 4139] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:23:46.423885201 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":27}}},"jsonrpc":"2.0","id":117}
2020-12-03 13:23:46.792950597 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":118,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":30,"character":20}}}
2020-12-03 13:23:46.793139222 [ThreadId 4143] - GhcIde.hover entered (ideLogger)
2020-12-03 13:23:46.793271538 [ThreadId 4143] - Hover request at position 31:21 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:46.793563952 [ThreadId 4144] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:46.79364481 [ThreadId 4147] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:23:46.793776534 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":41}}},"jsonrpc":"2.0","id":118}
2020-12-03 13:23:47.554389323 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":119,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":33,"character":23}}}
2020-12-03 13:23:47.554616349 [ThreadId 4151] - GhcIde.hover entered (ideLogger)
2020-12-03 13:23:47.554757349 [ThreadId 4151] - Hover request at position 34:24 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:47.555064776 [ThreadId 4152] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:47.555208708 [ThreadId 4155] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:23:47.555309334 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nlanguageOfScriptLanguageInEra\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:489:1*\n\n\n\n"},"range":{"start":{"line":33,"character":4},"end":{"line":33,"character":33}}},"jsonrpc":"2.0","id":119}
2020-12-03 13:23:48.009388248 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":120,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":32,"character":16}}}
2020-12-03 13:23:48.009617971 [ThreadId 4159] - GhcIde.hover entered (ideLogger)
2020-12-03 13:23:48.009737873 [ThreadId 4159] - Hover request at position 33:17 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:48.009947413 [ThreadId 4160] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:48.009980289 [ThreadId 4163] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:23:48.010413464 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nscriptLanguageSupportedInEra\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:468:1*\n\n\nCheck if a given script language is supported in a given era, and if so\n return the evidence.\n\n\n\n"},"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":32}}},"jsonrpc":"2.0","id":120}
2020-12-03 13:23:48.21577995 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":121,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":31,"character":15}}}
2020-12-03 13:23:48.21598596 [ThreadId 4167] - GhcIde.hover entered (ideLogger)
2020-12-03 13:23:48.216102228 [ThreadId 4167] - Hover request at position 32:16 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:48.216314675 [ThreadId 4168] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:48.216367254 [ThreadId 4171] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:23:48.21646123 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nScriptLanguageInEra\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:424:1*\n\n\n\n"},"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":23}}},"jsonrpc":"2.0","id":121}
2020-12-03 13:23:49.520098087 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":122,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":31,"character":16}}}
2020-12-03 13:23:49.520483956 [ThreadId 4175] - DocumentHighlight request at position 32:17 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:23:49.52077478 [ThreadId 4176] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:23:49.520909609 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":23}}},{"kind":2,"range":{"start":{"line":407,"character":20},"end":{"line":407,"character":39}}},{"kind":3,"range":{"start":{"line":423,"character":5},"end":{"line":423,"character":24}}},{"kind":2,"range":{"start":{"line":425,"character":32},"end":{"line":425,"character":51}}},{"kind":2,"range":{"start":{"line":426,"character":32},"end":{"line":426,"character":51}}},{"kind":2,"range":{"start":{"line":427,"character":32},"end":{"line":427,"character":51}}},{"kind":2,"range":{"start":{"line":429,"character":32},"end":{"line":429,"character":51}}},{"kind":2,"range":{"start":{"line":430,"character":32},"end":{"line":430,"character":51}}},{"kind":2,"range":{"start":{"line":432,"character":24},"end":{"line":432,"character":43}}},{"kind":2,"range":{"start":{"line":433,"character":24},"end":{"line":433,"character":43}}},{"kind":2,"range":{"start":{"line":466,"character":39},"end":{"line":466,"character":58}}},{"kind":2,"range":{"start":{"line":486,"character":33},"end":{"line":486,"character":52}}},{"kind":2,"range":{"start":{"line":497,"character":28},"end":{"line":497,"character":47}}}],"jsonrpc":"2.0","id":122}
2020-12-03 13:23:49.8985694 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":123,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":31,"character":4},"end":{"line":31,"character":23}},"context":{"diagnostics":[]}}}
2020-12-03 13:23:49.899183545 [ThreadId 4182] - finish: CodeAction (took 0.00s)
2020-12-03 13:23:49.899291461 [ThreadId 4184] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:23:49.899594428 [ThreadId 4186] - finish: importLens (took 0.00s)
2020-12-03 13:23:49.899863884 [ThreadId 4188] - finish: retrie (took 0.00s)
2020-12-03 13:23:49.900113434 [ThreadId 4190] - finish: tactic (took 0.00s)
2020-12-03 13:23:49.900180713 [ThreadId 4192] - finish: tactic (took 0.00s)
2020-12-03 13:23:49.900314721 [ThreadId 4194] - finish: tactic (took 0.00s)
2020-12-03 13:23:49.90041381 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":123}
2020-12-03 13:23:52.107817566 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":124,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":407,"character":20},"end":{"line":407,"character":39}},"context":{"diagnostics":[]}}}
2020-12-03 13:23:52.108311266 [ThreadId 4200] - finish: CodeAction (took 0.00s)
2020-12-03 13:23:52.108423564 [ThreadId 4202] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:23:52.108679544 [ThreadId 4204] - finish: importLens (took 0.00s)
2020-12-03 13:23:52.108982824 [ThreadId 4206] - finish: retrie (took 0.00s)
2020-12-03 13:23:52.109258883 [ThreadId 4208] - finish: tactic (took 0.00s)
2020-12-03 13:23:52.109344955 [ThreadId 4210] - finish: tactic (took 0.00s)
2020-12-03 13:23:52.109496079 [ThreadId 4212] - finish: tactic (took 0.00s)
2020-12-03 13:23:52.109624439 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":124}
2020-12-03 13:23:56.239518932 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":125,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":423,"character":5},"end":{"line":423,"character":24}},"context":{"diagnostics":[]}}}
2020-12-03 13:23:56.240017977 [ThreadId 4218] - finish: CodeAction (took 0.00s)
2020-12-03 13:23:56.240236893 [ThreadId 4220] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:23:56.240627319 [ThreadId 4222] - finish: importLens (took 0.00s)
2020-12-03 13:23:56.240902477 [ThreadId 4224] - finish: retrie (took 0.00s)
2020-12-03 13:23:56.241106188 [ThreadId 4226] - finish: tactic (took 0.00s)
2020-12-03 13:23:56.24116614 [ThreadId 4228] - finish: tactic (took 0.00s)
2020-12-03 13:23:56.241242488 [ThreadId 4230] - finish: tactic (took 0.00s)
2020-12-03 13:23:56.241359552 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":125}
2020-12-03 13:26:33.821475295 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":126,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":777,"character":31},"end":{"line":777,"character":36}},"context":{"diagnostics":[]}}}
2020-12-03 13:26:33.822136827 [ThreadId 4236] - finish: CodeAction (took 0.00s)
2020-12-03 13:26:33.82232492 [ThreadId 4238] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:26:33.82268342 [ThreadId 4240] - finish: importLens (took 0.00s)
2020-12-03 13:26:33.82302452 [ThreadId 4242] - finish: retrie (took 0.00s)
2020-12-03 13:26:33.823221068 [ThreadId 4244] - finish: tactic (took 0.00s)
2020-12-03 13:26:33.823285111 [ThreadId 4246] - finish: tactic (took 0.00s)
2020-12-03 13:26:33.823338932 [ThreadId 4248] - finish: tactic (took 0.00s)
2020-12-03 13:26:33.823475707 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":126}
2020-12-03 13:26:38.149334629 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":127,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 13:26:38.149798391 [ThreadId 4254] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 13:26:38.151340276 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":127}
2020-12-03 13:26:38.271749338 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":128,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"}}}
2020-12-03 13:26:38.272255862 [ThreadId 4260] - finish: C:GetParsedModule (took 0.00s)
2020-12-03 13:26:38.273708058 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":7,"character":7},"end":{"line":7,"character":25}},"kind":1,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}},"kind":2,"children":[{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":24}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}},"kind":2,"name":"import Data.Foldable","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":39}}},{"selectionRange":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}},"kind":2,"name":"import Data.Scientific","range":{"start":{"line":63,"character":0},"end":{"line":63,"character":51}}},{"selectionRange":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}},"kind":2,"name":"import Data.String","range":{"start":{"line":64,"character":0},"end":{"line":64,"character":39}}},{"selectionRange":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":65,"character":0},"end":{"line":65,"character":33}}},{"selectionRange":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":66,"character":0},"end":{"line":66,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":67}}},{"selectionRange":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":70,"character":0},"end":{"line":70,"character":60}}},{"selectionRange":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":71,"character":0},"end":{"line":71,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"kind":2,"name":"import Data.Aeson.Types","range":{"start":{"line":72,"character":0},"end":{"line":72,"character":42}},"detail":"qualified"},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"kind":2,"name":"import Data.Sequence.Strict","range":{"start":{"line":73,"character":0},"end":{"line":73,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":37}}},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}},"kind":2,"name":"import Control.Applicative","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":36}}},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}},"kind":2,"name":"import Control.Monad","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":30}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":80,"character":0},"end":{"line":80,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":81,"character":0},"end":{"line":81,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"kind":2,"name":"import Cardano.Crypto.Hash.Class","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}},"kind":2,"name":"import Cardano.Slotting.Slot","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":47}}},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":88,"character":0},"end":{"line":88,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.Timelocks","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":63}},"detail":"qualified"},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Eras","range":{"start":{"line":91,"character":0},"end":{"line":92,"character":69}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":94,"character":0},"end":{"line":94,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":33}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Hash","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":40}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":42}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseJSON","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":42}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}},"kind":2,"name":"import Cardano.Api.SerialiseRaw","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":41}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":50}}}],"name":"imports","range":{"start":{"line":59,"character":0},"end":{"line":103,"character":50}}},{"selectionRange":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV1","range":{"start":{"line":121,"character":0},"end":{"line":121,"character":19}}},{"selectionRange":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}},"kind":23,"children":[],"name":"SimpleScriptV2","range":{"start":{"line":131,"character":0},"end":{"line":131,"character":19}}},{"selectionRange":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}},"kind":23,"children":[],"name":"PlutusScriptV1","range":{"start":{"line":136,"character":0},"end":{"line":136,"character":19}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV1","range":{"start":{"line":138,"character":0},"end":{"line":140,"character":38}}},{"selectionRange":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}},"kind":11,"name":"HasTypeProxy SimpleScriptV2","range":{"start":{"line":142,"character":0},"end":{"line":144,"character":38}}},{"selectionRange":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}},"kind":11,"name":"HasTypeProxy PlutusScriptV1","range":{"start":{"line":146,"character":0},"end":{"line":148,"character":38}}},{"selectionRange":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":156,"character":5},"end":{"line":156,"character":25}},"kind":9,"name":"SimpleScriptLanguage","range":{"start":{"line":156,"character":5},"end":{"line":156,"character":76}}},{"selectionRange":{"start":{"line":158,"character":5},"end":{"line":158,"character":25}},"kind":9,"name":"PlutusScriptLanguage","range":{"start":{"line":158,"character":5},"end":{"line":158,"character":76}}}],"name":"ScriptLanguage","range":{"start":{"line":154,"character":0},"end":{"line":158,"character":76}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}},"kind":11,"name":"TestEquality ScriptLanguage","range":{"start":{"line":163,"character":0},"end":{"line":170,"character":31}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":175,"character":5},"end":{"line":175,"character":19}},"kind":9,"name":"SimpleScriptV1","range":{"start":{"line":175,"character":5},"end":{"line":175,"character":57}}},{"selectionRange":{"start":{"line":176,"character":5},"end":{"line":176,"character":19}},"kind":9,"name":"SimpleScriptV2","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}}],"name":"SimpleScriptVersion","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":57}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}},"kind":11,"name":"TestEquality SimpleScriptVersion","range":{"start":{"line":181,"character":0},"end":{"line":184,"character":56}}},{"selectionRange":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}},"kind":23,"children":[],"name":"PlutusScriptVersion","range":{"start":{"line":187,"character":0},"end":{"line":187,"character":29}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}},"kind":11,"name":"TestEquality PlutusScriptVersion","range":{"start":{"line":194,"character":0},"end":{"line":195,"character":39}}},{"selectionRange":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}},"kind":23,"children":[{"selectionRange":{"start":{"line":199,"character":5},"end":{"line":199,"character":22}},"kind":9,"name":"AnyScriptLanguage","range":{"start":{"line":199,"character":5},"end":{"line":199,"character":66}}}],"name":"AnyScriptLanguage","range":{"start":{"line":198,"character":0},"end":{"line":199,"character":66}}},{"selectionRange":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}},"kind":11,"name":"Eq AnyScriptLanguage","range":{"start":{"line":203,"character":0},"end":{"line":207,"character":25}}},{"selectionRange":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}},"kind":11,"name":"Enum AnyScriptLanguage","range":{"start":{"line":209,"character":0},"end":{"line":216,"character":78}}},{"selectionRange":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}},"kind":11,"name":"Bounded AnyScriptLanguage","range":{"start":{"line":218,"character":0},"end":{"line":220,"character":70}}},{"selectionRange":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"kind":5,"children":[{"selectionRange":{"start":{"line":224,"character":4},"end":{"line":224,"character":18}},"kind":6,"name":"scriptLanguage","range":{"start":{"line":224,"character":4},"end":{"line":224,"character":41}}}],"name":"IsScriptLanguage lang","range":{"start":{"line":223,"character":0},"end":{"line":224,"character":41}},"detail":"class"},{"selectionRange":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV1","range":{"start":{"line":226,"character":0},"end":{"line":227,"character":56}}},{"selectionRange":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}},"kind":11,"name":"IsScriptLanguage SimpleScriptV2","range":{"start":{"line":229,"character":0},"end":{"line":230,"character":56}}},{"selectionRange":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"kind":5,"children":[{"selectionRange":{"start":{"line":237,"character":4},"end":{"line":237,"character":23}},"kind":6,"name":"simpleScriptVersion","range":{"start":{"line":237,"character":4},"end":{"line":237,"character":51}}}],"name":"IsSimpleScriptLanguage lang","range":{"start":{"line":236,"character":0},"end":{"line":237,"character":51}},"detail":"class"},{"selectionRange":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV1","range":{"start":{"line":239,"character":0},"end":{"line":240,"character":40}}},{"selectionRange":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}},"kind":11,"name":"IsSimpleScriptLanguage SimpleScriptV2","range":{"start":{"line":242,"character":0},"end":{"line":243,"character":40}}},{"selectionRange":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}},"kind":23,"children":[{"selectionRange":{"start":{"line":261,"character":5},"end":{"line":261,"character":17}},"kind":9,"name":"SimpleScript","range":{"start":{"line":261,"character":5},"end":{"line":263,"character":32}}},{"selectionRange":{"start":{"line":269,"character":5},"end":{"line":269,"character":17}},"kind":9,"name":"PlutusScript","range":{"start":{"line":269,"character":5},"end":{"line":271,"character":32}}}],"name":"Script","range":{"start":{"line":259,"character":0},"end":{"line":271,"character":32}}},{"selectionRange":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}},"kind":11,"name":"HasTypeProxy lang => HasTypeProxy (Script lang)","range":{"start":{"line":276,"character":0},"end":{"line":278,"character":68}}},{"selectionRange":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}},"kind":11,"name":"IsScriptLanguage lang => SerialiseAsCBOR (Script lang)","range":{"start":{"line":280,"character":0},"end":{"line":301,"character":46}}},{"selectionRange":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}},"kind":11,"name":"IsScriptLanguage lang => HasTextEnvelope (Script lang)","range":{"start":{"line":304,"character":0},"end":{"line":309,"character":46}}},{"selectionRange":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}},"kind":23,"children":[{"selectionRange":{"start":{"line":323,"character":5},"end":{"line":323,"character":20}},"kind":9,"name":"ScriptInAnyLang","range":{"start":{"line":323,"character":5},"end":{"line":325,"character":39}}}],"name":"ScriptInAnyLang","range":{"start":{"line":322,"character":0},"end":{"line":325,"character":39}}},{"selectionRange":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}},"kind":11,"name":"Eq ScriptInAnyLang","range":{"start":{"line":330,"character":0},"end":{"line":335,"character":38}}},{"selectionRange":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}},"kind":12,"name":"toScriptInAnyLang","range":{"start":{"line":345,"character":0},"end":{"line":346,"character":46}}},{"selectionRange":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}},"kind":11,"name":"HasTypeProxy ScriptInAnyLang","range":{"start":{"line":348,"character":0},"end":{"line":350,"character":39}}},{"selectionRange":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}},"kind":11,"name":"SerialiseAsCBOR ScriptInAnyLang","range":{"start":{"line":352,"character":0},"end":{"line":396,"character":74}}},{"selectionRange":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}},"kind":11,"name":"HasTextEnvelope ScriptInAnyLang","range":{"start":{"line":398,"character":0},"end":{"line":399,"character":33}}},{"selectionRange":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}},"kind":23,"children":[{"selectionRange":{"start":{"line":407,"character":5},"end":{"line":407,"character":16}},"kind":9,"name":"ScriptInEra","range":{"start":{"line":407,"character":5},"end":{"line":409,"character":35}}}],"name":"ScriptInEra","range":{"start":{"line":406,"character":0},"end":{"line":409,"character":35}}},{"selectionRange":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}},"kind":11,"name":"Eq (ScriptInEra era)","range":{"start":{"line":414,"character":0},"end":{"line":420,"character":38}}},{"selectionRange":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":5},"end":{"line":425,"character":28}},"kind":9,"name":"SimpleScriptV1InShelley","range":{"start":{"line":425,"character":5},"end":{"line":425,"character":77}}},{"selectionRange":{"start":{"line":426,"character":5},"end":{"line":426,"character":28}},"kind":9,"name":"SimpleScriptV1InAllegra","range":{"start":{"line":426,"character":5},"end":{"line":426,"character":77}}},{"selectionRange":{"start":{"line":427,"character":5},"end":{"line":427,"character":25}},"kind":9,"name":"SimpleScriptV1InMary","range":{"start":{"line":427,"character":5},"end":{"line":427,"character":74}}},{"selectionRange":{"start":{"line":429,"character":5},"end":{"line":429,"character":28}},"kind":9,"name":"SimpleScriptV2InAllegra","range":{"start":{"line":429,"character":5},"end":{"line":429,"character":77}}},{"selectionRange":{"start":{"line":430,"character":5},"end":{"line":430,"character":25}},"kind":9,"name":"SimpleScriptV2InMary","range":{"start":{"line":430,"character":5},"end":{"line":430,"character":74}}}],"name":"ScriptLanguageInEra","range":{"start":{"line":423,"character":0},"end":{"line":430,"character":74}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (ScriptInEra era)","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":72}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (ScriptInEra era)","range":{"start":{"line":439,"character":0},"end":{"line":451,"character":47}}},{"selectionRange":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}},"kind":11,"name":"IsShelleyBasedEra era => HasTextEnvelope (ScriptInEra era)","range":{"start":{"line":453,"character":0},"end":{"line":458,"character":55}}},{"selectionRange":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}},"kind":12,"name":"scriptLanguageSupportedInEra","range":{"start":{"line":467,"character":0},"end":{"line":484,"character":18}}},{"selectionRange":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}},"kind":12,"name":"languageOfScriptLanguageInEra","range":{"start":{"line":488,"character":0},"end":{"line":495,"character":68}}},{"selectionRange":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}},"kind":12,"name":"eraOfScriptLanguageInEra","range":{"start":{"line":499,"character":0},"end":{"line":512,"character":2}}},{"selectionRange":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}},"kind":12,"name":"toScriptInEra","range":{"start":{"line":514,"character":0},"end":{"line":516,"character":32}}},{"selectionRange":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}},"kind":12,"name":"eraOfScriptInEra","range":{"start":{"line":519,"character":0},"end":{"line":530,"character":2}}},{"selectionRange":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}},"kind":23,"children":[{"selectionRange":{"start":{"line":531,"character":21},"end":{"line":531,"character":31}},"kind":9,"name":"ScriptHash","range":{"start":{"line":531,"character":21},"end":{"line":531,"character":68}}}],"name":"ScriptHash","range":{"start":{"line":531,"character":0},"end":{"line":533,"character":59}}},{"selectionRange":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}},"kind":11,"name":"HasTypeProxy ScriptHash","range":{"start":{"line":535,"character":0},"end":{"line":537,"character":34}}},{"selectionRange":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}},"kind":11,"name":"SerialiseAsRawBytes ScriptHash","range":{"start":{"line":539,"character":0},"end":{"line":544,"character":65}}},{"selectionRange":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}},"kind":12,"name":"hashScript","range":{"start":{"line":548,"character":0},"end":{"line":564,"character":5}}},{"selectionRange":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}},"kind":12,"name":"toShelleyScriptHash","range":{"start":{"line":569,"character":0},"end":{"line":569,"character":62}}},{"selectionRange":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}},"kind":12,"name":"fromShelleyScriptHash","range":{"start":{"line":573,"character":0},"end":{"line":573,"character":60}}},{"selectionRange":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}},"kind":12,"name":"coerceShelleyScriptHash","range":{"start":{"line":578,"character":0},"end":{"line":579,"character":42}}},{"selectionRange":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}},"kind":23,"children":[{"selectionRange":{"start":{"line":588,"character":5},"end":{"line":588,"character":21}},"kind":9,"name":"RequireSignature","range":{"start":{"line":588,"character":5},"end":{"line":589,"character":43}}},{"selectionRange":{"start":{"line":591,"character":5},"end":{"line":591,"character":22}},"kind":9,"name":"RequireTimeBefore","range":{"start":{"line":591,"character":5},"end":{"line":593,"character":43}}},{"selectionRange":{"start":{"line":595,"character":5},"end":{"line":595,"character":21}},"kind":9,"name":"RequireTimeAfter","range":{"start":{"line":595,"character":5},"end":{"line":597,"character":43}}},{"selectionRange":{"start":{"line":599,"character":5},"end":{"line":599,"character":17}},"kind":9,"name":"RequireAllOf","range":{"start":{"line":599,"character":5},"end":{"line":599,"character":73}}},{"selectionRange":{"start":{"line":600,"character":5},"end":{"line":600,"character":17}},"kind":9,"name":"RequireAnyOf","range":{"start":{"line":600,"character":5},"end":{"line":600,"character":73}}},{"selectionRange":{"start":{"line":601,"character":5},"end":{"line":601,"character":15}},"kind":9,"name":"RequireMOf","range":{"start":{"line":601,"character":5},"end":{"line":601,"character":73}}}],"name":"SimpleScript","range":{"start":{"line":586,"character":0},"end":{"line":601,"character":73}}},{"selectionRange":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}},"kind":23,"children":[{"selectionRange":{"start":{"line":613,"character":5},"end":{"line":613,"character":30}},"kind":9,"name":"TimeLocksInSimpleScriptV2","range":{"start":{"line":613,"character":5},"end":{"line":613,"character":67}}}],"name":"TimeLocksSupported","range":{"start":{"line":612,"character":0},"end":{"line":613,"character":67}}},{"selectionRange":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}},"kind":12,"name":"timeLocksSupported","range":{"start":{"line":620,"character":0},"end":{"line":631,"character":2}}},{"selectionRange":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}},"kind":12,"name":"adjustSimpleScriptVersion","range":{"start":{"line":635,"character":0},"end":{"line":649,"character":58}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}},"kind":12,"name":"toShelleyScript","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":2}}},{"selectionRange":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}},"kind":12,"name":"toShelleyMultiSig","range":{"start":{"line":671,"character":0},"end":{"line":678,"character":57}}},{"selectionRange":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}},"kind":12,"name":"fromShelleyMultiSig","range":{"start":{"line":683,"character":0},"end":{"line":690,"character":57}}},{"selectionRange":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}},"kind":12,"name":"toAllegraTimelock","range":{"start":{"line":699,"character":0},"end":{"line":708,"character":61}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}},"kind":12,"name":"fromAllegraTimelock","range":{"start":{"line":718,"character":0},"end":{"line":726,"character":72}}},{"selectionRange":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}},"kind":11,"name":"ToJSON (Script lang)","range":{"start":{"line":733,"character":0},"end":{"line":734,"character":48}}},{"selectionRange":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}},"kind":11,"name":"ToJSON ScriptInAnyLang","range":{"start":{"line":736,"character":0},"end":{"line":737,"character":51}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}},"kind":11,"name":"ToJSON (ScriptInEra era)","range":{"start":{"line":739,"character":0},"end":{"line":740,"character":47}}},{"selectionRange":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}},"kind":11,"name":"ToJSON (SimpleScript lang)","range":{"start":{"line":742,"character":0},"end":{"line":763,"character":12}}},{"selectionRange":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}},"kind":11,"name":"IsScriptLanguage lang => FromJSON (Script lang)","range":{"start":{"line":766,"character":0},"end":{"line":771,"character":50}}},{"selectionRange":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}},"kind":11,"name":"FromJSON ScriptInAnyLang","range":{"start":{"line":774,"character":0},"end":{"line":789,"character":69}}},{"selectionRange":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}},"kind":11,"name":"IsCardanoEra era => FromJSON (ScriptInEra era)","range":{"start":{"line":792,"character":0},"end":{"line":822,"character":69}}},{"selectionRange":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}},"kind":11,"name":"IsSimpleScriptLanguage lang => FromJSON (SimpleScript lang)","range":{"start":{"line":825,"character":0},"end":{"line":826,"character":51}}},{"selectionRange":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}},"kind":12,"name":"parseSimpleScript","range":{"start":{"line":831,"character":0},"end":{"line":836,"character":52}}},{"selectionRange":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}},"kind":12,"name":"parseScriptAny","range":{"start":{"line":840,"character":0},"end":{"line":846,"character":50}}},{"selectionRange":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}},"kind":12,"name":"parseScriptAll","range":{"start":{"line":850,"character":0},"end":{"line":856,"character":50}}},{"selectionRange":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}},"kind":12,"name":"parseScriptAtLeast","range":{"start":{"line":860,"character":0},"end":{"line":882,"character":61}}},{"selectionRange":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}},"kind":12,"name":"gatherSimpleScriptTerms","range":{"start":{"line":886,"character":0},"end":{"line":886,"character":76}}},{"selectionRange":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}},"kind":12,"name":"parseScriptSig","range":{"start":{"line":889,"character":0},"end":{"line":895,"character":54}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}},"kind":12,"name":"parseScriptBefore","range":{"start":{"line":899,"character":0},"end":{"line":907,"character":53}}},{"selectionRange":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}},"kind":12,"name":"parseScriptAfter","range":{"start":{"line":911,"character":0},"end":{"line":919,"character":58}}},{"selectionRange":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}},"kind":12,"name":"parsePaymentKeyHash","range":{"start":{"line":922,"character":0},"end":{"line":925,"character":83}}}],"name":"Cardano.Api.Script","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":128}
2020-12-03 13:26:38.823229386 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":129,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":771,"character":48}}}
2020-12-03 13:26:38.823431692 [ThreadId 4265] - GhcIde.hover entered (ideLogger)
2020-12-03 13:26:38.823557664 [ThreadId 4265] - Hover request at position 772:49 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:26:38.823752049 [ThreadId 4266] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:26:38.823844163 [ThreadId 4269] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:26:38.823895226 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\n_ :: Parser (Script lang)\n```\n"},"range":{"start":{"line":771,"character":35},"end":{"line":771,"character":50}}},"jsonrpc":"2.0","id":129}
2020-12-03 13:26:40.340593716 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":130,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":779,"character":44}}}
2020-12-03 13:26:40.340980289 [ThreadId 4273] - DocumentHighlight request at position 780:45 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:26:40.341363931 [ThreadId 4274] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:26:40.341601116 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":770,"character":37},"end":{"line":770,"character":54}}},{"kind":2,"range":{"start":{"line":779,"character":39},"end":{"line":779,"character":56}}},{"kind":2,"range":{"start":{"line":799,"character":20},"end":{"line":799,"character":37}}},{"kind":2,"range":{"start":{"line":805,"character":20},"end":{"line":805,"character":37}}},{"kind":2,"range":{"start":{"line":815,"character":17},"end":{"line":815,"character":34}}},{"kind":2,"range":{"start":{"line":826,"character":14},"end":{"line":826,"character":31}}},{"kind":2,"range":{"start":{"line":829,"character":0},"end":{"line":829,"character":17}}},{"kind":3,"range":{"start":{"line":831,"character":0},"end":{"line":831,"character":17}}},{"kind":2,"range":{"start":{"line":886,"character":37},"end":{"line":886,"character":54}}}],"jsonrpc":"2.0","id":130}
2020-12-03 13:26:40.713638798 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":131,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":779,"character":39},"end":{"line":779,"character":56}},"context":{"diagnostics":[]}}}
2020-12-03 13:26:40.714214273 [ThreadId 4280] - finish: CodeAction (took 0.00s)
2020-12-03 13:26:40.714404313 [ThreadId 4282] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:26:40.714739203 [ThreadId 4284] - finish: importLens (took 0.00s)
2020-12-03 13:26:40.714936514 [ThreadId 4286] - finish: retrie (took 0.00s)
2020-12-03 13:26:40.715127437 [ThreadId 4288] - finish: tactic (took 0.00s)
2020-12-03 13:26:40.71521049 [ThreadId 4290] - finish: tactic (took 0.00s)
2020-12-03 13:26:40.715265119 [ThreadId 4292] - finish: tactic (took 0.00s)
2020-12-03 13:26:40.715380422 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":131}
2020-12-03 13:26:41.495589049 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":132,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":779,"character":65}}}
2020-12-03 13:26:41.495810365 [ThreadId 4297] - GhcIde.hover entered (ideLogger)
2020-12-03 13:26:41.495927872 [ThreadId 4297] - Hover request at position 780:66 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:26:41.496154037 [ThreadId 4298] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:26:41.496229221 [ThreadId 4301] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:26:41.496476783 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nSimpleScriptV2\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:177:6*\n\n\n\n"},"range":{"start":{"line":779,"character":57},"end":{"line":779,"character":71}}},"jsonrpc":"2.0","id":132}
2020-12-03 13:26:41.922432555 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":133,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":779,"character":65}}}
2020-12-03 13:26:41.922745278 [ThreadId 4305] - Definition request at position 780:66 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:26:41.923066394 [ThreadId 4306] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:26:41.923425461 [ThreadId 7] - <--2--{"result":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","range":{"start":{"line":176,"character":5},"end":{"line":176,"character":57}}},"jsonrpc":"2.0","id":133}
2020-12-03 13:26:42.782026426 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":134,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":799,"character":20},"end":{"line":799,"character":37}},"context":{"diagnostics":[]}}}
2020-12-03 13:26:42.782516955 [ThreadId 4312] - finish: CodeAction (took 0.00s)
2020-12-03 13:26:42.782622611 [ThreadId 4314] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:26:42.783010472 [ThreadId 4316] - finish: importLens (took 0.00s)
2020-12-03 13:26:42.783280562 [ThreadId 4318] - finish: retrie (took 0.00s)
2020-12-03 13:26:42.783541079 [ThreadId 4320] - finish: tactic (took 0.00s)
2020-12-03 13:26:42.783630233 [ThreadId 4322] - finish: tactic (took 0.00s)
2020-12-03 13:26:42.783789444 [ThreadId 4324] - finish: tactic (took 0.00s)
2020-12-03 13:26:42.783986352 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":134}
2020-12-03 13:26:44.456607877 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":135,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":805,"character":20},"end":{"line":805,"character":37}},"context":{"diagnostics":[]}}}
2020-12-03 13:26:44.457132539 [ThreadId 4330] - finish: CodeAction (took 0.00s)
2020-12-03 13:26:44.457367718 [ThreadId 4332] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:26:44.457640227 [ThreadId 4334] - finish: importLens (took 0.00s)
2020-12-03 13:26:44.457904056 [ThreadId 4336] - finish: retrie (took 0.00s)
2020-12-03 13:26:44.458113112 [ThreadId 4338] - finish: tactic (took 0.00s)
2020-12-03 13:26:44.458212989 [ThreadId 4340] - finish: tactic (took 0.00s)
2020-12-03 13:26:44.458280012 [ThreadId 4342] - finish: tactic (took 0.00s)
2020-12-03 13:26:44.458488059 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":135}
2020-12-03 13:26:45.15790408 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":136,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":815,"character":17},"end":{"line":815,"character":34}},"context":{"diagnostics":[]}}}
2020-12-03 13:26:45.158432874 [ThreadId 4348] - finish: CodeAction (took 0.00s)
2020-12-03 13:26:45.158591457 [ThreadId 4350] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:26:45.159068157 [ThreadId 4352] - finish: importLens (took 0.00s)
2020-12-03 13:26:45.159349249 [ThreadId 4354] - finish: retrie (took 0.00s)
2020-12-03 13:26:45.159611673 [ThreadId 4356] - finish: tactic (took 0.00s)
2020-12-03 13:26:45.159686238 [ThreadId 4358] - finish: tactic (took 0.00s)
2020-12-03 13:26:45.159762308 [ThreadId 4360] - finish: tactic (took 0.00s)
2020-12-03 13:26:45.159945186 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":136}
2020-12-03 13:26:45.851452276 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":137,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":826,"character":14},"end":{"line":826,"character":31}},"context":{"diagnostics":[]}}}
2020-12-03 13:26:45.851954811 [ThreadId 4366] - finish: CodeAction (took 0.00s)
2020-12-03 13:26:45.852140955 [ThreadId 4368] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:26:45.852399947 [ThreadId 4370] - finish: importLens (took 0.00s)
2020-12-03 13:26:45.852746715 [ThreadId 4372] - finish: retrie (took 0.00s)
2020-12-03 13:26:45.85301402 [ThreadId 4374] - finish: tactic (took 0.00s)
2020-12-03 13:26:45.853118042 [ThreadId 4376] - finish: tactic (took 0.00s)
2020-12-03 13:26:45.853198892 [ThreadId 4378] - finish: tactic (took 0.00s)
2020-12-03 13:26:45.853389217 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":137}
2020-12-03 13:26:46.330579445 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":138,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":829,"character":0},"end":{"line":829,"character":17}},"context":{"diagnostics":[]}}}
2020-12-03 13:26:46.331075686 [ThreadId 4384] - finish: CodeAction (took 0.00s)
2020-12-03 13:26:46.331298334 [ThreadId 4386] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:26:46.331549291 [ThreadId 4388] - finish: importLens (took 0.00s)
2020-12-03 13:26:46.331834476 [ThreadId 4390] - finish: retrie (took 0.00s)
2020-12-03 13:26:46.332213537 [ThreadId 4392] - finish: tactic (took 0.00s)
2020-12-03 13:26:46.332525628 [ThreadId 4394] - finish: tactic (took 0.00s)
2020-12-03 13:26:46.332605746 [ThreadId 4396] - finish: tactic (took 0.00s)
2020-12-03 13:26:46.333180857 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":138}
2020-12-03 13:26:48.160959059 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":139,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":833,"character":38}}}
2020-12-03 13:26:48.16116093 [ThreadId 4401] - GhcIde.hover entered (ideLogger)
2020-12-03 13:26:48.161297169 [ThreadId 4401] - Hover request at position 834:39 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:26:48.161553213 [ThreadId 4402] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:26:48.161659489 [ThreadId 4405] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:26:48.161886293 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nparseScriptAfter :: forall lang.\nSimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:912:1*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: SimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n"},"range":{"start":{"line":833,"character":27},"end":{"line":833,"character":43}}},"jsonrpc":"2.0","id":139}
2020-12-03 13:26:48.686897859 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":140,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":833,"character":36}}}
2020-12-03 13:26:48.687125041 [ThreadId 4409] - GhcIde.hover entered (ideLogger)
2020-12-03 13:26:48.68727411 [ThreadId 4409] - Hover request at position 834:37 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:26:48.687547619 [ThreadId 4413] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:26:48.687517046 [ThreadId 4410] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:26:48.6878836 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nparseScriptAfter :: forall lang.\nSimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:912:1*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: SimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n"},"range":{"start":{"line":833,"character":27},"end":{"line":833,"character":43}}},"jsonrpc":"2.0","id":140}
2020-12-03 13:26:48.882079805 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":141,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":832,"character":36}}}
2020-12-03 13:26:48.88228993 [ThreadId 4417] - GhcIde.hover entered (ideLogger)
2020-12-03 13:26:48.88240378 [ThreadId 4417] - Hover request at position 833:37 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:26:48.882596072 [ThreadId 4419] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:26:48.882688235 [ThreadId 4421] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:26:48.882980087 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nparseScriptBefore :: forall lang.\nSimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:900:1*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: SimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n"},"range":{"start":{"line":832,"character":27},"end":{"line":832,"character":44}}},"jsonrpc":"2.0","id":141}
2020-12-03 13:26:52.295019377 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":142,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":833,"character":36}}}
2020-12-03 13:26:52.295294459 [ThreadId 4425] - GhcIde.hover entered (ideLogger)
2020-12-03 13:26:52.295459578 [ThreadId 4425] - Hover request at position 834:37 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:26:52.295669234 [ThreadId 4426] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:26:52.295699736 [ThreadId 4429] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:26:52.29607871 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nparseScriptAfter :: forall lang.\nSimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:912:1*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: SimpleScriptVersion lang -> Value -> Parser (SimpleScript lang)\n```\n"},"range":{"start":{"line":833,"character":27},"end":{"line":833,"character":43}}},"jsonrpc":"2.0","id":142}
2020-12-03 13:26:52.510052368 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":143,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":833,"character":37}}}
2020-12-03 13:26:52.510257935 [ThreadId 4433] - DocumentHighlight request at position 834:38 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:26:52.51049135 [ThreadId 4434] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:26:52.510748991 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":833,"character":27},"end":{"line":833,"character":43}}},{"kind":2,"range":{"start":{"line":909,"character":0},"end":{"line":909,"character":16}}},{"kind":3,"range":{"start":{"line":911,"character":0},"end":{"line":911,"character":16}}}],"jsonrpc":"2.0","id":143}
2020-12-03 13:26:52.873721829 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":144,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":833,"character":27},"end":{"line":833,"character":43}},"context":{"diagnostics":[]}}}
2020-12-03 13:26:52.874152729 [ThreadId 4440] - finish: CodeAction (took 0.00s)
2020-12-03 13:26:52.874245028 [ThreadId 4442] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:26:52.874587954 [ThreadId 4444] - finish: importLens (took 0.00s)
2020-12-03 13:26:52.874841148 [ThreadId 4446] - finish: retrie (took 0.00s)
2020-12-03 13:26:52.875099819 [ThreadId 4448] - finish: tactic (took 0.00s)
2020-12-03 13:26:52.875196046 [ThreadId 4450] - finish: tactic (took 0.00s)
2020-12-03 13:26:52.875249811 [ThreadId 4452] - finish: tactic (took 0.00s)
2020-12-03 13:26:52.875518935 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":144}
2020-12-03 13:26:53.995107816 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":145,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"range":{"start":{"line":909,"character":0},"end":{"line":909,"character":16}},"context":{"diagnostics":[]}}}
2020-12-03 13:26:53.995639189 [ThreadId 4458] - finish: CodeAction (took 0.00s)
2020-12-03 13:26:53.995898265 [ThreadId 4460] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:26:53.996247936 [ThreadId 4462] - finish: importLens (took 0.00s)
2020-12-03 13:26:53.996447862 [ThreadId 4464] - finish: retrie (took 0.00s)
2020-12-03 13:26:53.996667234 [ThreadId 4466] - finish: tactic (took 0.00s)
2020-12-03 13:26:53.996733281 [ThreadId 4468] - finish: tactic (took 0.00s)
2020-12-03 13:26:53.996795536 [ThreadId 4470] - finish: tactic (took 0.00s)
2020-12-03 13:26:53.996931363 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":145}
2020-12-03 13:26:55.178155318 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":146,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":910,"character":43}}}
2020-12-03 13:26:55.178414934 [ThreadId 4475] - GhcIde.hover entered (ideLogger)
2020-12-03 13:26:55.178555008 [ThreadId 4475] - Hover request at position 911:44 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:26:55.178732542 [ThreadId 4476] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:26:55.178793563 [ThreadId 4479] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:26:55.178962652 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nSimpleScript\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:587:1*\n\n\n\n"},"range":{"start":{"line":910,"character":43},"end":{"line":910,"character":55}}},"jsonrpc":"2.0","id":146}
2020-12-03 13:27:01.342217355 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":147,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"},"position":{"line":917,"character":41}}}
2020-12-03 13:27:01.342423776 [ThreadId 4483] - GhcIde.hover entered (ideLogger)
2020-12-03 13:27:01.342641311 [ThreadId 4483] - Hover request at position 918:42 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs
2020-12-03 13:27:01.343010685 [ThreadId 4487] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:27:01.342992109 [ThreadId 4484] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:27:01.34327271 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nRequireTimeAfter\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs:596:6*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: TimeLocksSupported lang -> SlotNo -> SimpleScript lang\n```\n"},"range":{"start":{"line":917,"character":30},"end":{"line":917,"character":46}}},"jsonrpc":"2.0","id":147}
2020-12-03 13:27:22.683618072 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE PatternSynonyms #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-- The Shelley ledger uses promoted data kinds which we have to use, but we do\n-- not export any from this API. We also use them unticked as nature intended.\n{-# LANGUAGE DataKinds #-}\n{-# OPTIONS_GHC -Wno-unticked-promoted-constructors #-}\n\n-- | Complete, signed transactions\n--\nmodule Cardano.Api.Tx (\n\n    -- * Signing transactions\n    -- | Creating transaction witnesses one by one, or all in one go.\n    Tx(..),\n    getTxBody,\n    getTxWitnesses,\n\n    -- ** Signing in one go\n    ShelleySigningKey(..),\n    toShelleySigningKey,\n    signByronTransaction,\n    signShelleyTransaction,\n    -- ** Incremental signing and separate witnesses\n    makeSignedTransaction,\n    Witness(..),\n    makeByronKeyWitness,\n    ShelleyWitnessSigningKey(..),\n    makeShelleyKeyWitness,\n    WitnessNetworkIdOrByronAddress (..),\n    makeShelleyBootstrapWitness,\n    makeScriptWitness,\n    makeShelleySignature,\n    getShelleyKeyWitnessVerificationKey,\n\n    -- * Data family instances\n    AsType(AsTx, AsByronTx, AsShelleyTx,\n           AsWitness, AsByronWitness, AsShelleyWitness),\n  ) where\n\nimport           Prelude\n\nimport           Data.Maybe\n\nimport           Data.ByteString (ByteString)\nimport qualified Data.ByteString as BS\nimport qualified Data.ByteString.Lazy as LBS\n\nimport qualified Data.Map.Strict as Map\nimport qualified Data.Set as Set\nimport qualified Data.Vector as Vector\n\n--\n-- Common types, consensus, network\n--\nimport           Cardano.Binary (Annotated (..))\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\n--\n-- Crypto API used by consensus and Shelley (and should be used by Byron)\n--\nimport qualified Cardano.Crypto.DSIGN.Class as Crypto\nimport qualified Cardano.Crypto.Util as Crypto\nimport qualified Cardano.Crypto.Wallet as Crypto.HD\n\n--\n-- Byron imports\n--\nimport qualified Cardano.Crypto.Hashing as Byron\nimport qualified Cardano.Crypto.ProtocolMagic as Byron\nimport qualified Cardano.Crypto.Signing as Byron\nimport qualified Cardano.Chain.Common as Byron\nimport qualified Cardano.Chain.UTxO as Byron\n\n--\n-- Shelley imports\n--\nimport           Ouroboros.Consensus.Shelley.Protocol.Crypto (StandardCrypto)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era as Ledger\nimport qualified Cardano.Ledger.Shelley.Constraints as Shelley\n\nimport qualified Shelley.Spec.Ledger.Address.Bootstrap as Shelley\nimport           Shelley.Spec.Ledger.BaseTypes (maybeToStrictMaybe, strictMaybeToMaybe)\nimport qualified Shelley.Spec.Ledger.Hashing as Shelley\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Tx as Shelley\n\nimport           Cardano.Api.Address\nimport           Cardano.Api.Certificate\nimport           Cardano.Api.Eras\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.Key\nimport           Cardano.Api.KeysByron\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.NetworkId\nimport           Cardano.Api.Script\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseTextEnvelope\nimport           Cardano.Api.TxBody\n\n\n-- ----------------------------------------------------------------------------\n-- Signed transactions\n--\n\ndata Tx era where\n\n     ByronTx\n       :: Byron.ATxAux ByteString\n       -> Tx ByronEra\n\n     ShelleyTx\n       :: ShelleyBasedEra era\n       -> Shelley.Tx (ShelleyLedgerEra era)\n       -> Tx era\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Eq (Tx era) where\n    (==) (ByronTx txA)\n         (ByronTx txB) = txA == txB\n\n    (==) (ShelleyTx era txA)\n         (ShelleyTx _   txB) =\n      case era of\n        ShelleyBasedEraShelley -> txA == txB\n        ShelleyBasedEraAllegra -> txA == txB\n        ShelleyBasedEraMary    -> txA == txB\n\n    (==) ByronTx{} (ShelleyTx era _) = case era of {}\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Show (Tx era) where\n    showsPrec p (ByronTx tx) =\n      showParen (p >= 11) $\n        showString \"ByronTx \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Tx era) where\n    data AsType (Tx era) = AsTx (AsType era)\n    proxyToAsType _ = AsTx (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronTx :: AsType (Tx ByronEra)\npattern AsByronTx   = AsTx AsByronEra\n{-# COMPLETE AsByronTx #-}\n\npattern AsShelleyTx :: AsType (Tx ShelleyEra)\npattern AsShelleyTx = AsTx AsShelleyEra\n{-# COMPLETE AsShelleyTx #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Tx era) where\n    serialiseToCBOR (ByronTx tx) = CBOR.recoverBytes tx\n\n    serialiseToCBOR (ShelleyTx era tx) =\n      case era of\n        ShelleyBasedEraShelley -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraAllegra -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraMary    -> serialiseShelleyBasedTx tx\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronTx <$>\n            CBOR.decodeFullAnnotatedBytes\n              \"Byron Tx\" fromCBOR (LBS.fromStrict bs)\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraShelley) bs\n        AllegraEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraAllegra) bs\n        MaryEra    -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraMary) bs\n\n-- | The serialisation format for the different Shelley-based eras are not the\n-- same, but they can be handled generally with one overloaded implementation.\n--\nserialiseShelleyBasedTx :: ToCBOR tx => tx -> ByteString\nserialiseShelleyBasedTx = CBOR.serialize'\n\ndeserialiseShelleyBasedTx :: FromCBOR (CBOR.Annotator tx)\n                          => (tx -> tx')\n                          -> ByteString\n                          -> Either CBOR.DecoderError tx'\ndeserialiseShelleyBasedTx mkTx bs =\n    mkTx <$> CBOR.decodeAnnotator \"Shelley Tx\" fromCBOR (LBS.fromStrict bs)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Tx era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxSignedByron\"\n        ShelleyEra -> \"TxSignedShelley\"\n        AllegraEra -> \"Tx AllegraEra\"\n        MaryEra    -> \"Tx MaryEra\"\n\n\ndata Witness era where\n\n     ByronKeyWitness\n       :: Byron.TxInWitness\n       -> Witness ByronEra\n\n     ShelleyBootstrapWitness\n       :: ShelleyBasedEra era\n       -> Shelley.BootstrapWitness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyKeyWitness\n       :: ShelleyBasedEra era\n       -> Shelley.WitVKey Shelley.Witness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyScriptWitness\n       :: ShelleyBasedEra era\n       -> Ledger.Script (ShelleyLedgerEra era)\n       -> Witness era\n\n\n-- The GADT in the Shelley cases requires a custom instance\ninstance Eq (Witness era) where\n    (==) (ByronKeyWitness wA)\n         (ByronKeyWitness wB) = wA == wB\n\n    (==) (ShelleyBootstrapWitness era wA)\n         (ShelleyBootstrapWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyKeyWitness era wA)\n         (ShelleyKeyWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyScriptWitness era wA)\n         (ShelleyScriptWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) _ _ = False\n\n-- The GADT in the ShelleyTx case requires a custom instance\n--TODO: once we start providing custom patterns we should do the show in terms\n-- of those. It'll be less verbose too!\ninstance Show (Witness era) where\n    showsPrec p (ByronKeyWitness tx) =\n      showParen (p >= 11) $\n        showString \"ByronKeyWitness \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Witness era) where\n    data AsType (Witness era) = AsWitness (AsType era)\n    proxyToAsType _ = AsWitness (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronWitness :: AsType (Witness ByronEra)\npattern AsByronWitness   = AsWitness AsByronEra\n{-# COMPLETE AsByronWitness #-}\n\npattern AsShelleyWitness :: AsType (Witness ShelleyEra)\npattern AsShelleyWitness = AsWitness AsShelleyEra\n{-# COMPLETE AsShelleyWitness #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Witness era) where\n    serialiseToCBOR (ByronKeyWitness wit) = CBOR.serialize' wit\n\n    serialiseToCBOR (ShelleyKeyWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedKeyWitness wit\n\n    serialiseToCBOR (ShelleyBootstrapWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedBootstrapWitness wit\n\n    serialiseToCBOR (ShelleyScriptWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedScriptWitness wit\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronKeyWitness <$> CBOR.decodeFull' bs\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> decodeShelleyBasedWitness ShelleyBasedEraShelley bs\n        AllegraEra -> decodeShelleyBasedWitness ShelleyBasedEraAllegra bs\n        MaryEra    -> decodeShelleyBasedWitness ShelleyBasedEraMary    bs\n\n\nencodeShelleyBasedKeyWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedKeyWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 0 <> toCBOR wit\n\nencodeShelleyBasedBootstrapWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedBootstrapWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 1 <> toCBOR wit\n\nencodeShelleyBasedScriptWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedScriptWitness wit =\n    CBOR.encodeListLen 2\n <> CBOR.encodeWord 2\n    -- We use an extra level of wrapping here to support the legacy\n    -- binary serialisation format for the @Script@ type from\n    -- @cardano-ledger-specs@.\n    --\n    -- TODO: make this go away by providing a WitnessSet type and only\n    -- providing serialisation for witness sets, using the serialisation\n    -- from the ledger lib rather than needing something custom here.\n    -- Signed transactions have witness sets, so this is an existing on-chain\n    -- stable format.\n <> CBOR.encodeListLen 2\n <> CBOR.encodeWord 0\n <> toCBOR wit\n\ndecodeShelleyBasedWitness :: forall era.\n                             Ledger.Era (ShelleyLedgerEra era)\n                          => FromCBOR (CBOR.Annotator (Ledger.Script (ShelleyLedgerEra era)))\n                          => ShelleyBasedEra era\n                          -> ByteString\n                          -> Either CBOR.DecoderError (Witness era)\ndecodeShelleyBasedWitness era =\n    CBOR.decodeAnnotator \"Shelley Witness\" decode . LBS.fromStrict\n  where\n    decode :: CBOR.Decoder s (CBOR.Annotator (Witness era))\n    decode =  do\n      CBOR.decodeListLenOf 2\n      t <- CBOR.decodeWord\n      case t of\n        0 -> fmap (fmap (ShelleyKeyWitness era)) fromCBOR\n        1 -> fmap (fmap (ShelleyBootstrapWitness era)) fromCBOR\n        -- We use an extra level of wrapping here to support the legacy\n        -- binary serialisation format for the @Script@ type from\n        -- @cardano-ledger-specs@.\n        2 -> do CBOR.decodeListLenOf 2\n                CBOR.decodeWordOf 0\n                fmap (fmap (ShelleyScriptWitness era)) fromCBOR\n        _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag\n                                \"Shelley Witness\" (fromIntegral t)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Witness era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxWitnessByron\"\n        ShelleyEra -> \"TxWitnessShelley\"\n        AllegraEra -> \"TxWitness AllegraEra\"\n        MaryEra    -> \"TxWitness MaryEra\"\n\n\ngetTxBody :: forall era. Tx era -> TxBody era\ngetTxBody (ByronTx Byron.ATxAux { Byron.aTaTx = txbody }) =\n    ByronTxBody txbody\n\ngetTxBody (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxBody tx\n      ShelleyBasedEraAllegra -> getShelleyTxBody tx\n      ShelleyBasedEraMary    -> getShelleyTxBody tx\n  where\n    getShelleyTxBody :: forall ledgerera.\n                        ShelleyLedgerEra era ~ ledgerera\n                     => Shelley.ShelleyBased ledgerera\n                     => Shelley.Tx ledgerera\n                     -> TxBody era\n    getShelleyTxBody Shelley.Tx {\n                       Shelley._body     = txbody,\n                       Shelley._metadata = txmetadata\n                     } =\n      ShelleyTxBody era txbody (strictMaybeToMaybe txmetadata)\n\n\ngetTxWitnesses :: forall era. Tx era -> [Witness era]\ngetTxWitnesses (ByronTx Byron.ATxAux { Byron.aTaWitness = witnesses }) =\n    map ByronKeyWitness\n  . Vector.toList\n  . unAnnotated\n  $ witnesses\n\ngetTxWitnesses (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxWitnesses tx\n      ShelleyBasedEraAllegra -> getShelleyTxWitnesses tx\n      ShelleyBasedEraMary    -> getShelleyTxWitnesses tx\n  where\n    getShelleyTxWitnesses :: forall ledgerera.\n                             ShelleyLedgerEra era ~ ledgerera\n                          => Shelley.ShelleyBased ledgerera\n                          => Shelley.Tx ledgerera\n                          -> [Witness era]\n    getShelleyTxWitnesses Shelley.Tx {\n                            Shelley._witnessSet =\n                              Shelley.WitnessSet\n                                addrWits\n                                msigWits\n                                bootWits\n                          } =\n        map (ShelleyBootstrapWitness era) (Set.elems bootWits)\n     ++ map (ShelleyKeyWitness       era) (Set.elems addrWits)\n     ++ map (ShelleyScriptWitness    era) (Map.elems msigWits)\n\n\nmakeSignedTransaction :: forall era.\n                         [Witness era]\n                      -> TxBody era\n                      -> Tx era\nmakeSignedTransaction witnesses (ByronTxBody txbody) =\n    ByronTx\n  . Byron.annotateTxAux\n  $ Byron.mkTxAux\n      (unAnnotated txbody)\n      (Vector.fromList [ w | ByronKeyWitness w <- witnesses ])\n\nmakeSignedTransaction witnesses (ShelleyTxBody era txbody txmetadata) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraAllegra -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraMary    -> makeShelleySignedTransaction txbody\n  where\n    makeShelleySignedTransaction :: forall ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Shelley.ValidateScript ledgerera\n                                 => Ledger.TxBody ledgerera\n                                 -> Tx era\n    makeShelleySignedTransaction txbody' =\n      ShelleyTx era $\n        Shelley.Tx\n          txbody'\n          (Shelley.WitnessSet\n            (Set.fromList [ w | ShelleyKeyWitness _ w <- witnesses ])\n            (Map.fromList [ (Shelley.hashScript sw, sw)\n                          | ShelleyScriptWitness _ sw <- witnesses ])\n            (Set.fromList [ w | ShelleyBootstrapWitness _ w <- witnesses ]))\n          (maybeToStrictMaybe txmetadata)\n\n\nmakeByronKeyWitness :: NetworkId\n                    -> TxBody ByronEra\n                    -> SigningKey ByronKey\n                    -> Witness ByronEra\nmakeByronKeyWitness _ (ShelleyTxBody era _ _) = case era of {}\nmakeByronKeyWitness nw (ByronTxBody txbody) =\n    let txhash :: Byron.Hash Byron.Tx\n        txhash = Byron.hashDecoded txbody\n\n        pm :: Byron.ProtocolMagicId\n        pm = toByronProtocolMagicId nw\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\(ByronSigningKey sk) ->\n        ByronKeyWitness $\n          Byron.VKWitness\n            (Byron.toVerification sk)\n            (Byron.sign pm Byron.SignTx sk (Byron.TxSigData txhash))\n\n-- | Either a network ID or a Byron address to be used in constructing a\n-- Shelley bootstrap witness.\ndata WitnessNetworkIdOrByronAddress\n  = WitnessNetworkId !NetworkId\n  -- ^ Network ID.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- the result will not consist of a derivation path. If that is required,\n  -- specify a 'WitnessByronAddress' value instead.\n  | WitnessByronAddress !(Address ByronAddr)\n  -- ^ Byron address.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- both the network ID and derivation path will be extracted from the\n  -- address and used in the construction of the witness.\n\nmakeShelleyBootstrapWitness :: forall era.\n                               IsShelleyBasedEra era\n                            => WitnessNetworkIdOrByronAddress\n                            -> TxBody era\n                            -> SigningKey ByronKey\n                            -> Witness era\nmakeShelleyBootstrapWitness _ ByronTxBody{} _ =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\nmakeShelleyBootstrapWitness nwOrAddr (ShelleyTxBody era txbody _) sk =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraAllegra -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraMary    -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n\nmakeShelleyBasedBootstrapWitness :: forall era ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Ledger.Crypto ledgerera ~ StandardCrypto\n                                 => ShelleyBasedEra era\n                                 -> WitnessNetworkIdOrByronAddress\n                                 -> Ledger.TxBody ledgerera\n                                 -> SigningKey ByronKey\n                                 -> Witness era\nmakeShelleyBasedBootstrapWitness era nwOrAddr txbody (ByronSigningKey sk) =\n    ShelleyBootstrapWitness era $\n      -- Byron era witnesses were weird. This reveals all that weirdness.\n      Shelley.BootstrapWitness {\n        Shelley.bwKey        = vk,\n        Shelley.bwSig        = signature,\n        Shelley.bwChainCode  = chainCode,\n        Shelley.bwAttributes = attributes\n      }\n  where\n    -- Starting with the easy bits: we /can/ convert the Byron verification key\n    -- to a the pair of a Shelley verification key plus the chain code.\n    --\n    (vk, chainCode) = Shelley.unpackByronVKey (Byron.toVerification sk)\n\n    -- Now the hairy bits.\n    --\n    -- Byron era signing keys were all /extended/ ed25519 keys. We have to\n    -- produce a signature using this extended signing key directly. They\n    -- /cannot/ be converted to a plain (non-extended) signing keys. Since we\n    -- now support extended signing keys for the Shelley too, we are able to\n    -- reuse that here.\n    --\n    signature :: Shelley.SignedDSIGN StandardCrypto\n                  (Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody)\n    signature = makeShelleySignature\n                  txhash\n                  -- Make the signature with the extended key directly:\n                  (ShelleyExtendedSigningKey (Byron.unSigningKey sk))\n\n    txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n    txhash = Shelley.hashAnnotated txbody\n    --TODO: use Shelley.eraIndTxBodyHash txbody once that function has a\n    -- suitably general type.\n\n    -- And finally we need to provide the extra suffix bytes necessary to\n    -- reconstruct the mini-Merkel tree that is a Byron address. The suffix\n    -- bytes are the serialised address attributes.\n    attributes =\n      CBOR.serialize' $\n        Byron.mkAttributes Byron.AddrAttributes {\n          Byron.aaVKDerivationPath = derivationPath,\n          Byron.aaNetworkMagic     = networkMagic\n        }\n\n    -- The 'WitnessNetworkIdOrByronAddress' value converted to an 'Either'.\n    eitherNwOrAddr :: Either NetworkId (Address ByronAddr)\n    eitherNwOrAddr =\n      case nwOrAddr of\n        WitnessNetworkId nw -> Left nw\n        WitnessByronAddress addr -> Right addr\n\n    unByronAddr :: Address ByronAddr -> Byron.Address\n    unByronAddr (ByronAddress addr) = addr\n\n    unAddrAttrs :: Address ByronAddr -> Byron.AddrAttributes\n    unAddrAttrs = Byron.attrData . Byron.addrAttributes . unByronAddr\n\n    derivationPath :: Maybe Byron.HDAddressPayload\n    derivationPath =\n      either\n        (const Nothing)\n        (Byron.aaVKDerivationPath . unAddrAttrs)\n        eitherNwOrAddr\n\n    networkMagic :: Byron.NetworkMagic\n    networkMagic =\n      either\n        toByronNetworkMagic\n        (Byron.aaNetworkMagic . unAddrAttrs)\n        eitherNwOrAddr\n\n\ndata ShelleyWitnessSigningKey =\n       WitnessPaymentKey         (SigningKey PaymentKey)\n     | WitnessPaymentExtendedKey (SigningKey PaymentExtendedKey)\n     | WitnessStakeKey           (SigningKey StakeKey)\n     | WitnessStakeExtendedKey   (SigningKey StakeExtendedKey)\n     | WitnessStakePoolKey       (SigningKey StakePoolKey)\n     | WitnessGenesisKey         (SigningKey GenesisKey)\n     | WitnessGenesisExtendedKey (SigningKey GenesisExtendedKey)\n     | WitnessGenesisDelegateKey (SigningKey GenesisDelegateKey)\n     | WitnessGenesisDelegateExtendedKey\n                                 (SigningKey GenesisDelegateExtendedKey)\n     | WitnessGenesisUTxOKey     (SigningKey GenesisUTxOKey)\n\n\nmakeShelleyKeyWitness :: forall era.\n                         IsShelleyBasedEra era\n                      => TxBody era\n                      -> ShelleyWitnessSigningKey\n                      -> Witness era\nmakeShelleyKeyWitness (ShelleyTxBody era txbody _) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraAllegra -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraMary    -> makeShelleyBasedKeyWitness txbody\n  where\n    makeShelleyBasedKeyWitness :: forall ledgerera.\n                                  ShelleyLedgerEra era ~ ledgerera\n                               => Shelley.ShelleyBased ledgerera\n                               => Ledger.Crypto ledgerera ~ StandardCrypto\n                               => Ledger.TxBody ledgerera\n                               -> ShelleyWitnessSigningKey\n                               -> Witness era\n    makeShelleyBasedKeyWitness txbody' =\n\n     let txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n         txhash = Shelley.hashAnnotated txbody'\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\wsk ->\n        let sk        = toShelleySigningKey wsk\n            vk        = getShelleyKeyWitnessVerificationKey sk\n            signature = makeShelleySignature txhash sk\n         in ShelleyKeyWitness era $\n              Shelley.WitVKey vk signature\n\nmakeShelleyKeyWitness ByronTxBody{} =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\n\n-- | We support making key witnesses with both normal and extended signing keys.\n--\ndata ShelleySigningKey =\n       -- | A normal ed25519 signing key\n       ShelleyNormalSigningKey   (Shelley.SignKeyDSIGN StandardCrypto)\n\n       -- | An extended ed25519 signing key\n     | ShelleyExtendedSigningKey Crypto.HD.XPrv\n\n\ntoShelleySigningKey :: ShelleyWitnessSigningKey -> ShelleySigningKey\ntoShelleySigningKey key = case key of\n  WitnessPaymentKey     (PaymentSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessStakeKey       (StakeSigningKey       sk) -> ShelleyNormalSigningKey sk\n  WitnessStakePoolKey   (StakePoolSigningKey   sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisKey     (GenesisSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisUTxOKey (GenesisUTxOSigningKey sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisDelegateKey (GenesisDelegateSigningKey sk) ->\n    ShelleyNormalSigningKey sk\n\n  -- The cases for extended keys\n  WitnessPaymentExtendedKey (PaymentExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessStakeExtendedKey (StakeExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisExtendedKey (GenesisExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisDelegateExtendedKey (GenesisDelegateExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n\ngetShelleyKeyWitnessVerificationKey\n  :: ShelleySigningKey\n  -> Shelley.VKey Shelley.Witness StandardCrypto\ngetShelleyKeyWitnessVerificationKey (ShelleyNormalSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . getVerificationKey\n    . PaymentSigningKey\n    $ sk\n\ngetShelleyKeyWitnessVerificationKey (ShelleyExtendedSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . (castVerificationKey :: VerificationKey PaymentExtendedKey\n                           -> VerificationKey PaymentKey)\n    . getVerificationKey\n    . PaymentExtendedSigningKey\n    $ sk\n\n\nmakeShelleySignature\n  :: Crypto.SignableRepresentation tosign\n  => tosign\n  -> ShelleySigningKey\n  -> Shelley.SignedDSIGN StandardCrypto tosign\nmakeShelleySignature tosign (ShelleyNormalSigningKey sk) =\n    Crypto.signedDSIGN () tosign sk\n\nmakeShelleySignature tosign (ShelleyExtendedSigningKey sk) =\n    fromXSignature $\n      Crypto.HD.sign\n        BS.empty  -- passphrase for (unused) in-memory encryption\n        sk\n        (Crypto.getSignableRepresentation tosign)\n  where\n    fromXSignature :: Crypto.HD.XSignature\n                   -> Shelley.SignedDSIGN StandardCrypto b\n    fromXSignature =\n        Crypto.SignedDSIGN\n      . fromMaybe impossible\n      . Crypto.rawDeserialiseSigDSIGN\n      . Crypto.HD.unXSignature\n\n    impossible =\n      error \"makeShelleyKeyWitnessSignature: byron and shelley signature sizes do not match\"\n\n\nmakeScriptWitness :: forall era. ScriptInEra era -> Witness era\nmakeScriptWitness s = ShelleyScriptWitness\n                        (eraOfScriptInEra s)\n                        (toShelleyScript s)\n\n\n-- order of signing keys must match txins\nsignByronTransaction :: NetworkId\n                     -> TxBody ByronEra\n                     -> [SigningKey ByronKey]\n                     -> Tx ByronEra\nsignByronTransaction nw txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeByronKeyWitness nw txbody) sks\n\n-- signing keys is a set\nsignShelleyTransaction :: IsShelleyBasedEra era\n                       => TxBody era\n                       -> [ShelleyWitnessSigningKey]\n                       -> Tx era\nsignShelleyTransaction txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeShelleyKeyWitness txbody) sks\n\n"}}}
2020-12-03 13:27:22.687251262 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":148,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:27:22.687399356 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":149,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 13:27:22.687370596 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-03 13:27:22.688170553 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:27:22.688232229 [ThreadId 3090] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:27:22.688508137 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:27:22.689577887 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":15,"character":7},"end":{"line":15,"character":21}},"kind":1,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}},"kind":2,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}}},{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}},"kind":2,"name":"import Data.Maybe","range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}}},{"selectionRange":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}}},{"selectionRange":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"kind":2,"name":"import Data.Map.Strict","range":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"kind":2,"name":"import Data.Set","range":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"detail":"qualified"},{"selectionRange":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"kind":2,"name":"import Cardano.Crypto.DSIGN.Class","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"kind":2,"name":"import Cardano.Crypto.Util","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"kind":2,"name":"import Cardano.Crypto.Wallet","range":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"kind":2,"name":"import Cardano.Crypto.Hashing","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"kind":2,"name":"import Cardano.Crypto.ProtocolMagic","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"detail":"qualified"},{"selectionRange":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"kind":2,"name":"import Cardano.Crypto.Signing","range":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"kind":2,"name":"import Cardano.Chain.Common","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"kind":2,"name":"import Cardano.Chain.UTxO","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Protocol.Crypto","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}}},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"kind":2,"name":"import Cardano.Ledger.Shelley.Constraints","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"detail":"qualified"},{"selectionRange":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"kind":2,"name":"import Shelley.Spec.Ledger.Address.Bootstrap","range":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}},"kind":2,"name":"import Shelley.Spec.Ledger.BaseTypes","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}}},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Hashing","range":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"kind":2,"name":"import Shelley.Spec.Ledger.Tx","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"detail":"qualified"},{"selectionRange":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}},"kind":2,"name":"import Cardano.Api.Address","range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}}},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}},"kind":2,"name":"import Cardano.Api.Certificate","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}},"kind":2,"name":"import Cardano.Api.Key","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}},"kind":2,"name":"import Cardano.Api.KeysByron","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}},"kind":2,"name":"import Cardano.Api.NetworkId","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}},"kind":2,"name":"import Cardano.Api.Script","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}}},{"selectionRange":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}}},{"selectionRange":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}}},{"selectionRange":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}},"kind":2,"name":"import Cardano.Api.TxBody","range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}}}],"name":"imports","range":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}}},{"selectionRange":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}},"kind":23,"children":[{"selectionRange":{"start":{"line":115,"character":5},"end":{"line":115,"character":12}},"kind":9,"name":"ByronTx","range":{"start":{"line":115,"character":5},"end":{"line":117,"character":21}}},{"selectionRange":{"start":{"line":119,"character":5},"end":{"line":119,"character":14}},"kind":9,"name":"ShelleyTx","range":{"start":{"line":119,"character":5},"end":{"line":122,"character":16}}}],"name":"Tx","range":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}}},{"selectionRange":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}},"kind":11,"name":"Eq (Tx era)","range":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}}},{"selectionRange":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}},"kind":11,"name":"Show (Tx era)","range":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}}},{"selectionRange":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Tx era)","range":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}}},{"selectionRange":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Tx era)","range":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}}},{"selectionRange":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}},"kind":12,"name":"serialiseShelleyBasedTx","range":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}}},{"selectionRange":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}},"kind":12,"name":"deserialiseShelleyBasedTx","range":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}}},{"selectionRange":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Tx era)","range":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}}},{"selectionRange":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":223,"character":5},"end":{"line":223,"character":20}},"kind":9,"name":"ByronKeyWitness","range":{"start":{"line":223,"character":5},"end":{"line":225,"character":26}}},{"selectionRange":{"start":{"line":227,"character":5},"end":{"line":227,"character":28}},"kind":9,"name":"ShelleyBootstrapWitness","range":{"start":{"line":227,"character":5},"end":{"line":230,"character":21}}},{"selectionRange":{"start":{"line":232,"character":5},"end":{"line":232,"character":22}},"kind":9,"name":"ShelleyKeyWitness","range":{"start":{"line":232,"character":5},"end":{"line":235,"character":21}}},{"selectionRange":{"start":{"line":237,"character":5},"end":{"line":237,"character":25}},"kind":9,"name":"ShelleyScriptWitness","range":{"start":{"line":237,"character":5},"end":{"line":240,"character":21}}}],"name":"Witness","range":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}}},{"selectionRange":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}},"kind":11,"name":"Eq (Witness era)","range":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}}},{"selectionRange":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}},"kind":11,"name":"Show (Witness era)","range":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}}},{"selectionRange":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Witness era)","range":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}}},{"selectionRange":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Witness era)","range":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}}},{"selectionRange":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}},"kind":12,"name":"encodeShelleyBasedKeyWitness","range":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}}},{"selectionRange":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}},"kind":12,"name":"encodeShelleyBasedBootstrapWitness","range":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}}},{"selectionRange":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}},"kind":12,"name":"encodeShelleyBasedScriptWitness","range":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}}},{"selectionRange":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}},"kind":12,"name":"decodeShelleyBasedWitness","range":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}}},{"selectionRange":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Witness era)","range":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}},"kind":12,"name":"getTxBody","range":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}}},{"selectionRange":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}},"kind":12,"name":"getTxWitnesses","range":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}}},{"selectionRange":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}},"kind":12,"name":"makeSignedTransaction","range":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}}},{"selectionRange":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}},"kind":12,"name":"makeByronKeyWitness","range":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}}},{"selectionRange":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":544,"character":4},"end":{"line":544,"character":20}},"kind":9,"name":"WitnessNetworkId","range":{"start":{"line":544,"character":4},"end":{"line":549,"character":51}}},{"selectionRange":{"start":{"line":550,"character":4},"end":{"line":550,"character":23}},"kind":9,"name":"WitnessByronAddress","range":{"start":{"line":550,"character":4},"end":{"line":555,"character":57}}}],"name":"WitnessNetworkIdOrByronAddress","range":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}}},{"selectionRange":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}},"kind":12,"name":"makeShelleyBootstrapWitness","range":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}}},{"selectionRange":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}},"kind":12,"name":"makeShelleyBasedBootstrapWitness","range":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}},"kind":23,"children":[{"selectionRange":{"start":{"line":658,"character":7},"end":{"line":658,"character":24}},"kind":9,"name":"WitnessPaymentKey","range":{"start":{"line":658,"character":7},"end":{"line":658,"character":56}}},{"selectionRange":{"start":{"line":659,"character":7},"end":{"line":659,"character":32}},"kind":9,"name":"WitnessPaymentExtendedKey","range":{"start":{"line":659,"character":7},"end":{"line":659,"character":64}}},{"selectionRange":{"start":{"line":660,"character":7},"end":{"line":660,"character":22}},"kind":9,"name":"WitnessStakeKey","range":{"start":{"line":660,"character":7},"end":{"line":660,"character":54}}},{"selectionRange":{"start":{"line":661,"character":7},"end":{"line":661,"character":30}},"kind":9,"name":"WitnessStakeExtendedKey","range":{"start":{"line":661,"character":7},"end":{"line":661,"character":62}}},{"selectionRange":{"start":{"line":662,"character":7},"end":{"line":662,"character":26}},"kind":9,"name":"WitnessStakePoolKey","range":{"start":{"line":662,"character":7},"end":{"line":662,"character":58}}},{"selectionRange":{"start":{"line":663,"character":7},"end":{"line":663,"character":24}},"kind":9,"name":"WitnessGenesisKey","range":{"start":{"line":663,"character":7},"end":{"line":663,"character":56}}},{"selectionRange":{"start":{"line":664,"character":7},"end":{"line":664,"character":32}},"kind":9,"name":"WitnessGenesisExtendedKey","range":{"start":{"line":664,"character":7},"end":{"line":664,"character":64}}},{"selectionRange":{"start":{"line":665,"character":7},"end":{"line":665,"character":32}},"kind":9,"name":"WitnessGenesisDelegateKey","range":{"start":{"line":665,"character":7},"end":{"line":665,"character":64}}},{"selectionRange":{"start":{"line":666,"character":7},"end":{"line":666,"character":40}},"kind":9,"name":"WitnessGenesisDelegateExtendedKey","range":{"start":{"line":666,"character":7},"end":{"line":667,"character":72}}},{"selectionRange":{"start":{"line":668,"character":7},"end":{"line":668,"character":28}},"kind":9,"name":"WitnessGenesisUTxOKey","range":{"start":{"line":668,"character":7},"end":{"line":668,"character":60}}}],"name":"ShelleyWitnessSigningKey","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}}},{"selectionRange":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}},"kind":12,"name":"makeShelleyKeyWitness","range":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}}},{"selectionRange":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}},"kind":23,"children":[{"selectionRange":{"start":{"line":711,"character":7},"end":{"line":711,"character":30}},"kind":9,"name":"ShelleyNormalSigningKey","range":{"start":{"line":711,"character":7},"end":{"line":711,"character":70}}},{"selectionRange":{"start":{"line":714,"character":7},"end":{"line":714,"character":32}},"kind":9,"name":"ShelleyExtendedSigningKey","range":{"start":{"line":714,"character":7},"end":{"line":714,"character":47}}}],"name":"ShelleySigningKey","range":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}},"kind":12,"name":"toShelleySigningKey","range":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}}},{"selectionRange":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}},"kind":12,"name":"getShelleyKeyWitnessVerificationKey","range":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}}},{"selectionRange":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}},"kind":12,"name":"makeShelleySignature","range":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}}},{"selectionRange":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}},"kind":12,"name":"makeScriptWitness","range":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}}},{"selectionRange":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}},"kind":12,"name":"signByronTransaction","range":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}}},{"selectionRange":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}},"kind":12,"name":"signShelleyTransaction","range":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}}}],"name":"Cardano.Api.Tx","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":149}
2020-12-03 13:27:22.702717306 [ThreadId 4779] - finish: C:GetParsedModule (took 0.01s)
2020-12-03 13:27:22.702731412 [ThreadId 4780] - finish: CodeAction (took 0.01s)
2020-12-03 13:27:22.702901302 [ThreadId 4786] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:27:22.703270481 [ThreadId 4787] - finish: importLens (took 0.00s)
2020-12-03 13:27:22.795841512 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":"581"},"method":"window/workDoneProgress/create","id":4}
2020-12-03 13:27:22.795995691 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","title":"Processing"},"token":"581"},"method":"$/progress"}
2020-12-03 13:27:22.79696541 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":4,"result":null}
2020-12-03 13:27:22.797060191 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":4,\"result\":null}"
2020-12-03 13:27:22.896551957 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"86/87"},"token":"581"},"method":"$/progress"}
2020-12-03 13:27:22.903059366 [ThreadId 4999] - finish: retrie (took 0.20s)
2020-12-03 13:27:22.90373607 [ThreadId 4998] - finish: kick (took 0.22s)
2020-12-03 13:27:22.903970409 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":"581"},"method":"$/progress"}
2020-12-03 13:27:22.923066293 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":150,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 13:27:22.923236885 [ThreadId 5005] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:27:22.923528098 [ThreadId 5006] - finish: codeLens (took 0.00s)
2020-12-03 13:27:22.923761463 [ThreadId 5009] - finish: tactic (took 0.02s)
2020-12-03 13:27:22.924150377 [ThreadId 5017] - finish: tactic (took 0.00s)
2020-12-03 13:27:22.924244881 [ThreadId 5018] - finish: tactic (took 0.00s)
2020-12-03 13:27:22.924346979 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":148}
2020-12-03 13:27:22.924565733 [ThreadId 5022] - finish:  (took 0.00s)
2020-12-03 13:27:22.926545137 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}},"newText":"import Data.Maybe ( fromMaybe )"}]}}],"title":"import Data.Maybe ( fromMaybe )"},"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}},"newText":"import Cardano.Api.Address\n    ( AsType,\n      StakeExtendedKey,\n      StakeKey,\n      Address(ByronAddress),\n      ByronAddr )"}]}}],"title":"import Cardano.Api.Address\n    ( AsType,\n      StakeExtendedKey,\n      StakeKey,\n      Address(ByronAddress),\n      ByronAddr )"},"range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}},"newText":"import Cardano.Api.Certificate ( AsType(AsShelleyEra, AsByronEra) )"}]}}],"title":"import Cardano.Api.Certificate ( AsType(AsShelleyEra, AsByronEra) )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Eras\n    ( ByronEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( ByronEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}},"newText":"import Cardano.Api.Key\n    ( CastVerificationKeyRole(castVerificationKey),\n      Key(getVerificationKey, SigningKey, VerificationKey) )"}]}}],"title":"import Cardano.Api.Key\n    ( CastVerificationKeyRole(castVerificationKey),\n      Key(getVerificationKey, SigningKey, VerificationKey) )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}},"newText":"import Cardano.Api.KeysByron\n    ( SigningKey(PaymentExtendedSigningKey, ByronSigningKey,\n                 StakeSigningKey, StakePoolSigningKey, GenesisSigningKey,\n                 GenesisUTxOSigningKey, GenesisDelegateSigningKey,\n                 StakeExtendedSigningKey, GenesisExtendedSigningKey,\n                 GenesisDelegateExtendedSigningKey, PaymentSigningKey),\n      VerificationKey(PaymentVerificationKey),\n      ByronKey )"}]}}],"title":"import Cardano.Api.KeysByron\n    ( SigningKey(PaymentExtendedSigningKey, ByronSigningKey,\n                 StakeSigningKey, StakePoolSigningKey, GenesisSigningKey,\n                 GenesisUTxOSigningKey, GenesisDelegateSigningKey,\n                 StakeExtendedSigningKey, GenesisExtendedSigningKey,\n                 GenesisDelegateExtendedSigningKey, PaymentSigningKey),\n      VerificationKey(PaymentVerificationKey),\n      ByronKey )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( GenesisDelegateExtendedKey,\n      GenesisDelegateKey,\n      GenesisExtendedKey,\n      GenesisKey,\n      GenesisUTxOKey,\n      PaymentExtendedKey,\n      PaymentKey,\n      StakePoolKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( GenesisDelegateExtendedKey,\n      GenesisDelegateKey,\n      GenesisExtendedKey,\n      GenesisKey,\n      GenesisUTxOKey,\n      PaymentExtendedKey,\n      PaymentKey,\n      StakePoolKey )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}},"newText":"import Cardano.Api.NetworkId\n    ( toByronNetworkMagic, toByronProtocolMagicId, NetworkId )"}]}}],"title":"import Cardano.Api.NetworkId\n    ( toByronNetworkMagic, toByronProtocolMagicId, NetworkId )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}},"newText":"import Cardano.Api.Script\n    ( eraOfScriptInEra, toShelleyScript, ScriptInEra )"}]}}],"title":"import Cardano.Api.Script\n    ( eraOfScriptInEra, toShelleyScript, ScriptInEra )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}},"newText":"import Cardano.Api.TxBody ( TxBody(..) )"}]}}],"title":"import Cardano.Api.TxBody ( TxBody(..) )"},"range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}}}],"jsonrpc":"2.0","id":150}
2020-12-03 13:27:22.945152275 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":151,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":515,"character":37},"end":{"line":515,"character":47}},"context":{"diagnostics":[]}}}
2020-12-03 13:27:22.94560912 [ThreadId 5027] - finish: CodeAction (took 0.00s)
2020-12-03 13:27:22.945702596 [ThreadId 5029] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:27:22.945918314 [ThreadId 5031] - finish: importLens (took 0.00s)
2020-12-03 13:27:22.946232215 [ThreadId 5033] - finish: retrie (took 0.00s)
2020-12-03 13:27:22.946525397 [ThreadId 5035] - finish: tactic (took 0.00s)
2020-12-03 13:27:22.946668574 [ThreadId 5037] - finish: tactic (took 0.00s)
2020-12-03 13:27:22.946737404 [ThreadId 5039] - finish: tactic (took 0.00s)
2020-12-03 13:27:22.946892182 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":151}
2020-12-03 13:27:24.065041073 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":152,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"position":{"line":514,"character":49}}}
2020-12-03 13:27:24.065254392 [ThreadId 5044] - GhcIde.hover entered (ideLogger)
2020-12-03 13:27:24.065385061 [ThreadId 5044] - Hover request at position 515:50 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:27:24.065622257 [ThreadId 5045] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:27:24.091782229 [ThreadId 5054] - finish: C:GetDocMap (took 0.03s)
2020-12-03 13:27:24.092180078 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nShelleyKeyWitness\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs:233:6*\n\n\n\n"},"range":{"start":{"line":514,"character":32},"end":{"line":514,"character":49}}},"jsonrpc":"2.0","id":152}
2020-12-03 13:27:27.23526803 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":153,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"position":{"line":514,"character":49}}}
2020-12-03 13:27:27.235485872 [ThreadId 5058] - GhcIde.hover entered (ideLogger)
2020-12-03 13:27:27.235609314 [ThreadId 5058] - Hover request at position 515:50 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:27:27.235792032 [ThreadId 5059] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:27:27.235965827 [ThreadId 5062] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:27:27.236146612 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nShelleyKeyWitness\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs:233:6*\n\n\n\n"},"range":{"start":{"line":514,"character":32},"end":{"line":514,"character":49}}},"jsonrpc":"2.0","id":153}
2020-12-03 13:27:27.483806743 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":154,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"position":{"line":515,"character":49}}}
2020-12-03 13:27:27.484010865 [ThreadId 5066] - GhcIde.hover entered (ideLogger)
2020-12-03 13:27:27.48415107 [ThreadId 5066] - Hover request at position 516:50 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:27:27.484351122 [ThreadId 5067] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:27:27.484398547 [ThreadId 5070] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:27:27.484625791 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nsw :: Script (ShelleyLedgerEra era)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs:517:52*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: Script ledgerera\n```\n"},"range":{"start":{"line":515,"character":48},"end":{"line":515,"character":50}}},"jsonrpc":"2.0","id":154}
2020-12-03 13:27:37.973783043 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":155,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"position":{"line":515,"character":49}}}
2020-12-03 13:27:37.974030461 [ThreadId 5074] - GhcIde.hover entered (ideLogger)
2020-12-03 13:27:37.97415366 [ThreadId 5074] - Hover request at position 516:50 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:27:37.974400312 [ThreadId 5075] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:27:37.974421295 [ThreadId 5078] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:27:37.974639911 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nsw :: Script (ShelleyLedgerEra era)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs:517:52*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: Script ledgerera\n```\n"},"range":{"start":{"line":515,"character":48},"end":{"line":515,"character":50}}},"jsonrpc":"2.0","id":155}
2020-12-03 13:33:45.604408771 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":156,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"position":{"line":498,"character":12}}}
2020-12-03 13:33:45.604537714 [ThreadId 5082] - GhcIde.hover entered (ideLogger)
2020-12-03 13:33:45.60462993 [ThreadId 5082] - Hover request at position 499:13 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:33:45.604750275 [ThreadId 5083] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:33:45.604785062 [ThreadId 5086] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:33:45.604871423 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nera :: ShelleyBasedEra era\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs:498:48*\n\n\n\n"},"range":{"start":{"line":498,"character":9},"end":{"line":498,"character":12}}},"jsonrpc":"2.0","id":156}
2020-12-03 13:33:46.181962442 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":157,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"position":{"line":500,"character":29}}}
2020-12-03 13:33:46.182098024 [ThreadId 5090] - GhcIde.hover entered (ideLogger)
2020-12-03 13:33:46.182193629 [ThreadId 5090] - Hover request at position 501:30 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:33:46.182421597 [ThreadId 5091] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:33:46.18239675 [ThreadId 5094] - finish: C:GetDocMap (took 0.00s)
2020-12-03 13:33:46.182528958 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":""},"range":{"start":{"line":500,"character":29},"end":{"line":500,"character":67}}},"jsonrpc":"2.0","id":157}
2020-12-03 13:33:46.577979993 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":158,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":500,"character":29},"end":{"line":500,"character":29}},"context":{"diagnostics":[]}}}
2020-12-03 13:33:46.578281517 [ThreadId 5099] - finish: CodeAction (took 0.00s)
2020-12-03 13:33:46.578382391 [ThreadId 5101] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:33:46.578553317 [ThreadId 5103] - finish: importLens (took 0.00s)
2020-12-03 13:33:46.578751521 [ThreadId 5105] - finish: retrie (took 0.00s)
2020-12-03 13:33:46.578973481 [ThreadId 5107] - finish: tactic (took 0.00s)
2020-12-03 13:33:46.579013538 [ThreadId 5109] - finish: tactic (took 0.00s)
2020-12-03 13:33:46.57905975 [ThreadId 5111] - finish: tactic (took 0.00s)
2020-12-03 13:33:46.579145609 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":158}
2020-12-03 13:33:52.160955991 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 13:33:52.161129274 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}
2020-12-03 13:33:52.161246856 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-03 13:33:52.161404454 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:33:52.165057798 [ThreadId 5266] - Typechecking reverse dependencies forNormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs": [NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs"]
2020-12-03 13:33:52.171369698 [ThreadId 5347] - finish: ParentTC (took 0.01s)
2020-12-03 13:33:52.211327109 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE OverloadedStrings #-}\n\nmodule Test.Golden.Shelley.Transaction.CreateWitness\n  ( golden_shelleyTransactionAllMultiSigWitness\n  , golden_shelleyTransactionAnyMultiSigWitness\n  , golden_shelleyTransactionAtLeastMultiSigWitness\n  , golden_shelleyTransactionSigningKeyWitness\n  ) where\n\nimport           Cardano.Prelude\nimport           Prelude (String)\n\nimport           Hedgehog (Property)\nimport           Test.OptParse\n\nimport qualified Hedgehog.Extras.Test.Base as H\nimport qualified Hedgehog.Extras.Test.File as H\n\n{- HLINT ignore \"Use camelCase\" -}\n\ntxIn :: String\ntxIn = \"2392d2b1200b5139fe555c81261697b29a8ccf561c5c783d46e78a479d977053#0\"\n\ntxOut :: String\ntxOut = \"addr1q94cxl99qvtwunsqqv6g9mgj3zrawtpt4edsgwxkjtwpy5dsezcht90tmwfur7t5hc9fk8hjd3r5vjwec2h8vmk3xh8s7er7t3+100\"\n\ngolden_shelleyTransactionAllMultiSigWitness :: Property\ngolden_shelleyTransactionAllMultiSigWitness = propertyOnce $ H.moduleWorkspace \"tmp\" $ \\tempDir -> do\n  txBodyOutFile <- noteTempFile tempDir \"tx-body-out\"\n\n  -- Create tx body file\n  void $ execCardanoCLI\n    [ \"shelley\",\"transaction\",\"build-raw\"\n    , \"--tx-in\", txIn\n    , \"--tx-out\", txOut\n    , \"--ttl\", \"60\"\n    , \"--fee\", \"12\"\n    , \"--tx-body-file\", txBodyOutFile\n    ]\n\n  H.assertFileOccurences 1 \"TxUnsignedShelley\" txBodyOutFile\n  H.assertEndsWithSingleNewline txBodyOutFile\n\n\n  -- Create all multisig witness\n  allMultiSigWitnessOutFile <- noteTempFile tempDir \"all-multisig-witness\"\n  allScriptWitnessFile <- noteInputFile \"test/data/golden/shelley/multisig/scripts/all\"\n  void $ execCardanoCLI\n    [ \"shelley\",\"transaction\",\"witness\"\n    , \"--tx-body-file\", txBodyOutFile\n    , \"--script-file\", allScriptWitnessFile\n    , \"--mainnet\"\n    , \"--out-file\", allMultiSigWitnessOutFile\n    ]\n\n  H.assertFileOccurences 1 \"TxWitnessShelley\" allMultiSigWitnessOutFile\n  H.assertEndsWithSingleNewline txBodyOutFile\n\n\ngolden_shelleyTransactionAnyMultiSigWitness :: Property\ngolden_shelleyTransactionAnyMultiSigWitness = propertyOnce $ H.moduleWorkspace \"tmp\" $ \\tempDir -> do\n  txBodyOutFile <- noteTempFile tempDir \"tx-body-out\"\n\n  -- Create tx body file\n  void $ execCardanoCLI\n    [ \"shelley\",\"transaction\",\"build-raw\"\n    , \"--tx-in\", txIn\n    , \"--tx-out\", txOut\n    , \"--ttl\", \"60\"\n    , \"--fee\", \"12\"\n    , \"--tx-body-file\", txBodyOutFile\n    ]\n\n  -- Create all multisig witness\n  allMultiSigWitnessOutFile <- noteTempFile tempDir \"any-multisig-witness\"\n  anyScriptWitnessFile <- noteInputFile \"test/data/golden/shelley/multisig/scripts/any\"\n  void $ execCardanoCLI\n    [ \"shelley\",\"transaction\",\"witness\"\n    , \"--tx-body-file\", txBodyOutFile\n    , \"--script-file\", anyScriptWitnessFile\n    , \"--mainnet\"\n    , \"--out-file\", allMultiSigWitnessOutFile\n    ]\n\n  H.assertFileOccurences 1 \"TxWitnessShelley\" allMultiSigWitnessOutFile\n  H.assertEndsWithSingleNewline txBodyOutFile\n\ngolden_shelleyTransactionAtLeastMultiSigWitness :: Property\ngolden_shelleyTransactionAtLeastMultiSigWitness = propertyOnce $ H.moduleWorkspace \"tmp\" $ \\tempDir -> do\n  txBodyOutFile <- noteTempFile tempDir \"tx-body-out\"\n\n  -- Create tx body file\n  void $ execCardanoCLI\n    [ \"shelley\",\"transaction\",\"build-raw\"\n    , \"--tx-in\", txIn\n    , \"--tx-out\", txOut\n    , \"--ttl\", \"60\"\n    , \"--fee\", \"12\"\n    , \"--tx-body-file\", txBodyOutFile\n    ]\n\n  -- Create all multisig witness\n  atLeastMultiSigWitnessOutFile <- noteTempFile tempDir \"atleast-multisig-witness\"\n  atLeastScriptWitnessFile <- noteInputFile \"test/data/golden/shelley/multisig/scripts/atleast\"\n  void $ execCardanoCLI\n    [ \"shelley\",\"transaction\",\"witness\"\n    , \"--tx-body-file\", txBodyOutFile\n    , \"--script-file\", atLeastScriptWitnessFile\n    , \"--mainnet\"\n    , \"--out-file\", atLeastMultiSigWitnessOutFile\n    ]\n\n  H.assertFileOccurences 1 \"TxWitnessShelley\" atLeastMultiSigWitnessOutFile\n  H.assertEndsWithSingleNewline txBodyOutFile\n\ngolden_shelleyTransactionSigningKeyWitness :: Property\ngolden_shelleyTransactionSigningKeyWitness = propertyOnce $ H.moduleWorkspace \"tmp\" $ \\tempDir -> do\n  txBodyOutFile <- noteTempFile tempDir \"tx-body-out\"\n\n  -- Create tx body file\n  void $ execCardanoCLI\n    [ \"shelley\",\"transaction\",\"build-raw\"\n    , \"--tx-in\", txIn\n    , \"--tx-out\", txOut\n    , \"--ttl\", \"60\"\n    , \"--fee\", \"12\"\n    , \"--tx-body-file\", txBodyOutFile\n    ]\n\n  -- Create all multisig witness\n  witnessOutFile <- noteTempFile tempDir \"signingkey-witness\"\n  signingKeyFile <- noteInputFile \"test/data/golden/shelley/keys/payment_keys/signing_key\"\n  void $ execCardanoCLI\n    [ \"shelley\",\"transaction\",\"witness\"\n    , \"--tx-body-file\", txBodyOutFile\n    , \"--signing-key-file\", signingKeyFile\n    , \"--mainnet\"\n    , \"--out-file\", witnessOutFile\n    ]\n\n  H.assertFileOccurences 1 \"TxWitnessShelley\" witnessOutFile\n  H.assertEndsWithSingleNewline txBodyOutFile\n"}}}
2020-12-03 13:33:52.211877615 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":159,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:33:52.212093109 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-03 13:33:52.212494201 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:33:52.212637027 [ThreadId 4492] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:33:52.212658252 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs
2020-12-03 13:33:52.213546308 [ThreadId 5383] - Consulting the cradle for "cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs"
2020-12-03 13:33:52.214011443 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":1},"method":"window/workDoneProgress/create","id":5}
2020-12-03 13:33:52.214114225 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","cancellable":false,"title":"Setting up cardano-node (for cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs)"},"token":1},"method":"$/progress"}
2020-12-03 13:33:52.214695584 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":160,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs"}}}
2020-12-03 13:33:52.224454881 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":5,"result":null}
2020-12-03 13:33:52.224539047 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":5,\"result\":null}"
2020-12-03 13:33:52.313696289 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":"619"},"method":"window/workDoneProgress/create","id":6}
2020-12-03 13:33:52.313825865 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","title":"Processing"},"token":"619"},"method":"$/progress"}
2020-12-03 13:33:52.314102981 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":6,"result":null}
2020-12-03 13:33:52.314195811 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":6,\"result\":null}"
2020-12-03 13:33:52.414194368 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"87/88"},"token":"619"},"method":"$/progress"}
2020-12-03 13:33:52.425390924 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":161,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs"}}}
2020-12-03 13:33:52.425568361 [ThreadId 5644] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:33:52.434474061 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":162,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs"},"range":{"start":{"line":48,"character":30},"end":{"line":48,"character":39}},"context":{"diagnostics":[]}}}
2020-12-03 13:33:52.434656894 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":159}}
2020-12-03 13:33:52.434928675 [ThreadId 5364] - CodeAction was cancelled
2020-12-03 13:33:52.43499636 [ThreadId 5362] - Cancelled request IdInt 159
2020-12-03 13:33:52.435071448 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":159}
2020-12-03 13:34:35.4333258 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":163,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs"},"position":{"line":55,"character":28}}}
2020-12-03 13:34:35.433507307 [ThreadId 5655] - GhcIde.hover entered (ideLogger)
2020-12-03 13:34:35.433620988 [ThreadId 5655] - Hover request at position 56:29 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs
2020-12-03 13:34:35.524276161 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":163}}
2020-12-03 13:34:35.524534745 [ThreadId 5655] - C:GetHieAst was cancelled
2020-12-03 13:34:35.524603076 [ThreadId 5653] - Cancelled request IdInt 163
2020-12-03 13:34:35.524693067 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":163}
2020-12-03 13:34:35.674721681 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":164,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs"},"position":{"line":55,"character":27}}}
2020-12-03 13:34:35.674876338 [ThreadId 5662] - GhcIde.hover entered (ideLogger)
2020-12-03 13:34:35.67496947 [ThreadId 5662] - Hover request at position 56:28 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs
2020-12-03 13:34:35.792193599 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":164}}
2020-12-03 13:34:35.792390276 [ThreadId 5662] - C:GetHieAst was cancelled
2020-12-03 13:34:35.792444113 [ThreadId 5660] - Cancelled request IdInt 164
2020-12-03 13:34:35.79255396 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":164}
2020-12-03 13:34:37.085302508 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs"}}}
2020-12-03 13:34:37.085438565 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs"}
2020-12-03 13:34:37.085535092 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":161}}
2020-12-03 13:34:37.085651619 [ThreadId 5644] - codeLens was cancelled
2020-12-03 13:34:37.085639395 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":162}}
2020-12-03 13:34:37.085701681 [ThreadId 5642] - Cancelled request IdInt 161
2020-12-03 13:34:37.085566271 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-03 13:34:37.085770257 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs
2020-12-03 13:34:37.08577761 [ThreadId 5649] - CodeAction was cancelled
2020-12-03 13:34:37.08578267 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":161}
2020-12-03 13:34:37.08584259 [ThreadId 5647] - Cancelled request IdInt 162
2020-12-03 13:34:37.085896889 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":162}
2020-12-03 13:34:37.094151325 [ThreadId 5933] - Data.HashMap.Internal.(!): key not found
CallStack (from HasCallStack):
  error, called at ./Data/HashMap/Internal.hs:756:16 in unordered-containers-0.2.13.0-f519383be173bea40a77beaaf5249f6ae8af1a29545fb7d3d57c773b8188dc00:Data.HashMap.Internal
  !, called at src/Development/IDE/Import/DependencyInformation.hs:107:40 in ghcide-0.4.0-inplace:Development.IDE.Import.DependencyInformation
2020-12-03 13:34:37.094240054 [ThreadId 5933] - finish: ParentTC (took 0.01s)
2020-12-03 13:34:37.143961676 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Cardano.CLI.Shelley.Parsers\n  ( -- * CLI command parser\n    parseShelleyCommands\n\n    -- * CLI command and flag types\n  , module Cardano.CLI.Shelley.Commands\n\n    -- * Field parser and renderers\n  , parseTxIn\n  , renderTxIn\n  ) where\n\nimport           Cardano.Prelude hiding (All, Any, option)\nimport           Prelude (String)\n\nimport           Cardano.Api.Protocol (Protocol (..))\nimport           Cardano.Api.Typed hiding (PoolId)\n\nimport           Cardano.Chain.Slotting (EpochSlots (..))\nimport           Cardano.CLI.Mary.TxOutParser (parseTxOutAnyEra)\nimport           Cardano.CLI.Mary.ValueParser (parseValue)\nimport           Cardano.CLI.Shelley.Commands\nimport           Cardano.CLI.Shelley.Key (InputFormat (..), VerificationKeyOrFile (..),\n                     VerificationKeyOrHashOrFile (..), VerificationKeyTextOrFile (..),\n                     deserialiseInput, renderInputDecodeError)\nimport           Cardano.CLI.Types\nimport           Control.Monad.Fail (fail)\nimport           Data.Attoparsec.Combinator ((<?>))\nimport           Data.Time.Clock (UTCTime)\nimport           Data.Time.Format (defaultTimeLocale, iso8601DateFormat, parseTimeOrError)\nimport           Network.Socket (PortNumber)\nimport           Options.Applicative hiding (str)\nimport           Ouroboros.Consensus.BlockchainTime (SystemStart (..))\n\nimport qualified Data.ByteString.Char8 as BSC\nimport qualified Data.Char as Char\nimport qualified Data.IP as IP\nimport qualified Data.List.NonEmpty as NE\nimport qualified Data.Set as Set\nimport qualified Data.Text as Text\nimport qualified Data.Text.Encoding as Text\n\nimport qualified Options.Applicative as Opt\nimport qualified Data.Attoparsec.ByteString.Char8 as Atto\nimport qualified Text.Parsec as Parsec\nimport qualified Text.Parsec.String as Parsec\nimport qualified Text.Parsec.Error  as Parsec\n\nimport qualified Shelley.Spec.Ledger.BaseTypes as Shelley\nimport qualified Shelley.Spec.Ledger.TxBody as Shelley\n\n--\n-- Shelley CLI command parsers\n--\n\nparseShelleyCommands :: Parser ShelleyCommand\nparseShelleyCommands =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"address\"\n          (Opt.info (AddressCmd <$> pAddressCmd) $ Opt.progDesc \"Shelley payment address commands\")\n      , Opt.command \"stake-address\"\n          (Opt.info (StakeAddressCmd <$> pStakeAddress) $ Opt.progDesc \"Shelley stake address commands\")\n      , Opt.command \"key\"\n          (Opt.info (KeyCmd <$> pKeyCmd) $ Opt.progDesc \"Shelley key utility commands\")\n      , Opt.command \"transaction\"\n          (Opt.info (TransactionCmd <$> pTransaction) $ Opt.progDesc \"Shelley transaction commands\")\n      , Opt.command \"node\"\n          (Opt.info (NodeCmd <$> pNodeCmd) $ Opt.progDesc \"Shelley node operaton commands\")\n      , Opt.command \"stake-pool\"\n          (Opt.info (PoolCmd <$> pPoolCmd) $ Opt.progDesc \"Shelley stake pool commands\")\n      , Opt.command \"query\"\n          (Opt.info (QueryCmd <$> pQueryCmd) . Opt.progDesc $\n             mconcat\n               [ \"Shelley node query commands. Will query the local node whose Unix domain socket \"\n               , \"is obtained from the CARDANO_NODE_SOCKET_PATH enviromnent variable.\"\n               ]\n            )\n      , Opt.command \"genesis\"\n          (Opt.info (GenesisCmd <$> pGenesisCmd) $ Opt.progDesc \"Shelley genesis block commands\")\n      , Opt.command \"governance\"\n          (Opt.info (GovernanceCmd <$> pGovernanceCmd) $ Opt.progDesc \"Shelley governance commands\")\n      , Opt.command \"text-view\"\n          (Opt.info (TextViewCmd <$> pTextViewCmd) . Opt.progDesc $\n             mconcat\n               [ \"Commands for dealing with Shelley TextView files. \"\n               , \"Transactions, addresses etc are stored on disk as TextView files.\"\n               ]\n            )\n\n      ]\n\npTextViewCmd :: Parser TextViewCmd\npTextViewCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"decode-cbor\"\n          (Opt.info (TextViewInfo <$> pCBORInFile <*> pMaybeOutputFile)\n            $ Opt.progDesc \"Print a TextView file as decoded CBOR.\"\n            )\n      ]\n\npCBORInFile :: Parser FilePath\npCBORInFile =\n  Opt.strOption\n    (  Opt.long \"in-file\"\n    <> Opt.metavar \"FILE\"\n    <> Opt.help \"CBOR input file.\"\n    <> Opt.completer (Opt.bashCompleter \"file\")\n    )\n  <|>\n  Opt.strOption\n    (  Opt.long \"file\"\n    <> Opt.internal\n    )\n\npAddressCmd :: Parser AddressCmd\npAddressCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen\"\n          (Opt.info pAddressKeyGen $ Opt.progDesc \"Create an address key pair.\")\n      , Opt.command \"key-hash\"\n          (Opt.info pAddressKeyHash $ Opt.progDesc \"Print the hash of an address key.\")\n      , Opt.command \"build\"\n          (Opt.info pAddressBuild $ Opt.progDesc \"Build a Shelley payment address, with optional delegation to a stake address.\")\n      , Opt.command \"build-script\"\n          (Opt.info pAddressBuildScript $ Opt.progDesc \"Build a Shelley script address.\")\n      , Opt.command \"info\"\n          (Opt.info pAddressInfo $ Opt.progDesc \"Print information about an address.\")\n      ]\n  where\n    pAddressKeyGen :: Parser AddressCmd\n    pAddressKeyGen = AddressKeyGen <$> pAddressKeyType\n                                   <*> pVerificationKeyFile Output\n                                   <*> pSigningKeyFile Output\n\n    pAddressKeyHash :: Parser AddressCmd\n    pAddressKeyHash =\n      AddressKeyHash\n        <$> pPaymentVerificationKeyTextOrFile\n        <*> pMaybeOutputFile\n\n    pAddressBuild :: Parser AddressCmd\n    pAddressBuild =\n      AddressBuild\n        <$> pPaymentVerificationKeyTextOrFile\n        <*> Opt.optional pStakeVerificationKeyOrFile\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pAddressBuildScript :: Parser AddressCmd\n    pAddressBuildScript = AddressBuildMultiSig\n                            <$> pScript\n                            <*> pNetworkId\n                            <*> pMaybeOutputFile\n\n    pAddressInfo :: Parser AddressCmd\n    pAddressInfo = AddressInfo <$> pAddress <*> pMaybeOutputFile\n\npPaymentVerificationKeyTextOrFile :: Parser VerificationKeyTextOrFile\npPaymentVerificationKeyTextOrFile =\n  VktofVerificationKeyText <$> pPaymentVerificationKeyText\n    <|> VktofVerificationKeyFile <$> pPaymentVerificationKeyFile\n\npPaymentVerificationKeyText :: Parser Text\npPaymentVerificationKeyText =\n  Text.pack <$>\n    Opt.strOption\n      (  Opt.long \"payment-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Payment verification key (Bech32-encoded)\"\n      )\n\npPaymentVerificationKeyFile :: Parser VerificationKeyFile\npPaymentVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"payment-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the payment verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npScript :: Parser ScriptFile\npScript = ScriptFile <$> Opt.strOption\n  (  Opt.long \"script-file\"\n  <> Opt.metavar \"FILE\"\n  <> Opt.help \"Filepath of the script.\"\n  <> Opt.completer (Opt.bashCompleter \"file\")\n  )\n\npStakeAddress :: Parser StakeAddressCmd\npStakeAddress =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen\"\n          (Opt.info pStakeAddressKeyGen $ Opt.progDesc \"Create a stake address key pair\")\n      , Opt.command \"build\"\n          (Opt.info pStakeAddressBuild $ Opt.progDesc \"Build a stake address\")\n      , Opt.command \"key-hash\"\n          (Opt.info pStakeAddressKeyHash $ Opt.progDesc \"Print the hash of a stake address key.\")\n      , Opt.command \"registration-certificate\"\n          (Opt.info pStakeAddressRegistrationCert $ Opt.progDesc \"Create a stake address registration certificate\")\n      , Opt.command \"deregistration-certificate\"\n          (Opt.info pStakeAddressDeregistrationCert $ Opt.progDesc \"Create a stake address deregistration certificate\")\n      , Opt.command \"delegation-certificate\"\n          (Opt.info pStakeAddressDelegationCert $ Opt.progDesc \"Create a stake address delegation certificate\")\n      ]\n  where\n    pStakeAddressKeyGen :: Parser StakeAddressCmd\n    pStakeAddressKeyGen = StakeAddressKeyGen\n                            <$> pVerificationKeyFile Output\n                            <*> pSigningKeyFile Output\n\n    pStakeAddressKeyHash :: Parser StakeAddressCmd\n    pStakeAddressKeyHash = StakeAddressKeyHash <$> pStakeVerificationKeyOrFile <*> pMaybeOutputFile\n\n    pStakeAddressBuild :: Parser StakeAddressCmd\n    pStakeAddressBuild = StakeAddressBuild <$> pStakeVerificationKeyOrFile\n                                           <*> pNetworkId\n                                           <*> pMaybeOutputFile\n\n    pStakeAddressRegistrationCert :: Parser StakeAddressCmd\n    pStakeAddressRegistrationCert = StakeKeyRegistrationCert\n                                      <$> pStakeVerificationKeyOrFile\n                                      <*> pOutputFile\n\n    pStakeAddressDeregistrationCert :: Parser StakeAddressCmd\n    pStakeAddressDeregistrationCert = StakeKeyDeRegistrationCert\n                                        <$> pStakeVerificationKeyOrFile\n                                        <*> pOutputFile\n\n    pStakeAddressDelegationCert :: Parser StakeAddressCmd\n    pStakeAddressDelegationCert = StakeKeyDelegationCert\n                                    <$> pStakeVerificationKeyOrFile\n                                    <*> pStakePoolVerificationKeyOrHashOrFile\n                                    <*> pOutputFile\n\npKeyCmd :: Parser KeyCmd\npKeyCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"verification-key\" $\n          Opt.info pKeyGetVerificationKey $\n            Opt.progDesc $ \"Get a verification key from a signing key. This \"\n                        ++ \" supports all key types.\"\n\n      , Opt.command \"non-extended-key\" $\n          Opt.info pKeyNonExtendedKey $\n            Opt.progDesc $ \"Get a non-extended verification key from an \"\n                        ++ \"extended verification key. This supports all \"\n                        ++ \"extended key types.\"\n\n      , Opt.command \"convert-byron-key\" $\n          Opt.info pKeyConvertByronKey $\n            Opt.progDesc $ \"Convert a Byron payment, genesis or genesis \"\n                        ++ \"delegate key (signing or verification) to a \"\n                        ++ \"corresponding Shelley-format key.\"\n\n      , Opt.command \"convert-byron-genesis-vkey\" $\n          Opt.info pKeyConvertByronGenesisVKey $\n            Opt.progDesc $ \"Convert a Base64-encoded Byron genesis \"\n                        ++ \"verification key to a Shelley genesis \"\n                        ++ \"verification key\"\n\n      , Opt.command \"convert-itn-key\" $\n          Opt.info pKeyConvertITNKey $\n            Opt.progDesc $ \"Convert an Incentivized Testnet (ITN) non-extended \"\n                        ++ \"(Ed25519) signing or verification key to a \"\n                        ++ \"corresponding Shelley stake key\"\n      , Opt.command \"convert-itn-extended-key\" $\n          Opt.info pKeyConvertITNExtendedKey $\n            Opt.progDesc $ \"Convert an Incentivized Testnet (ITN) extended \"\n                        ++ \"(Ed25519Extended) signing key to a corresponding \"\n                        ++ \"Shelley stake signing key\"\n      , Opt.command \"convert-itn-bip32-key\" $\n          Opt.info pKeyConvertITNBip32Key $\n            Opt.progDesc $ \"Convert an Incentivized Testnet (ITN) BIP32 \"\n                        ++ \"(Ed25519Bip32) signing key to a corresponding \"\n                        ++ \"Shelley stake signing key\"\n\n      , Opt.command \"convert-cardano-address-key\" $\n          Opt.info pKeyConvertCardanoAddressSigningKey $\n            Opt.progDesc $ \"Convert a cardano-address extended signing key \"\n                        ++ \"to a corresponding Shelley-format key.\"\n      ]\n  where\n    pKeyGetVerificationKey :: Parser KeyCmd\n    pKeyGetVerificationKey =\n      KeyGetVerificationKey\n        <$> pSigningKeyFile      Input\n        <*> pVerificationKeyFile Output\n\n    pKeyNonExtendedKey :: Parser KeyCmd\n    pKeyNonExtendedKey =\n      KeyNonExtendedKey\n        <$> pExtendedVerificationKeyFile Input\n        <*> pVerificationKeyFile Output\n\n    pKeyConvertByronKey :: Parser KeyCmd\n    pKeyConvertByronKey =\n      KeyConvertByronKey\n        <$> optional pPassword\n        <*> pByronKeyType\n        <*> pByronKeyFile\n        <*> pOutputFile\n\n    pPassword :: Parser Text\n    pPassword = Opt.strOption\n                  (  Opt.long \"password\"\n                  <> Opt.metavar \"TEXT\"\n                  <> Opt.help \"Password for signing key (if applicable).\"\n                  )\n\n    pByronKeyType :: Parser ByronKeyType\n    pByronKeyType =\n          Opt.flag' (ByronPaymentKey NonLegacyByronKeyFormat)\n            (  Opt.long \"byron-payment-key-type\"\n            <> Opt.help \"Use a Byron-era payment key.\"\n            )\n      <|> Opt.flag' (ByronPaymentKey LegacyByronKeyFormat)\n            (  Opt.long \"legacy-byron-payment-key-type\"\n            <> Opt.help \"Use a Byron-era payment key, in legacy SL format.\"\n            )\n      <|> Opt.flag' (ByronGenesisKey NonLegacyByronKeyFormat)\n            (  Opt.long \"byron-genesis-key-type\"\n            <> Opt.help \"Use a Byron-era genesis key.\"\n            )\n      <|> Opt.flag' (ByronGenesisKey LegacyByronKeyFormat)\n            (  Opt.long \"legacy-byron-genesis-key-type\"\n            <> Opt.help \"Use a Byron-era genesis key, in legacy SL format.\"\n            )\n      <|> Opt.flag' (ByronDelegateKey NonLegacyByronKeyFormat)\n            (  Opt.long \"byron-genesis-delegate-key-type\"\n            <> Opt.help \"Use a Byron-era genesis delegate key.\"\n            )\n      <|> Opt.flag' (ByronDelegateKey LegacyByronKeyFormat)\n            (  Opt.long \"legacy-byron-genesis-delegate-key-type\"\n            <> Opt.help \"Use a Byron-era genesis delegate key, in legacy SL format.\"\n            )\n\n    pByronKeyFile :: Parser SomeKeyFile\n    pByronKeyFile =\n          (ASigningKeyFile      <$> pByronSigningKeyFile)\n      <|> (AVerificationKeyFile <$> pByronVerificationKeyFile)\n\n    pByronSigningKeyFile :: Parser SigningKeyFile\n    pByronSigningKeyFile =\n      SigningKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"byron-signing-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Input filepath of the Byron-format signing key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pByronVerificationKeyFile :: Parser VerificationKeyFile\n    pByronVerificationKeyFile =\n      VerificationKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"byron-verification-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Input filepath of the Byron-format verification key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pKeyConvertByronGenesisVKey :: Parser KeyCmd\n    pKeyConvertByronGenesisVKey =\n      KeyConvertByronGenesisVKey\n        <$> pByronGenesisVKeyBase64\n        <*> pOutputFile\n\n    pByronGenesisVKeyBase64 :: Parser VerificationKeyBase64\n    pByronGenesisVKeyBase64 =\n      VerificationKeyBase64 <$>\n        Opt.strOption\n          (  Opt.long \"byron-genesis-verification-key\"\n          <> Opt.metavar \"BASE64\"\n          <> Opt.help \"Base64 string for the Byron genesis verification key.\"\n          )\n\n    pKeyConvertITNKey :: Parser KeyCmd\n    pKeyConvertITNKey =\n      KeyConvertITNStakeKey\n        <$> pITNKeyFIle\n        <*> pOutputFile\n\n    pKeyConvertITNExtendedKey :: Parser KeyCmd\n    pKeyConvertITNExtendedKey =\n      KeyConvertITNExtendedToStakeKey\n        <$> pITNSigningKeyFile\n        <*> pOutputFile\n\n    pKeyConvertITNBip32Key :: Parser KeyCmd\n    pKeyConvertITNBip32Key =\n      KeyConvertITNBip32ToStakeKey\n        <$> pITNSigningKeyFile\n        <*> pOutputFile\n\n    pITNKeyFIle :: Parser SomeKeyFile\n    pITNKeyFIle = pITNSigningKeyFile\n              <|> pITNVerificationKeyFile\n\n    pITNSigningKeyFile :: Parser SomeKeyFile\n    pITNSigningKeyFile =\n      ASigningKeyFile . SigningKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"itn-signing-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Filepath of the ITN signing key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pITNVerificationKeyFile :: Parser SomeKeyFile\n    pITNVerificationKeyFile =\n      AVerificationKeyFile . VerificationKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"itn-verification-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Filepath of the ITN verification key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pKeyConvertCardanoAddressSigningKey :: Parser KeyCmd\n    pKeyConvertCardanoAddressSigningKey =\n      KeyConvertCardanoAddressSigningKey\n        <$> pCardanoAddressKeyType\n        <*> pSigningKeyFile Input\n        <*> pOutputFile\n\n    pCardanoAddressKeyType :: Parser CardanoAddressKeyType\n    pCardanoAddressKeyType =\n          Opt.flag' CardanoAddressShelleyPaymentKey\n            (  Opt.long \"shelley-payment-key\"\n            <> Opt.help \"Use a Shelley-era extended payment key.\"\n            )\n      <|> Opt.flag' CardanoAddressShelleyStakeKey\n            (  Opt.long \"shelley-stake-key\"\n            <> Opt.help \"Use a Shelley-era extended stake key.\"\n            )\n      <|> Opt.flag' CardanoAddressIcarusPaymentKey\n            (  Opt.long \"icarus-payment-key\"\n            <> Opt.help \"Use a Byron-era extended payment key formatted in the Icarus style.\"\n            )\n      <|> Opt.flag' CardanoAddressByronPaymentKey\n            (  Opt.long \"byron-payment-key\"\n            <> Opt.help \"Use a Byron-era extended payment key formatted in the deprecated Byron style.\"\n            )\n\npTransaction :: Parser TransactionCmd\npTransaction =\n  asum\n    [ subParser \"build-raw\"\n        (Opt.info pTransactionBuild $ Opt.progDesc \"Build a transaction (low-level, inconvenient)\")\n    , subParser \"sign\"\n        (Opt.info pTransactionSign $ Opt.progDesc \"Sign a transaction\")\n    , subParser \"witness\"\n        (Opt.info pTransactionCreateWitness $ Opt.progDesc \"Create a transaction witness\")\n    , subParser \"assemble\"\n        (Opt.info pTransactionAssembleTxBodyWit\n          $ Opt.progDesc \"Assemble a tx body and witness(es) to form a transaction\")\n    , pSignWitnessBackwardCompatible\n    , subParser \"submit\"\n        (Opt.info pTransactionSubmit . Opt.progDesc $\n           mconcat\n             [ \"Submit a transaction to the local node whose Unix domain socket \"\n             , \"is obtained from the CARDANO_NODE_SOCKET_PATH enviromnent variable.\"\n             ]\n          )\n    , subParser \"policyid\"\n        (Opt.info pTransactionPolicyId $ Opt.progDesc \"Calculate the PolicyId from the monetary policy script.\")\n    , subParser \"calculate-min-fee\"\n        (Opt.info pTransactionCalculateMinFee $ Opt.progDesc \"Calculate the minimum fee for a transaction\")\n    , subParser \"txid\"\n        (Opt.info pTransactionId $ Opt.progDesc \"Print a transaction identifier\")\n    ]\n where\n  subParser :: String -> ParserInfo TransactionCmd -> Parser TransactionCmd\n  subParser name pInfo = Opt.subparser $ Opt.command name pInfo\n\n  assembleInfo :: ParserInfo TransactionCmd\n  assembleInfo =\n    Opt.info pTransactionAssembleTxBodyWit\n      $ Opt.progDesc \"Assemble a tx body and witness(es) to form a transaction\"\n\n  pSignWitnessBackwardCompatible :: Parser TransactionCmd\n  pSignWitnessBackwardCompatible =\n    Opt.subparser\n      $ Opt.command \"sign-witness\" assembleInfo <> Opt.internal\n\n  pTransactionBuild :: Parser TransactionCmd\n  pTransactionBuild = TxBuildRaw <$> pCardanoEra\n                                 <*> some pTxIn\n                                 <*> some pTxOut\n                                 <*> optional pMintMultiAsset\n                                 <*> optional pTxLowerBound\n                                 <*> optional pTxUpperBound\n                                 <*> optional pTxFee\n                                 <*> many pCertificateFile\n                                 <*> many pWithdrawal\n                                 <*> pTxMetadataJsonSchema\n                                 <*> many pScript\n                                 <*> many pMetaDataFile\n                                 <*> optional pUpdateProposalFile\n                                 <*> pTxBodyFile Output\n\n  pTransactionSign  :: Parser TransactionCmd\n  pTransactionSign = TxSign <$> pTxBodyFile Input\n                            <*> pSomeWitnessSigningData\n                            <*> optional pNetworkId\n                            <*> pTxFile Output\n\n  pTransactionCreateWitness :: Parser TransactionCmd\n  pTransactionCreateWitness = TxCreateWitness\n                                <$> pTxBodyFile Input\n                                <*> pWitnessSigningData\n                                <*> optional pNetworkId\n                                <*> pOutputFile\n\n  pTransactionAssembleTxBodyWit :: Parser TransactionCmd\n  pTransactionAssembleTxBodyWit = TxAssembleTxBodyWitness\n                                    <$> pTxBodyFile Input\n                                    <*> some pWitnessFile\n                                    <*> pOutputFile\n\n  pTransactionSubmit :: Parser TransactionCmd\n  pTransactionSubmit = TxSubmit <$> pProtocol\n                                <*> pNetworkId\n                                <*> pTxSubmitFile\n\n  pTransactionPolicyId :: Parser TransactionCmd\n  pTransactionPolicyId = TxMintedPolicyId <$> pScript\n\n  pTransactionCalculateMinFee :: Parser TransactionCmd\n  pTransactionCalculateMinFee =\n    TxCalculateMinFee\n      <$> pTxBodyFile Input\n      <*> optional pNetworkId\n      <*> pProtocolParamsFile\n      <*> pTxInCount\n      <*> pTxOutCount\n      <*> pTxShelleyWitnessCount\n      <*> pTxByronWitnessCount\n\n  pTransactionId  :: Parser TransactionCmd\n  pTransactionId = TxGetTxId <$> pTxBodyFile Input\n\n\npNodeCmd :: Parser NodeCmd\npNodeCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen\"\n          (Opt.info pKeyGenOperator $\n             Opt.progDesc \"Create a key pair for a node operator's offline \\\n                         \\ key and a new certificate issue counter\")\n      , Opt.command \"key-gen-KES\"\n          (Opt.info pKeyGenKES $\n             Opt.progDesc \"Create a key pair for a node KES operational key\")\n      , Opt.command \"key-gen-VRF\"\n          (Opt.info pKeyGenVRF $\n             Opt.progDesc \"Create a key pair for a node VRF operational key\")\n      , Opt.command \"key-hash-VRF\"\n          (Opt.info pKeyHashVRF $\n             Opt.progDesc \"Print hash of a node's operational VRF key.\")\n      , Opt.command \"new-counter\"\n          (Opt.info pNewCounter $\n             Opt.progDesc \"Create a new certificate issue counter\")\n      , Opt.command \"issue-op-cert\"\n          (Opt.info pIssueOpCert $\n             Opt.progDesc \"Issue a node operational certificate\")\n      ]\n  where\n    pKeyGenOperator :: Parser NodeCmd\n    pKeyGenOperator =\n      NodeKeyGenCold <$> pColdVerificationKeyFile\n                     <*> pColdSigningKeyFile\n                     <*> pOperatorCertIssueCounterFile\n\n    pKeyGenKES :: Parser NodeCmd\n    pKeyGenKES =\n      NodeKeyGenKES <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pKeyGenVRF :: Parser NodeCmd\n    pKeyGenVRF =\n      NodeKeyGenVRF <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pKeyHashVRF :: Parser NodeCmd\n    pKeyHashVRF =\n      NodeKeyHashVRF <$> pVerificationKeyOrFile AsVrfKey <*> pMaybeOutputFile\n\n    pNewCounter :: Parser NodeCmd\n    pNewCounter =\n      NodeNewCounter <$> pColdVerificationKeyOrFile\n                     <*> pCounterValue\n                     <*> pOperatorCertIssueCounterFile\n\n    pCounterValue :: Parser Word\n    pCounterValue =\n        Opt.option Opt.auto\n          (  Opt.long \"counter-value\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The next certificate issue counter value to use.\"\n          )\n\n    pIssueOpCert :: Parser NodeCmd\n    pIssueOpCert =\n      NodeIssueOpCert <$> pKesVerificationKeyOrFile\n                      <*> pColdSigningKeyFile\n                      <*> pOperatorCertIssueCounterFile\n                      <*> pKesPeriod\n                      <*> pOutputFile\n\n\npPoolCmd :: Parser PoolCmd\npPoolCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"registration-certificate\"\n          (Opt.info pStakePoolRegistrationCert $ Opt.progDesc \"Create a stake pool registration certificate\")\n      , Opt.command \"deregistration-certificate\"\n          (Opt.info pStakePoolRetirementCert $ Opt.progDesc \"Create a stake pool deregistration certificate\")\n      , Opt.command \"id\"\n          (Opt.info pId $\n             Opt.progDesc \"Build pool id from the offline key\")\n      , Opt.command \"metadata-hash\"\n          (Opt.info pPoolMetaDataHashSubCmd $ Opt.progDesc \"Print the hash of pool metadata.\")\n      ]\n  where\n    pId :: Parser PoolCmd\n    pId = PoolGetId <$> pStakePoolVerificationKeyOrFile <*> pOutputFormat\n\n    pPoolMetaDataHashSubCmd :: Parser PoolCmd\n    pPoolMetaDataHashSubCmd = PoolMetaDataHash <$> pPoolMetaDataFile <*> pMaybeOutputFile\n\n\npQueryCmd :: Parser QueryCmd\npQueryCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"protocol-parameters\"\n          (Opt.info pQueryProtocolParameters $ Opt.progDesc \"Get the node's current protocol parameters\")\n      , Opt.command \"tip\"\n          (Opt.info pQueryTip $ Opt.progDesc \"Get the node's current tip (slot no, hash, block no)\")\n      , Opt.command \"stake-distribution\"\n          (Opt.info pQueryStakeDistribution $ Opt.progDesc \"Get the node's current aggregated stake distribution\")\n      , Opt.command \"stake-address-info\"\n          (Opt.info pQueryStakeAddressInfo $ Opt.progDesc \"Get the current delegations and \\\n                                                          \\reward accounts filtered by stake \\\n                                                          \\address.\")\n      , Opt.command \"utxo\"\n          (Opt.info pQueryUTxO $ Opt.progDesc \"Get the node's current UTxO with the option of \\\n                                              \\filtering by address(es)\")\n      , Opt.command \"ledger-state\"\n          (Opt.info pQueryLedgerState $ Opt.progDesc \"Dump the current ledger state of the node (Ledger.NewEpochState -- advanced command)\")\n      , Opt.command \"protocol-state\"\n          (Opt.info pQueryProtocolState $ Opt.progDesc \"Dump the current protocol state of the node (Ledger.ChainDepState -- advanced command)\")\n      ]\n  where\n    pQueryProtocolParameters :: Parser QueryCmd\n    pQueryProtocolParameters =\n      QueryProtocolParameters\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryTip :: Parser QueryCmd\n    pQueryTip = QueryTip\n                  <$> pProtocol\n                  <*> pNetworkId\n                  <*> pMaybeOutputFile\n\n    pQueryUTxO :: Parser QueryCmd\n    pQueryUTxO =\n      QueryUTxO\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pQueryFilter\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryStakeDistribution :: Parser QueryCmd\n    pQueryStakeDistribution =\n      QueryStakeDistribution\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryStakeAddressInfo :: Parser QueryCmd\n    pQueryStakeAddressInfo =\n      QueryStakeAddressInfo\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pFilterByStakeAddress\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryLedgerState :: Parser QueryCmd\n    pQueryLedgerState = QueryLedgerState <$> pCardanoEra <*> pProtocol <*> pNetworkId <*> pMaybeOutputFile\n\n    pQueryProtocolState :: Parser QueryCmd\n    pQueryProtocolState = QueryProtocolState\n                            <$> pCardanoEra\n                            <*> pProtocol\n                            <*> pNetworkId\n                            <*> pMaybeOutputFile\n\npGovernanceCmd :: Parser GovernanceCmd\npGovernanceCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"create-mir-certificate\"\n          (Opt.info pMIRCertificate $\n            Opt.progDesc \"Create an MIR (Move Instantaneous Rewards) certificate\")\n      , Opt.command \"create-genesis-key-delegation-certificate\"\n          (Opt.info pGovernanceGenesisKeyDelegationCertificate $\n            Opt.progDesc \"Create a genesis key delegation certificate\")\n      , Opt.command \"create-update-proposal\"\n          (Opt.info pUpdateProposal $\n            Opt.progDesc \"Create an update proposal\")\n      ]\n  where\n    pMIRCertificate :: Parser GovernanceCmd\n    pMIRCertificate = GovernanceMIRCertificate\n                        <$> pMIRPot\n                        <*> some pStakeVerificationKeyFile\n                        <*> some pRewardAmt\n                        <*> pOutputFile\n\n    pGovernanceGenesisKeyDelegationCertificate :: Parser GovernanceCmd\n    pGovernanceGenesisKeyDelegationCertificate =\n      GovernanceGenesisKeyDelegationCertificate\n        <$> pGenesisVerificationKeyOrHashOrFile\n        <*> pGenesisDelegateVerificationKeyOrHashOrFile\n        <*> pVrfVerificationKeyOrHashOrFile\n        <*> pOutputFile\n\n    pMIRPot :: Parser Shelley.MIRPot\n    pMIRPot =\n          Opt.flag' Shelley.ReservesMIR\n            (  Opt.long \"reserves\"\n            <> Opt.help \"Use the reserves pot.\"\n            )\n      <|> Opt.flag' Shelley.TreasuryMIR\n            (  Opt.long \"treasury\"\n            <> Opt.help \"Use the treasury pot.\"\n            )\n\n    pUpdateProposal :: Parser GovernanceCmd\n    pUpdateProposal = GovernanceUpdateProposal\n                        <$> pOutputFile\n                        <*> pEpochNoUpdateProp\n                        <*> some pGenesisVerificationKeyFile\n                        <*> pShelleyProtocolParametersUpdate\n\npRewardAmt :: Parser Lovelace\npRewardAmt =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"reward\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The reward for the relevant reward account.\"\n      )\n\npGenesisCmd :: Parser GenesisCmd\npGenesisCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen-genesis\"\n          (Opt.info pGenesisKeyGen $\n             Opt.progDesc \"Create a Shelley genesis key pair\")\n      , Opt.command \"key-gen-delegate\"\n          (Opt.info pGenesisDelegateKeyGen $\n             Opt.progDesc \"Create a Shelley genesis delegate key pair\")\n      , Opt.command \"key-gen-utxo\"\n          (Opt.info pGenesisUTxOKeyGen $\n             Opt.progDesc \"Create a Shelley genesis UTxO key pair\")\n      , Opt.command \"key-hash\"\n          (Opt.info pGenesisKeyHash $\n             Opt.progDesc \"Print the identifier (hash) of a public key\")\n      , Opt.command \"get-ver-key\"\n          (Opt.info pGenesisVerKey $\n             Opt.progDesc \"Derive the verification key from a signing key\")\n      , Opt.command \"initial-addr\"\n          (Opt.info pGenesisAddr $\n             Opt.progDesc \"Get the address for an initial UTxO based on the verification key\")\n      , Opt.command \"initial-txin\"\n          (Opt.info pGenesisTxIn $\n             Opt.progDesc \"Get the TxIn for an initial UTxO based on the verification key\")\n      , Opt.command \"create\"\n          (Opt.info pGenesisCreate $\n             Opt.progDesc (\"Create a Shelley genesis file from a genesis \"\n                        ++ \"template and genesis/delegation/spending keys.\"))\n\n      , Opt.command \"create-staked\"\n          (Opt.info pGenesisCreateStaked $\n             Opt.progDesc (\"Create a staked Shelley genesis file from a genesis \"\n                        ++ \"template and genesis/delegation/spending keys.\"))\n\n      , Opt.command \"hash\"\n          (Opt.info pGenesisHash $\n             Opt.progDesc \"Compute the hash of a genesis file\")\n      ]\n  where\n    pGenesisKeyGen :: Parser GenesisCmd\n    pGenesisKeyGen =\n      GenesisKeyGenGenesis <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pGenesisDelegateKeyGen :: Parser GenesisCmd\n    pGenesisDelegateKeyGen =\n      GenesisKeyGenDelegate <$> pVerificationKeyFile Output\n                            <*> pSigningKeyFile Output\n                            <*> pOperatorCertIssueCounterFile\n\n    pGenesisUTxOKeyGen :: Parser GenesisCmd\n    pGenesisUTxOKeyGen =\n      GenesisKeyGenUTxO <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pGenesisKeyHash :: Parser GenesisCmd\n    pGenesisKeyHash =\n      GenesisCmdKeyHash <$> pVerificationKeyFile Input\n\n    pGenesisVerKey :: Parser GenesisCmd\n    pGenesisVerKey =\n      GenesisVerKey <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pGenesisAddr :: Parser GenesisCmd\n    pGenesisAddr =\n      GenesisAddr <$> pVerificationKeyFile Input <*> pNetworkId <*> pMaybeOutputFile\n\n    pGenesisTxIn :: Parser GenesisCmd\n    pGenesisTxIn =\n      GenesisTxIn <$> pVerificationKeyFile Input <*> pNetworkId <*> pMaybeOutputFile\n\n    pGenesisCreate :: Parser GenesisCmd\n    pGenesisCreate =\n      GenesisCreate <$> pGenesisDir\n                    <*> pGenesisNumGenesisKeys\n                    <*> pGenesisNumUTxOKeys\n                    <*> pMaybeSystemStart\n                    <*> pInitialSupplyNonDelegated\n                    <*> pNetworkId\n\n    pGenesisCreateStaked :: Parser GenesisCmd\n    pGenesisCreateStaked =\n      GenesisCreateStaked\n        <$> pGenesisDir\n        <*> pGenesisNumGenesisKeys\n        <*> pGenesisNumUTxOKeys\n        <*> pGenesisNumPools\n        <*> pGenesisNumStDelegs\n        <*> pMaybeSystemStart\n        <*> pInitialSupplyNonDelegated\n        <*> pInitialSupplyDelegated\n        <*> pNetworkId\n        <*> pBulkPoolCredFiles\n        <*> pBulkPoolsPerFile\n        <*> pStuffedUtxoCount\n\n    pGenesisHash :: Parser GenesisCmd\n    pGenesisHash =\n      GenesisHashFile <$> pGenesisFile\n\n    pGenesisDir :: Parser GenesisDir\n    pGenesisDir =\n      GenesisDir <$>\n        Opt.strOption\n          (  Opt.long \"genesis-dir\"\n          <> Opt.metavar \"DIR\"\n          <> Opt.help \"The genesis directory containing the genesis template and required genesis/delegation/spending keys.\"\n          )\n\n    pMaybeSystemStart :: Parser (Maybe SystemStart)\n    pMaybeSystemStart =\n      Opt.optional $\n        SystemStart . convertTime <$>\n          Opt.strOption\n            (  Opt.long \"start-time\"\n            <> Opt.metavar \"UTC-TIME\"\n            <> Opt.help \"The genesis start time in YYYY-MM-DDThh:mm:ssZ format. If unspecified, will be the current time +30 seconds.\"\n            )\n\n    pGenesisNumGenesisKeys :: Parser Word\n    pGenesisNumGenesisKeys =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-genesis-keys\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of genesis keys to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pGenesisNumUTxOKeys :: Parser Word\n    pGenesisNumUTxOKeys =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-utxo-keys\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of UTxO keys to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pGenesisNumPools :: Parser Word\n    pGenesisNumPools =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-pools\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of stake pool credential sets to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pGenesisNumStDelegs :: Parser Word\n    pGenesisNumStDelegs =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-stake-delegs\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of stake delegator credential sets to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pStuffedUtxoCount :: Parser Word\n    pStuffedUtxoCount =\n        Opt.option Opt.auto\n          (  Opt.long \"num-stuffed-utxo\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of fake UTxO entries to generate [default is 0].\"\n          <> Opt.value 0\n          )\n\n    convertTime :: String -> UTCTime\n    convertTime =\n      parseTimeOrError False defaultTimeLocale (iso8601DateFormat $ Just \"%H:%M:%SZ\")\n\n    pInitialSupplyNonDelegated :: Parser (Maybe Lovelace)\n    pInitialSupplyNonDelegated =\n      Opt.optional $\n      Lovelace <$>\n        Opt.option Opt.auto\n          (  Opt.long \"supply\"\n          <> Opt.metavar \"LOVELACE\"\n          <> Opt.help \"The initial coin supply in Lovelace which will be evenly distributed across initial, non-delegating stake holders.\"\n          )\n\n    pInitialSupplyDelegated :: Parser Lovelace\n    pInitialSupplyDelegated =\n      fmap (Lovelace . fromMaybe 0) $ Opt.optional $\n        Opt.option Opt.auto\n          (  Opt.long \"supply-delegated\"\n          <> Opt.metavar \"LOVELACE\"\n          <> Opt.help \"The initial coin supply in Lovelace which will be evenly distributed across initial, delegating stake holders.\"\n          <> Opt.value 0\n          )\n\n    pBulkPoolCredFiles :: Parser Word\n    pBulkPoolCredFiles =\n        Opt.option Opt.auto\n          (  Opt.long \"bulk-pool-cred-files\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"Generate bulk pool credential files [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pBulkPoolsPerFile :: Parser Word\n    pBulkPoolsPerFile =\n        Opt.option Opt.auto\n          (  Opt.long \"bulk-pools-per-file\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"Each bulk pool to contain this many pool credential sets [default is 0].\"\n          <> Opt.value 0\n          )\n\n\n--\n-- Shelley CLI flag parsers\n--\n\ndata FileDirection\n  = Input\n  | Output\n  deriving (Eq, Show)\n\npAddressKeyType :: Parser AddressKeyType\npAddressKeyType =\n    Opt.flag' AddressKeyShelley\n      (  Opt.long \"normal-key\"\n      <> Opt.help \"Use a normal Shelley-era key (default).\"\n      )\n  <|>\n    Opt.flag' AddressKeyShelleyExtended\n      (  Opt.long \"extended-key\"\n      <> Opt.help \"Use an extended ed25519 Shelley-era key.\"\n      )\n  <|>\n    Opt.flag' AddressKeyByron\n      (  Opt.long \"byron-key\"\n      <> Opt.help \"Use a Byron-era key.\"\n      )\n  <|>\n    pure AddressKeyShelley\n\n\npProtocolParamsFile :: Parser ProtocolParamsFile\npProtocolParamsFile =\n  ProtocolParamsFile <$>\n    Opt.strOption\n      (  Opt.long \"protocol-params-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the JSON-encoded protocol parameters file\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npCertificateFile :: Parser CertificateFile\npCertificateFile =\n  CertificateFile <$>\n    (  Opt.strOption\n         (  Opt.long \"certificate-file\"\n         <> Opt.metavar \"FILE\"\n         <> Opt.help \"Filepath of the certificate. This encompasses all \\\n                     \\types of certificates (stake pool certificates, \\\n                     \\stake key certificates etc)\"\n         <> Opt.completer (Opt.bashCompleter \"file\")\n         )\n    <|>\n       Opt.strOption\n         (  Opt.long \"certificate\"\n         <> Opt.internal\n         )\n    )\n\npPoolMetaDataFile :: Parser PoolMetaDataFile\npPoolMetaDataFile =\n  PoolMetaDataFile <$>\n    Opt.strOption\n      (  Opt.long \"pool-metadata-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the pool metadata.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npTxMetadataJsonSchema :: Parser TxMetadataJsonSchema\npTxMetadataJsonSchema =\n    (  Opt.flag' ()\n        (  Opt.long \"json-metadata-no-schema\"\n        <> Opt.help \"Use the \\\"no schema\\\" conversion from JSON to tx metadata.\"\n        )\n    *> pure TxMetadataJsonNoSchema\n    )\n  <|>\n    (  Opt.flag' ()\n        (  Opt.long \"json-metadata-detailed-schema\"\n        <> Opt.help \"Use the \\\"detailed schema\\\" conversion from JSON to tx metadata.\"\n        )\n    *> pure TxMetadataJsonDetailedSchema\n    )\n  <|>\n    -- Default to the no-schema conversion.\n    pure TxMetadataJsonNoSchema\n\npMetaDataFile :: Parser MetaDataFile\npMetaDataFile =\n      MetaDataFileJSON <$>\n        ( Opt.strOption\n            (  Opt.long \"metadata-json-file\"\n            <> Opt.metavar \"FILE\"\n            <> Opt.help \"Filepath of the metadata file, in JSON format.\"\n            <> Opt.completer (Opt.bashCompleter \"file\")\n            )\n        <|>\n          Opt.strOption\n            (  Opt.long \"metadata-file\" -- backward compat name\n            <> Opt.internal\n            )\n        )\n  <|>\n      MetaDataFileCBOR <$>\n        Opt.strOption\n          (  Opt.long \"metadata-cbor-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Filepath of the metadata, in raw CBOR format.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\npWithdrawal :: Parser (StakeAddress, Lovelace)\npWithdrawal =\n    Opt.option (readerFromAttoParser parseWithdrawal)\n      (  Opt.long \"withdrawal\"\n      <> Opt.metavar \"WITHDRAWAL\"\n      <> Opt.help \"The reward withdrawal as StakeAddress+Lovelace where \\\n                  \\StakeAddress is the Bech32-encoded stake address \\\n                  \\followed by the amount in Lovelace.\"\n      )\n  where\n    parseWithdrawal :: Atto.Parser (StakeAddress, Lovelace)\n    parseWithdrawal =\n      (,) <$> parseStakeAddress <* Atto.char '+' <*> parseLovelace\n\n\npUpdateProposalFile :: Parser UpdateProposalFile\npUpdateProposalFile =\n  UpdateProposalFile <$>\n  ( Opt.strOption\n     (  Opt.long \"update-proposal-file\"\n     <> Opt.metavar \"FILE\"\n     <> Opt.help \"Filepath of the update proposal.\"\n     <> Opt.completer (Opt.bashCompleter \"file\")\n     )\n  <|>\n    Opt.strOption\n      (  Opt.long \"update-proposal\"\n      <> Opt.internal\n      )\n  )\n\n\npColdSigningKeyFile :: Parser SigningKeyFile\npColdSigningKeyFile =\n  SigningKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"cold-signing-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the cold signing key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n      (  Opt.long \"signing-key-file\"\n      <> Opt.internal\n      )\n    )\n\npSomeWitnessSigningData :: Parser [WitnessSigningData]\npSomeWitnessSigningData =\n  some $\n      KeyWitnessSigningData\n        <$>\n          ( SigningKeyFile <$>\n              Opt.strOption\n                (  Opt.long \"signing-key-file\"\n                <> Opt.metavar \"FILE\"\n                <> Opt.help \"Input filepath of the signing key (one or more).\"\n                <> Opt.completer (Opt.bashCompleter \"file\")\n                )\n          )\n        <*>\n          optional pByronAddress\n    <|>\n      ScriptWitnessSigningData <$> pScript\n\npSigningKeyFile :: FileDirection -> Parser SigningKeyFile\npSigningKeyFile fdir =\n  SigningKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"signing-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help (show fdir ++ \" filepath of the signing key.\")\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npWitnessSigningData :: Parser WitnessSigningData\npWitnessSigningData =\n    KeyWitnessSigningData\n      <$>\n        ( SigningKeyFile <$>\n            Opt.strOption\n              (  Opt.long \"signing-key-file\"\n              <> Opt.metavar \"FILE\"\n              <> Opt.help \"Filepath of the signing key to be used in witness construction.\"\n              <> Opt.completer (Opt.bashCompleter \"file\")\n              )\n        )\n      <*>\n        optional pByronAddress\n  <|>\n    ScriptWitnessSigningData <$> pScript\n\npKesPeriod :: Parser KESPeriod\npKesPeriod =\n  KESPeriod <$>\n    Opt.option Opt.auto\n      (  Opt.long \"kes-period\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The start of the KES key validity period.\"\n      )\n\npEpochNo :: Parser EpochNo\npEpochNo =\n  EpochNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"epoch\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The epoch number.\"\n      )\n\n\npEpochNoUpdateProp :: Parser EpochNo\npEpochNoUpdateProp =\n  EpochNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"epoch\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The epoch number in which the update proposal is valid.\"\n      )\n\npGenesisFile :: Parser GenesisFile\npGenesisFile =\n  GenesisFile <$>\n    Opt.strOption\n      (  Opt.long \"genesis\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"The genesis file.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npOperatorCertIssueCounterFile :: Parser OpCertCounterFile\npOperatorCertIssueCounterFile =\n  OpCertCounterFile <$>\n    ( Opt.strOption\n        (  Opt.long \"operational-certificate-issue-counter-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"The file with the issue counter for the operational certificate.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"operational-certificate-issue-counter\"\n        <> Opt.internal\n        )\n    )\n\n\npOutputFormat :: Parser OutputFormat\npOutputFormat =\n  Opt.option readOutputFormat\n    (  Opt.long \"output-format\"\n    <> Opt.metavar \"STRING\"\n    <> Opt.help \"Optional output format. Accepted output formats are \\\"hex\\\" \\\n                \\and \\\"bech32\\\" (default is \\\"bech32\\\").\"\n    <> Opt.value OutputFormatBech32\n    )\n\n\npMaybeOutputFile :: Parser (Maybe OutputFile)\npMaybeOutputFile =\n  optional $\n    OutputFile <$>\n      Opt.strOption\n        (  Opt.long \"out-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Optional output file. Default is to write to stdout.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n\npOutputFile :: Parser OutputFile\npOutputFile =\n  OutputFile <$>\n    Opt.strOption\n      (  Opt.long \"out-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"The output file.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npColdVerificationKeyOrFile :: Parser ColdVerificationKeyOrFile\npColdVerificationKeyOrFile =\n  ColdStakePoolVerificationKey <$> pStakePoolVerificationKey\n    <|> ColdGenesisDelegateVerificationKey <$> pGenesisDelegateVerificationKey\n    <|> ColdVerificationKeyFile <$> pColdVerificationKeyFile\n\npColdVerificationKeyFile :: Parser VerificationKeyFile\npColdVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"cold-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the cold verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npVerificationKey\n  :: forall keyrole. SerialiseAsBech32 (VerificationKey keyrole)\n  => AsType keyrole\n  -> Parser (VerificationKey keyrole)\npVerificationKey asType =\n  Opt.option\n    (readVerificationKey asType)\n      (  Opt.long \"verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Verification key (Bech32 or hex-encoded).\"\n      )\n\npVerificationKeyOrFile\n  :: SerialiseAsBech32 (VerificationKey keyrole)\n  => AsType keyrole\n  -> Parser (VerificationKeyOrFile keyrole)\npVerificationKeyOrFile asType =\n  VerificationKeyValue <$> pVerificationKey asType\n    <|> VerificationKeyFilePath <$> pVerificationKeyFile Input\n\npVerificationKeyFile :: FileDirection -> Parser VerificationKeyFile\npVerificationKeyFile fdir =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help (show fdir ++ \" filepath of the verification key.\")\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npExtendedVerificationKeyFile :: FileDirection -> Parser VerificationKeyFile\npExtendedVerificationKeyFile fdir =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"extended-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help (show fdir ++ \" filepath of the ed25519-bip32 verification key.\")\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npGenesisVerificationKeyFile :: Parser VerificationKeyFile\npGenesisVerificationKeyFile =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"genesis-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the genesis verification key.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npGenesisVerificationKeyHash :: Parser (Hash GenesisKey)\npGenesisVerificationKeyHash =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-verification-key-hash\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis verification key hash (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (Hash GenesisKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis verification key hash.\") Right\n        . deserialiseFromRawBytesHex (AsHash AsGenesisKey)\n        . BSC.pack\n\npGenesisVerificationKey :: Parser (VerificationKey GenesisKey)\npGenesisVerificationKey =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-verification-key\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis verification key (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (VerificationKey GenesisKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis verification key.\") Right\n        . deserialiseFromRawBytesHex (AsVerificationKey AsGenesisKey)\n        . BSC.pack\n\npGenesisVerificationKeyOrFile :: Parser (VerificationKeyOrFile GenesisKey)\npGenesisVerificationKeyOrFile =\n  VerificationKeyValue <$> pGenesisVerificationKey\n    <|> VerificationKeyFilePath <$> pGenesisVerificationKeyFile\n\npGenesisVerificationKeyOrHashOrFile :: Parser (VerificationKeyOrHashOrFile GenesisKey)\npGenesisVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pGenesisVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pGenesisVerificationKeyHash\n\npGenesisDelegateVerificationKeyFile :: Parser VerificationKeyFile\npGenesisDelegateVerificationKeyFile =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"genesis-delegate-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the genesis delegate verification key.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npGenesisDelegateVerificationKeyHash :: Parser (Hash GenesisDelegateKey)\npGenesisDelegateVerificationKeyHash =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-delegate-verification-key-hash\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis delegate verification key hash (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (Hash GenesisDelegateKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis delegate verification key hash.\") Right\n        . deserialiseFromRawBytesHex (AsHash AsGenesisDelegateKey)\n        . BSC.pack\n\npGenesisDelegateVerificationKey :: Parser (VerificationKey GenesisDelegateKey)\npGenesisDelegateVerificationKey =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-delegate-verification-key\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis delegate verification key (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex\n      :: String\n      -> Either String (VerificationKey GenesisDelegateKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis delegate verification key.\") Right\n        . deserialiseFromRawBytesHex (AsVerificationKey AsGenesisDelegateKey)\n        . BSC.pack\n\npGenesisDelegateVerificationKeyOrFile\n  :: Parser (VerificationKeyOrFile GenesisDelegateKey)\npGenesisDelegateVerificationKeyOrFile =\n  VerificationKeyValue <$> pGenesisDelegateVerificationKey\n    <|> VerificationKeyFilePath <$> pGenesisDelegateVerificationKeyFile\n\npGenesisDelegateVerificationKeyOrHashOrFile\n  :: Parser (VerificationKeyOrHashOrFile GenesisDelegateKey)\npGenesisDelegateVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pGenesisDelegateVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pGenesisDelegateVerificationKeyHash\n\npKesVerificationKeyOrFile :: Parser (VerificationKeyOrFile KesKey)\npKesVerificationKeyOrFile =\n  VerificationKeyValue <$> pKesVerificationKey\n    <|> VerificationKeyFilePath <$> pKesVerificationKeyFile\n\npKesVerificationKey :: Parser (VerificationKey KesKey)\npKesVerificationKey =\n    Opt.option\n      (Opt.eitherReader deserialiseVerKey)\n        (  Opt.long \"kes-verification-key\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"A Bech32 or hex-encoded hot KES verification key.\"\n        )\n  where\n    asType :: AsType (VerificationKey KesKey)\n    asType = AsVerificationKey AsKesKey\n\n    deserialiseVerKey :: String -> Either String (VerificationKey KesKey)\n    deserialiseVerKey str =\n      case deserialiseFromBech32 asType (Text.pack str) of\n        Right res -> Right res\n\n        -- The input was valid Bech32, but some other error occurred.\n        Left err@(Bech32UnexpectedPrefix _ _) -> Left (displayError err)\n        Left err@(Bech32DataPartToBytesError _) -> Left (displayError err)\n        Left err@(Bech32DeserialiseFromBytesError _) -> Left (displayError err)\n        Left err@(Bech32WrongPrefix _ _) -> Left (displayError err)\n\n        -- The input was not valid Bech32. Attempt to deserialize it as hex.\n        Left (Bech32DecodingError _) ->\n          case deserialiseFromRawBytesHex asType (BSC.pack str) of\n            Just res' -> Right res'\n            Nothing -> Left \"Invalid stake pool verification key.\"\n\npKesVerificationKeyFile :: Parser VerificationKeyFile\npKesVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"kes-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the hot KES verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n    Opt.strOption\n        (  Opt.long \"hot-kes-verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npNetworkId :: Parser NetworkId\npNetworkId =\n  pMainnet <|> fmap Testnet pTestnetMagic\n where\n   pMainnet :: Parser NetworkId\n   pMainnet =\n    Opt.flag' Mainnet\n      (  Opt.long \"mainnet\"\n      <> Opt.help \"Use the mainnet magic id.\"\n      )\n\npTestnetMagic :: Parser NetworkMagic\npTestnetMagic =\n  NetworkMagic <$>\n    Opt.option Opt.auto\n      (  Opt.long \"testnet-magic\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Specify a testnet magic id.\"\n      )\n\npTxSubmitFile :: Parser FilePath\npTxSubmitFile =\n  Opt.strOption\n    (  Opt.long \"tx-file\"\n    <> Opt.metavar \"FILE\"\n    <> Opt.help \"Filepath of the transaction you intend to submit.\"\n    <> Opt.completer (Opt.bashCompleter \"file\")\n    )\n\npCardanoEra :: Parser AnyCardanoEra\npCardanoEra = asum\n  [ Opt.flag' (AnyCardanoEra ByronEra)\n      (  Opt.long \"byron-era\"\n      <> Opt.help \"Specify the Byron era\"\n      )\n  , Opt.flag' (AnyCardanoEra ShelleyEra)\n      (  Opt.long \"shelley-era\"\n      <> Opt.help \"Specify the Shelley era (default)\"\n      )\n  , Opt.flag' (AnyCardanoEra AllegraEra)\n      (  Opt.long \"allegra-era\"\n      <> Opt.help \"Specify the Allegra era\"\n      )\n  , Opt.flag' (AnyCardanoEra MaryEra)\n      (  Opt.long \"mary-era\"\n      <> Opt.help \"Specify the Mary era\"\n      )\n\n    -- Default for now:\n  , pure (AnyCardanoEra ShelleyEra)\n  ]\n\npTxIn :: Parser TxIn\npTxIn =\n  Opt.option (readerFromAttoParser parseTxIn)\n    (  Opt.long \"tx-in\"\n    <> Opt.metavar \"TX-IN\"\n    <> Opt.help \"The input transaction as TxId#TxIx where TxId is the transaction hash and TxIx is the index.\"\n    )\n\nparseTxIn :: Atto.Parser TxIn\nparseTxIn = TxIn <$> parseTxId <*> (Atto.char '#' *> parseTxIx)\n\nrenderTxIn :: TxIn -> Text\nrenderTxIn (TxIn txid (TxIx txix)) =\n  mconcat\n    [ Text.decodeUtf8 (serialiseToRawBytesHex txid)\n    , \"#\"\n    , Text.pack (show txix)\n    ]\n\nparseTxId :: Atto.Parser TxId\nparseTxId = (<?> \"Transaction ID (hexadecimal)\") $ do\n  bstr <- Atto.takeWhile1 Char.isHexDigit\n  case deserialiseFromRawBytesHex AsTxId bstr of\n    Just addr -> return addr\n    Nothing -> fail $ \"Incorrect transaction id format:: \" ++ show bstr\n\nparseTxIx :: Atto.Parser TxIx\nparseTxIx = toEnum <$> Atto.decimal\n\n\npTxOut :: Parser TxOutAnyEra\npTxOut =\n    Opt.option (readerFromParsecParser parseTxOutAnyEra)\n      (  Opt.long \"tx-out\"\n      <> Opt.metavar \"TX-OUT\"\n      -- TODO: Update the help text to describe the new syntax as well.\n      <> Opt.help \"The transaction output as Address+Lovelace where Address is \\\n                  \\the Bech32-encoded address followed by the amount in \\\n                  \\Lovelace.\"\n      )\n\npMintMultiAsset :: Parser Value\npMintMultiAsset =\n  Opt.option\n    (readerFromParsecParser parseValue)\n      (  Opt.long \"mint\"\n      <> Opt.metavar \"VALUE\"\n      <> Opt.help \"Mint multi-asset value(s) with the multi-asset cli syntax\"\n      )\n\npTxLowerBound :: Parser SlotNo\npTxLowerBound =\n  SlotNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"lower-bound\"\n      <> Opt.metavar \"SLOT\"\n      <> Opt.help \"Time that transaction is valid from (in slots).\"\n      )\n\npTxUpperBound :: Parser SlotNo\npTxUpperBound =\n  SlotNo <$>\n    ( Opt.option Opt.auto\n        (  Opt.long \"upper-bound\"\n        <> Opt.metavar \"SLOT\"\n        <> Opt.help \"Time that transaction is valid until (in slots).\"\n        )\n    <|>\n      Opt.option Opt.auto\n        (  Opt.long \"ttl\"\n        <> Opt.metavar \"SLOT\"\n        <> Opt.help \"Time to live (in slots) (deprecated; use --upper-bound instead).\"\n        )\n    )\n\npTxFee :: Parser Lovelace\npTxFee =\n  Lovelace . (fromIntegral :: Natural -> Integer) <$>\n    Opt.option Opt.auto\n      (  Opt.long \"fee\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The fee amount in Lovelace.\"\n      )\n\npWitnessFile :: Parser WitnessFile\npWitnessFile =\n  WitnessFile <$>\n    Opt.strOption\n      (  Opt.long \"witness-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the witness\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npTxBodyFile :: FileDirection -> Parser TxBodyFile\npTxBodyFile fdir =\n    TxBodyFile <$>\n      (  Opt.strOption\n           (  Opt.long optName\n           <> Opt.metavar \"FILE\"\n           <> Opt.help (show fdir ++ \" filepath of the TxBody.\")\n           <> Opt.completer (Opt.bashCompleter \"file\")\n           )\n      <|>\n         Opt.strOption\n           (  Opt.long \"tx-body-file\"\n           <> Opt.internal\n           )\n      )\n  where\n    optName =\n      case fdir of\n        Input -> \"tx-body-file\"\n        Output -> \"out-file\"\n\n\npTxFile :: FileDirection -> Parser TxFile\npTxFile fdir =\n    TxFile <$>\n      (  Opt.strOption\n           (  Opt.long optName\n           <> Opt.metavar \"FILE\"\n           <> Opt.help (show fdir ++ \" filepath of the Tx.\")\n           <> Opt.completer (Opt.bashCompleter \"file\")\n           )\n      <|>\n         Opt.strOption\n           (  Opt.long \"tx-file\"\n           <> Opt.internal\n           )\n      )\n  where\n    optName =\n      case fdir of\n        Input -> \"tx-file\"\n        Output -> \"out-file\"\n\npTxInCount :: Parser TxInCount\npTxInCount =\n  TxInCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"tx-in-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of transaction inputs.\"\n      )\n\npTxOutCount :: Parser TxOutCount\npTxOutCount =\n  TxOutCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"tx-out-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of transaction outputs.\"\n      )\n\npTxShelleyWitnessCount :: Parser TxShelleyWitnessCount\npTxShelleyWitnessCount =\n  TxShelleyWitnessCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"witness-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of Shelley key witnesses.\"\n      )\n\npTxByronWitnessCount :: Parser TxByronWitnessCount\npTxByronWitnessCount =\n  TxByronWitnessCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"byron-witness-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of Byron key witnesses (default is 0).\"\n      <> Opt.value 0\n      )\n\npQueryFilter :: Parser QueryFilter\npQueryFilter = pAddresses <|> pure NoFilter\n  where\n    pAddresses :: Parser QueryFilter\n    pAddresses = FilterByAddress . Set.fromList <$>\n                   some pFilterByAddress\n\npFilterByAddress :: Parser AddressAny\npFilterByAddress =\n    Opt.option (readerFromAttoParser parseAddressAny)\n      (  Opt.long \"address\"\n      <> Opt.metavar \"ADDRESS\"\n      <> Opt.help \"Filter by Cardano address(es) (Bech32-encoded).\"\n      )\n\npFilterByStakeAddress :: Parser StakeAddress\npFilterByStakeAddress =\n    Opt.option (readerFromAttoParser parseStakeAddress)\n      (  Opt.long \"address\"\n      <> Opt.metavar \"ADDRESS\"\n      <> Opt.help \"Filter by Cardano stake address (Bech32-encoded).\"\n      )\n\npByronAddress :: Parser (Address ByronAddr)\npByronAddress =\n    Opt.option\n      (Opt.eitherReader deserialise)\n        (  Opt.long \"address\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Byron address (Base58-encoded).\"\n        )\n  where\n    deserialise :: String -> Either String (Address ByronAddr)\n    deserialise =\n      maybe (Left \"Invalid Byron address.\") Right\n        . deserialiseAddress AsByronAddress\n        . Text.pack\n\npAddress :: Parser Text\npAddress =\n  Text.pack <$>\n    Opt.strOption\n      (  Opt.long \"address\"\n      <> Opt.metavar \"ADDRESS\"\n      <> Opt.help \"A Cardano address\"\n      )\n\npStakeVerificationKeyOrFile :: Parser (VerificationKeyOrFile StakeKey)\npStakeVerificationKeyOrFile =\n  VerificationKeyValue <$> pStakeVerificationKey\n    <|> VerificationKeyFilePath <$> pStakeVerificationKeyFile\n\npStakeVerificationKey :: Parser (VerificationKey StakeKey)\npStakeVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakeKey)\n      (  Opt.long \"stake-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Stake verification key (Bech32 or hex-encoded).\"\n      )\n\npStakeVerificationKeyFile :: Parser VerificationKeyFile\npStakeVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"stake-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the staking verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"staking-verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\n\npStakePoolVerificationKeyFile :: Parser VerificationKeyFile\npStakePoolVerificationKeyFile =\n  VerificationKeyFile <$>\n    (  Opt.strOption\n         (  Opt.long \"cold-verification-key-file\"\n         <> Opt.metavar \"FILE\"\n         <> Opt.help \"Filepath of the stake pool verification key.\"\n         <> Opt.completer (Opt.bashCompleter \"file\")\n         )\n    <|>\n       Opt.strOption\n         (  Opt.long \"stake-pool-verification-key-file\"\n         <> Opt.internal\n         )\n    )\n\npStakePoolVerificationKeyHash :: Parser (Hash StakePoolKey)\npStakePoolVerificationKeyHash =\n    Opt.option\n      (Opt.maybeReader pBech32OrHexStakePoolId)\n        (  Opt.long \"stake-pool-id\"\n        <> Opt.metavar \"STAKE-POOL-ID\"\n        <> Opt.help \"Stake pool ID/verification key hash (either \\\n                    \\Bech32-encoded or hex-encoded).\"\n        )\n  where\n    pBech32OrHexStakePoolId :: String -> Maybe (Hash StakePoolKey)\n    pBech32OrHexStakePoolId str =\n      pBech32StakePoolId str <|> pHexStakePoolId str\n\n    pHexStakePoolId :: String -> Maybe (Hash StakePoolKey)\n    pHexStakePoolId =\n      deserialiseFromRawBytesHex (AsHash AsStakePoolKey) . BSC.pack\n\n    pBech32StakePoolId :: String -> Maybe (Hash StakePoolKey)\n    pBech32StakePoolId =\n      either (const Nothing) Just\n        . deserialiseFromBech32 (AsHash AsStakePoolKey)\n        . Text.pack\n\npStakePoolVerificationKey :: Parser (VerificationKey StakePoolKey)\npStakePoolVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakePoolKey)\n      (  Opt.long \"stake-pool-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Stake pool verification key (Bech32 or hex-encoded).\"\n      )\n\npStakePoolVerificationKeyOrFile\n  :: Parser (VerificationKeyOrFile StakePoolKey)\npStakePoolVerificationKeyOrFile =\n  VerificationKeyValue <$> pStakePoolVerificationKey\n    <|> VerificationKeyFilePath <$> pStakePoolVerificationKeyFile\n\npStakePoolVerificationKeyOrHashOrFile\n  :: Parser (VerificationKeyOrHashOrFile StakePoolKey)\npStakePoolVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pStakePoolVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pStakePoolVerificationKeyHash\n\npVrfVerificationKeyFile :: Parser VerificationKeyFile\npVrfVerificationKeyFile =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"vrf-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the VRF verification key.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npVrfVerificationKeyHash :: Parser (Hash VrfKey)\npVrfVerificationKeyHash =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"vrf-verification-key-hash\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"VRF verification key hash (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (Hash VrfKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid VRF verification key hash.\") Right\n        . deserialiseFromRawBytesHex (AsHash AsVrfKey)\n        . BSC.pack\n\npVrfVerificationKey :: Parser (VerificationKey VrfKey)\npVrfVerificationKey =\n  Opt.option\n    (readVerificationKey AsVrfKey)\n      (  Opt.long \"vrf-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"VRF verification key (Bech32 or hex-encoded).\"\n      )\n\npVrfVerificationKeyOrFile :: Parser (VerificationKeyOrFile VrfKey)\npVrfVerificationKeyOrFile =\n  VerificationKeyValue <$> pVrfVerificationKey\n    <|> VerificationKeyFilePath <$> pVrfVerificationKeyFile\n\npVrfVerificationKeyOrHashOrFile :: Parser (VerificationKeyOrHashOrFile VrfKey)\npVrfVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pVrfVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pVrfVerificationKeyHash\n\npRewardAcctVerificationKeyFile :: Parser VerificationKeyFile\npRewardAcctVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"pool-reward-account-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the reward account stake verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"reward-account-verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npRewardAcctVerificationKey :: Parser (VerificationKey StakeKey)\npRewardAcctVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakeKey)\n      (  Opt.long \"pool-reward-account-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Reward account stake verification key (Bech32 or hex-encoded).\"\n      )\n\npRewardAcctVerificationKeyOrFile :: Parser (VerificationKeyOrFile StakeKey)\npRewardAcctVerificationKeyOrFile =\n  VerificationKeyValue <$> pRewardAcctVerificationKey\n    <|> VerificationKeyFilePath <$> pRewardAcctVerificationKeyFile\n\npPoolOwnerVerificationKeyFile :: Parser VerificationKeyFile\npPoolOwnerVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"pool-owner-stake-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the pool owner stake verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n          (  Opt.long \"pool-owner-staking-verification-key\"\n          <> Opt.internal\n          )\n    )\n\npPoolOwnerVerificationKey :: Parser (VerificationKey StakeKey)\npPoolOwnerVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakeKey)\n      (  Opt.long \"pool-owner-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Pool owner stake verification key (Bech32 or hex-encoded).\"\n      )\n\npPoolOwnerVerificationKeyOrFile :: Parser (VerificationKeyOrFile StakeKey)\npPoolOwnerVerificationKeyOrFile =\n  VerificationKeyValue <$> pPoolOwnerVerificationKey\n    <|> VerificationKeyFilePath <$> pPoolOwnerVerificationKeyFile\n\npPoolPledge :: Parser Lovelace\npPoolPledge =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"pool-pledge\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The stake pool's pledge.\"\n      )\n\n\npPoolCost :: Parser Lovelace\npPoolCost =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"pool-cost\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The stake pool's cost.\"\n      )\n\npPoolMargin :: Parser Rational\npPoolMargin =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"pool-margin\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"The stake pool's margin.\"\n      )\n\npPoolRelay :: Parser StakePoolRelay\npPoolRelay = pSingleHostAddress <|> pSingleHostName <|> pMultiHostName\n\npMultiHostName :: Parser StakePoolRelay\npMultiHostName =\n  StakePoolRelayDnsSrvRecord <$> pDNSName\n where\n  pDNSName :: Parser ByteString\n  pDNSName = Opt.option (Opt.eitherReader eDNSName)\n               (  Opt.long \"multi-host-pool-relay\"\n               <> Opt.metavar \"STRING\"\n               <> Opt.help \"The stake pool relay's DNS name that corresponds to \\\n                            \\an SRV DNS record\"\n               )\n\npSingleHostName :: Parser StakePoolRelay\npSingleHostName =\n  StakePoolRelayDnsARecord <$> pDNSName <*> optional pPort\n where\n  pDNSName :: Parser ByteString\n  pDNSName = Opt.option (Opt.eitherReader eDNSName)\n               (  Opt.long \"single-host-pool-relay\"\n               <> Opt.metavar \"STRING\"\n               <> Opt.help \"The stake pool relay's DNS name that corresponds to an\\\n                            \\ A or AAAA DNS record\"\n               )\n\neDNSName :: String -> Either String ByteString\neDNSName str =\n  -- We're using 'Shelley.textToDns' to validate the string.\n  case Shelley.textToDns (toS str) of\n    Nothing -> Left \"DNS name is more than 64 bytes\"\n    Just dnsName -> Right . Text.encodeUtf8 . Shelley.dnsToText $ dnsName\n\npSingleHostAddress :: Parser StakePoolRelay\npSingleHostAddress = singleHostAddress\n  <$> optional pIpV4\n  <*> optional pIpV6\n  <*> pPort\n where\n  singleHostAddress :: Maybe IP.IPv4 -> Maybe IP.IPv6 -> PortNumber -> StakePoolRelay\n  singleHostAddress ipv4 ipv6 port =\n    case (ipv4, ipv6) of\n      (Nothing, Nothing) ->\n        panic \"Please enter either an IPv4 or IPv6 address for the pool relay\"\n      (Just i4, Nothing) ->\n        StakePoolRelayIp (Just i4) Nothing (Just port)\n      (Nothing, Just i6) ->\n        StakePoolRelayIp Nothing (Just i6) (Just port)\n      (Just i4, Just i6) ->\n        StakePoolRelayIp (Just i4) (Just i6) (Just port)\n\n\n\npIpV4 :: Parser IP.IPv4\npIpV4 = Opt.option (Opt.maybeReader readMaybe :: Opt.ReadM IP.IPv4)\n          (  Opt.long \"pool-relay-ipv4\"\n          <> Opt.metavar \"STRING\"\n          <> Opt.help \"The stake pool relay's IPv4 address\"\n          )\n\npIpV6 :: Parser IP.IPv6\npIpV6 = Opt.option (Opt.maybeReader readMaybe :: Opt.ReadM IP.IPv6)\n           (  Opt.long \"pool-relay-ipv6\"\n           <> Opt.metavar \"STRING\"\n           <> Opt.help \"The stake pool relay's IPv6 address\"\n           )\n\npPort :: Parser PortNumber\npPort = Opt.option (fromInteger <$> Opt.eitherReader readEither)\n           (  Opt.long \"pool-relay-port\"\n           <> Opt.metavar \"INT\"\n           <> Opt.help \"The stake pool relay's port\"\n           )\n\npStakePoolMetadataReference :: Parser (Maybe StakePoolMetadataReference)\npStakePoolMetadataReference =\n  optional $\n    StakePoolMetadataReference\n      <$> pStakePoolMetadataUrl\n      <*> pStakePoolMetadataHash\n\npStakePoolMetadataUrl :: Parser Text\npStakePoolMetadataUrl =\n  Opt.option (readURIOfMaxLength 64)\n    (  Opt.long \"metadata-url\"\n    <> Opt.metavar \"URL\"\n    <> Opt.help \"Pool metadata URL (maximum length of 64 characters).\"\n    )\n\npStakePoolMetadataHash :: Parser (Hash StakePoolMetadata)\npStakePoolMetadataHash =\n    Opt.option\n      (Opt.maybeReader metadataHash)\n        (  Opt.long \"metadata-hash\"\n        <> Opt.metavar \"HASH\"\n        <> Opt.help \"Pool metadata hash.\"\n        )\n  where\n    metadataHash :: String -> Maybe (Hash StakePoolMetadata)\n    metadataHash = deserialiseFromRawBytesHex (AsHash AsStakePoolMetadata)\n                 . BSC.pack\n\npStakePoolRegistrationCert :: Parser PoolCmd\npStakePoolRegistrationCert =\n  PoolRegistrationCert\n    <$> pStakePoolVerificationKeyOrFile\n    <*> pVrfVerificationKeyOrFile\n    <*> pPoolPledge\n    <*> pPoolCost\n    <*> pPoolMargin\n    <*> pRewardAcctVerificationKeyOrFile\n    <*> some pPoolOwnerVerificationKeyOrFile\n    <*> many pPoolRelay\n    <*> pStakePoolMetadataReference\n    <*> pNetworkId\n    <*> pOutputFile\n\npStakePoolRetirementCert :: Parser PoolCmd\npStakePoolRetirementCert =\n  PoolRetirementCert\n    <$> pStakePoolVerificationKeyOrFile\n    <*> pEpochNo\n    <*> pOutputFile\n\n\npShelleyProtocolParametersUpdate :: Parser ProtocolParametersUpdate\npShelleyProtocolParametersUpdate =\n  ProtocolParametersUpdate\n    <$> optional pProtocolVersion\n    <*> optional pDecentralParam\n    <*> optional pExtraEntropy\n    <*> optional pMaxBlockHeaderSize\n    <*> optional pMaxBodySize\n    <*> optional pMaxTransactionSize\n    <*> optional pMinFeeConstantFactor\n    <*> optional pMinFeeLinearFactor\n    <*> optional pMinUTxOValue\n    <*> optional pKeyRegistDeposit\n    <*> optional pPoolDeposit\n    <*> optional pMinPoolCost\n    <*> optional pEpochBoundRetirement\n    <*> optional pNumberOfPools\n    <*> optional pPoolInfluence\n    <*> optional pMonetaryExpansion\n    <*> optional pTreasuryExpansion\n\npMinFeeLinearFactor :: Parser Natural\npMinFeeLinearFactor =\n    Opt.option Opt.auto\n      (  Opt.long \"min-fee-linear\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The linear factor for the minimum fee calculation.\"\n      )\n\npMinFeeConstantFactor :: Parser Natural\npMinFeeConstantFactor =\n    Opt.option Opt.auto\n      (  Opt.long \"min-fee-constant\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The constant factor for the minimum fee calculation.\"\n      )\n\npMinUTxOValue :: Parser Lovelace\npMinUTxOValue =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"min-utxo-value\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The minimum allowed UTxO value.\"\n      )\n\npMinPoolCost :: Parser Lovelace\npMinPoolCost =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"min-pool-cost\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The minimum allowed cost parameter for stake pools.\"\n      )\n\npMaxBodySize :: Parser Natural\npMaxBodySize =\n    Opt.option Opt.auto\n      (  Opt.long \"max-block-body-size\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Maximal block body size.\"\n      )\n\npMaxTransactionSize :: Parser Natural\npMaxTransactionSize =\n    Opt.option Opt.auto\n      (  Opt.long \"max-tx-size\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Maximum transaction size.\"\n      )\n\npMaxBlockHeaderSize :: Parser Natural\npMaxBlockHeaderSize =\n    Opt.option Opt.auto\n      (  Opt.long \"max-block-header-size\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Maximum block header size.\"\n      )\n\npKeyRegistDeposit :: Parser Lovelace\npKeyRegistDeposit =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"key-reg-deposit-amt\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Key registration deposit amount.\"\n      )\n\npPoolDeposit :: Parser Lovelace\npPoolDeposit =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"pool-reg-deposit\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The amount of a pool registration deposit.\"\n      )\n\npEpochBoundRetirement :: Parser EpochNo\npEpochBoundRetirement =\n    EpochNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"pool-retirement-epoch-boundary\"\n      <> Opt.metavar \"INT\"\n      <> Opt.help \"Epoch bound on pool retirement.\"\n      )\n\npNumberOfPools :: Parser Natural\npNumberOfPools =\n    Opt.option Opt.auto\n      (  Opt.long \"number-of-pools\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Desired number of pools.\"\n      )\n\npPoolInfluence :: Parser Rational\npPoolInfluence =\n    Opt.option readRational\n      (  Opt.long \"pool-influence\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Pool influence.\"\n      )\n\npTreasuryExpansion :: Parser Rational\npTreasuryExpansion =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"treasury-expansion\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Treasury expansion.\"\n      )\n\npMonetaryExpansion :: Parser Rational\npMonetaryExpansion =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"monetary-expansion\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Monetary expansion.\"\n      )\n\npDecentralParam :: Parser Rational\npDecentralParam =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"decentralization-parameter\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Decentralization parameter.\"\n      )\n\npExtraEntropy :: Parser (Maybe PraosNonce)\npExtraEntropy =\n      Opt.option (Just <$> readerFromAttoParser parsePraosNonce)\n        (  Opt.long \"extra-entropy\"\n        <> Opt.metavar \"HEX\"\n        <> Opt.help \"Praos extra entropy, as a hex byte string.\"\n        )\n  <|> Opt.flag' Nothing\n        (  Opt.long \"reset-extra-entropy\"\n        <> Opt.help \"Reset the Praos extra entropy to none.\"\n        )\n  where\n    parsePraosNonce :: Atto.Parser PraosNonce\n    parsePraosNonce = makePraosNonce <$> parseEntropyBytes\n\n    parseEntropyBytes :: Atto.Parser ByteString\n    parseEntropyBytes = either fail return\n                      . decodeEitherBase16\n                    =<< Atto.takeWhile1 Char.isHexDigit\n\npProtocol :: Parser Protocol\npProtocol =\n    (  Opt.flag' ()\n        (  Opt.long \"shelley-mode\"\n        <> Opt.help \"For talking to a node running in Shelley-only mode.\"\n        )\n    *> pShelleyMode\n    )\n  <|>\n    (  Opt.flag' ()\n        (  Opt.long \"byron-mode\"\n        <> Opt.help \"For talking to a node running in Byron-only mode.\"\n        )\n    *> pByronMode\n    )\n  <|>\n    (  Opt.flag' ()\n        (  Opt.long \"cardano-mode\"\n        <> Opt.help \"For talking to a node running in full Cardano mode (default).\"\n        )\n    *> pCardanoMode\n    )\n  <|>\n    -- Default to the Cardano protocol.\n    pure\n      (CardanoProtocol\n        (EpochSlots defaultByronEpochSlots))\n  where\n    pByronMode :: Parser Protocol\n    pByronMode = ByronProtocol <$> pEpochSlots\n\n    pShelleyMode :: Parser Protocol\n    pShelleyMode = pure ShelleyProtocol\n\n    pCardanoMode :: Parser Protocol\n    pCardanoMode = CardanoProtocol <$> pEpochSlots\n\n    pEpochSlots :: Parser EpochSlots\n    pEpochSlots =\n      EpochSlots <$>\n        Opt.option Opt.auto\n          (  Opt.long \"epoch-slots\"\n          <> Opt.metavar \"NATURAL\"\n          <> Opt.help \"The number of slots per epoch for the Byron era.\"\n          <> Opt.value defaultByronEpochSlots -- Default to the mainnet value.\n          <> Opt.showDefault\n          )\n\n    defaultByronEpochSlots :: Word64\n    defaultByronEpochSlots = 21600\n\npProtocolVersion :: Parser (Natural, Natural)\npProtocolVersion =\n    (,) <$> pProtocolMajorVersion <*> pProtocolMinorVersion\n  where\n    pProtocolMajorVersion =\n      Opt.option Opt.auto\n        (  Opt.long \"protocol-major-version\"\n        <> Opt.metavar \"NATURAL\"\n        <> Opt.help \"Major protocol version. An increase indicates a hard fork.\"\n        )\n    pProtocolMinorVersion =\n      Opt.option Opt.auto\n        (  Opt.long \"protocol-minor-version\"\n        <> Opt.metavar \"NATURAL\"\n        <> Opt.help \"Minor protocol version. An increase indicates a soft fork\\\n                    \\ (old software canvalidate but not produce new blocks).\"\n        )\n\n--\n-- Shelley CLI flag field parsers\n--\n\nparseLovelace :: Atto.Parser Lovelace\nparseLovelace = Lovelace <$> Atto.decimal\n\nparseAddressAny :: Atto.Parser AddressAny\nparseAddressAny = do\n    str <- lexPlausibleAddressString\n    case deserialiseAddress AsAddressAny str of\n      Nothing   -> fail \"invalid address\"\n      Just addr -> pure addr\n\nparseStakeAddress :: Atto.Parser StakeAddress\nparseStakeAddress = do\n    str <- lexPlausibleAddressString\n    case deserialiseAddress AsStakeAddress str of\n      Nothing   -> fail \"invalid address\"\n      Just addr -> pure addr\n\nlexPlausibleAddressString :: Atto.Parser Text\nlexPlausibleAddressString =\n    Text.decodeLatin1 <$> Atto.takeWhile1 isPlausibleAddressChar\n  where\n    -- Covers both base58 and bech32 (with constrained prefixes)\n    isPlausibleAddressChar c =\n         (c >= 'a' && c <= 'z')\n      || (c >= 'A' && c <= 'Z')\n      || (c >= '0' && c <= '9')\n      || c == '_'\n\n\n--------------------------------------------------------------------------------\n-- Helpers\n--------------------------------------------------------------------------------\n\n-- | Read a Bech32 or hex-encoded verification key.\nreadVerificationKey\n  :: forall keyrole. SerialiseAsBech32 (VerificationKey keyrole)\n  => AsType keyrole\n  -> Opt.ReadM (VerificationKey keyrole)\nreadVerificationKey asType =\n    Opt.eitherReader deserialiseFromBech32OrHex\n  where\n    keyFormats :: NonEmpty (InputFormat (VerificationKey keyrole))\n    keyFormats = NE.fromList [InputFormatBech32, InputFormatHex]\n\n    deserialiseFromBech32OrHex\n      :: String\n      -> Either String (VerificationKey keyrole)\n    deserialiseFromBech32OrHex str =\n      first (Text.unpack . renderInputDecodeError) $\n        deserialiseInput (AsVerificationKey asType) keyFormats (BSC.pack str)\n\nreadOutputFormat :: Opt.ReadM OutputFormat\nreadOutputFormat = do\n  s <- Opt.str\n  case s of\n    \"hex\" -> pure OutputFormatHex\n    \"bech32\" -> pure OutputFormatBech32\n    _ ->\n      fail $ \"Invalid output format: \\\"\"\n        <> s\n        <> \"\\\". Accepted output formats are \\\"hex\\\" and \\\"bech32\\\".\"\n\nreadURIOfMaxLength :: Int -> Opt.ReadM Text\nreadURIOfMaxLength maxLen =\n  Text.pack <$> readStringOfMaxLength maxLen\n\nreadStringOfMaxLength :: Int -> Opt.ReadM String\nreadStringOfMaxLength maxLen = do\n  s <- Opt.str\n  let strLen = length s\n  if strLen <= maxLen\n    then pure s\n    else fail $\n      \"The provided string must have at most 64 characters, but it has \"\n        <> show strLen\n        <> \" characters.\"\n\nreadRationalUnitInterval :: Opt.ReadM Rational\nreadRationalUnitInterval = readRational >>= checkUnitInterval\n  where\n   checkUnitInterval :: Rational -> Opt.ReadM Rational\n   checkUnitInterval q\n     | q >= 0 && q <= 1 = return q\n     | otherwise        = fail \"Please enter a value in the range [0,1]\"\n\nreadRational :: Opt.ReadM Rational\nreadRational = toRational <$> readerFromAttoParser Atto.scientific\n\nreaderFromAttoParser :: Atto.Parser a -> Opt.ReadM a\nreaderFromAttoParser p =\n    Opt.eitherReader (Atto.parseOnly (p <* Atto.endOfInput) . BSC.pack)\n\nreaderFromParsecParser :: Parsec.Parser a -> Opt.ReadM a\nreaderFromParsecParser p =\n    Opt.eitherReader (first formatError . Parsec.parse (p <* Parsec.eof) \"\")\n  where\n    --TODO: the default parsec error formatting is quite good, but we could\n    -- customise it somewhat:\n    formatError err =\n      Parsec.showErrorMessages \"or\" \"unknown parse error\"\n                               \"expecting\" \"unexpected\" \"end of input\"\n                               (Parsec.errorMessages err)\n\n\n"}}}
2020-12-03 13:34:37.152480505 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-03 13:34:37.152869081 [ThreadId 5351] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:34:37.152936389 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:34:37.15298558 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:34:37.154388852 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":165,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:34:37.154534135 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":166,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}}}
2020-12-03 13:34:37.154618846 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":167,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":501,"character":32}}}
2020-12-03 13:34:37.154697592 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":167}}
2020-12-03 13:34:37.154790892 [ThreadId 5979] - DocumentHighlight request at position 502:33 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:34:37.155118272 [ThreadId 5979] - C:GetHieAst was cancelled
2020-12-03 13:34:37.155164396 [ThreadId 5976] - Cancelled request IdInt 167
2020-12-03 13:34:37.155254339 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":167}
2020-12-03 13:34:37.210855773 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"87/89"},"token":"619"},"method":"$/progress"}
2020-12-03 13:34:37.377092482 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":168,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}}}
2020-12-03 13:34:37.377302705 [ThreadId 6233] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:34:37.395850315 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":169,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":466,"character":16},"end":{"line":466,"character":25}},"context":{"diagnostics":[]}}}
2020-12-03 13:34:37.395992885 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":165}}
2020-12-03 13:34:37.396109116 [ThreadId 5986] - CodeAction was cancelled
2020-12-03 13:34:37.396179411 [ThreadId 5974] - Cancelled request IdInt 165
2020-12-03 13:34:37.396335314 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":165}
2020-12-03 13:34:37.625024705 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":170,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":465,"character":14}}}
2020-12-03 13:34:37.625289916 [ThreadId 6244] - GhcIde.hover entered (ideLogger)
2020-12-03 13:34:37.625422118 [ThreadId 6244] - Hover request at position 466:15 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:34:37.694472881 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":170}}
2020-12-03 13:34:37.694647554 [ThreadId 6244] - C:GetHieAst was cancelled
2020-12-03 13:34:37.694752171 [ThreadId 6242] - Cancelled request IdInt 170
2020-12-03 13:34:37.694881767 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":170}
2020-12-03 13:34:38.068413268 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":171,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":467,"character":27}}}
2020-12-03 13:34:38.068571677 [ThreadId 6250] - GhcIde.hover entered (ideLogger)
2020-12-03 13:34:38.068669769 [ThreadId 6250] - Hover request at position 468:28 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:34:38.235114353 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":172,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":467,"character":27}}}
2020-12-03 13:34:38.235429401 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":171}}
2020-12-03 13:34:38.235437815 [ThreadId 6255] - DocumentHighlight request at position 468:28 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:34:38.235660609 [ThreadId 6250] - C:GetHieAst was cancelled
2020-12-03 13:34:38.235751456 [ThreadId 6248] - Cancelled request IdInt 171
2020-12-03 13:34:38.235848732 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":171}
2020-12-03 13:34:38.608484939 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":173,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":467,"character":18},"end":{"line":467,"character":43}},"context":{"diagnostics":[]}}}
2020-12-03 13:34:38.608601402 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":169}}
2020-12-03 13:34:38.608689834 [ThreadId 6238] - CodeAction was cancelled
2020-12-03 13:34:38.608754296 [ThreadId 6236] - Cancelled request IdInt 169
2020-12-03 13:34:38.608855285 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":169}
2020-12-03 13:34:50.657306238 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":174,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":472,"character":13}}}
2020-12-03 13:34:50.657450566 [ThreadId 6267] - GhcIde.hover entered (ideLogger)
2020-12-03 13:34:50.657544661 [ThreadId 6267] - Hover request at position 473:14 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:34:50.981052944 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":174}}
2020-12-03 13:34:50.981221927 [ThreadId 6267] - C:GetHieAst was cancelled
2020-12-03 13:34:50.981307944 [ThreadId 6265] - Cancelled request IdInt 174
2020-12-03 13:34:50.981457825 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":174}
2020-12-03 13:34:52.157713099 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":172}}
2020-12-03 13:34:52.157882983 [ThreadId 6255] - C:GetHieAst was cancelled
2020-12-03 13:34:52.157938729 [ThreadId 6253] - Cancelled request IdInt 172
2020-12-03 13:34:52.158026386 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":172}
2020-12-03 13:34:52.371245438 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":175,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":523,"character":2},"end":{"line":523,"character":27}},"context":{"diagnostics":[]}}}
2020-12-03 13:34:52.371367444 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":173}}
2020-12-03 13:34:52.371457485 [ThreadId 6261] - CodeAction was cancelled
2020-12-03 13:34:52.371501006 [ThreadId 6259] - Cancelled request IdInt 173
2020-12-03 13:34:52.371584141 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":173}
2020-12-03 13:34:52.86855382 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":176,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":525,"character":38}}}
2020-12-03 13:34:52.868706503 [ThreadId 6280] - GhcIde.hover entered (ideLogger)
2020-12-03 13:34:52.86882594 [ThreadId 6280] - Hover request at position 526:39 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:34:52.883032831 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":176}}
2020-12-03 13:34:52.883305198 [ThreadId 6280] - C:GetHieAst was cancelled
2020-12-03 13:34:52.883357716 [ThreadId 6278] - Cancelled request IdInt 176
2020-12-03 13:34:52.883495715 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":176}
2020-12-03 13:34:53.239026148 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":177,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":523,"character":39}}}
2020-12-03 13:34:53.239165042 [ThreadId 6286] - GhcIde.hover entered (ideLogger)
2020-12-03 13:34:53.239258856 [ThreadId 6286] - Hover request at position 524:40 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:34:54.577968956 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":178,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":523,"character":39}}}
2020-12-03 13:34:54.578163264 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":177}}
2020-12-03 13:34:54.578325597 [ThreadId 6286] - C:GetHieAst was cancelled
2020-12-03 13:34:54.578378287 [ThreadId 6284] - Cancelled request IdInt 177
2020-12-03 13:34:54.578445076 [ThreadId 6291] - DocumentHighlight request at position 524:40 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:34:54.578527246 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":177}
2020-12-03 13:34:54.807616869 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":179,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":523,"character":39},"end":{"line":523,"character":39}},"context":{"diagnostics":[]}}}
2020-12-03 13:34:54.807754408 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":175}}
2020-12-03 13:34:54.807867186 [ThreadId 6274] - CodeAction was cancelled
2020-12-03 13:34:54.807922814 [ThreadId 6272] - Cancelled request IdInt 175
2020-12-03 13:34:54.808031233 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":175}
2020-12-03 13:34:55.126332002 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":178}}
2020-12-03 13:34:55.126558457 [ThreadId 6291] - C:GetHieAst was cancelled
2020-12-03 13:34:55.126624265 [ThreadId 6289] - Cancelled request IdInt 178
2020-12-03 13:34:55.12674111 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":178}
2020-12-03 13:34:55.377124594 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":180,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":523,"character":0},"end":{"line":524,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:34:55.377250685 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":179}}
2020-12-03 13:34:55.37740305 [ThreadId 6297] - CodeAction was cancelled
2020-12-03 13:34:55.377475719 [ThreadId 6295] - Cancelled request IdInt 179
2020-12-03 13:34:55.377635152 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":179}
2020-12-03 13:34:55.651520755 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":181,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":523,"character":45}}}
2020-12-03 13:34:55.651733879 [ThreadId 6310] - DocumentHighlight request at position 524:46 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:34:55.931958107 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":182,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":523,"character":30},"end":{"line":523,"character":45}},"context":{"diagnostics":[]}}}
2020-12-03 13:34:55.932107311 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":180}}
2020-12-03 13:34:55.932228384 [ThreadId 6304] - CodeAction was cancelled
2020-12-03 13:34:55.932293341 [ThreadId 6302] - Cancelled request IdInt 180
2020-12-03 13:34:55.932432031 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":180}
2020-12-03 13:34:58.275444333 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}}}
2020-12-03 13:34:58.275544827 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}
2020-12-03 13:34:58.275602576 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":181}}
2020-12-03 13:34:58.275663318 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":168}}
2020-12-03 13:34:58.275679104 [ThreadId 6310] - C:GetHieAst was cancelled
2020-12-03 13:34:58.275717392 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":182}}
2020-12-03 13:34:58.275740259 [ThreadId 6308] - Cancelled request IdInt 181
2020-12-03 13:34:58.275673727 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-03 13:34:58.275787528 [ThreadId 6315] - CodeAction was cancelled
2020-12-03 13:34:58.275777056 [ThreadId 6233] - codeLens was cancelled
2020-12-03 13:34:58.275904683 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":181}
2020-12-03 13:34:58.276020765 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:34:58.276094624 [ThreadId 6313] - Cancelled request IdInt 182
2020-12-03 13:34:58.276180646 [ThreadId 6231] - Cancelled request IdInt 168
2020-12-03 13:34:58.276256635 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":182}
2020-12-03 13:34:58.276317591 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":168}
2020-12-03 13:34:58.281874745 [ThreadId 6584] - Data.HashMap.Internal.(!): key not found
CallStack (from HasCallStack):
  error, called at ./Data/HashMap/Internal.hs:756:16 in unordered-containers-0.2.13.0-f519383be173bea40a77beaaf5249f6ae8af1a29545fb7d3d57c773b8188dc00:Data.HashMap.Internal
  !, called at src/Development/IDE/Import/DependencyInformation.hs:107:40 in ghcide-0.4.0-inplace:Development.IDE.Import.DependencyInformation
2020-12-03 13:34:58.282002928 [ThreadId 6584] - finish: ParentTC (took 0.01s)
2020-12-03 13:34:58.324233338 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE UndecidableInstances #-}\n\n-- | Shelley CLI command types\nmodule Cardano.CLI.Shelley.Commands\n  ( -- * CLI command types\n    ShelleyCommand (..)\n  , AddressCmd (..)\n  , StakeAddressCmd (..)\n  , KeyCmd (..)\n  , TransactionCmd (..)\n  , NodeCmd (..)\n  , PoolCmd (..)\n  , QueryCmd (..)\n  , GovernanceCmd (..)\n  , GenesisCmd (..)\n  , TextViewCmd (..)\n  , renderShelleyCommand\n\n    -- * CLI flag types\n  , AddressKeyType (..)\n  , ByronKeyType (..)\n  , ByronKeyFormat (..)\n  , CardanoAddressKeyType (..)\n  , GenesisDir (..)\n  , TxInCount (..)\n  , TxOutCount (..)\n  , TxShelleyWitnessCount (..)\n  , TxByronWitnessCount (..)\n  , SomeKeyFile (..)\n  , OpCertCounterFile (..)\n  , OutputFile (..)\n  , ProtocolParamsFile (..)\n  , WitnessFile (..)\n  , TxBodyFile (..)\n  , TxFile (..)\n  , VerificationKeyBase64 (..)\n  , GenesisKeyFile (..)\n  , MetaDataFile (..)\n  , PoolId (..)\n  , PoolMetaDataFile (..)\n  , PrivKeyFile (..)\n  , BlockId (..)\n  , WitnessSigningData (..)\n  , ColdVerificationKeyOrFile (..)\n  ) where\n\nimport           Data.Text (Text)\nimport           Prelude\n\nimport           Cardano.Api.Typed hiding (PoolId)\nimport           Cardano.Api.Protocol (Protocol)\n\nimport           Ouroboros.Consensus.BlockchainTime (SystemStart (..))\n\nimport           Cardano.CLI.Shelley.Key (VerificationKeyOrFile, VerificationKeyOrHashOrFile,\n                     VerificationKeyTextOrFile)\nimport           Cardano.CLI.Types\n\nimport           Shelley.Spec.Ledger.TxBody (MIRPot)\n\n--\n-- Shelley CLI command data types\n--\n\n-- | All the CLI subcommands under \\\"shelley\\\".\n--\ndata ShelleyCommand\n  = AddressCmd      AddressCmd\n  | StakeAddressCmd StakeAddressCmd\n  | KeyCmd          KeyCmd\n  | TransactionCmd  TransactionCmd\n  | NodeCmd         NodeCmd\n  | PoolCmd         PoolCmd\n  | QueryCmd        QueryCmd\n  | GovernanceCmd   GovernanceCmd\n  | GenesisCmd      GenesisCmd\n  | TextViewCmd     TextViewCmd\n  deriving (Eq, Show)\n\nrenderShelleyCommand :: ShelleyCommand -> Text\nrenderShelleyCommand sc =\n  case sc of\n    AddressCmd cmd -> renderAddressCmd cmd\n    StakeAddressCmd cmd -> renderStakeAddressCmd cmd\n    KeyCmd cmd -> renderKeyCmd cmd\n    TransactionCmd cmd -> renderTransactionCmd cmd\n    NodeCmd cmd -> renderNodeCmd cmd\n    PoolCmd cmd -> renderPoolCmd cmd\n    QueryCmd cmd -> renderQueryCmd cmd\n    GovernanceCmd cmd -> renderGovernanceCmd cmd\n    GenesisCmd cmd -> renderGenesisCmd cmd\n    TextViewCmd cmd -> renderTextViewCmd cmd\n\ndata AddressCmd\n  = AddressKeyGen AddressKeyType VerificationKeyFile SigningKeyFile\n  | AddressKeyHash VerificationKeyTextOrFile (Maybe OutputFile)\n  | AddressBuild\n      VerificationKeyTextOrFile\n      (Maybe (VerificationKeyOrFile StakeKey))\n      NetworkId\n      (Maybe OutputFile)\n  | AddressBuildMultiSig ScriptFile NetworkId (Maybe OutputFile)\n  | AddressInfo Text (Maybe OutputFile)\n  deriving (Eq, Show)\n\n\nrenderAddressCmd :: AddressCmd -> Text\nrenderAddressCmd cmd =\n  case cmd of\n    AddressKeyGen {} -> \"address key-gen\"\n    AddressKeyHash {} -> \"address key-hash\"\n    AddressBuild {} -> \"address build\"\n    AddressBuildMultiSig {} -> \"address build-script\"\n    AddressInfo {} -> \"address info\"\n\ndata StakeAddressCmd\n  = StakeAddressKeyGen VerificationKeyFile SigningKeyFile\n  | StakeAddressKeyHash (VerificationKeyOrFile StakeKey) (Maybe OutputFile)\n  | StakeAddressBuild (VerificationKeyOrFile StakeKey) NetworkId (Maybe OutputFile)\n  | StakeKeyRegistrationCert (VerificationKeyOrFile StakeKey) OutputFile\n  | StakeKeyDelegationCert\n      (VerificationKeyOrFile StakeKey)\n      (VerificationKeyOrHashOrFile StakePoolKey)\n      OutputFile\n  | StakeKeyDeRegistrationCert (VerificationKeyOrFile StakeKey) OutputFile\n  deriving (Eq, Show)\n\nrenderStakeAddressCmd :: StakeAddressCmd -> Text\nrenderStakeAddressCmd cmd =\n  case cmd of\n    StakeAddressKeyGen {} -> \"stake-address key-gen\"\n    StakeAddressKeyHash {} -> \"stake-address key-hash\"\n    StakeAddressBuild {} -> \"stake-address build\"\n    StakeKeyRegistrationCert {} -> \"stake-address registration-certificate\"\n    StakeKeyDelegationCert {} -> \"stake-address delegation-certificate\"\n    StakeKeyDeRegistrationCert {} -> \"stake-address deregistration-certificate\"\n\ndata KeyCmd\n  = KeyGetVerificationKey SigningKeyFile VerificationKeyFile\n  | KeyNonExtendedKey  VerificationKeyFile VerificationKeyFile\n  | KeyConvertByronKey (Maybe Text) ByronKeyType SomeKeyFile OutputFile\n  | KeyConvertByronGenesisVKey VerificationKeyBase64 OutputFile\n  | KeyConvertITNStakeKey SomeKeyFile OutputFile\n  | KeyConvertITNExtendedToStakeKey SomeKeyFile OutputFile\n  | KeyConvertITNBip32ToStakeKey SomeKeyFile OutputFile\n  | KeyConvertCardanoAddressSigningKey CardanoAddressKeyType SigningKeyFile OutputFile\n  deriving (Eq, Show)\n\nrenderKeyCmd :: KeyCmd -> Text\nrenderKeyCmd cmd =\n  case cmd of\n    KeyGetVerificationKey {} -> \"key verification-key\"\n    KeyNonExtendedKey {} -> \"key non-extended-key\"\n    KeyConvertByronKey {} -> \"key convert-byron-key\"\n    KeyConvertByronGenesisVKey {} -> \"key convert-byron-genesis-key\"\n    KeyConvertITNStakeKey {} -> \"key convert-itn-key\"\n    KeyConvertITNExtendedToStakeKey {} -> \"key convert-itn-extended-key\"\n    KeyConvertITNBip32ToStakeKey {} -> \"key convert-itn-bip32-key\"\n    KeyConvertCardanoAddressSigningKey {} -> \"key convert-cardano-address-signing-key\"\n\ndata TransactionCmd\n  = TxBuildRaw\n      AnyCardanoEra\n      [TxIn]\n      [TxOutAnyEra]\n      (Maybe Value)\n      -- ^ Multi-Asset value\n      (Maybe SlotNo)\n      -- ^ Transaction lower bound\n      (Maybe SlotNo)\n      -- ^ Transaction upper bound\n      (Maybe Lovelace)\n      -- ^ Tx fee\n      [CertificateFile]\n      [(StakeAddress, Lovelace)]\n      TxMetadataJsonSchema\n      [ScriptFile]\n      -- ^ Auxillary scripts\n      [MetaDataFile]\n      (Maybe UpdateProposalFile)\n      TxBodyFile\n  | TxSign TxBodyFile [WitnessSigningData] (Maybe NetworkId) TxFile\n  | TxCreateWitness TxBodyFile WitnessSigningData (Maybe NetworkId) OutputFile\n  | TxAssembleTxBodyWitness TxBodyFile [WitnessFile] OutputFile\n  | TxSubmit Protocol NetworkId FilePath\n  | TxMintedPolicyId ScriptFile\n  | TxCalculateMinFee\n      TxBodyFile\n      (Maybe NetworkId)\n      ProtocolParamsFile\n      TxInCount\n      TxOutCount\n      TxShelleyWitnessCount\n      TxByronWitnessCount\n  | TxGetTxId TxBodyFile\n  deriving (Eq, Show)\n\nrenderTransactionCmd :: TransactionCmd -> Text\nrenderTransactionCmd cmd =\n  case cmd of\n    TxBuildRaw {} -> \"transaction build-raw\"\n    TxSign {} -> \"transaction sign\"\n    TxCreateWitness {} -> \"transaction witness\"\n    TxAssembleTxBodyWitness {} -> \"transaction sign-witness\"\n    TxSubmit {} -> \"transaction submit\"\n    TxMintedPolicyId {} -> \"transaction policyid\"\n    TxCalculateMinFee {} -> \"transaction calculate-min-fee\"\n    TxGetTxId {} -> \"transaction txid\"\n\ndata NodeCmd\n  = NodeKeyGenCold VerificationKeyFile SigningKeyFile OpCertCounterFile\n  | NodeKeyGenKES  VerificationKeyFile SigningKeyFile\n  | NodeKeyGenVRF  VerificationKeyFile SigningKeyFile\n  | NodeKeyHashVRF  (VerificationKeyOrFile VrfKey) (Maybe OutputFile)\n  | NodeNewCounter ColdVerificationKeyOrFile Word OpCertCounterFile\n  | NodeIssueOpCert (VerificationKeyOrFile KesKey) SigningKeyFile OpCertCounterFile\n                    KESPeriod OutputFile\n  deriving (Eq, Show)\n\nrenderNodeCmd :: NodeCmd -> Text\nrenderNodeCmd cmd = do\n  case cmd of\n    NodeKeyGenCold {} -> \"node key-gen\"\n    NodeKeyGenKES {} -> \"node key-gen-KES\"\n    NodeKeyGenVRF {} -> \"node key-gen-VRF\"\n    NodeKeyHashVRF {} -> \"node key-hash-VRF\"\n    NodeNewCounter {} -> \"node new-counter\"\n    NodeIssueOpCert{} -> \"node issue-op-cert\"\n\n\ndata PoolCmd\n  = PoolRegistrationCert\n      (VerificationKeyOrFile StakePoolKey)\n      -- ^ Stake pool verification key.\n      (VerificationKeyOrFile VrfKey)\n      -- ^ VRF Verification key.\n      Lovelace\n      -- ^ Pool pledge.\n      Lovelace\n      -- ^ Pool cost.\n      Rational\n      -- ^ Pool margin.\n      (VerificationKeyOrFile StakeKey)\n      -- ^ Reward account verification staking key.\n      [VerificationKeyOrFile StakeKey]\n      -- ^ Pool owner verification staking key(s).\n      [StakePoolRelay]\n      -- ^ Stake pool relays.\n      (Maybe StakePoolMetadataReference)\n      -- ^ Stake pool metadata.\n      NetworkId\n      OutputFile\n  | PoolRetirementCert\n      (VerificationKeyOrFile StakePoolKey)\n      -- ^ Stake pool verification key.\n      EpochNo\n      -- ^ Epoch in which to retire the stake pool.\n      OutputFile\n  | PoolGetId (VerificationKeyOrFile StakePoolKey) OutputFormat\n  | PoolMetaDataHash PoolMetaDataFile (Maybe OutputFile)\n  deriving (Eq, Show)\n\nrenderPoolCmd :: PoolCmd -> Text\nrenderPoolCmd cmd =\n  case cmd of\n    PoolRegistrationCert {} -> \"stake-pool registration-certificate\"\n    PoolRetirementCert {} -> \"stake-pool deregistration-certificate\"\n    PoolGetId {} -> \"stake-pool id\"\n    PoolMetaDataHash {} -> \"stake-pool metadata-hash\"\n\ndata QueryCmd =\n    QueryProtocolParameters AnyCardanoEra Protocol NetworkId (Maybe OutputFile)\n  | QueryTip Protocol NetworkId (Maybe OutputFile)\n  | QueryStakeDistribution AnyCardanoEra Protocol NetworkId (Maybe OutputFile)\n  | QueryStakeAddressInfo AnyCardanoEra Protocol StakeAddress NetworkId (Maybe OutputFile)\n  | QueryUTxO AnyCardanoEra Protocol QueryFilter NetworkId (Maybe OutputFile)\n  | QueryLedgerState AnyCardanoEra Protocol NetworkId (Maybe OutputFile)\n  | QueryProtocolState AnyCardanoEra Protocol NetworkId (Maybe OutputFile)\n  deriving (Eq, Show)\n\nrenderQueryCmd :: QueryCmd -> Text\nrenderQueryCmd cmd =\n  case cmd of\n    QueryProtocolParameters {} -> \"query protocol-parameters \"\n    QueryTip {} -> \"query tip\"\n    QueryStakeDistribution {} -> \"query stake-distribution\"\n    QueryStakeAddressInfo {} -> \"query stake-address-info\"\n    QueryUTxO {} -> \"query utxo\"\n    QueryLedgerState {} -> \"query ledger-state\"\n    QueryProtocolState {} -> \"query protocol-state\"\n\ndata GovernanceCmd\n  = GovernanceMIRCertificate MIRPot [VerificationKeyFile] [Lovelace] OutputFile\n  | GovernanceGenesisKeyDelegationCertificate\n      (VerificationKeyOrHashOrFile GenesisKey)\n      (VerificationKeyOrHashOrFile GenesisDelegateKey)\n      (VerificationKeyOrHashOrFile VrfKey)\n      OutputFile\n  | GovernanceUpdateProposal OutputFile EpochNo\n                             [VerificationKeyFile]\n                             ProtocolParametersUpdate\n  deriving (Eq, Show)\n\nrenderGovernanceCmd :: GovernanceCmd -> Text\nrenderGovernanceCmd cmd =\n  case cmd of\n    GovernanceGenesisKeyDelegationCertificate {} -> \"governance create-genesis-key-delegation-certificate\"\n    GovernanceMIRCertificate {} -> \"governance create-mir-certificate\"\n    GovernanceUpdateProposal {} -> \"governance create-update-proposal\"\n\ndata TextViewCmd\n  = TextViewInfo !FilePath (Maybe OutputFile)\n  deriving (Eq, Show)\n\n\nrenderTextViewCmd :: TextViewCmd -> Text\nrenderTextViewCmd (TextViewInfo _ _) = \"text-view decode-cbor\"\n\ndata GenesisCmd\n  = GenesisCreate GenesisDir Word Word (Maybe SystemStart) (Maybe Lovelace) NetworkId\n  | GenesisCreateStaked GenesisDir Word Word Word Word (Maybe SystemStart) (Maybe Lovelace) Lovelace NetworkId Word Word Word\n  | GenesisKeyGenGenesis VerificationKeyFile SigningKeyFile\n  | GenesisKeyGenDelegate VerificationKeyFile SigningKeyFile OpCertCounterFile\n  | GenesisKeyGenUTxO VerificationKeyFile SigningKeyFile\n  | GenesisCmdKeyHash VerificationKeyFile\n  | GenesisVerKey VerificationKeyFile SigningKeyFile\n  | GenesisTxIn VerificationKeyFile NetworkId (Maybe OutputFile)\n  | GenesisAddr VerificationKeyFile NetworkId (Maybe OutputFile)\n  | GenesisHashFile GenesisFile\n  deriving (Eq, Show)\n\nrenderGenesisCmd :: GenesisCmd -> Text\nrenderGenesisCmd cmd =\n  case cmd of\n    GenesisCreate {} -> \"genesis create\"\n    GenesisCreateStaked {} -> \"genesis create-staked\"\n    GenesisKeyGenGenesis {} -> \"genesis key-gen-genesis\"\n    GenesisKeyGenDelegate {} -> \"genesis key-gen-delegate\"\n    GenesisKeyGenUTxO {} -> \"genesis key-gen-utxo\"\n    GenesisCmdKeyHash {} -> \"genesis key-hash\"\n    GenesisVerKey {} -> \"genesis get-ver-key\"\n    GenesisTxIn {} -> \"genesis initial-txin\"\n    GenesisAddr {} -> \"genesis initial-addr\"\n    GenesisHashFile {} -> \"genesis hash\"\n\n--\n-- Shelley CLI flag/option data types\n--\n\nnewtype ProtocolParamsFile\n  = ProtocolParamsFile FilePath\n  deriving (Show, Eq)\n\nnewtype TxInCount\n  = TxInCount Int\n  deriving (Eq, Show)\n\nnewtype TxOutCount\n  = TxOutCount Int\n  deriving (Eq, Show)\n\nnewtype TxShelleyWitnessCount\n  = TxShelleyWitnessCount Int\n  deriving (Eq, Show)\n\nnewtype TxByronWitnessCount\n  = TxByronWitnessCount Int\n  deriving (Eq, Show)\n\nnewtype BlockId\n  = BlockId String -- Probably not a String\n  deriving (Eq, Show)\n\nnewtype GenesisKeyFile\n  = GenesisKeyFile FilePath\n  deriving (Eq, Show)\n\ndata MetaDataFile = MetaDataFileJSON FilePath\n                  | MetaDataFileCBOR FilePath\n\n  deriving (Eq, Show)\n\nnewtype OutputFile\n  = OutputFile FilePath\n  deriving (Eq, Show)\n\nnewtype PoolId\n  = PoolId String -- Probably not a String\n  deriving (Eq, Show)\n\nnewtype PoolMetaDataFile = PoolMetaDataFile\n  { unPoolMetaDataFile :: FilePath }\n  deriving (Eq, Show)\n\nnewtype GenesisDir\n  = GenesisDir FilePath\n  deriving (Eq, Show)\n\n-- | Either a verification or signing key, used for conversions and other\n-- commands that make sense for both.\n--\ndata SomeKeyFile\n  = AVerificationKeyFile VerificationKeyFile\n  | ASigningKeyFile SigningKeyFile\n  deriving (Eq, Show)\n\ndata AddressKeyType\n  = AddressKeyShelley\n  | AddressKeyShelleyExtended\n  | AddressKeyByron\n  deriving (Eq, Show)\n\ndata ByronKeyType\n  = ByronPaymentKey  ByronKeyFormat\n  | ByronGenesisKey  ByronKeyFormat\n  | ByronDelegateKey ByronKeyFormat\n  deriving (Eq, Show)\n\ndata ByronKeyFormat = NonLegacyByronKeyFormat\n                    | LegacyByronKeyFormat\n  deriving (Eq, Show)\n\n-- | The type of @cardano-address@ key.\ndata CardanoAddressKeyType\n  = CardanoAddressShelleyPaymentKey\n  | CardanoAddressShelleyStakeKey\n  | CardanoAddressIcarusPaymentKey\n  | CardanoAddressByronPaymentKey\n  deriving (Eq, Show)\n\nnewtype OpCertCounterFile\n  = OpCertCounterFile FilePath\n  deriving (Eq, Show)\n\nnewtype PrivKeyFile\n  = PrivKeyFile FilePath\n  deriving (Eq, Show)\n\nnewtype WitnessFile\n  = WitnessFile FilePath\n  deriving (Eq, Show)\n\nnewtype TxBodyFile\n  = TxBodyFile FilePath\n  deriving (Eq, Show)\n\nnewtype TxFile\n  = TxFile FilePath\n  deriving (Eq, Show)\n\n-- | A raw verification key given in Base64, and decoded into a ByteString.\nnewtype VerificationKeyBase64\n  = VerificationKeyBase64 String\n  deriving (Eq, Show)\n\n-- | Data required to construct a witness.\ndata WitnessSigningData\n  = KeyWitnessSigningData\n      !SigningKeyFile\n      -- ^ Path to a file that should contain a signing key.\n      !(Maybe (Address ByronAddr))\n      -- ^ An optionally specified Byron address.\n      --\n      -- If specified, both the network ID and derivation path are extracted\n      -- from the address and used in the construction of the Byron witness.\n  | ScriptWitnessSigningData !ScriptFile\n  deriving (Eq, Show)\n\n-- | Either a stake pool verification key, genesis delegate verification key,\n-- or a path to a cold verification key file.\n--\n-- Note that a \"cold verification key\" refers to either a stake pool or\n-- genesis delegate verification key.\n--\n-- TODO: A genesis delegate extended key should also be valid here.\ndata ColdVerificationKeyOrFile\n  = ColdStakePoolVerificationKey !(VerificationKey StakePoolKey)\n  | ColdGenesisDelegateVerificationKey !(VerificationKey GenesisDelegateKey)\n  | ColdVerificationKeyFile !VerificationKeyFile\n  deriving (Eq, Show)\n"}}}
2020-12-03 13:34:58.325919833 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":183,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:34:58.326113973 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-03 13:34:58.326205182 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":184,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs"}}}
2020-12-03 13:34:58.326405461 [ThreadId 5938] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:34:58.326454664 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:34:58.326495332 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs
2020-12-03 13:34:58.354525115 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"87/90"},"token":"619"},"method":"$/progress"}
2020-12-03 13:34:58.54974467 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":185,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs"}}}
2020-12-03 13:34:58.549929676 [ThreadId 6876] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:34:58.568922165 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":186,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs"},"range":{"start":{"line":183,"character":4},"end":{"line":183,"character":19}},"context":{"diagnostics":[]}}}
2020-12-03 13:34:58.569075752 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":183}}
2020-12-03 13:34:58.569220268 [ThreadId 6601] - CodeAction was cancelled
2020-12-03 13:34:58.569270895 [ThreadId 6595] - Cancelled request IdInt 183
2020-12-03 13:34:58.569409952 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":183}
2020-12-03 13:34:59.182963616 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":187,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs"},"position":{"line":182,"character":29}}}
2020-12-03 13:34:59.183133709 [ThreadId 6887] - GhcIde.hover entered (ideLogger)
2020-12-03 13:34:59.183215472 [ThreadId 6887] - Hover request at position 183:30 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs
2020-12-03 13:34:59.192200402 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":187}}
2020-12-03 13:34:59.192372685 [ThreadId 6887] - C:GetHieAst was cancelled
2020-12-03 13:34:59.192411398 [ThreadId 6885] - Cancelled request IdInt 187
2020-12-03 13:34:59.192515345 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":187}
2020-12-03 13:35:00.420434082 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs"}}}
2020-12-03 13:35:00.420539451 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs"}
2020-12-03 13:35:00.420611451 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":185}}
2020-12-03 13:35:00.420682852 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":186}}
2020-12-03 13:35:00.42066181 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified)]
2020-12-03 13:35:00.42081308 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs
2020-12-03 13:35:00.420836006 [ThreadId 6881] - CodeAction was cancelled
2020-12-03 13:35:00.420804115 [ThreadId 6876] - codeLens was cancelled
2020-12-03 13:35:00.42092647 [ThreadId 6874] - Cancelled request IdInt 185
2020-12-03 13:35:00.420917755 [ThreadId 6879] - Cancelled request IdInt 186
2020-12-03 13:35:00.421070128 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":185}
2020-12-03 13:35:00.421166546 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":186}
2020-12-03 13:35:00.426306404 [ThreadId 7156] - Data.HashMap.Internal.(!): key not found
CallStack (from HasCallStack):
  error, called at ./Data/HashMap/Internal.hs:756:16 in unordered-containers-0.2.13.0-f519383be173bea40a77beaaf5249f6ae8af1a29545fb7d3d57c773b8188dc00:Data.HashMap.Internal
  !, called at src/Development/IDE/Import/DependencyInformation.hs:107:40 in ghcide-0.4.0-inplace:Development.IDE.Import.DependencyInformation
2020-12-03 13:35:00.426369293 [ThreadId 7156] - finish: ParentTC (took 0.01s)
2020-12-03 13:35:00.466984296 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE GADTs #-}\n{-# LANGUAGE NamedFieldPuns #-}\n{-# LANGUAGE RankNTypes #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE StandaloneDeriving #-}\n\n{-# OPTIONS_GHC -Wno-incomplete-uni-patterns #-}\n\nmodule Cardano.CLI.Shelley.Run.Transaction\n  ( ShelleyTxCmdError\n  , renderShelleyTxCmdError\n  , runTransactionCmd\n  ) where\n\nimport           Cardano.Prelude hiding (All, Any)\nimport           Prelude (String)\n\nimport qualified Data.Aeson as Aeson\nimport qualified Data.ByteString.Char8 as BS\nimport qualified Data.ByteString.Lazy as LBS\nimport qualified Data.Text as Text\nimport           Data.Type.Equality (TestEquality(..))\n\nimport           Control.Monad.Trans.Except.Extra (firstExceptT, handleIOExceptT, hoistEither, left,\n                     newExceptT)\n\n--TODO: do this nicely via the API too:\nimport qualified Cardano.Binary as CBOR\n\nimport qualified Shelley.Spec.Ledger.PParams as Shelley\n--TODO: following import needed for orphan Eq Script instance\nimport           Cardano.Ledger.ShelleyMA.TxBody ()\nimport           Shelley.Spec.Ledger.Scripts ()\n\nimport           Ouroboros.Consensus.Byron.Ledger (ByronBlock)\nimport           Ouroboros.Consensus.Cardano.Block (EraMismatch (..), HardForkApplyTxErr (..))\nimport           Ouroboros.Consensus.Ledger.SupportsMempool (ApplyTxErr)\nimport           Ouroboros.Consensus.Shelley.Ledger (ShelleyBlock)\n\nimport           Cardano.CLI.Environment (EnvSocketError, readEnvSocketPath, renderEnvSocketError)\nimport           Cardano.CLI.Shelley.Key (InputDecodeError, readSigningKeyFileAnyOf)\nimport           Cardano.CLI.Shelley.Parsers\nimport           Cardano.CLI.Types\n\nimport           Cardano.Api.Typed as Api\nimport           Cardano.Api.Protocol\nimport           Cardano.Api.TxSubmit as Api\n\ndata ShelleyTxCmdError\n  = ShelleyTxCmdAesonDecodeProtocolParamsError !FilePath !Text\n  | ShelleyTxCmdReadFileError !(FileError ())\n  | ShelleyTxCmdReadJsonFileError (FileError JsonDecodeError)\n  | ShelleyTxCmdReadTextViewFileError !(FileError TextEnvelopeError)\n  | ShelleyTxCmdReadWitnessSigningDataError !ReadWitnessSigningDataError\n  | ShelleyTxCmdWriteFileError !(FileError ())\n  | ShelleyTxCmdMetaDataJsonParseError !FilePath !String\n  | ShelleyTxCmdMetaDataConversionError !FilePath !TxMetadataJsonError\n  | ShelleyTxCmdMetaValidationError !FilePath ![(Word64, TxMetadataRangeError)]\n  | ShelleyTxCmdMetaDecodeError !FilePath !CBOR.DecoderError\n  | ShelleyTxCmdBootstrapWitnessError !ShelleyBootstrapWitnessError\n  | ShelleyTxCmdSocketEnvError !EnvSocketError\n  | ShelleyTxCmdTxSubmitErrorByron !(ApplyTxErr ByronBlock)\n  | ShelleyTxCmdTxSubmitErrorShelley !(ApplyTxErr (ShelleyBlock StandardShelley))\n  | ShelleyTxCmdTxSubmitErrorAllegra !(ApplyTxErr (ShelleyBlock StandardAllegra))\n  | ShelleyTxCmdTxSubmitErrorMary !(ApplyTxErr (ShelleyBlock StandardMary))\n  | ShelleyTxCmdTxSubmitErrorEraMismatch !EraMismatch\n  | ShelleyTxCmdTxFeatureMismatch AnyCardanoEra TxFeature\n  | ShelleyTxCmdTxBodyError SomeTxBodyError\n  | ShelleyTxCmdNotImplemented Text\n  | ShelleyTxCmdWitnessEraMismatch AnyCardanoEra AnyCardanoEra WitnessFile\n  | ShelleyTxCmdScriptLanguageNotSupportedInEra AnyScriptLanguage AnyCardanoEra\n  deriving Show\n\ndata SomeTxBodyError where\n     SomeTxBodyError :: TxBodyError era -> SomeTxBodyError\n\nderiving instance Show SomeTxBodyError\n\n\nrenderShelleyTxCmdError :: ShelleyTxCmdError -> Text\nrenderShelleyTxCmdError err =\n  case err of\n    ShelleyTxCmdReadFileError fileErr -> Text.pack (displayError fileErr)\n    ShelleyTxCmdReadTextViewFileError fileErr -> Text.pack (displayError fileErr)\n    ShelleyTxCmdReadJsonFileError  fileErr -> Text.pack (displayError fileErr)\n    ShelleyTxCmdReadWitnessSigningDataError witSignDataErr ->\n      renderReadWitnessSigningDataError witSignDataErr\n    ShelleyTxCmdWriteFileError fileErr -> Text.pack (displayError fileErr)\n    ShelleyTxCmdMetaDataJsonParseError fp jsonErr ->\n       \"Invalid JSON format in file: \" <> show fp\n                <> \"\\nJSON parse error: \" <> Text.pack jsonErr\n    ShelleyTxCmdMetaDataConversionError fp metaDataErr ->\n       \"Error reading metadata at: \" <> show fp\n                             <> \"\\n\" <> Text.pack (displayError metaDataErr)\n    ShelleyTxCmdMetaDecodeError fp metaDataErr ->\n       \"Error decoding CBOR metadata at: \" <> show fp\n                             <> \" Error: \" <> show metaDataErr\n    ShelleyTxCmdMetaValidationError fp errs ->\n      \"Error validating transaction metadata at: \" <> show fp <> \"\\n\" <>\n      Text.intercalate \"\\n\"\n        [ \"key \" <> show k <> \":\" <> Text.pack (displayError valErr)\n        | (k, valErr) <- errs ]\n    ShelleyTxCmdSocketEnvError envSockErr -> renderEnvSocketError envSockErr\n    ShelleyTxCmdAesonDecodeProtocolParamsError fp decErr ->\n      \"Error while decoding the protocol parameters at: \" <> show fp\n                                            <> \" Error: \" <> show decErr\n    ShelleyTxCmdTxSubmitErrorByron res ->\n      \"Error while submitting tx: \" <> Text.pack (show res)\n    ShelleyTxCmdTxSubmitErrorShelley res ->\n      \"Error while submitting tx: \" <> Text.pack (show res)\n    ShelleyTxCmdTxSubmitErrorAllegra res ->\n      \"Error while submitting tx: \" <> Text.pack (show res)\n    ShelleyTxCmdTxSubmitErrorMary res ->\n      \"Error while submitting tx: \" <> Text.pack (show res)\n    ShelleyTxCmdTxSubmitErrorEraMismatch EraMismatch{ledgerEraName, otherEraName} ->\n      \"The era of the node and the tx do not match. \" <>\n      \"The node is running in the \" <> ledgerEraName <>\n      \" era, but the transaction is for the \" <> otherEraName <> \" era.\"\n    ShelleyTxCmdBootstrapWitnessError sbwErr ->\n      renderShelleyBootstrapWitnessError sbwErr\n\n    ShelleyTxCmdTxFeatureMismatch era TxFeatureImplicitFees ->\n      \"An explicit transaction fee must be specified for \" <>\n      renderEra era <> \" era transactions.\"\n\n    ShelleyTxCmdTxFeatureMismatch (AnyCardanoEra ShelleyEra)\n                                  TxFeatureValidityNoUpperBound ->\n      \"A TTL must be specified for Shelley era transactions.\"\n\n    ShelleyTxCmdTxFeatureMismatch era feature ->\n      renderFeature feature <> \" cannot be used for \" <> renderEra era <>\n      \" era transactions.\"\n\n    ShelleyTxCmdTxBodyError (SomeTxBodyError err') ->\n      \"Transaction validaton error: \" <> Text.pack (displayError err')\n\n    ShelleyTxCmdNotImplemented msg ->\n      \"Feature not yet implemented: \" <> msg\n\n    ShelleyTxCmdWitnessEraMismatch era era' (WitnessFile file) ->\n      \"The era of a witness does not match the era of the transaction. \" <>\n      \"The transaction is for the \" <> renderEra era <> \" era, but the \" <>\n      \"witness in \" <> show file <> \" is for the \" <> renderEra era' <> \" era.\"\n\n    ShelleyTxCmdScriptLanguageNotSupportedInEra (AnyScriptLanguage lang) era ->\n      \"The script language \" <> show lang <> \" is not supported in the \" <>\n      renderEra era <> \" era.\"\n\nrenderEra :: AnyCardanoEra -> Text\nrenderEra (AnyCardanoEra ByronEra)   = \"Byron\"\nrenderEra (AnyCardanoEra ShelleyEra) = \"Shelley\"\nrenderEra (AnyCardanoEra AllegraEra) = \"Allegra\"\nrenderEra (AnyCardanoEra MaryEra)    = \"Mary\"\n\nrenderFeature :: TxFeature -> Text\nrenderFeature TxFeatureShelleyAddresses     = \"Shelley addresses\"\nrenderFeature TxFeatureExplicitFees         = \"Explicit fees\"\nrenderFeature TxFeatureImplicitFees         = \"Implicit fees\"\nrenderFeature TxFeatureValidityLowerBound   = \"A validity lower bound\"\nrenderFeature TxFeatureValidityUpperBound   = \"A validity upper bound\"\nrenderFeature TxFeatureValidityNoUpperBound = \"An absent validity upper bound\"\nrenderFeature TxFeatureTxMetadata           = \"Transaction metadata\"\nrenderFeature TxFeatureAuxScripts           = \"Auxiliary scripts\"\nrenderFeature TxFeatureWithdrawals          = \"Reward account withdrawals\"\nrenderFeature TxFeatureCertificates         = \"Certificates\"\nrenderFeature TxFeatureMintValue            = \"Asset minting\"\nrenderFeature TxFeatureMultiAssetOutputs    = \"Multi-Asset outputs\"\nrenderFeature TxFeatureScriptWitnesses      = \"Script witnesses\"\nrenderFeature TxFeatureShelleyKeys          = \"Shelley keys\"\n\nrunTransactionCmd :: TransactionCmd -> ExceptT ShelleyTxCmdError IO ()\nrunTransactionCmd cmd =\n  case cmd of\n    TxBuildRaw era txins txouts mValue mLowBound mUpperBound\n               fee certs wdrls metadataSchema scriptFiles\n               metadataFiles mUpProp out ->\n      runTxBuildRaw era txins txouts mLowBound mUpperBound\n                    fee mValue certs wdrls metadataSchema\n                    scriptFiles metadataFiles mUpProp out\n    TxSign txinfile skfiles network txoutfile ->\n      runTxSign txinfile skfiles network txoutfile\n    TxSubmit protocol network txFp ->\n      runTxSubmit protocol network txFp\n    TxCalculateMinFee txbody mnw pParamsFile nInputs nOutputs\n                      nShelleyKeyWitnesses nByronKeyWitnesses ->\n      runTxCalculateMinFee txbody mnw pParamsFile nInputs nOutputs\n                           nShelleyKeyWitnesses nByronKeyWitnesses\n    TxGetTxId txinfile ->\n      runTxGetTxId txinfile\n    TxMintedPolicyId sFile -> runTxCreatePolicyId sFile\n    TxCreateWitness txBodyfile witSignData mbNw outFile ->\n      runTxCreateWitness txBodyfile witSignData mbNw outFile\n    TxAssembleTxBodyWitness txBodyFile witnessFile outFile ->\n      runTxSignWitness txBodyFile witnessFile outFile\n\n\n-- ----------------------------------------------------------------------------\n-- Building transactions\n--\n\nrunTxBuildRaw\n  :: AnyCardanoEra\n  -> [Api.TxIn]\n  -> [TxOutAnyEra]\n  -> Maybe SlotNo\n  -- ^ Tx lower bound\n  -> Maybe SlotNo\n  -- ^ Tx upper bound\n  -> Maybe Api.Lovelace\n  -- ^ Tx fee\n  -> Maybe Value\n  -- ^ Multi-Asset value\n  -> [CertificateFile]\n  -> [(Api.StakeAddress, Api.Lovelace)]\n  -> TxMetadataJsonSchema\n  -> [ScriptFile]\n  -> [MetaDataFile]\n  -> Maybe UpdateProposalFile\n  -> TxBodyFile\n  -> ExceptT ShelleyTxCmdError IO ()\nrunTxBuildRaw (AnyCardanoEra era) txins txouts mLowerBound\n              mUpperBound mFee mValue\n              certFiles withdrawals\n              metadataSchema scriptFiles\n              metadataFiles mUpdatePropFile\n              (TxBodyFile fpath) = do\n\n    txBodyContent <-\n      TxBodyContent\n        <$> validateTxIns  era txins\n        <*> validateTxOuts era txouts\n        <*> validateTxFee  era mFee\n        <*> ((,) <$> validateTxValidityLowerBound era mLowerBound\n                 <*> validateTxValidityUpperBound era mUpperBound)\n        <*> validateTxMetadataInEra  era metadataSchema metadataFiles\n        <*> validateTxAuxScripts     era scriptFiles\n        <*> validateTxWithdrawals    era withdrawals\n        <*> validateTxCertificates   era certFiles\n        <*> validateTxUpdateProposal era mUpdatePropFile\n        <*> validateTxMintValue      era mValue\n\n    txBody <-\n      firstExceptT (ShelleyTxCmdTxBodyError . SomeTxBodyError) . hoistEither $\n        makeTransactionBody txBodyContent\n\n    firstExceptT ShelleyTxCmdWriteFileError . newExceptT $\n      Api.writeFileTextEnvelope fpath Nothing txBody\n\n\n-- ----------------------------------------------------------------------------\n-- Transaction body validation and conversion\n--\n\n-- | An enumeration of era-dependent features where we have to check that it\n-- is permissible to use this feature in this era.\n--\ndata TxFeature = TxFeatureShelleyAddresses\n               | TxFeatureExplicitFees\n               | TxFeatureImplicitFees\n               | TxFeatureValidityLowerBound\n               | TxFeatureValidityUpperBound\n               | TxFeatureValidityNoUpperBound\n               | TxFeatureTxMetadata\n               | TxFeatureAuxScripts\n               | TxFeatureWithdrawals\n               | TxFeatureCertificates\n               | TxFeatureMintValue\n               | TxFeatureMultiAssetOutputs\n               | TxFeatureScriptWitnesses\n               | TxFeatureShelleyKeys\n  deriving Show\n\ntxFeatureMismatch :: CardanoEra era\n                  -> TxFeature\n                  -> ExceptT ShelleyTxCmdError IO a\ntxFeatureMismatch era feature =\n    left (ShelleyTxCmdTxFeatureMismatch (anyCardanoEra era) feature)\n\nvalidateTxIns :: CardanoEra era\n              -> [TxIn]\n              -> ExceptT ShelleyTxCmdError IO [TxIn]\nvalidateTxIns _ = return -- no validation or era-checking needed\n\nvalidateTxOuts :: forall era.\n                  CardanoEra era\n               -> [TxOutAnyEra]\n               -> ExceptT ShelleyTxCmdError IO [TxOut era]\nvalidateTxOuts era = mapM toTxOutInAnyEra\n  where\n    toTxOutInAnyEra :: TxOutAnyEra\n                    -> ExceptT ShelleyTxCmdError IO (TxOut era)\n    toTxOutInAnyEra (TxOutAnyEra addr val) = TxOut <$> toAddressInAnyEra addr\n                                                   <*> toTxOutValueInAnyEra val\n\n    toAddressInAnyEra :: AddressAny -> ExceptT ShelleyTxCmdError IO (AddressInEra era)\n    toAddressInAnyEra addrAny =\n      case addrAny of\n        AddressByron   bAddr -> return (AddressInEra ByronAddressInAnyEra bAddr)\n        AddressShelley sAddr ->\n          case cardanoEraStyle era of\n            LegacyByronEra -> txFeatureMismatch era TxFeatureShelleyAddresses\n\n            ShelleyBasedEra era' ->\n              return (AddressInEra (ShelleyAddressInEra era') sAddr)\n\n    toTxOutValueInAnyEra :: Value -> ExceptT ShelleyTxCmdError IO (TxOutValue era)\n    toTxOutValueInAnyEra val =\n      case multiAssetSupportedInEra era of\n        Left adaOnlyInEra ->\n          case valueToLovelace val of\n            Just l  -> return (TxOutAdaOnly adaOnlyInEra l)\n            Nothing -> txFeatureMismatch era TxFeatureMultiAssetOutputs\n        Right multiAssetInEra -> return (TxOutValue multiAssetInEra val)\n\n\nvalidateTxFee :: CardanoEra era\n              -> Maybe Lovelace\n              -> ExceptT ShelleyTxCmdError IO (TxFee era)\nvalidateTxFee era mfee =\n    case (txFeesExplicitInEra era, mfee) of\n      (Left  implicit, Nothing)  -> return (TxFeeImplicit implicit)\n      (Right explicit, Just fee) -> return (TxFeeExplicit explicit fee)\n\n      (Right _, Nothing) -> txFeatureMismatch era TxFeatureImplicitFees\n      (Left  _, Just _)  -> txFeatureMismatch era TxFeatureExplicitFees\n\n\nvalidateTxValidityLowerBound :: CardanoEra era\n                             -> Maybe SlotNo\n                             -> ExceptT ShelleyTxCmdError IO\n                                        (TxValidityLowerBound era)\nvalidateTxValidityLowerBound _ Nothing = return TxValidityNoLowerBound\nvalidateTxValidityLowerBound era (Just slot) =\n    case validityLowerBoundSupportedInEra era of\n      Nothing -> txFeatureMismatch era TxFeatureValidityLowerBound\n      Just supported -> return (TxValidityLowerBound supported slot)\n\n\nvalidateTxValidityUpperBound :: CardanoEra era\n                             -> Maybe SlotNo\n                             -> ExceptT ShelleyTxCmdError IO\n                                        (TxValidityUpperBound era)\nvalidateTxValidityUpperBound era Nothing =\n    case validityNoUpperBoundSupportedInEra era of\n      Nothing -> txFeatureMismatch era TxFeatureValidityNoUpperBound\n      Just supported -> return (TxValidityNoUpperBound supported)\nvalidateTxValidityUpperBound era (Just slot) =\n    case validityUpperBoundSupportedInEra era of\n      Nothing -> txFeatureMismatch era TxFeatureValidityUpperBound\n      Just supported -> return (TxValidityUpperBound supported slot)\n\n\nvalidateTxMetadataInEra :: CardanoEra era\n                        -> TxMetadataJsonSchema\n                        -> [MetaDataFile]\n                        -> ExceptT ShelleyTxCmdError IO (TxMetadataInEra era)\nvalidateTxMetadataInEra _ _ [] = return TxMetadataNone\nvalidateTxMetadataInEra era schema files =\n    case txMetadataSupportedInEra era of\n      Nothing -> txFeatureMismatch era TxFeatureTxMetadata\n      Just supported -> do\n        metadata <- mconcat <$> mapM (readFileTxMetaData schema) files\n        return (TxMetadataInEra supported metadata)\n\n\nvalidateTxAuxScripts :: CardanoEra era\n                     -> [ScriptFile]\n                     -> ExceptT ShelleyTxCmdError IO (TxAuxScripts era)\nvalidateTxAuxScripts _ [] = return TxAuxScriptsNone\nvalidateTxAuxScripts era files =\n  case auxScriptsSupportedInEra era of\n    Nothing -> txFeatureMismatch era TxFeatureAuxScripts\n    Just AuxScriptsInAllegraEra -> do\n      scripts <- sequence\n        [ do script <- firstExceptT ShelleyTxCmdReadJsonFileError $\n                         readFileScriptInAnyLang file\n             validateScriptSupportedInEra era script\n        | ScriptFile file <- files ]\n      return $ TxAuxScripts AuxScriptsInAllegraEra scripts\n    Just AuxScriptsInMaryEra -> do\n      scripts <- sequence\n        [ do script <- firstExceptT ShelleyTxCmdReadJsonFileError $\n                         readFileScriptInAnyLang file\n             validateScriptSupportedInEra era script\n        | ScriptFile file <- files ]\n      return (TxAuxScripts AuxScriptsInMaryEra scripts)\n\nvalidateTxWithdrawals :: CardanoEra era\n                      -> [(StakeAddress, Lovelace)]\n                      -> ExceptT ShelleyTxCmdError IO (TxWithdrawals era)\nvalidateTxWithdrawals _ [] = return TxWithdrawalsNone\nvalidateTxWithdrawals era withdrawals =\n    case withdrawalsSupportedInEra era of\n      Nothing -> txFeatureMismatch era TxFeatureWithdrawals\n      Just supported -> return (TxWithdrawals supported withdrawals)\n\n\nvalidateTxCertificates :: CardanoEra era\n                       -> [CertificateFile]\n                       -> ExceptT ShelleyTxCmdError IO (TxCertificates era)\nvalidateTxCertificates era certFiles =\n  case certificatesSupportedInEra era of\n    Nothing\n      | null certFiles -> return TxCertificatesNone\n      | otherwise      -> txFeatureMismatch era TxFeatureCertificates\n    Just supported -> do\n      certs <- sequence\n                 [ firstExceptT ShelleyTxCmdReadTextViewFileError . newExceptT $\n                     readFileTextEnvelope AsCertificate certFile\n                 | CertificateFile certFile <- certFiles ]\n      return $ TxCertificates supported certs\n\n\nvalidateTxUpdateProposal :: CardanoEra era\n                         -> Maybe UpdateProposalFile\n                         -> ExceptT ShelleyTxCmdError IO (TxUpdateProposal era)\nvalidateTxUpdateProposal _ Nothing = return TxUpdateProposalNone\nvalidateTxUpdateProposal era (Just (UpdateProposalFile file)) =\n    case updateProposalSupportedInEra era of\n      Nothing -> txFeatureMismatch era TxFeatureCertificates\n      Just supported -> do\n         prop <- firstExceptT ShelleyTxCmdReadTextViewFileError $ newExceptT $\n                   readFileTextEnvelope AsUpdateProposal file\n         return (TxUpdateProposal supported prop)\n\n\nvalidateTxMintValue :: CardanoEra era\n                    -> Maybe Value\n                    -> ExceptT ShelleyTxCmdError IO (TxMintValue era)\nvalidateTxMintValue _ Nothing = return TxMintNone\nvalidateTxMintValue era (Just v) =\n    case multiAssetSupportedInEra era of\n       Left _ -> txFeatureMismatch era TxFeatureMintValue\n       Right supported -> return (TxMintValue supported v)\n\n\n-- ----------------------------------------------------------------------------\n-- Transaction signing\n--\n\nrunTxSign :: TxBodyFile\n          -> [WitnessSigningData]\n          -> Maybe Api.NetworkId\n          -> TxFile\n          -> ExceptT ShelleyTxCmdError IO ()\nrunTxSign (TxBodyFile txbodyFile) witSigningData mnw (TxFile txFile) = do\n\n  InAnyShelleyBasedEra _era txbody <-\n        --TODO: in principle we should be able to support Byron era txs too\n        onlyInShelleyBasedEras \"sign for Byron era transactions\"\n    =<< readFileTxBody txbodyFile\n\n  sks    <- firstExceptT ShelleyTxCmdReadWitnessSigningDataError $\n              mapM readWitnessSigningData witSigningData\n\n  let (sksByron, sksShelley, scsShelley) = partitionSomeWitnesses $ map categoriseSomeWitness sks\n\n  scsShelley' <- mapM (validateScriptSupportedInEra cardanoEra) scsShelley\n\n  -- Byron witnesses require the network ID. This can either be provided\n  -- directly or derived from a provided Byron address.\n  byronWitnesses <- firstExceptT ShelleyTxCmdBootstrapWitnessError\n    . hoistEither\n    $ mkShelleyBootstrapWitnesses mnw txbody sksByron\n\n  let shelleyKeyWitnesses = map (Api.makeShelleyKeyWitness txbody) sksShelley\n      shelleyScriptWitnesses = map makeScriptWitness scsShelley'\n      shelleyWitnesses = shelleyKeyWitnesses ++ shelleyScriptWitnesses\n      tx = Api.makeSignedTransaction (byronWitnesses ++ shelleyWitnesses) txbody\n\n  firstExceptT ShelleyTxCmdWriteFileError . newExceptT $\n    Api.writeFileTextEnvelope txFile Nothing tx\n\n\n-- ----------------------------------------------------------------------------\n-- Transaction submission\n--\n\nrunTxSubmit :: Protocol -> NetworkId -> FilePath\n            -> ExceptT ShelleyTxCmdError IO ()\nrunTxSubmit protocol network txFile = do\n    SocketPath sockPath <- firstExceptT ShelleyTxCmdSocketEnvError readEnvSocketPath\n\n    InAnyCardanoEra era tx <- readFileTx txFile\n\n    withlocalNodeConnectInfo protocol network sockPath $ \\connectInfo ->\n      case (localNodeConsensusMode connectInfo, era) of\n        (ByronMode{}, ByronEra) -> do\n          result <- liftIO $ Api.submitTx connectInfo (TxForByronMode tx)\n          case result of\n            TxSubmitSuccess -> return ()\n            TxSubmitFailureByronMode err ->\n              left (ShelleyTxCmdTxSubmitErrorByron err)\n\n        (ByronMode{}, _) ->\n          left $ ShelleyTxCmdTxSubmitErrorEraMismatch EraMismatch {\n                   ledgerEraName = \"Byron\",\n                   otherEraName  = show era\n                 }\n\n        (ShelleyMode{}, ShelleyEra) -> do\n          result <- liftIO $ Api.submitTx connectInfo (TxForShelleyMode tx)\n          case result of\n            TxSubmitSuccess -> return ()\n            TxSubmitFailureShelleyMode err ->\n              left (ShelleyTxCmdTxSubmitErrorShelley err)\n\n        (ShelleyMode{}, _) ->\n          left $ ShelleyTxCmdTxSubmitErrorEraMismatch EraMismatch {\n                   ledgerEraName = \"Shelley\",\n                   otherEraName  = show era\n                 }\n\n        (CardanoMode{}, _) -> do\n          result <- liftIO $ Api.submitTx connectInfo\n                               (TxForCardanoMode (InAnyCardanoEra era tx))\n          case result of\n            TxSubmitSuccess -> return ()\n            TxSubmitFailureCardanoMode (ApplyTxErrByron err) ->\n              left (ShelleyTxCmdTxSubmitErrorByron err)\n            TxSubmitFailureCardanoMode (ApplyTxErrShelley err) ->\n              left (ShelleyTxCmdTxSubmitErrorShelley err)\n            TxSubmitFailureCardanoMode (ApplyTxErrAllegra err) ->\n              left (ShelleyTxCmdTxSubmitErrorAllegra err)\n            TxSubmitFailureCardanoMode (ApplyTxErrMary err) ->\n              left (ShelleyTxCmdTxSubmitErrorMary err)\n            TxSubmitFailureCardanoMode (ApplyTxErrWrongEra mismatch) ->\n              left (ShelleyTxCmdTxSubmitErrorEraMismatch mismatch)\n\n\n-- ----------------------------------------------------------------------------\n-- Transaction fee calculation\n--\n\nrunTxCalculateMinFee\n  :: TxBodyFile\n  -> Maybe Api.NetworkId\n  -> ProtocolParamsFile\n  -> TxInCount\n  -> TxOutCount\n  -> TxShelleyWitnessCount\n  -> TxByronWitnessCount\n  -> ExceptT ShelleyTxCmdError IO ()\nrunTxCalculateMinFee (TxBodyFile txbodyFile) nw pParamsFile\n                     (TxInCount nInputs) (TxOutCount nOutputs)\n                     (TxShelleyWitnessCount nShelleyKeyWitnesses)\n                     (TxByronWitnessCount nByronKeyWitnesses) = do\n\n    InAnyShelleyBasedEra _era txbody <-\n          --TODO: in principle we should be able to support Byron era txs too\n          onlyInShelleyBasedEras \"calculate-min-fee for Byron era transactions\"\n      =<< readFileTxBody txbodyFile\n\n    pparams <- readProtocolParameters pParamsFile\n\n    let tx = Api.makeSignedTransaction [] txbody\n        Api.Lovelace fee = Api.estimateTransactionFee\n                             (fromMaybe Api.Mainnet nw)\n                             (Shelley._minfeeB pparams) --TODO: do this better\n                             (Shelley._minfeeA pparams)\n                             tx\n                             nInputs nOutputs\n                             nByronKeyWitnesses nShelleyKeyWitnesses\n\n    liftIO $ putStrLn $ (show fee :: String) <> \" Lovelace\"\n\nrunTxCreatePolicyId :: ScriptFile -> ExceptT ShelleyTxCmdError IO ()\nrunTxCreatePolicyId (ScriptFile _sFile) =\n  -- Here we would decode the JSON script file and then hash.\n  liftIO $ putTextLn \"Not implemented yet\"\n\n--TODO: eliminate this and get only the necessary params, and get them in a more\n-- helpful way rather than requiring them as a local file.\nreadProtocolParameters :: ProtocolParamsFile\n                       -> ExceptT ShelleyTxCmdError IO (Shelley.PParams StandardShelley)\nreadProtocolParameters (ProtocolParamsFile fpath) = do\n  pparams <- handleIOExceptT (ShelleyTxCmdReadFileError . FileIOError fpath) $ LBS.readFile fpath\n  firstExceptT (ShelleyTxCmdAesonDecodeProtocolParamsError fpath . Text.pack) . hoistEither $\n    Aeson.eitherDecode' pparams\n\ndata SomeWitness\n  = AByronSigningKey           (Api.SigningKey Api.ByronKey) (Maybe (Address ByronAddr))\n  | APaymentSigningKey         (Api.SigningKey Api.PaymentKey)\n  | APaymentExtendedSigningKey (Api.SigningKey Api.PaymentExtendedKey)\n  | AStakeSigningKey           (Api.SigningKey Api.StakeKey)\n  | AStakeExtendedSigningKey   (Api.SigningKey Api.StakeExtendedKey)\n  | AStakePoolSigningKey       (Api.SigningKey Api.StakePoolKey)\n  | AGenesisSigningKey         (Api.SigningKey Api.GenesisKey)\n  | AGenesisExtendedSigningKey (Api.SigningKey Api.GenesisExtendedKey)\n  | AGenesisDelegateSigningKey (Api.SigningKey Api.GenesisDelegateKey)\n  | AGenesisDelegateExtendedSigningKey\n                               (Api.SigningKey Api.GenesisDelegateExtendedKey)\n  | AGenesisUTxOSigningKey     (Api.SigningKey Api.GenesisUTxOKey)\n  | AShelleyScript              ScriptInAnyLang\n\n\n-- | Error reading the data required to construct a key witness.\ndata ReadWitnessSigningDataError\n  = ReadWitnessSigningDataSigningKeyDecodeError !(FileError InputDecodeError)\n  | ReadWitnessSigningDataScriptError !(FileError JsonDecodeError)\n  | ReadWitnessSigningDataSigningKeyAndAddressMismatch\n  -- ^ A Byron address was specified alongside a non-Byron signing key.\n  deriving Show\n\n-- | Render an error message for a 'ReadWitnessSigningDataError'.\nrenderReadWitnessSigningDataError :: ReadWitnessSigningDataError -> Text\nrenderReadWitnessSigningDataError err =\n  case err of\n    ReadWitnessSigningDataSigningKeyDecodeError fileErr ->\n      \"Error reading signing key: \" <> Text.pack (displayError fileErr)\n    ReadWitnessSigningDataScriptError fileErr ->\n      \"Error reading script: \" <> Text.pack (displayError fileErr)\n    ReadWitnessSigningDataSigningKeyAndAddressMismatch ->\n      \"Only a Byron signing key may be accompanied by a Byron address.\"\n\nreadWitnessSigningData\n  :: WitnessSigningData\n  -> ExceptT ReadWitnessSigningDataError IO SomeWitness\nreadWitnessSigningData (ScriptWitnessSigningData (ScriptFile fp)) =\n    firstExceptT ReadWitnessSigningDataScriptError $\n      AShelleyScript <$> readFileScriptInAnyLang fp\n\nreadWitnessSigningData (KeyWitnessSigningData skFile mbByronAddr) = do\n    res <- firstExceptT ReadWitnessSigningDataSigningKeyDecodeError\n      . newExceptT\n      $ readSigningKeyFileAnyOf bech32FileTypes textEnvFileTypes skFile\n    case (res, mbByronAddr) of\n      (AByronSigningKey _ _, Just _) -> pure res\n      (AByronSigningKey _ _, Nothing) -> pure res\n      (_, Nothing) -> pure res\n      (_, Just _) ->\n        -- A Byron address should only be specified along with a Byron signing key.\n        left ReadWitnessSigningDataSigningKeyAndAddressMismatch\n  where\n    textEnvFileTypes =\n      [ Api.FromSomeType (Api.AsSigningKey Api.AsByronKey)\n                          (`AByronSigningKey` mbByronAddr)\n      , Api.FromSomeType (Api.AsSigningKey Api.AsPaymentKey)\n                          APaymentSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsPaymentExtendedKey)\n                          APaymentExtendedSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsStakeKey)\n                          AStakeSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsStakeExtendedKey)\n                          AStakeExtendedSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsStakePoolKey)\n                          AStakePoolSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsGenesisKey)\n                          AGenesisSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsGenesisExtendedKey)\n                          AGenesisExtendedSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsGenesisDelegateKey)\n                          AGenesisDelegateSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsGenesisDelegateExtendedKey)\n                          AGenesisDelegateExtendedSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsGenesisUTxOKey)\n                          AGenesisUTxOSigningKey\n      ]\n\n    bech32FileTypes =\n      [ Api.FromSomeType (Api.AsSigningKey Api.AsByronKey)\n                          (`AByronSigningKey` mbByronAddr)\n      , Api.FromSomeType (Api.AsSigningKey Api.AsPaymentKey)\n                          APaymentSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsPaymentExtendedKey)\n                          APaymentExtendedSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsStakeKey)\n                          AStakeSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsStakeExtendedKey)\n                          AStakeExtendedSigningKey\n      , Api.FromSomeType (Api.AsSigningKey Api.AsStakePoolKey)\n                          AStakePoolSigningKey\n      ]\n\npartitionSomeWitnesses\n  :: [ByronOrShelleyWitness]\n  -> ( [ShelleyBootstrapWitnessSigningKeyData]\n     , [ShelleyWitnessSigningKey]\n     , [ScriptInAnyLang]\n     )\npartitionSomeWitnesses = reversePartitionedWits . foldl' go mempty\n  where\n    reversePartitionedWits (bw, skw, ssw) =\n      (reverse bw, reverse skw, reverse ssw)\n\n    go (byronAcc, shelleyKeyAcc, shelleyScriptAcc) byronOrShelleyWit =\n      case byronOrShelleyWit of\n        AByronWitness byronWit ->\n          (byronWit:byronAcc, shelleyKeyAcc, shelleyScriptAcc)\n        AShelleyKeyWitness shelleyKeyWit ->\n          (byronAcc, shelleyKeyWit:shelleyKeyAcc, shelleyScriptAcc)\n        AShelleyScriptWitness shelleyScriptWit ->\n          (byronAcc, shelleyKeyAcc, shelleyScriptWit:shelleyScriptAcc)\n\n\n-- | Some kind of Byron or Shelley witness.\ndata ByronOrShelleyWitness\n  = AByronWitness !ShelleyBootstrapWitnessSigningKeyData\n  | AShelleyKeyWitness !Api.ShelleyWitnessSigningKey\n  | AShelleyScriptWitness !ScriptInAnyLang\n\ncategoriseSomeWitness :: SomeWitness -> ByronOrShelleyWitness\ncategoriseSomeWitness swsk =\n  case swsk of\n    AByronSigningKey           sk addr -> AByronWitness (ShelleyBootstrapWitnessSigningKeyData sk addr)\n    APaymentSigningKey         sk      -> AShelleyKeyWitness (Api.WitnessPaymentKey         sk)\n    APaymentExtendedSigningKey sk      -> AShelleyKeyWitness (Api.WitnessPaymentExtendedKey sk)\n    AStakeSigningKey           sk      -> AShelleyKeyWitness (Api.WitnessStakeKey           sk)\n    AStakeExtendedSigningKey   sk      -> AShelleyKeyWitness (Api.WitnessStakeExtendedKey   sk)\n    AStakePoolSigningKey       sk      -> AShelleyKeyWitness (Api.WitnessStakePoolKey       sk)\n    AGenesisSigningKey         sk      -> AShelleyKeyWitness (Api.WitnessGenesisKey sk)\n    AGenesisExtendedSigningKey sk      -> AShelleyKeyWitness (Api.WitnessGenesisExtendedKey sk)\n    AGenesisDelegateSigningKey sk      -> AShelleyKeyWitness (Api.WitnessGenesisDelegateKey sk)\n    AGenesisDelegateExtendedSigningKey sk\n                                       -> AShelleyKeyWitness (Api.WitnessGenesisDelegateExtendedKey sk)\n    AGenesisUTxOSigningKey     sk      -> AShelleyKeyWitness (Api.WitnessGenesisUTxOKey     sk)\n    AShelleyScript             scr     -> AShelleyScriptWitness scr\n\n-- | Data required for constructing a Shelley bootstrap witness.\ndata ShelleyBootstrapWitnessSigningKeyData\n  = ShelleyBootstrapWitnessSigningKeyData\n      !(SigningKey ByronKey)\n      -- ^ Byron signing key.\n      !(Maybe (Address ByronAddr))\n      -- ^ An optionally specified Byron address.\n      --\n      -- If specified, both the network ID and derivation path are extracted\n      -- from the address and used in the construction of the Byron witness.\n\n-- | Error constructing a Shelley bootstrap witness (i.e. a Byron key witness\n-- in the Shelley era).\ndata ShelleyBootstrapWitnessError\n  = MissingNetworkIdOrByronAddressError\n  -- ^ Neither a network ID nor a Byron address were provided to construct the\n  -- Shelley bootstrap witness. One or the other is required.\n  deriving Show\n\n-- | Render an error message for a 'ShelleyBootstrapWitnessError'.\nrenderShelleyBootstrapWitnessError :: ShelleyBootstrapWitnessError -> Text\nrenderShelleyBootstrapWitnessError MissingNetworkIdOrByronAddressError =\n  \"Transactions witnessed by a Byron signing key must be accompanied by a \"\n    <> \"network ID. Either provide a network ID or provide a Byron \"\n    <> \"address with each Byron signing key (network IDs can be derived \"\n    <> \"from Byron addresses).\"\n\n-- | Construct a Shelley bootstrap witness (i.e. a Byron key witness in the\n-- Shelley era).\nmkShelleyBootstrapWitness\n  :: IsShelleyBasedEra era\n  => Maybe NetworkId\n  -> TxBody era\n  -> ShelleyBootstrapWitnessSigningKeyData\n  -> Either ShelleyBootstrapWitnessError (Witness era)\nmkShelleyBootstrapWitness Nothing _ (ShelleyBootstrapWitnessSigningKeyData _ Nothing) =\n  Left MissingNetworkIdOrByronAddressError\nmkShelleyBootstrapWitness (Just nw) txBody (ShelleyBootstrapWitnessSigningKeyData skey Nothing) =\n  Right $ makeShelleyBootstrapWitness (WitnessNetworkId nw) txBody skey\nmkShelleyBootstrapWitness _ txBody (ShelleyBootstrapWitnessSigningKeyData skey (Just addr)) =\n  Right $ makeShelleyBootstrapWitness (WitnessByronAddress addr) txBody skey\n\n-- | Attempt to construct Shelley bootstrap witnesses until an error is\n-- encountered.\nmkShelleyBootstrapWitnesses\n  :: IsShelleyBasedEra era\n  => Maybe NetworkId\n  -> TxBody era\n  -> [ShelleyBootstrapWitnessSigningKeyData]\n  -> Either ShelleyBootstrapWitnessError [Witness era]\nmkShelleyBootstrapWitnesses mnw txBody =\n  mapM (mkShelleyBootstrapWitness mnw txBody)\n\n\nrunTxGetTxId :: TxBodyFile -> ExceptT ShelleyTxCmdError IO ()\nrunTxGetTxId (TxBodyFile txbodyFile) = do\n  InAnyCardanoEra _era txbody <- readFileTxBody txbodyFile\n  liftIO $ BS.putStrLn $ Api.serialiseToRawBytesHex (Api.getTxId txbody)\n\nrunTxCreateWitness\n  :: TxBodyFile\n  -> WitnessSigningData\n  -> Maybe NetworkId\n  -> OutputFile\n  -> ExceptT ShelleyTxCmdError IO ()\nrunTxCreateWitness (TxBodyFile txbodyFile) witSignData mbNw (OutputFile oFile) = do\n\n  InAnyShelleyBasedEra _era txbody <-\n        --TODO: in principle we should be able to support Byron era txs too\n        onlyInShelleyBasedEras \"witness for Byron era transactions\"\n    =<< readFileTxBody txbodyFile\n  -- We use the era of the tx we read to determine the era we use for the rest:\n\n  someWit <- firstExceptT ShelleyTxCmdReadWitnessSigningDataError\n    $ readWitnessSigningData witSignData\n\n  witness <-\n    case categoriseSomeWitness someWit of\n      -- Byron witnesses require the network ID. This can either be provided\n      -- directly or derived from a provided Byron address.\n      AByronWitness bootstrapWitData ->\n        firstExceptT ShelleyTxCmdBootstrapWitnessError\n          . hoistEither\n          $ mkShelleyBootstrapWitness mbNw txbody bootstrapWitData\n      AShelleyKeyWitness skShelley ->\n        pure $ makeShelleyKeyWitness txbody skShelley\n      AShelleyScriptWitness script ->\n        makeScriptWitness <$> validateScriptSupportedInEra cardanoEra script\n\n  firstExceptT ShelleyTxCmdWriteFileError\n    . newExceptT\n    $ Api.writeFileTextEnvelope oFile Nothing witness\n\n\nrunTxSignWitness\n  :: TxBodyFile\n  -> [WitnessFile]\n  -> OutputFile\n  -> ExceptT ShelleyTxCmdError IO ()\nrunTxSignWitness (TxBodyFile txbodyFile) witnessFiles (OutputFile oFp) = do\n\n    InAnyCardanoEra era txbody  <- readFileTxBody txbodyFile\n    InAnyShelleyBasedEra _ _ <-\n          --TODO: in principle we should be able to support Byron era txs too\n          onlyInShelleyBasedEras \"sign for Byron era transactions\"\n                                 (InAnyCardanoEra era txbody)\n\n    witnesses <-\n      sequence\n        [ do InAnyCardanoEra era' witness <- readFileWitness file\n             case testEquality era era' of\n               Nothing   -> left $ ShelleyTxCmdWitnessEraMismatch\n                                     (AnyCardanoEra era)\n                                     (AnyCardanoEra era')\n                                     witnessFile\n               Just Refl -> return witness\n        | witnessFile@(WitnessFile file) <- witnessFiles ]\n\n    let tx = Api.makeSignedTransaction witnesses txbody\n    firstExceptT ShelleyTxCmdWriteFileError\n      . newExceptT\n      $ Api.writeFileTextEnvelope oFp Nothing tx\n\n\n-- ----------------------------------------------------------------------------\n-- Reading files in any era\n--\n\nreadFileWitness :: FilePath\n                -> ExceptT ShelleyTxCmdError IO (InAnyCardanoEra Witness)\nreadFileWitness = readFileInAnyCardanoEra AsWitness\n\n\nreadFileTxBody :: FilePath\n               -> ExceptT ShelleyTxCmdError IO (InAnyCardanoEra TxBody)\nreadFileTxBody = readFileInAnyCardanoEra AsTxBody\n\n\nreadFileTx :: FilePath -> ExceptT ShelleyTxCmdError IO (InAnyCardanoEra Tx)\nreadFileTx = readFileInAnyCardanoEra AsTx\n\n\nreadFileInAnyCardanoEra\n  :: ( HasTextEnvelope (thing ByronEra)\n     , HasTextEnvelope (thing ShelleyEra)\n     , HasTextEnvelope (thing AllegraEra)\n     , HasTextEnvelope (thing MaryEra)\n     )\n  => (forall era. AsType era -> AsType (thing era))\n  -> FilePath\n  -> ExceptT ShelleyTxCmdError IO\n            (InAnyCardanoEra thing)\nreadFileInAnyCardanoEra asThing file =\n    firstExceptT ShelleyTxCmdReadTextViewFileError\n  . newExceptT\n  $ Api.readFileTextEnvelopeAnyOf\n      [ Api.FromSomeType (asThing AsByronEra)   (InAnyCardanoEra ByronEra)\n      , Api.FromSomeType (asThing AsShelleyEra) (InAnyCardanoEra ShelleyEra)\n      , Api.FromSomeType (asThing AsAllegraEra) (InAnyCardanoEra AllegraEra)\n      , Api.FromSomeType (asThing AsMaryEra)    (InAnyCardanoEra MaryEra)\n      ]\n      file\n\n-- | Constrain the era to be Shelley based. Fail for the Byron era.\n--\nonlyInShelleyBasedEras :: Text\n                       -> InAnyCardanoEra a\n                       -> ExceptT ShelleyTxCmdError IO\n                                  (InAnyShelleyBasedEra a)\nonlyInShelleyBasedEras notImplMsg (InAnyCardanoEra era x) =\n    case cardanoEraStyle era of\n      LegacyByronEra       -> left (ShelleyTxCmdNotImplemented notImplMsg)\n      ShelleyBasedEra era' -> return (InAnyShelleyBasedEra era' x)\n\n\n-- ----------------------------------------------------------------------------\n-- Reading other files\n--\n\nreadFileScriptInAnyLang :: FilePath\n                        -> ExceptT (FileError JsonDecodeError) IO ScriptInAnyLang\nreadFileScriptInAnyLang path =\n    newExceptT $ readFileJSON AsScriptInAnyLang path\n\nvalidateScriptSupportedInEra :: CardanoEra era\n                             -> ScriptInAnyLang\n                             -> ExceptT ShelleyTxCmdError IO (ScriptInEra era)\nvalidateScriptSupportedInEra era script@(ScriptInAnyLang lang _) =\n    case toScriptInEra era script of\n      Nothing -> left $ ShelleyTxCmdScriptLanguageNotSupportedInEra\n                          (AnyScriptLanguage lang) (anyCardanoEra era)\n      Just script' -> pure script'\n\n\n-- ----------------------------------------------------------------------------\n-- Transaction metadata\n--\n\nreadFileTxMetaData :: TxMetadataJsonSchema -> MetaDataFile\n                   -> ExceptT ShelleyTxCmdError IO Api.TxMetadata\nreadFileTxMetaData mapping (MetaDataFileJSON fp) = do\n    bs <- handleIOExceptT (ShelleyTxCmdReadFileError . FileIOError fp) $\n          LBS.readFile fp\n    v  <- firstExceptT (ShelleyTxCmdMetaDataJsonParseError fp) $\n          hoistEither $\n            Aeson.eitherDecode' bs\n    firstExceptT (ShelleyTxCmdMetaDataConversionError fp) $ hoistEither $\n      metadataFromJson mapping v\nreadFileTxMetaData _ (MetaDataFileCBOR fp) = do\n    bs <- handleIOExceptT (ShelleyTxCmdReadFileError . FileIOError fp) $\n          BS.readFile fp\n    txMetadata <- firstExceptT (ShelleyTxCmdMetaDecodeError fp) $ hoistEither $\n      Api.deserialiseFromCBOR Api.AsTxMetadata bs\n    firstExceptT (ShelleyTxCmdMetaValidationError fp) $ hoistEither $ do\n        validateTxMetadata txMetadata\n        return txMetadata\n"}}}
2020-12-03 13:35:00.469958732 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":188,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:35:00.470047721 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":189,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"}}}
2020-12-03 13:35:00.470090049 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":190,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":220,"character":58}}}
2020-12-03 13:35:00.470060874 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",Modified)]
2020-12-03 13:35:00.470131846 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":190}}
2020-12-03 13:35:00.470413323 [ThreadId 6590] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:35:00.470455315 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:35:00.470534338 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:00.470634942 [ThreadId 7170] - Cancelled request IdInt 190
2020-12-03 13:35:00.470722176 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":190}
2020-12-03 13:35:00.560558784 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"87/91"},"token":"619"},"method":"$/progress"}
2020-12-03 13:35:00.693556907 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":191,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"}}}
2020-12-03 13:35:00.693761287 [ThreadId 7458] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:35:00.711555058 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":192,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":190,"character":4},"end":{"line":190,"character":19}},"context":{"diagnostics":[]}}}
2020-12-03 13:35:00.711678548 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":188}}
2020-12-03 13:35:00.711780423 [ThreadId 7175] - CodeAction was cancelled
2020-12-03 13:35:00.711823066 [ThreadId 7168] - Cancelled request IdInt 188
2020-12-03 13:35:00.711905857 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":188}
2020-12-03 13:35:00.78556882 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":193,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":193,"character":40}}}
2020-12-03 13:35:00.785743395 [ThreadId 7469] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:00.785874582 [ThreadId 7469] - Hover request at position 194:41 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:00.862557692 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":193}}
2020-12-03 13:35:00.862747876 [ThreadId 7469] - C:GetHieAst was cancelled
2020-12-03 13:35:00.86279039 [ThreadId 7467] - Cancelled request IdInt 193
2020-12-03 13:35:00.862887778 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":193}
2020-12-03 13:35:01.113745077 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":194,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":191,"character":14}}}
2020-12-03 13:35:01.113913645 [ThreadId 7476] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:01.114058289 [ThreadId 7476] - Hover request at position 192:15 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:01.219629352 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":195,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":191,"character":15}}}
2020-12-03 13:35:01.219878726 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":194}}
2020-12-03 13:35:01.219939932 [ThreadId 7481] - DocumentHighlight request at position 192:16 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:01.219997408 [ThreadId 7476] - C:GetHieAst was cancelled
2020-12-03 13:35:01.220056618 [ThreadId 7474] - Cancelled request IdInt 194
2020-12-03 13:35:01.220191583 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":194}
2020-12-03 13:35:01.576582973 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":196,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":191,"character":6},"end":{"line":191,"character":24}},"context":{"diagnostics":[]}}}
2020-12-03 13:35:01.576730089 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":192}}
2020-12-03 13:35:01.576827032 [ThreadId 7463] - CodeAction was cancelled
2020-12-03 13:35:01.576878926 [ThreadId 7461] - Cancelled request IdInt 192
2020-12-03 13:35:01.57698071 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":192}
2020-12-03 13:35:01.99730786 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":197,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":191,"character":17}}}
2020-12-03 13:35:01.997549175 [ThreadId 7493] - Definition request at position 192:18 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:02.949702216 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":195}}
2020-12-03 13:35:02.950028744 [ThreadId 7481] - C:GetHieAst was cancelled
2020-12-03 13:35:02.950122574 [ThreadId 7479] - Cancelled request IdInt 195
2020-12-03 13:35:02.95024074 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":195}
2020-12-03 13:35:03.182086141 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":198,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":777,"character":0},"end":{"line":777,"character":18}},"context":{"diagnostics":[]}}}
2020-12-03 13:35:03.182207711 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":196}}
2020-12-03 13:35:03.182324532 [ThreadId 7487] - CodeAction was cancelled
2020-12-03 13:35:03.182407452 [ThreadId 7485] - Cancelled request IdInt 196
2020-12-03 13:35:03.182543993 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":196}
2020-12-03 13:35:17.664312992 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":199,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":801,"character":57}}}
2020-12-03 13:35:17.66454754 [ThreadId 7505] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:17.664681933 [ThreadId 7505] - Hover request at position 802:58 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:17.771272211 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":199}}
2020-12-03 13:35:17.771598807 [ThreadId 7505] - C:GetHieAst was cancelled
2020-12-03 13:35:17.771682032 [ThreadId 7503] - Cancelled request IdInt 199
2020-12-03 13:35:17.771795717 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":199}
2020-12-03 13:35:18.631104913 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":200,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":46}}}
2020-12-03 13:35:18.631298491 [ThreadId 7511] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:18.63144286 [ThreadId 7511] - Hover request at position 806:47 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:19.565550929 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":200}}
2020-12-03 13:35:19.565796085 [ThreadId 7511] - C:GetHieAst was cancelled
2020-12-03 13:35:19.565872148 [ThreadId 7509] - Cancelled request IdInt 200
2020-12-03 13:35:19.566003016 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":200}
2020-12-03 13:35:20.137459596 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":201,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":15}}}
2020-12-03 13:35:20.137644465 [ThreadId 7517] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:20.137785626 [ThreadId 7517] - Hover request at position 806:16 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:22.648107938 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":201}}
2020-12-03 13:35:22.648334321 [ThreadId 7517] - C:GetHieAst was cancelled
2020-12-03 13:35:22.648408133 [ThreadId 7515] - Cancelled request IdInt 201
2020-12-03 13:35:22.648506652 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":201}
2020-12-03 13:35:23.249916687 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":202,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":45}}}
2020-12-03 13:35:23.250241135 [ThreadId 7523] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:23.250435909 [ThreadId 7523] - Hover request at position 806:46 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:23.742450181 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":202}}
2020-12-03 13:35:23.742767564 [ThreadId 7523] - C:GetHieAst was cancelled
2020-12-03 13:35:23.742865359 [ThreadId 7521] - Cancelled request IdInt 202
2020-12-03 13:35:23.743044272 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":202}
2020-12-03 13:35:30.073078838 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":203,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":18}}}
2020-12-03 13:35:30.073265783 [ThreadId 7529] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:30.073369192 [ThreadId 7529] - Hover request at position 806:19 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:30.574081114 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":203}}
2020-12-03 13:35:30.574257313 [ThreadId 7529] - C:GetHieAst was cancelled
2020-12-03 13:35:30.574317688 [ThreadId 7527] - Cancelled request IdInt 203
2020-12-03 13:35:30.57439609 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":203}
2020-12-03 13:35:32.99239815 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":204,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":21}}}
2020-12-03 13:35:32.99261304 [ThreadId 7535] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:32.992735829 [ThreadId 7535] - Hover request at position 806:22 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:33.558341145 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":204}}
2020-12-03 13:35:33.558524017 [ThreadId 7535] - C:GetHieAst was cancelled
2020-12-03 13:35:33.558599043 [ThreadId 7533] - Cancelled request IdInt 204
2020-12-03 13:35:33.558725279 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":204}
2020-12-03 13:35:34.994985062 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":205,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":45}}}
2020-12-03 13:35:34.995179002 [ThreadId 7541] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:34.995305496 [ThreadId 7541] - Hover request at position 806:46 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:35.512430723 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":205}}
2020-12-03 13:35:35.512638917 [ThreadId 7541] - C:GetHieAst was cancelled
2020-12-03 13:35:35.512690253 [ThreadId 7539] - Cancelled request IdInt 205
2020-12-03 13:35:35.512768707 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":205}
2020-12-03 13:35:36.212273554 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":198}}
2020-12-03 13:35:36.212451637 [ThreadId 7499] - CodeAction was cancelled
2020-12-03 13:35:36.212498372 [ThreadId 7497] - Cancelled request IdInt 198
2020-12-03 13:35:36.212593046 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":198}
2020-12-03 13:35:36.993113134 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":206,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":17}}}
2020-12-03 13:35:36.993466136 [ThreadId 7548] - DocumentHighlight request at position 806:18 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:37.385466763 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":207,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":805,"character":8},"end":{"line":805,"character":25}},"context":{"diagnostics":[]}}}
2020-12-03 13:35:38.745269611 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":208,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":34}}}
2020-12-03 13:35:38.745492156 [ThreadId 7558] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:38.74563817 [ThreadId 7558] - Hover request at position 806:35 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:38.767271225 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":208}}
2020-12-03 13:35:38.767486034 [ThreadId 7558] - C:GetHieAst was cancelled
2020-12-03 13:35:38.767549656 [ThreadId 7556] - Cancelled request IdInt 208
2020-12-03 13:35:38.767646769 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":208}
2020-12-03 13:35:40.293800854 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE PatternSynonyms #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-- The Shelley ledger uses promoted data kinds which we have to use, but we do\n-- not export any from this API. We also use them unticked as nature intended.\n{-# LANGUAGE DataKinds #-}\n{-# OPTIONS_GHC -Wno-unticked-promoted-constructors #-}\n\n-- | Complete, signed transactions\n--\nmodule Cardano.Api.Tx (\n\n    -- * Signing transactions\n    -- | Creating transaction witnesses one by one, or all in one go.\n    Tx(..),\n    getTxBody,\n    getTxWitnesses,\n\n    -- ** Signing in one go\n    ShelleySigningKey(..),\n    toShelleySigningKey,\n    signByronTransaction,\n    signShelleyTransaction,\n    -- ** Incremental signing and separate witnesses\n    makeSignedTransaction,\n    Witness(..),\n    makeByronKeyWitness,\n    ShelleyWitnessSigningKey(..),\n    makeShelleyKeyWitness,\n    WitnessNetworkIdOrByronAddress (..),\n    makeShelleyBootstrapWitness,\n    makeScriptWitness,\n    makeShelleySignature,\n    getShelleyKeyWitnessVerificationKey,\n\n    -- * Data family instances\n    AsType(AsTx, AsByronTx, AsShelleyTx,\n           AsWitness, AsByronWitness, AsShelleyWitness),\n  ) where\n\nimport           Prelude\n\nimport           Data.Maybe\n\nimport           Data.ByteString (ByteString)\nimport qualified Data.ByteString as BS\nimport qualified Data.ByteString.Lazy as LBS\n\nimport qualified Data.Map.Strict as Map\nimport qualified Data.Set as Set\nimport qualified Data.Vector as Vector\n\n--\n-- Common types, consensus, network\n--\nimport           Cardano.Binary (Annotated (..))\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\n--\n-- Crypto API used by consensus and Shelley (and should be used by Byron)\n--\nimport qualified Cardano.Crypto.DSIGN.Class as Crypto\nimport qualified Cardano.Crypto.Util as Crypto\nimport qualified Cardano.Crypto.Wallet as Crypto.HD\n\n--\n-- Byron imports\n--\nimport qualified Cardano.Crypto.Hashing as Byron\nimport qualified Cardano.Crypto.ProtocolMagic as Byron\nimport qualified Cardano.Crypto.Signing as Byron\nimport qualified Cardano.Chain.Common as Byron\nimport qualified Cardano.Chain.UTxO as Byron\n\n--\n-- Shelley imports\n--\nimport           Ouroboros.Consensus.Shelley.Protocol.Crypto (StandardCrypto)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era as Ledger\nimport qualified Cardano.Ledger.Shelley.Constraints as Shelley\n\nimport qualified Shelley.Spec.Ledger.Address.Bootstrap as Shelley\nimport           Shelley.Spec.Ledger.BaseTypes (maybeToStrictMaybe, strictMaybeToMaybe)\nimport qualified Shelley.Spec.Ledger.Hashing as Shelley\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Tx as Shelley\n\nimport           Cardano.Api.Address\nimport           Cardano.Api.Certificate\nimport           Cardano.Api.Eras\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.Key\nimport           Cardano.Api.KeysByron\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.NetworkId\nimport           Cardano.Api.Script\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseTextEnvelope\nimport           Cardano.Api.TxBody\n\n\n-- ----------------------------------------------------------------------------\n-- Signed transactions\n--\n\ndata Tx era where\n\n     ByronTx\n       :: Byron.ATxAux ByteString\n       -> Tx ByronEra\n\n     ShelleyTx\n       :: ShelleyBasedEra era\n       -> Shelley.Tx (ShelleyLedgerEra era)\n       -> Tx era\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Eq (Tx era) where\n    (==) (ByronTx txA)\n         (ByronTx txB) = txA == txB\n\n    (==) (ShelleyTx era txA)\n         (ShelleyTx _   txB) =\n      case era of\n        ShelleyBasedEraShelley -> txA == txB\n        ShelleyBasedEraAllegra -> txA == txB\n        ShelleyBasedEraMary    -> txA == txB\n\n    (==) ByronTx{} (ShelleyTx era _) = case era of {}\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Show (Tx era) where\n    showsPrec p (ByronTx tx) =\n      showParen (p >= 11) $\n        showString \"ByronTx \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Tx era) where\n    data AsType (Tx era) = AsTx (AsType era)\n    proxyToAsType _ = AsTx (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronTx :: AsType (Tx ByronEra)\npattern AsByronTx   = AsTx AsByronEra\n{-# COMPLETE AsByronTx #-}\n\npattern AsShelleyTx :: AsType (Tx ShelleyEra)\npattern AsShelleyTx = AsTx AsShelleyEra\n{-# COMPLETE AsShelleyTx #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Tx era) where\n    serialiseToCBOR (ByronTx tx) = CBOR.recoverBytes tx\n\n    serialiseToCBOR (ShelleyTx era tx) =\n      case era of\n        ShelleyBasedEraShelley -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraAllegra -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraMary    -> serialiseShelleyBasedTx tx\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronTx <$>\n            CBOR.decodeFullAnnotatedBytes\n              \"Byron Tx\" fromCBOR (LBS.fromStrict bs)\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraShelley) bs\n        AllegraEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraAllegra) bs\n        MaryEra    -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraMary) bs\n\n-- | The serialisation format for the different Shelley-based eras are not the\n-- same, but they can be handled generally with one overloaded implementation.\n--\nserialiseShelleyBasedTx :: ToCBOR tx => tx -> ByteString\nserialiseShelleyBasedTx = CBOR.serialize'\n\ndeserialiseShelleyBasedTx :: FromCBOR (CBOR.Annotator tx)\n                          => (tx -> tx')\n                          -> ByteString\n                          -> Either CBOR.DecoderError tx'\ndeserialiseShelleyBasedTx mkTx bs =\n    mkTx <$> CBOR.decodeAnnotator \"Shelley Tx\" fromCBOR (LBS.fromStrict bs)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Tx era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxSignedByron\"\n        ShelleyEra -> \"TxSignedShelley\"\n        AllegraEra -> \"Tx AllegraEra\"\n        MaryEra    -> \"Tx MaryEra\"\n\n\ndata Witness era where\n\n     ByronKeyWitness\n       :: Byron.TxInWitness\n       -> Witness ByronEra\n\n     ShelleyBootstrapWitness\n       :: ShelleyBasedEra era\n       -> Shelley.BootstrapWitness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyKeyWitness\n       :: ShelleyBasedEra era\n       -> Shelley.WitVKey Shelley.Witness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyScriptWitness\n       :: ShelleyBasedEra era\n       -> Ledger.Script (ShelleyLedgerEra era)\n       -> Witness era\n\n\n-- The GADT in the Shelley cases requires a custom instance\ninstance Eq (Witness era) where\n    (==) (ByronKeyWitness wA)\n         (ByronKeyWitness wB) = wA == wB\n\n    (==) (ShelleyBootstrapWitness era wA)\n         (ShelleyBootstrapWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyKeyWitness era wA)\n         (ShelleyKeyWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyScriptWitness era wA)\n         (ShelleyScriptWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) _ _ = False\n\n-- The GADT in the ShelleyTx case requires a custom instance\n--TODO: once we start providing custom patterns we should do the show in terms\n-- of those. It'll be less verbose too!\ninstance Show (Witness era) where\n    showsPrec p (ByronKeyWitness tx) =\n      showParen (p >= 11) $\n        showString \"ByronKeyWitness \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Witness era) where\n    data AsType (Witness era) = AsWitness (AsType era)\n    proxyToAsType _ = AsWitness (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronWitness :: AsType (Witness ByronEra)\npattern AsByronWitness   = AsWitness AsByronEra\n{-# COMPLETE AsByronWitness #-}\n\npattern AsShelleyWitness :: AsType (Witness ShelleyEra)\npattern AsShelleyWitness = AsWitness AsShelleyEra\n{-# COMPLETE AsShelleyWitness #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Witness era) where\n    serialiseToCBOR (ByronKeyWitness wit) = CBOR.serialize' wit\n\n    serialiseToCBOR (ShelleyKeyWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedKeyWitness wit\n\n    serialiseToCBOR (ShelleyBootstrapWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedBootstrapWitness wit\n\n    serialiseToCBOR (ShelleyScriptWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedScriptWitness wit\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronKeyWitness <$> CBOR.decodeFull' bs\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> decodeShelleyBasedWitness ShelleyBasedEraShelley bs\n        AllegraEra -> decodeShelleyBasedWitness ShelleyBasedEraAllegra bs\n        MaryEra    -> decodeShelleyBasedWitness ShelleyBasedEraMary    bs\n\n\nencodeShelleyBasedKeyWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedKeyWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 0 <> toCBOR wit\n\nencodeShelleyBasedBootstrapWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedBootstrapWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 1 <> toCBOR wit\n\nencodeShelleyBasedScriptWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedScriptWitness wit =\n    CBOR.encodeListLen 2\n <> CBOR.encodeWord 2\n    -- We use an extra level of wrapping here to support the legacy\n    -- binary serialisation format for the @Script@ type from\n    -- @cardano-ledger-specs@.\n    --\n    -- TODO: make this go away by providing a WitnessSet type and only\n    -- providing serialisation for witness sets, using the serialisation\n    -- from the ledger lib rather than needing something custom here.\n    -- Signed transactions have witness sets, so this is an existing on-chain\n    -- stable format.\n <> CBOR.encodeListLen 2\n <> CBOR.encodeWord 0\n <> toCBOR wit\n\ndecodeShelleyBasedWitness :: forall era.\n                             Ledger.Era (ShelleyLedgerEra era)\n                          => FromCBOR (CBOR.Annotator (Ledger.Script (ShelleyLedgerEra era)))\n                          => ShelleyBasedEra era\n                          -> ByteString\n                          -> Either CBOR.DecoderError (Witness era)\ndecodeShelleyBasedWitness era =\n    CBOR.decodeAnnotator \"Shelley Witness\" decode . LBS.fromStrict\n  where\n    decode :: CBOR.Decoder s (CBOR.Annotator (Witness era))\n    decode =  do\n      CBOR.decodeListLenOf 2\n      t <- CBOR.decodeWord\n      case t of\n        0 -> fmap (fmap (ShelleyKeyWitness era)) fromCBOR\n        1 -> fmap (fmap (ShelleyBootstrapWitness era)) fromCBOR\n        -- We use an extra level of wrapping here to support the legacy\n        -- binary serialisation format for the @Script@ type from\n        -- @cardano-ledger-specs@.\n        2 -> do CBOR.decodeListLenOf 2\n                CBOR.decodeWordOf 0\n                fmap (fmap (ShelleyScriptWitness era)) fromCBOR\n        _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag\n                                \"Shelley Witness\" (fromIntegral t)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Witness era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxWitnessByron\"\n        ShelleyEra -> \"TxWitnessShelley\"\n        AllegraEra -> \"TxWitness AllegraEra\"\n        MaryEra    -> \"TxWitness MaryEra\"\n\n\ngetTxBody :: forall era. Tx era -> TxBody era\ngetTxBody (ByronTx Byron.ATxAux { Byron.aTaTx = txbody }) =\n    ByronTxBody txbody\n\ngetTxBody (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxBody tx\n      ShelleyBasedEraAllegra -> getShelleyTxBody tx\n      ShelleyBasedEraMary    -> getShelleyTxBody tx\n  where\n    getShelleyTxBody :: forall ledgerera.\n                        ShelleyLedgerEra era ~ ledgerera\n                     => Shelley.ShelleyBased ledgerera\n                     => Shelley.Tx ledgerera\n                     -> TxBody era\n    getShelleyTxBody Shelley.Tx {\n                       Shelley._body     = txbody,\n                       Shelley._metadata = txmetadata\n                     } =\n      ShelleyTxBody era txbody (strictMaybeToMaybe txmetadata)\n\n\ngetTxWitnesses :: forall era. Tx era -> [Witness era]\ngetTxWitnesses (ByronTx Byron.ATxAux { Byron.aTaWitness = witnesses }) =\n    map ByronKeyWitness\n  . Vector.toList\n  . unAnnotated\n  $ witnesses\n\ngetTxWitnesses (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxWitnesses tx\n      ShelleyBasedEraAllegra -> getShelleyTxWitnesses tx\n      ShelleyBasedEraMary    -> getShelleyTxWitnesses tx\n  where\n    getShelleyTxWitnesses :: forall ledgerera.\n                             ShelleyLedgerEra era ~ ledgerera\n                          => Shelley.ShelleyBased ledgerera\n                          => Shelley.Tx ledgerera\n                          -> [Witness era]\n    getShelleyTxWitnesses Shelley.Tx {\n                            Shelley._witnessSet =\n                              Shelley.WitnessSet\n                                addrWits\n                                msigWits\n                                bootWits\n                          } =\n        map (ShelleyBootstrapWitness era) (Set.elems bootWits)\n     ++ map (ShelleyKeyWitness       era) (Set.elems addrWits)\n     ++ map (ShelleyScriptWitness    era) (Map.elems msigWits)\n\n\nmakeSignedTransaction :: forall era.\n                         [Witness era]\n                      -> TxBody era\n                      -> Tx era\nmakeSignedTransaction witnesses (ByronTxBody txbody) =\n    ByronTx\n  . Byron.annotateTxAux\n  $ Byron.mkTxAux\n      (unAnnotated txbody)\n      (Vector.fromList [ w | ByronKeyWitness w <- witnesses ])\n\nmakeSignedTransaction witnesses (ShelleyTxBody era txbody txmetadata) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraAllegra -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraMary    -> makeShelleySignedTransaction txbody\n  where\n    makeShelleySignedTransaction :: forall ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Shelley.ValidateScript ledgerera\n                                 => Ledger.TxBody ledgerera\n                                 -> Tx era\n    makeShelleySignedTransaction txbody' =\n      ShelleyTx era $\n        Shelley.Tx\n          txbody'\n          (Shelley.WitnessSet\n            (Set.fromList [ w | ShelleyKeyWitness _ w <- witnesses ])\n            (Map.fromList [ (Shelley.hashScript sw, sw)\n                          | ShelleyScriptWitness _ sw <- witnesses ])\n            (Set.fromList [ w | ShelleyBootstrapWitness _ w <- witnesses ]))\n          (maybeToStrictMaybe txmetadata)\n\n\nmakeByronKeyWitness :: NetworkId\n                    -> TxBody ByronEra\n                    -> SigningKey ByronKey\n                    -> Witness ByronEra\nmakeByronKeyWitness _ (ShelleyTxBody era _ _) = case era of {}\nmakeByronKeyWitness nw (ByronTxBody txbody) =\n    let txhash :: Byron.Hash Byron.Tx\n        txhash = Byron.hashDecoded txbody\n\n        pm :: Byron.ProtocolMagicId\n        pm = toByronProtocolMagicId nw\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\(ByronSigningKey sk) ->\n        ByronKeyWitness $\n          Byron.VKWitness\n            (Byron.toVerification sk)\n            (Byron.sign pm Byron.SignTx sk (Byron.TxSigData txhash))\n\n-- | Either a network ID or a Byron address to be used in constructing a\n-- Shelley bootstrap witness.\ndata WitnessNetworkIdOrByronAddress\n  = WitnessNetworkId !NetworkId\n  -- ^ Network ID.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- the result will not consist of a derivation path. If that is required,\n  -- specify a 'WitnessByronAddress' value instead.\n  | WitnessByronAddress !(Address ByronAddr)\n  -- ^ Byron address.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- both the network ID and derivation path will be extracted from the\n  -- address and used in the construction of the witness.\n\nmakeShelleyBootstrapWitness :: forall era.\n                               IsShelleyBasedEra era\n                            => WitnessNetworkIdOrByronAddress\n                            -> TxBody era\n                            -> SigningKey ByronKey\n                            -> Witness era\nmakeShelleyBootstrapWitness _ ByronTxBody{} _ =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\nmakeShelleyBootstrapWitness nwOrAddr (ShelleyTxBody era txbody _) sk =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraAllegra -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraMary    -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n\nmakeShelleyBasedBootstrapWitness :: forall era ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Ledger.Crypto ledgerera ~ StandardCrypto\n                                 => ShelleyBasedEra era\n                                 -> WitnessNetworkIdOrByronAddress\n                                 -> Ledger.TxBody ledgerera\n                                 -> SigningKey ByronKey\n                                 -> Witness era\nmakeShelleyBasedBootstrapWitness era nwOrAddr txbody (ByronSigningKey sk) =\n    ShelleyBootstrapWitness era $\n      -- Byron era witnesses were weird. This reveals all that weirdness.\n      Shelley.BootstrapWitness {\n        Shelley.bwKey        = vk,\n        Shelley.bwSig        = signature,\n        Shelley.bwChainCode  = chainCode,\n        Shelley.bwAttributes = attributes\n      }\n  where\n    -- Starting with the easy bits: we /can/ convert the Byron verification key\n    -- to a the pair of a Shelley verification key plus the chain code.\n    --\n    (vk, chainCode) = Shelley.unpackByronVKey (Byron.toVerification sk)\n\n    -- Now the hairy bits.\n    --\n    -- Byron era signing keys were all /extended/ ed25519 keys. We have to\n    -- produce a signature using this extended signing key directly. They\n    -- /cannot/ be converted to a plain (non-extended) signing keys. Since we\n    -- now support extended signing keys for the Shelley too, we are able to\n    -- reuse that here.\n    --\n    signature :: Shelley.SignedDSIGN StandardCrypto\n                  (Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody)\n    signature = makeShelleySignature\n                  txhash\n                  -- Make the signature with the extended key directly:\n                  (ShelleyExtendedSigningKey (Byron.unSigningKey sk))\n\n    txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n    txhash = Shelley.hashAnnotated txbody\n    --TODO: use Shelley.eraIndTxBodyHash txbody once that function has a\n    -- suitably general type.\n\n    -- And finally we need to provide the extra suffix bytes necessary to\n    -- reconstruct the mini-Merkel tree that is a Byron address. The suffix\n    -- bytes are the serialised address attributes.\n    attributes =\n      CBOR.serialize' $\n        Byron.mkAttributes Byron.AddrAttributes {\n          Byron.aaVKDerivationPath = derivationPath,\n          Byron.aaNetworkMagic     = networkMagic\n        }\n\n    -- The 'WitnessNetworkIdOrByronAddress' value converted to an 'Either'.\n    eitherNwOrAddr :: Either NetworkId (Address ByronAddr)\n    eitherNwOrAddr =\n      case nwOrAddr of\n        WitnessNetworkId nw -> Left nw\n        WitnessByronAddress addr -> Right addr\n\n    unByronAddr :: Address ByronAddr -> Byron.Address\n    unByronAddr (ByronAddress addr) = addr\n\n    unAddrAttrs :: Address ByronAddr -> Byron.AddrAttributes\n    unAddrAttrs = Byron.attrData . Byron.addrAttributes . unByronAddr\n\n    derivationPath :: Maybe Byron.HDAddressPayload\n    derivationPath =\n      either\n        (const Nothing)\n        (Byron.aaVKDerivationPath . unAddrAttrs)\n        eitherNwOrAddr\n\n    networkMagic :: Byron.NetworkMagic\n    networkMagic =\n      either\n        toByronNetworkMagic\n        (Byron.aaNetworkMagic . unAddrAttrs)\n        eitherNwOrAddr\n\n\ndata ShelleyWitnessSigningKey =\n       WitnessPaymentKey         (SigningKey PaymentKey)\n     | WitnessPaymentExtendedKey (SigningKey PaymentExtendedKey)\n     | WitnessStakeKey           (SigningKey StakeKey)\n     | WitnessStakeExtendedKey   (SigningKey StakeExtendedKey)\n     | WitnessStakePoolKey       (SigningKey StakePoolKey)\n     | WitnessGenesisKey         (SigningKey GenesisKey)\n     | WitnessGenesisExtendedKey (SigningKey GenesisExtendedKey)\n     | WitnessGenesisDelegateKey (SigningKey GenesisDelegateKey)\n     | WitnessGenesisDelegateExtendedKey\n                                 (SigningKey GenesisDelegateExtendedKey)\n     | WitnessGenesisUTxOKey     (SigningKey GenesisUTxOKey)\n\n\nmakeShelleyKeyWitness :: forall era.\n                         IsShelleyBasedEra era\n                      => TxBody era\n                      -> ShelleyWitnessSigningKey\n                      -> Witness era\nmakeShelleyKeyWitness (ShelleyTxBody era txbody _) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraAllegra -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraMary    -> makeShelleyBasedKeyWitness txbody\n  where\n    makeShelleyBasedKeyWitness :: forall ledgerera.\n                                  ShelleyLedgerEra era ~ ledgerera\n                               => Shelley.ShelleyBased ledgerera\n                               => Ledger.Crypto ledgerera ~ StandardCrypto\n                               => Ledger.TxBody ledgerera\n                               -> ShelleyWitnessSigningKey\n                               -> Witness era\n    makeShelleyBasedKeyWitness txbody' =\n\n     let txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n         txhash = Shelley.hashAnnotated txbody'\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\wsk ->\n        let sk        = toShelleySigningKey wsk\n            vk        = getShelleyKeyWitnessVerificationKey sk\n            signature = makeShelleySignature txhash sk\n         in ShelleyKeyWitness era $\n              Shelley.WitVKey vk signature\n\nmakeShelleyKeyWitness ByronTxBody{} =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\n\n-- | We support making key witnesses with both normal and extended signing keys.\n--\ndata ShelleySigningKey =\n       -- | A normal ed25519 signing key\n       ShelleyNormalSigningKey   (Shelley.SignKeyDSIGN StandardCrypto)\n\n       -- | An extended ed25519 signing key\n     | ShelleyExtendedSigningKey Crypto.HD.XPrv\n\n\ntoShelleySigningKey :: ShelleyWitnessSigningKey -> ShelleySigningKey\ntoShelleySigningKey key = case key of\n  WitnessPaymentKey     (PaymentSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessStakeKey       (StakeSigningKey       sk) -> ShelleyNormalSigningKey sk\n  WitnessStakePoolKey   (StakePoolSigningKey   sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisKey     (GenesisSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisUTxOKey (GenesisUTxOSigningKey sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisDelegateKey (GenesisDelegateSigningKey sk) ->\n    ShelleyNormalSigningKey sk\n\n  -- The cases for extended keys\n  WitnessPaymentExtendedKey (PaymentExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessStakeExtendedKey (StakeExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisExtendedKey (GenesisExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisDelegateExtendedKey (GenesisDelegateExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n\ngetShelleyKeyWitnessVerificationKey\n  :: ShelleySigningKey\n  -> Shelley.VKey Shelley.Witness StandardCrypto\ngetShelleyKeyWitnessVerificationKey (ShelleyNormalSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . getVerificationKey\n    . PaymentSigningKey\n    $ sk\n\ngetShelleyKeyWitnessVerificationKey (ShelleyExtendedSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . (castVerificationKey :: VerificationKey PaymentExtendedKey\n                           -> VerificationKey PaymentKey)\n    . getVerificationKey\n    . PaymentExtendedSigningKey\n    $ sk\n\n\nmakeShelleySignature\n  :: Crypto.SignableRepresentation tosign\n  => tosign\n  -> ShelleySigningKey\n  -> Shelley.SignedDSIGN StandardCrypto tosign\nmakeShelleySignature tosign (ShelleyNormalSigningKey sk) =\n    Crypto.signedDSIGN () tosign sk\n\nmakeShelleySignature tosign (ShelleyExtendedSigningKey sk) =\n    fromXSignature $\n      Crypto.HD.sign\n        BS.empty  -- passphrase for (unused) in-memory encryption\n        sk\n        (Crypto.getSignableRepresentation tosign)\n  where\n    fromXSignature :: Crypto.HD.XSignature\n                   -> Shelley.SignedDSIGN StandardCrypto b\n    fromXSignature =\n        Crypto.SignedDSIGN\n      . fromMaybe impossible\n      . Crypto.rawDeserialiseSigDSIGN\n      . Crypto.HD.unXSignature\n\n    impossible =\n      error \"makeShelleyKeyWitnessSignature: byron and shelley signature sizes do not match\"\n\n\nmakeScriptWitness :: forall era. ScriptInEra era -> Witness era\nmakeScriptWitness s = ShelleyScriptWitness\n                        (eraOfScriptInEra s)\n                        (toShelleyScript s)\n\n\n-- order of signing keys must match txins\nsignByronTransaction :: NetworkId\n                     -> TxBody ByronEra\n                     -> [SigningKey ByronKey]\n                     -> Tx ByronEra\nsignByronTransaction nw txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeByronKeyWitness nw txbody) sks\n\n-- signing keys is a set\nsignShelleyTransaction :: IsShelleyBasedEra era\n                       => TxBody era\n                       -> [ShelleyWitnessSigningKey]\n                       -> Tx era\nsignShelleyTransaction txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeShelleyKeyWitness txbody) sks\n\n"}}}
2020-12-03 13:35:40.296703558 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":206}}
2020-12-03 13:35:40.296834639 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":191}}
2020-12-03 13:35:40.296847141 [ThreadId 7548] - C:GetHieAst was cancelled
2020-12-03 13:35:40.296898768 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":207}}
2020-12-03 13:35:40.296889678 [ThreadId 7546] - Cancelled request IdInt 206
2020-12-03 13:35:40.296911271 [ThreadId 7458] - codeLens was cancelled
2020-12-03 13:35:40.296810203 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",Modified)]
2020-12-03 13:35:40.296991961 [ThreadId 7456] - Cancelled request IdInt 191
2020-12-03 13:35:40.299800707 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":209,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:35:40.299829098 [ThreadId 7553] - CodeAction was cancelled
2020-12-03 13:35:40.299863287 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":206}
2020-12-03 13:35:40.299915023 [ThreadId 7551] - Cancelled request IdInt 207
2020-12-03 13:35:40.299943213 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":191}
2020-12-03 13:35:40.299934 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":210,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 13:35:40.299996382 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":207}
2020-12-03 13:35:40.300235592 [ThreadId 7163] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:35:40.300274029 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:35:40.300827071 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:35:40.302073705 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":15,"character":7},"end":{"line":15,"character":21}},"kind":1,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}},"kind":2,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}}},{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}},"kind":2,"name":"import Data.Maybe","range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}}},{"selectionRange":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}}},{"selectionRange":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"kind":2,"name":"import Data.Map.Strict","range":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"kind":2,"name":"import Data.Set","range":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"detail":"qualified"},{"selectionRange":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"kind":2,"name":"import Cardano.Crypto.DSIGN.Class","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"kind":2,"name":"import Cardano.Crypto.Util","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"kind":2,"name":"import Cardano.Crypto.Wallet","range":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"kind":2,"name":"import Cardano.Crypto.Hashing","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"kind":2,"name":"import Cardano.Crypto.ProtocolMagic","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"detail":"qualified"},{"selectionRange":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"kind":2,"name":"import Cardano.Crypto.Signing","range":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"kind":2,"name":"import Cardano.Chain.Common","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"kind":2,"name":"import Cardano.Chain.UTxO","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Protocol.Crypto","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}}},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"kind":2,"name":"import Cardano.Ledger.Shelley.Constraints","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"detail":"qualified"},{"selectionRange":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"kind":2,"name":"import Shelley.Spec.Ledger.Address.Bootstrap","range":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}},"kind":2,"name":"import Shelley.Spec.Ledger.BaseTypes","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}}},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Hashing","range":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"kind":2,"name":"import Shelley.Spec.Ledger.Tx","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"detail":"qualified"},{"selectionRange":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}},"kind":2,"name":"import Cardano.Api.Address","range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}}},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}},"kind":2,"name":"import Cardano.Api.Certificate","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}},"kind":2,"name":"import Cardano.Api.Key","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}},"kind":2,"name":"import Cardano.Api.KeysByron","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}},"kind":2,"name":"import Cardano.Api.NetworkId","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}},"kind":2,"name":"import Cardano.Api.Script","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}}},{"selectionRange":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}}},{"selectionRange":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}}},{"selectionRange":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}},"kind":2,"name":"import Cardano.Api.TxBody","range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}}}],"name":"imports","range":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}}},{"selectionRange":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}},"kind":23,"children":[{"selectionRange":{"start":{"line":115,"character":5},"end":{"line":115,"character":12}},"kind":9,"name":"ByronTx","range":{"start":{"line":115,"character":5},"end":{"line":117,"character":21}}},{"selectionRange":{"start":{"line":119,"character":5},"end":{"line":119,"character":14}},"kind":9,"name":"ShelleyTx","range":{"start":{"line":119,"character":5},"end":{"line":122,"character":16}}}],"name":"Tx","range":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}}},{"selectionRange":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}},"kind":11,"name":"Eq (Tx era)","range":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}}},{"selectionRange":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}},"kind":11,"name":"Show (Tx era)","range":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}}},{"selectionRange":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Tx era)","range":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}}},{"selectionRange":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Tx era)","range":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}}},{"selectionRange":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}},"kind":12,"name":"serialiseShelleyBasedTx","range":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}}},{"selectionRange":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}},"kind":12,"name":"deserialiseShelleyBasedTx","range":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}}},{"selectionRange":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Tx era)","range":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}}},{"selectionRange":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":223,"character":5},"end":{"line":223,"character":20}},"kind":9,"name":"ByronKeyWitness","range":{"start":{"line":223,"character":5},"end":{"line":225,"character":26}}},{"selectionRange":{"start":{"line":227,"character":5},"end":{"line":227,"character":28}},"kind":9,"name":"ShelleyBootstrapWitness","range":{"start":{"line":227,"character":5},"end":{"line":230,"character":21}}},{"selectionRange":{"start":{"line":232,"character":5},"end":{"line":232,"character":22}},"kind":9,"name":"ShelleyKeyWitness","range":{"start":{"line":232,"character":5},"end":{"line":235,"character":21}}},{"selectionRange":{"start":{"line":237,"character":5},"end":{"line":237,"character":25}},"kind":9,"name":"ShelleyScriptWitness","range":{"start":{"line":237,"character":5},"end":{"line":240,"character":21}}}],"name":"Witness","range":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}}},{"selectionRange":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}},"kind":11,"name":"Eq (Witness era)","range":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}}},{"selectionRange":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}},"kind":11,"name":"Show (Witness era)","range":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}}},{"selectionRange":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Witness era)","range":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}}},{"selectionRange":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Witness era)","range":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}}},{"selectionRange":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}},"kind":12,"name":"encodeShelleyBasedKeyWitness","range":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}}},{"selectionRange":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}},"kind":12,"name":"encodeShelleyBasedBootstrapWitness","range":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}}},{"selectionRange":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}},"kind":12,"name":"encodeShelleyBasedScriptWitness","range":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}}},{"selectionRange":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}},"kind":12,"name":"decodeShelleyBasedWitness","range":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}}},{"selectionRange":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Witness era)","range":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}},"kind":12,"name":"getTxBody","range":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}}},{"selectionRange":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}},"kind":12,"name":"getTxWitnesses","range":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}}},{"selectionRange":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}},"kind":12,"name":"makeSignedTransaction","range":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}}},{"selectionRange":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}},"kind":12,"name":"makeByronKeyWitness","range":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}}},{"selectionRange":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":544,"character":4},"end":{"line":544,"character":20}},"kind":9,"name":"WitnessNetworkId","range":{"start":{"line":544,"character":4},"end":{"line":549,"character":51}}},{"selectionRange":{"start":{"line":550,"character":4},"end":{"line":550,"character":23}},"kind":9,"name":"WitnessByronAddress","range":{"start":{"line":550,"character":4},"end":{"line":555,"character":57}}}],"name":"WitnessNetworkIdOrByronAddress","range":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}}},{"selectionRange":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}},"kind":12,"name":"makeShelleyBootstrapWitness","range":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}}},{"selectionRange":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}},"kind":12,"name":"makeShelleyBasedBootstrapWitness","range":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}},"kind":23,"children":[{"selectionRange":{"start":{"line":658,"character":7},"end":{"line":658,"character":24}},"kind":9,"name":"WitnessPaymentKey","range":{"start":{"line":658,"character":7},"end":{"line":658,"character":56}}},{"selectionRange":{"start":{"line":659,"character":7},"end":{"line":659,"character":32}},"kind":9,"name":"WitnessPaymentExtendedKey","range":{"start":{"line":659,"character":7},"end":{"line":659,"character":64}}},{"selectionRange":{"start":{"line":660,"character":7},"end":{"line":660,"character":22}},"kind":9,"name":"WitnessStakeKey","range":{"start":{"line":660,"character":7},"end":{"line":660,"character":54}}},{"selectionRange":{"start":{"line":661,"character":7},"end":{"line":661,"character":30}},"kind":9,"name":"WitnessStakeExtendedKey","range":{"start":{"line":661,"character":7},"end":{"line":661,"character":62}}},{"selectionRange":{"start":{"line":662,"character":7},"end":{"line":662,"character":26}},"kind":9,"name":"WitnessStakePoolKey","range":{"start":{"line":662,"character":7},"end":{"line":662,"character":58}}},{"selectionRange":{"start":{"line":663,"character":7},"end":{"line":663,"character":24}},"kind":9,"name":"WitnessGenesisKey","range":{"start":{"line":663,"character":7},"end":{"line":663,"character":56}}},{"selectionRange":{"start":{"line":664,"character":7},"end":{"line":664,"character":32}},"kind":9,"name":"WitnessGenesisExtendedKey","range":{"start":{"line":664,"character":7},"end":{"line":664,"character":64}}},{"selectionRange":{"start":{"line":665,"character":7},"end":{"line":665,"character":32}},"kind":9,"name":"WitnessGenesisDelegateKey","range":{"start":{"line":665,"character":7},"end":{"line":665,"character":64}}},{"selectionRange":{"start":{"line":666,"character":7},"end":{"line":666,"character":40}},"kind":9,"name":"WitnessGenesisDelegateExtendedKey","range":{"start":{"line":666,"character":7},"end":{"line":667,"character":72}}},{"selectionRange":{"start":{"line":668,"character":7},"end":{"line":668,"character":28}},"kind":9,"name":"WitnessGenesisUTxOKey","range":{"start":{"line":668,"character":7},"end":{"line":668,"character":60}}}],"name":"ShelleyWitnessSigningKey","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}}},{"selectionRange":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}},"kind":12,"name":"makeShelleyKeyWitness","range":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}}},{"selectionRange":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}},"kind":23,"children":[{"selectionRange":{"start":{"line":711,"character":7},"end":{"line":711,"character":30}},"kind":9,"name":"ShelleyNormalSigningKey","range":{"start":{"line":711,"character":7},"end":{"line":711,"character":70}}},{"selectionRange":{"start":{"line":714,"character":7},"end":{"line":714,"character":32}},"kind":9,"name":"ShelleyExtendedSigningKey","range":{"start":{"line":714,"character":7},"end":{"line":714,"character":47}}}],"name":"ShelleySigningKey","range":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}},"kind":12,"name":"toShelleySigningKey","range":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}}},{"selectionRange":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}},"kind":12,"name":"getShelleyKeyWitnessVerificationKey","range":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}}},{"selectionRange":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}},"kind":12,"name":"makeShelleySignature","range":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}}},{"selectionRange":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}},"kind":12,"name":"makeScriptWitness","range":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}}},{"selectionRange":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}},"kind":12,"name":"signByronTransaction","range":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}}},{"selectionRange":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}},"kind":12,"name":"signShelleyTransaction","range":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}}}],"name":"Cardano.Api.Tx","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":210}
2020-12-03 13:35:40.313508511 [ThreadId 7866] - finish: C:GetParsedModule (took 0.01s)
2020-12-03 13:35:40.31352606 [ThreadId 7867] - finish: CodeAction (took 0.01s)
2020-12-03 13:35:40.313673257 [ThreadId 7873] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:35:40.313879166 [ThreadId 7874] - finish: importLens (took 0.00s)
2020-12-03 13:35:40.358979058 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"86/91"},"token":"619"},"method":"$/progress"}
2020-12-03 13:35:40.493685999 [ThreadId 8064] - finish: retrie (took 0.18s)
2020-12-03 13:35:40.509314031 [ThreadId 8069] - finish: tactic (took 0.02s)
2020-12-03 13:35:40.509572142 [ThreadId 8074] - finish: tactic (took 0.00s)
2020-12-03 13:35:40.509629988 [ThreadId 8075] - finish: tactic (took 0.00s)
2020-12-03 13:35:40.509767332 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":209}
2020-12-03 13:35:40.530282802 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":211,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 13:35:40.530452825 [ThreadId 8080] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:35:40.530728247 [ThreadId 8081] - finish: codeLens (took 0.00s)
2020-12-03 13:35:40.531472295 [ThreadId 8087] - finish:  (took 0.00s)
2020-12-03 13:35:40.532692594 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}},"newText":"import Data.Maybe ( fromMaybe )"}]}}],"title":"import Data.Maybe ( fromMaybe )"},"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}},"newText":"import Cardano.Api.Address\n    ( AsType,\n      StakeExtendedKey,\n      StakeKey,\n      Address(ByronAddress),\n      ByronAddr )"}]}}],"title":"import Cardano.Api.Address\n    ( AsType,\n      StakeExtendedKey,\n      StakeKey,\n      Address(ByronAddress),\n      ByronAddr )"},"range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}},"newText":"import Cardano.Api.Certificate ( AsType(AsShelleyEra, AsByronEra) )"}]}}],"title":"import Cardano.Api.Certificate ( AsType(AsShelleyEra, AsByronEra) )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Eras\n    ( ByronEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( ByronEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}},"newText":"import Cardano.Api.Key\n    ( CastVerificationKeyRole(castVerificationKey),\n      Key(getVerificationKey, SigningKey, VerificationKey) )"}]}}],"title":"import Cardano.Api.Key\n    ( CastVerificationKeyRole(castVerificationKey),\n      Key(getVerificationKey, SigningKey, VerificationKey) )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}},"newText":"import Cardano.Api.KeysByron\n    ( SigningKey(PaymentExtendedSigningKey, ByronSigningKey,\n                 StakeSigningKey, StakePoolSigningKey, GenesisSigningKey,\n                 GenesisUTxOSigningKey, GenesisDelegateSigningKey,\n                 StakeExtendedSigningKey, GenesisExtendedSigningKey,\n                 GenesisDelegateExtendedSigningKey, PaymentSigningKey),\n      VerificationKey(PaymentVerificationKey),\n      ByronKey )"}]}}],"title":"import Cardano.Api.KeysByron\n    ( SigningKey(PaymentExtendedSigningKey, ByronSigningKey,\n                 StakeSigningKey, StakePoolSigningKey, GenesisSigningKey,\n                 GenesisUTxOSigningKey, GenesisDelegateSigningKey,\n                 StakeExtendedSigningKey, GenesisExtendedSigningKey,\n                 GenesisDelegateExtendedSigningKey, PaymentSigningKey),\n      VerificationKey(PaymentVerificationKey),\n      ByronKey )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( GenesisDelegateExtendedKey,\n      GenesisDelegateKey,\n      GenesisExtendedKey,\n      GenesisKey,\n      GenesisUTxOKey,\n      PaymentExtendedKey,\n      PaymentKey,\n      StakePoolKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( GenesisDelegateExtendedKey,\n      GenesisDelegateKey,\n      GenesisExtendedKey,\n      GenesisKey,\n      GenesisUTxOKey,\n      PaymentExtendedKey,\n      PaymentKey,\n      StakePoolKey )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}},"newText":"import Cardano.Api.NetworkId\n    ( toByronNetworkMagic, toByronProtocolMagicId, NetworkId )"}]}}],"title":"import Cardano.Api.NetworkId\n    ( toByronNetworkMagic, toByronProtocolMagicId, NetworkId )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}},"newText":"import Cardano.Api.Script\n    ( eraOfScriptInEra, toShelleyScript, ScriptInEra )"}]}}],"title":"import Cardano.Api.Script\n    ( eraOfScriptInEra, toShelleyScript, ScriptInEra )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}},"newText":"import Cardano.Api.TxBody ( TxBody(..) )"}]}}],"title":"import Cardano.Api.TxBody ( TxBody(..) )"},"range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}}}],"jsonrpc":"2.0","id":211}
2020-12-03 13:35:40.541319281 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":212,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":790,"character":0},"end":{"line":790,"character":17}},"context":{"diagnostics":[]}}}
2020-12-03 13:35:40.541692738 [ThreadId 8092] - finish: CodeAction (took 0.00s)
2020-12-03 13:35:40.541758688 [ThreadId 8094] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:35:40.541923327 [ThreadId 8096] - finish: importLens (took 0.00s)
2020-12-03 13:35:40.542080561 [ThreadId 8098] - finish: retrie (took 0.00s)
2020-12-03 13:35:40.542274595 [ThreadId 8100] - finish: tactic (took 0.00s)
2020-12-03 13:35:40.542318596 [ThreadId 8102] - finish: tactic (took 0.00s)
2020-12-03 13:35:40.542381171 [ThreadId 8104] - finish: tactic (took 0.00s)
2020-12-03 13:35:40.542477922 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":212}
2020-12-03 13:35:40.559903023 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"87/91"},"token":"619"},"method":"$/progress"}
2020-12-03 13:35:43.485758825 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":213,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"position":{"line":779,"character":52}}}
2020-12-03 13:35:43.485891432 [ThreadId 8109] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:43.4859894 [ThreadId 8109] - Hover request at position 780:53 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:35:43.486227742 [ThreadId 8111] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:35:43.486368975 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nStandardCrypto :: *\n```\n\n*Defined in ‘Ouroboros.Consensus.Shelley.Protocol.Crypto’*\n\n\n\n"},"range":{"start":{"line":779,"character":42},"end":{"line":779,"character":56}}},"jsonrpc":"2.0","id":213}
2020-12-03 13:35:43.500894806 [ThreadId 8119] - finish: C:GetDocMap (took 0.01s)
2020-12-03 13:35:46.287564405 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":214,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:35:46.487646985 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":215,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"}}}
2020-12-03 13:35:46.487873943 [ThreadId 8127] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:35:46.499332302 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":216,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":805,"character":8},"end":{"line":805,"character":25}},"context":{"diagnostics":[]}}}
2020-12-03 13:35:46.499483462 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":214}}
2020-12-03 13:35:46.499602696 [ThreadId 8122] - CodeAction was cancelled
2020-12-03 13:35:46.499637275 [ThreadId 8120] - Cancelled request IdInt 214
2020-12-03 13:35:46.499707879 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":214}
2020-12-03 13:35:47.845055255 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":217,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":43}}}
2020-12-03 13:35:47.845285765 [ThreadId 8138] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:47.845390184 [ThreadId 8138] - Hover request at position 806:44 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:48.479506494 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":218,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":43}}}
2020-12-03 13:35:48.479668725 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":217}}
2020-12-03 13:35:48.47977668 [ThreadId 8138] - C:GetHieAst was cancelled
2020-12-03 13:35:48.479835453 [ThreadId 8136] - Cancelled request IdInt 217
2020-12-03 13:35:48.479780565 [ThreadId 8143] - DocumentHighlight request at position 806:44 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:48.479974788 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":217}
2020-12-03 13:35:48.924542916 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":219,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":805,"character":30},"end":{"line":805,"character":58}},"context":{"diagnostics":[]}}}
2020-12-03 13:35:48.924673038 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":216}}
2020-12-03 13:35:48.924765012 [ThreadId 8132] - CodeAction was cancelled
2020-12-03 13:35:48.924822555 [ThreadId 8130] - Cancelled request IdInt 216
2020-12-03 13:35:48.924925289 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":216}
2020-12-03 13:35:50.11819631 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":220,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":25}}}
2020-12-03 13:35:50.118421968 [ThreadId 8155] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:50.11853432 [ThreadId 8155] - Hover request at position 806:26 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:50.173054672 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":220}}
2020-12-03 13:35:50.17326493 [ThreadId 8155] - C:GetHieAst was cancelled
2020-12-03 13:35:50.173309804 [ThreadId 8153] - Cancelled request IdInt 220
2020-12-03 13:35:50.17354066 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":220}
2020-12-03 13:35:50.456715884 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":221,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":23}}}
2020-12-03 13:35:50.456928841 [ThreadId 8161] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:50.457007383 [ThreadId 8161] - Hover request at position 806:24 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:50.600707943 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":221}}
2020-12-03 13:35:50.600953366 [ThreadId 8161] - C:GetHieAst was cancelled
2020-12-03 13:35:50.601056045 [ThreadId 8159] - Cancelled request IdInt 221
2020-12-03 13:35:50.60118082 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":221}
2020-12-03 13:35:50.852255131 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":222,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":19}}}
2020-12-03 13:35:50.852394151 [ThreadId 8167] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:50.852515486 [ThreadId 8167] - Hover request at position 806:20 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:52.859597116 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":222}}
2020-12-03 13:35:52.859829646 [ThreadId 8167] - C:GetHieAst was cancelled
2020-12-03 13:35:52.859902597 [ThreadId 8165] - Cancelled request IdInt 222
2020-12-03 13:35:52.860029243 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":222}
2020-12-03 13:35:53.105653436 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":223,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":26}}}
2020-12-03 13:35:53.105894823 [ThreadId 8173] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:53.105994761 [ThreadId 8173] - Hover request at position 806:27 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:53.373200716 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":223}}
2020-12-03 13:35:53.373424148 [ThreadId 8173] - C:GetHieAst was cancelled
2020-12-03 13:35:53.373501847 [ThreadId 8171] - Cancelled request IdInt 223
2020-12-03 13:35:53.37364406 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":223}
2020-12-03 13:35:57.855275561 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":224,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":787,"character":45}}}
2020-12-03 13:35:57.855472243 [ThreadId 8179] - GhcIde.hover entered (ideLogger)
2020-12-03 13:35:57.855568131 [ThreadId 8179] - Hover request at position 788:46 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:35:57.988662673 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":224}}
2020-12-03 13:35:57.98894197 [ThreadId 8179] - C:GetHieAst was cancelled
2020-12-03 13:35:57.989003935 [ThreadId 8177] - Cancelled request IdInt 224
2020-12-03 13:35:57.989141616 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":224}
2020-12-03 13:36:06.290610868 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":225,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":807,"character":20}}}
2020-12-03 13:36:06.290748894 [ThreadId 8185] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:06.290864581 [ThreadId 8185] - Hover request at position 808:21 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:06.35819026 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":225}}
2020-12-03 13:36:06.358506951 [ThreadId 8185] - C:GetHieAst was cancelled
2020-12-03 13:36:06.35857142 [ThreadId 8183] - Cancelled request IdInt 225
2020-12-03 13:36:06.35867224 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":225}
2020-12-03 13:36:07.271112517 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":226,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":39}}}
2020-12-03 13:36:07.271335147 [ThreadId 8191] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:07.271461341 [ThreadId 8191] - Hover request at position 806:40 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:13.14181459 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":226}}
2020-12-03 13:36:13.142032564 [ThreadId 8191] - C:GetHieAst was cancelled
2020-12-03 13:36:13.142102741 [ThreadId 8189] - Cancelled request IdInt 226
2020-12-03 13:36:13.142222812 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":226}
2020-12-03 13:36:13.911312003 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":227,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":805,"character":18}}}
2020-12-03 13:36:13.911482174 [ThreadId 8197] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:13.911556972 [ThreadId 8197] - Hover request at position 806:19 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:13.967992116 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":227}}
2020-12-03 13:36:13.968216383 [ThreadId 8197] - C:GetHieAst was cancelled
2020-12-03 13:36:13.968288199 [ThreadId 8195] - Cancelled request IdInt 227
2020-12-03 13:36:13.968401936 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":227}
2020-12-03 13:36:14.872312317 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":228,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":804,"character":33}}}
2020-12-03 13:36:14.87248685 [ThreadId 8203] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:14.872564526 [ThreadId 8203] - Hover request at position 805:34 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:15.204137438 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":228}}
2020-12-03 13:36:15.204309645 [ThreadId 8203] - C:GetHieAst was cancelled
2020-12-03 13:36:15.204380636 [ThreadId 8201] - Cancelled request IdInt 228
2020-12-03 13:36:15.204504116 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":228}
2020-12-03 13:36:15.454049804 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":229,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":803,"character":33}}}
2020-12-03 13:36:15.454178349 [ThreadId 8209] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:15.454280422 [ThreadId 8209] - Hover request at position 804:34 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:15.563904696 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":229}}
2020-12-03 13:36:15.564169075 [ThreadId 8209] - C:GetHieAst was cancelled
2020-12-03 13:36:15.564230059 [ThreadId 8207] - Cancelled request IdInt 229
2020-12-03 13:36:15.564346449 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":229}
2020-12-03 13:36:18.648614304 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":230,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":792,"character":38}}}
2020-12-03 13:36:18.648752842 [ThreadId 8217] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:18.648863004 [ThreadId 8217] - Hover request at position 793:39 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:18.926485222 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":230}}
2020-12-03 13:36:18.926775812 [ThreadId 8217] - C:GetHieAst was cancelled
2020-12-03 13:36:18.926837265 [ThreadId 8215] - Cancelled request IdInt 230
2020-12-03 13:36:18.926934639 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":230}
2020-12-03 13:36:19.509588547 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":218}}
2020-12-03 13:36:19.509807875 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":231,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":786,"character":53}}}
2020-12-03 13:36:19.509876764 [ThreadId 8143] - C:GetHieAst was cancelled
2020-12-03 13:36:19.509933071 [ThreadId 8141] - Cancelled request IdInt 218
2020-12-03 13:36:19.510004394 [ThreadId 8224] - DocumentHighlight request at position 787:54 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:19.510047449 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":218}
2020-12-03 13:36:19.757552572 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":232,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":786,"character":53},"end":{"line":786,"character":53}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:19.757674678 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":219}}
2020-12-03 13:36:19.757794952 [ThreadId 8149] - CodeAction was cancelled
2020-12-03 13:36:19.757859744 [ThreadId 8147] - Cancelled request IdInt 219
2020-12-03 13:36:19.75797493 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":219}
2020-12-03 13:36:19.991609585 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":197}}
2020-12-03 13:36:19.991797613 [ThreadId 7493] - C:GetHieAst was cancelled
2020-12-03 13:36:19.991804216 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":233,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":786,"character":53}}}
2020-12-03 13:36:19.991850452 [ThreadId 7491] - Cancelled request IdInt 197
2020-12-03 13:36:19.991944105 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":197}
2020-12-03 13:36:19.991965017 [ThreadId 8236] - Definition request at position 787:54 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:26.551098535 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 13:36:26.551272702 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}
2020-12-03 13:36:26.551443176 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",Modified)]
2020-12-03 13:36:26.551700023 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:36:26.555956765 [ThreadId 8391] - Typechecking reverse dependencies forNormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs": [NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs"]
2020-12-03 13:36:26.563260169 [ThreadId 8465] - finish: ParentTC (took 0.01s)
2020-12-03 13:36:26.607021784 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Cardano.CLI.Shelley.Parsers\n  ( -- * CLI command parser\n    parseShelleyCommands\n\n    -- * CLI command and flag types\n  , module Cardano.CLI.Shelley.Commands\n\n    -- * Field parser and renderers\n  , parseTxIn\n  , renderTxIn\n  ) where\n\nimport           Cardano.Prelude hiding (All, Any, option)\nimport           Prelude (String)\n\nimport           Cardano.Api.Protocol (Protocol (..))\nimport           Cardano.Api.Typed hiding (PoolId)\n\nimport           Cardano.Chain.Slotting (EpochSlots (..))\nimport           Cardano.CLI.Mary.TxOutParser (parseTxOutAnyEra)\nimport           Cardano.CLI.Mary.ValueParser (parseValue)\nimport           Cardano.CLI.Shelley.Commands\nimport           Cardano.CLI.Shelley.Key (InputFormat (..), VerificationKeyOrFile (..),\n                     VerificationKeyOrHashOrFile (..), VerificationKeyTextOrFile (..),\n                     deserialiseInput, renderInputDecodeError)\nimport           Cardano.CLI.Types\nimport           Control.Monad.Fail (fail)\nimport           Data.Attoparsec.Combinator ((<?>))\nimport           Data.Time.Clock (UTCTime)\nimport           Data.Time.Format (defaultTimeLocale, iso8601DateFormat, parseTimeOrError)\nimport           Network.Socket (PortNumber)\nimport           Options.Applicative hiding (str)\nimport           Ouroboros.Consensus.BlockchainTime (SystemStart (..))\n\nimport qualified Data.ByteString.Char8 as BSC\nimport qualified Data.Char as Char\nimport qualified Data.IP as IP\nimport qualified Data.List.NonEmpty as NE\nimport qualified Data.Set as Set\nimport qualified Data.Text as Text\nimport qualified Data.Text.Encoding as Text\n\nimport qualified Options.Applicative as Opt\nimport qualified Data.Attoparsec.ByteString.Char8 as Atto\nimport qualified Text.Parsec as Parsec\nimport qualified Text.Parsec.String as Parsec\nimport qualified Text.Parsec.Error  as Parsec\n\nimport qualified Shelley.Spec.Ledger.BaseTypes as Shelley\nimport qualified Shelley.Spec.Ledger.TxBody as Shelley\n\n--\n-- Shelley CLI command parsers\n--\n\nparseShelleyCommands :: Parser ShelleyCommand\nparseShelleyCommands =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"address\"\n          (Opt.info (AddressCmd <$> pAddressCmd) $ Opt.progDesc \"Shelley payment address commands\")\n      , Opt.command \"stake-address\"\n          (Opt.info (StakeAddressCmd <$> pStakeAddress) $ Opt.progDesc \"Shelley stake address commands\")\n      , Opt.command \"key\"\n          (Opt.info (KeyCmd <$> pKeyCmd) $ Opt.progDesc \"Shelley key utility commands\")\n      , Opt.command \"transaction\"\n          (Opt.info (TransactionCmd <$> pTransaction) $ Opt.progDesc \"Shelley transaction commands\")\n      , Opt.command \"node\"\n          (Opt.info (NodeCmd <$> pNodeCmd) $ Opt.progDesc \"Shelley node operaton commands\")\n      , Opt.command \"stake-pool\"\n          (Opt.info (PoolCmd <$> pPoolCmd) $ Opt.progDesc \"Shelley stake pool commands\")\n      , Opt.command \"query\"\n          (Opt.info (QueryCmd <$> pQueryCmd) . Opt.progDesc $\n             mconcat\n               [ \"Shelley node query commands. Will query the local node whose Unix domain socket \"\n               , \"is obtained from the CARDANO_NODE_SOCKET_PATH enviromnent variable.\"\n               ]\n            )\n      , Opt.command \"genesis\"\n          (Opt.info (GenesisCmd <$> pGenesisCmd) $ Opt.progDesc \"Shelley genesis block commands\")\n      , Opt.command \"governance\"\n          (Opt.info (GovernanceCmd <$> pGovernanceCmd) $ Opt.progDesc \"Shelley governance commands\")\n      , Opt.command \"text-view\"\n          (Opt.info (TextViewCmd <$> pTextViewCmd) . Opt.progDesc $\n             mconcat\n               [ \"Commands for dealing with Shelley TextView files. \"\n               , \"Transactions, addresses etc are stored on disk as TextView files.\"\n               ]\n            )\n\n      ]\n\npTextViewCmd :: Parser TextViewCmd\npTextViewCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"decode-cbor\"\n          (Opt.info (TextViewInfo <$> pCBORInFile <*> pMaybeOutputFile)\n            $ Opt.progDesc \"Print a TextView file as decoded CBOR.\"\n            )\n      ]\n\npCBORInFile :: Parser FilePath\npCBORInFile =\n  Opt.strOption\n    (  Opt.long \"in-file\"\n    <> Opt.metavar \"FILE\"\n    <> Opt.help \"CBOR input file.\"\n    <> Opt.completer (Opt.bashCompleter \"file\")\n    )\n  <|>\n  Opt.strOption\n    (  Opt.long \"file\"\n    <> Opt.internal\n    )\n\npAddressCmd :: Parser AddressCmd\npAddressCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen\"\n          (Opt.info pAddressKeyGen $ Opt.progDesc \"Create an address key pair.\")\n      , Opt.command \"key-hash\"\n          (Opt.info pAddressKeyHash $ Opt.progDesc \"Print the hash of an address key.\")\n      , Opt.command \"build\"\n          (Opt.info pAddressBuild $ Opt.progDesc \"Build a Shelley payment address, with optional delegation to a stake address.\")\n      , Opt.command \"build-script\"\n          (Opt.info pAddressBuildScript $ Opt.progDesc \"Build a Shelley script address.\")\n      , Opt.command \"info\"\n          (Opt.info pAddressInfo $ Opt.progDesc \"Print information about an address.\")\n      ]\n  where\n    pAddressKeyGen :: Parser AddressCmd\n    pAddressKeyGen = AddressKeyGen <$> pAddressKeyType\n                                   <*> pVerificationKeyFile Output\n                                   <*> pSigningKeyFile Output\n\n    pAddressKeyHash :: Parser AddressCmd\n    pAddressKeyHash =\n      AddressKeyHash\n        <$> pPaymentVerificationKeyTextOrFile\n        <*> pMaybeOutputFile\n\n    pAddressBuild :: Parser AddressCmd\n    pAddressBuild =\n      AddressBuild\n        <$> pPaymentVerificationKeyTextOrFile\n        <*> Opt.optional pStakeVerificationKeyOrFile\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pAddressBuildScript :: Parser AddressCmd\n    pAddressBuildScript = AddressBuildMultiSig\n                            <$> pScript\n                            <*> pNetworkId\n                            <*> pMaybeOutputFile\n\n    pAddressInfo :: Parser AddressCmd\n    pAddressInfo = AddressInfo <$> pAddress <*> pMaybeOutputFile\n\npPaymentVerificationKeyTextOrFile :: Parser VerificationKeyTextOrFile\npPaymentVerificationKeyTextOrFile =\n  VktofVerificationKeyText <$> pPaymentVerificationKeyText\n    <|> VktofVerificationKeyFile <$> pPaymentVerificationKeyFile\n\npPaymentVerificationKeyText :: Parser Text\npPaymentVerificationKeyText =\n  Text.pack <$>\n    Opt.strOption\n      (  Opt.long \"payment-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Payment verification key (Bech32-encoded)\"\n      )\n\npPaymentVerificationKeyFile :: Parser VerificationKeyFile\npPaymentVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"payment-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the payment verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npScript :: Parser ScriptFile\npScript = ScriptFile <$> Opt.strOption\n  (  Opt.long \"script-file\"\n  <> Opt.metavar \"FILE\"\n  <> Opt.help \"Filepath of the script.\"\n  <> Opt.completer (Opt.bashCompleter \"file\")\n  )\n\npStakeAddress :: Parser StakeAddressCmd\npStakeAddress =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen\"\n          (Opt.info pStakeAddressKeyGen $ Opt.progDesc \"Create a stake address key pair\")\n      , Opt.command \"build\"\n          (Opt.info pStakeAddressBuild $ Opt.progDesc \"Build a stake address\")\n      , Opt.command \"key-hash\"\n          (Opt.info pStakeAddressKeyHash $ Opt.progDesc \"Print the hash of a stake address key.\")\n      , Opt.command \"registration-certificate\"\n          (Opt.info pStakeAddressRegistrationCert $ Opt.progDesc \"Create a stake address registration certificate\")\n      , Opt.command \"deregistration-certificate\"\n          (Opt.info pStakeAddressDeregistrationCert $ Opt.progDesc \"Create a stake address deregistration certificate\")\n      , Opt.command \"delegation-certificate\"\n          (Opt.info pStakeAddressDelegationCert $ Opt.progDesc \"Create a stake address delegation certificate\")\n      ]\n  where\n    pStakeAddressKeyGen :: Parser StakeAddressCmd\n    pStakeAddressKeyGen = StakeAddressKeyGen\n                            <$> pVerificationKeyFile Output\n                            <*> pSigningKeyFile Output\n\n    pStakeAddressKeyHash :: Parser StakeAddressCmd\n    pStakeAddressKeyHash = StakeAddressKeyHash <$> pStakeVerificationKeyOrFile <*> pMaybeOutputFile\n\n    pStakeAddressBuild :: Parser StakeAddressCmd\n    pStakeAddressBuild = StakeAddressBuild <$> pStakeVerificationKeyOrFile\n                                           <*> pNetworkId\n                                           <*> pMaybeOutputFile\n\n    pStakeAddressRegistrationCert :: Parser StakeAddressCmd\n    pStakeAddressRegistrationCert = StakeKeyRegistrationCert\n                                      <$> pStakeVerificationKeyOrFile\n                                      <*> pOutputFile\n\n    pStakeAddressDeregistrationCert :: Parser StakeAddressCmd\n    pStakeAddressDeregistrationCert = StakeKeyDeRegistrationCert\n                                        <$> pStakeVerificationKeyOrFile\n                                        <*> pOutputFile\n\n    pStakeAddressDelegationCert :: Parser StakeAddressCmd\n    pStakeAddressDelegationCert = StakeKeyDelegationCert\n                                    <$> pStakeVerificationKeyOrFile\n                                    <*> pStakePoolVerificationKeyOrHashOrFile\n                                    <*> pOutputFile\n\npKeyCmd :: Parser KeyCmd\npKeyCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"verification-key\" $\n          Opt.info pKeyGetVerificationKey $\n            Opt.progDesc $ \"Get a verification key from a signing key. This \"\n                        ++ \" supports all key types.\"\n\n      , Opt.command \"non-extended-key\" $\n          Opt.info pKeyNonExtendedKey $\n            Opt.progDesc $ \"Get a non-extended verification key from an \"\n                        ++ \"extended verification key. This supports all \"\n                        ++ \"extended key types.\"\n\n      , Opt.command \"convert-byron-key\" $\n          Opt.info pKeyConvertByronKey $\n            Opt.progDesc $ \"Convert a Byron payment, genesis or genesis \"\n                        ++ \"delegate key (signing or verification) to a \"\n                        ++ \"corresponding Shelley-format key.\"\n\n      , Opt.command \"convert-byron-genesis-vkey\" $\n          Opt.info pKeyConvertByronGenesisVKey $\n            Opt.progDesc $ \"Convert a Base64-encoded Byron genesis \"\n                        ++ \"verification key to a Shelley genesis \"\n                        ++ \"verification key\"\n\n      , Opt.command \"convert-itn-key\" $\n          Opt.info pKeyConvertITNKey $\n            Opt.progDesc $ \"Convert an Incentivized Testnet (ITN) non-extended \"\n                        ++ \"(Ed25519) signing or verification key to a \"\n                        ++ \"corresponding Shelley stake key\"\n      , Opt.command \"convert-itn-extended-key\" $\n          Opt.info pKeyConvertITNExtendedKey $\n            Opt.progDesc $ \"Convert an Incentivized Testnet (ITN) extended \"\n                        ++ \"(Ed25519Extended) signing key to a corresponding \"\n                        ++ \"Shelley stake signing key\"\n      , Opt.command \"convert-itn-bip32-key\" $\n          Opt.info pKeyConvertITNBip32Key $\n            Opt.progDesc $ \"Convert an Incentivized Testnet (ITN) BIP32 \"\n                        ++ \"(Ed25519Bip32) signing key to a corresponding \"\n                        ++ \"Shelley stake signing key\"\n\n      , Opt.command \"convert-cardano-address-key\" $\n          Opt.info pKeyConvertCardanoAddressSigningKey $\n            Opt.progDesc $ \"Convert a cardano-address extended signing key \"\n                        ++ \"to a corresponding Shelley-format key.\"\n      ]\n  where\n    pKeyGetVerificationKey :: Parser KeyCmd\n    pKeyGetVerificationKey =\n      KeyGetVerificationKey\n        <$> pSigningKeyFile      Input\n        <*> pVerificationKeyFile Output\n\n    pKeyNonExtendedKey :: Parser KeyCmd\n    pKeyNonExtendedKey =\n      KeyNonExtendedKey\n        <$> pExtendedVerificationKeyFile Input\n        <*> pVerificationKeyFile Output\n\n    pKeyConvertByronKey :: Parser KeyCmd\n    pKeyConvertByronKey =\n      KeyConvertByronKey\n        <$> optional pPassword\n        <*> pByronKeyType\n        <*> pByronKeyFile\n        <*> pOutputFile\n\n    pPassword :: Parser Text\n    pPassword = Opt.strOption\n                  (  Opt.long \"password\"\n                  <> Opt.metavar \"TEXT\"\n                  <> Opt.help \"Password for signing key (if applicable).\"\n                  )\n\n    pByronKeyType :: Parser ByronKeyType\n    pByronKeyType =\n          Opt.flag' (ByronPaymentKey NonLegacyByronKeyFormat)\n            (  Opt.long \"byron-payment-key-type\"\n            <> Opt.help \"Use a Byron-era payment key.\"\n            )\n      <|> Opt.flag' (ByronPaymentKey LegacyByronKeyFormat)\n            (  Opt.long \"legacy-byron-payment-key-type\"\n            <> Opt.help \"Use a Byron-era payment key, in legacy SL format.\"\n            )\n      <|> Opt.flag' (ByronGenesisKey NonLegacyByronKeyFormat)\n            (  Opt.long \"byron-genesis-key-type\"\n            <> Opt.help \"Use a Byron-era genesis key.\"\n            )\n      <|> Opt.flag' (ByronGenesisKey LegacyByronKeyFormat)\n            (  Opt.long \"legacy-byron-genesis-key-type\"\n            <> Opt.help \"Use a Byron-era genesis key, in legacy SL format.\"\n            )\n      <|> Opt.flag' (ByronDelegateKey NonLegacyByronKeyFormat)\n            (  Opt.long \"byron-genesis-delegate-key-type\"\n            <> Opt.help \"Use a Byron-era genesis delegate key.\"\n            )\n      <|> Opt.flag' (ByronDelegateKey LegacyByronKeyFormat)\n            (  Opt.long \"legacy-byron-genesis-delegate-key-type\"\n            <> Opt.help \"Use a Byron-era genesis delegate key, in legacy SL format.\"\n            )\n\n    pByronKeyFile :: Parser SomeKeyFile\n    pByronKeyFile =\n          (ASigningKeyFile      <$> pByronSigningKeyFile)\n      <|> (AVerificationKeyFile <$> pByronVerificationKeyFile)\n\n    pByronSigningKeyFile :: Parser SigningKeyFile\n    pByronSigningKeyFile =\n      SigningKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"byron-signing-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Input filepath of the Byron-format signing key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pByronVerificationKeyFile :: Parser VerificationKeyFile\n    pByronVerificationKeyFile =\n      VerificationKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"byron-verification-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Input filepath of the Byron-format verification key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pKeyConvertByronGenesisVKey :: Parser KeyCmd\n    pKeyConvertByronGenesisVKey =\n      KeyConvertByronGenesisVKey\n        <$> pByronGenesisVKeyBase64\n        <*> pOutputFile\n\n    pByronGenesisVKeyBase64 :: Parser VerificationKeyBase64\n    pByronGenesisVKeyBase64 =\n      VerificationKeyBase64 <$>\n        Opt.strOption\n          (  Opt.long \"byron-genesis-verification-key\"\n          <> Opt.metavar \"BASE64\"\n          <> Opt.help \"Base64 string for the Byron genesis verification key.\"\n          )\n\n    pKeyConvertITNKey :: Parser KeyCmd\n    pKeyConvertITNKey =\n      KeyConvertITNStakeKey\n        <$> pITNKeyFIle\n        <*> pOutputFile\n\n    pKeyConvertITNExtendedKey :: Parser KeyCmd\n    pKeyConvertITNExtendedKey =\n      KeyConvertITNExtendedToStakeKey\n        <$> pITNSigningKeyFile\n        <*> pOutputFile\n\n    pKeyConvertITNBip32Key :: Parser KeyCmd\n    pKeyConvertITNBip32Key =\n      KeyConvertITNBip32ToStakeKey\n        <$> pITNSigningKeyFile\n        <*> pOutputFile\n\n    pITNKeyFIle :: Parser SomeKeyFile\n    pITNKeyFIle = pITNSigningKeyFile\n              <|> pITNVerificationKeyFile\n\n    pITNSigningKeyFile :: Parser SomeKeyFile\n    pITNSigningKeyFile =\n      ASigningKeyFile . SigningKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"itn-signing-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Filepath of the ITN signing key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pITNVerificationKeyFile :: Parser SomeKeyFile\n    pITNVerificationKeyFile =\n      AVerificationKeyFile . VerificationKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"itn-verification-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Filepath of the ITN verification key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pKeyConvertCardanoAddressSigningKey :: Parser KeyCmd\n    pKeyConvertCardanoAddressSigningKey =\n      KeyConvertCardanoAddressSigningKey\n        <$> pCardanoAddressKeyType\n        <*> pSigningKeyFile Input\n        <*> pOutputFile\n\n    pCardanoAddressKeyType :: Parser CardanoAddressKeyType\n    pCardanoAddressKeyType =\n          Opt.flag' CardanoAddressShelleyPaymentKey\n            (  Opt.long \"shelley-payment-key\"\n            <> Opt.help \"Use a Shelley-era extended payment key.\"\n            )\n      <|> Opt.flag' CardanoAddressShelleyStakeKey\n            (  Opt.long \"shelley-stake-key\"\n            <> Opt.help \"Use a Shelley-era extended stake key.\"\n            )\n      <|> Opt.flag' CardanoAddressIcarusPaymentKey\n            (  Opt.long \"icarus-payment-key\"\n            <> Opt.help \"Use a Byron-era extended payment key formatted in the Icarus style.\"\n            )\n      <|> Opt.flag' CardanoAddressByronPaymentKey\n            (  Opt.long \"byron-payment-key\"\n            <> Opt.help \"Use a Byron-era extended payment key formatted in the deprecated Byron style.\"\n            )\n\npTransaction :: Parser TransactionCmd\npTransaction =\n  asum\n    [ subParser \"build-raw\"\n        (Opt.info pTransactionBuild $ Opt.progDesc \"Build a transaction (low-level, inconvenient)\")\n    , subParser \"sign\"\n        (Opt.info pTransactionSign $ Opt.progDesc \"Sign a transaction\")\n    , subParser \"witness\"\n        (Opt.info pTransactionCreateWitness $ Opt.progDesc \"Create a transaction witness\")\n    , subParser \"assemble\"\n        (Opt.info pTransactionAssembleTxBodyWit\n          $ Opt.progDesc \"Assemble a tx body and witness(es) to form a transaction\")\n    , pSignWitnessBackwardCompatible\n    , subParser \"submit\"\n        (Opt.info pTransactionSubmit . Opt.progDesc $\n           mconcat\n             [ \"Submit a transaction to the local node whose Unix domain socket \"\n             , \"is obtained from the CARDANO_NODE_SOCKET_PATH enviromnent variable.\"\n             ]\n          )\n    , subParser \"policyid\"\n        (Opt.info pTransactionPolicyId $ Opt.progDesc \"Calculate the PolicyId from the monetary policy script.\")\n    , subParser \"calculate-min-fee\"\n        (Opt.info pTransactionCalculateMinFee $ Opt.progDesc \"Calculate the minimum fee for a transaction\")\n    , subParser \"txid\"\n        (Opt.info pTransactionId $ Opt.progDesc \"Print a transaction identifier\")\n    ]\n where\n  subParser :: String -> ParserInfo TransactionCmd -> Parser TransactionCmd\n  subParser name pInfo = Opt.subparser $ Opt.command name pInfo\n\n  assembleInfo :: ParserInfo TransactionCmd\n  assembleInfo =\n    Opt.info pTransactionAssembleTxBodyWit\n      $ Opt.progDesc \"Assemble a tx body and witness(es) to form a transaction\"\n\n  pSignWitnessBackwardCompatible :: Parser TransactionCmd\n  pSignWitnessBackwardCompatible =\n    Opt.subparser\n      $ Opt.command \"sign-witness\" assembleInfo <> Opt.internal\n\n  pTransactionBuild :: Parser TransactionCmd\n  pTransactionBuild = TxBuildRaw <$> pCardanoEra\n                                 <*> some pTxIn\n                                 <*> some pTxOut\n                                 <*> optional pMintMultiAsset\n                                 <*> optional pTxLowerBound\n                                 <*> optional pTxUpperBound\n                                 <*> optional pTxFee\n                                 <*> many pCertificateFile\n                                 <*> many pWithdrawal\n                                 <*> pTxMetadataJsonSchema\n                                 <*> many pScript\n                                 <*> many pMetaDataFile\n                                 <*> optional pUpdateProposalFile\n                                 <*> pTxBodyFile Output\n\n  pTransactionSign  :: Parser TransactionCmd\n  pTransactionSign = TxSign <$> pTxBodyFile Input\n                            <*> pSomeWitnessSigningData\n                            <*> optional pNetworkId\n                            <*> pTxFile Output\n\n  pTransactionCreateWitness :: Parser TransactionCmd\n  pTransactionCreateWitness = TxCreateWitness\n                                <$> pTxBodyFile Input\n                                <*> pWitnessSigningData\n                                <*> optional pNetworkId\n                                <*> pOutputFile\n\n  pTransactionAssembleTxBodyWit :: Parser TransactionCmd\n  pTransactionAssembleTxBodyWit = TxAssembleTxBodyWitness\n                                    <$> pTxBodyFile Input\n                                    <*> some pWitnessFile\n                                    <*> pOutputFile\n\n  pTransactionSubmit :: Parser TransactionCmd\n  pTransactionSubmit = TxSubmit <$> pProtocol\n                                <*> pNetworkId\n                                <*> pTxSubmitFile\n\n  pTransactionPolicyId :: Parser TransactionCmd\n  pTransactionPolicyId = TxMintedPolicyId <$> pScript\n\n  pTransactionCalculateMinFee :: Parser TransactionCmd\n  pTransactionCalculateMinFee =\n    TxCalculateMinFee\n      <$> pTxBodyFile Input\n      <*> optional pNetworkId\n      <*> pProtocolParamsFile\n      <*> pTxInCount\n      <*> pTxOutCount\n      <*> pTxShelleyWitnessCount\n      <*> pTxByronWitnessCount\n\n  pTransactionId  :: Parser TransactionCmd\n  pTransactionId = TxGetTxId <$> pTxBodyFile Input\n\n\npNodeCmd :: Parser NodeCmd\npNodeCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen\"\n          (Opt.info pKeyGenOperator $\n             Opt.progDesc \"Create a key pair for a node operator's offline \\\n                         \\ key and a new certificate issue counter\")\n      , Opt.command \"key-gen-KES\"\n          (Opt.info pKeyGenKES $\n             Opt.progDesc \"Create a key pair for a node KES operational key\")\n      , Opt.command \"key-gen-VRF\"\n          (Opt.info pKeyGenVRF $\n             Opt.progDesc \"Create a key pair for a node VRF operational key\")\n      , Opt.command \"key-hash-VRF\"\n          (Opt.info pKeyHashVRF $\n             Opt.progDesc \"Print hash of a node's operational VRF key.\")\n      , Opt.command \"new-counter\"\n          (Opt.info pNewCounter $\n             Opt.progDesc \"Create a new certificate issue counter\")\n      , Opt.command \"issue-op-cert\"\n          (Opt.info pIssueOpCert $\n             Opt.progDesc \"Issue a node operational certificate\")\n      ]\n  where\n    pKeyGenOperator :: Parser NodeCmd\n    pKeyGenOperator =\n      NodeKeyGenCold <$> pColdVerificationKeyFile\n                     <*> pColdSigningKeyFile\n                     <*> pOperatorCertIssueCounterFile\n\n    pKeyGenKES :: Parser NodeCmd\n    pKeyGenKES =\n      NodeKeyGenKES <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pKeyGenVRF :: Parser NodeCmd\n    pKeyGenVRF =\n      NodeKeyGenVRF <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pKeyHashVRF :: Parser NodeCmd\n    pKeyHashVRF =\n      NodeKeyHashVRF <$> pVerificationKeyOrFile AsVrfKey <*> pMaybeOutputFile\n\n    pNewCounter :: Parser NodeCmd\n    pNewCounter =\n      NodeNewCounter <$> pColdVerificationKeyOrFile\n                     <*> pCounterValue\n                     <*> pOperatorCertIssueCounterFile\n\n    pCounterValue :: Parser Word\n    pCounterValue =\n        Opt.option Opt.auto\n          (  Opt.long \"counter-value\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The next certificate issue counter value to use.\"\n          )\n\n    pIssueOpCert :: Parser NodeCmd\n    pIssueOpCert =\n      NodeIssueOpCert <$> pKesVerificationKeyOrFile\n                      <*> pColdSigningKeyFile\n                      <*> pOperatorCertIssueCounterFile\n                      <*> pKesPeriod\n                      <*> pOutputFile\n\n\npPoolCmd :: Parser PoolCmd\npPoolCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"registration-certificate\"\n          (Opt.info pStakePoolRegistrationCert $ Opt.progDesc \"Create a stake pool registration certificate\")\n      , Opt.command \"deregistration-certificate\"\n          (Opt.info pStakePoolRetirementCert $ Opt.progDesc \"Create a stake pool deregistration certificate\")\n      , Opt.command \"id\"\n          (Opt.info pId $\n             Opt.progDesc \"Build pool id from the offline key\")\n      , Opt.command \"metadata-hash\"\n          (Opt.info pPoolMetaDataHashSubCmd $ Opt.progDesc \"Print the hash of pool metadata.\")\n      ]\n  where\n    pId :: Parser PoolCmd\n    pId = PoolGetId <$> pStakePoolVerificationKeyOrFile <*> pOutputFormat\n\n    pPoolMetaDataHashSubCmd :: Parser PoolCmd\n    pPoolMetaDataHashSubCmd = PoolMetaDataHash <$> pPoolMetaDataFile <*> pMaybeOutputFile\n\n\npQueryCmd :: Parser QueryCmd\npQueryCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"protocol-parameters\"\n          (Opt.info pQueryProtocolParameters $ Opt.progDesc \"Get the node's current protocol parameters\")\n      , Opt.command \"tip\"\n          (Opt.info pQueryTip $ Opt.progDesc \"Get the node's current tip (slot no, hash, block no)\")\n      , Opt.command \"stake-distribution\"\n          (Opt.info pQueryStakeDistribution $ Opt.progDesc \"Get the node's current aggregated stake distribution\")\n      , Opt.command \"stake-address-info\"\n          (Opt.info pQueryStakeAddressInfo $ Opt.progDesc \"Get the current delegations and \\\n                                                          \\reward accounts filtered by stake \\\n                                                          \\address.\")\n      , Opt.command \"utxo\"\n          (Opt.info pQueryUTxO $ Opt.progDesc \"Get the node's current UTxO with the option of \\\n                                              \\filtering by address(es)\")\n      , Opt.command \"ledger-state\"\n          (Opt.info pQueryLedgerState $ Opt.progDesc \"Dump the current ledger state of the node (Ledger.NewEpochState -- advanced command)\")\n      , Opt.command \"protocol-state\"\n          (Opt.info pQueryProtocolState $ Opt.progDesc \"Dump the current protocol state of the node (Ledger.ChainDepState -- advanced command)\")\n      ]\n  where\n    pQueryProtocolParameters :: Parser QueryCmd\n    pQueryProtocolParameters =\n      QueryProtocolParameters\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryTip :: Parser QueryCmd\n    pQueryTip = QueryTip\n                  <$> pProtocol\n                  <*> pNetworkId\n                  <*> pMaybeOutputFile\n\n    pQueryUTxO :: Parser QueryCmd\n    pQueryUTxO =\n      QueryUTxO\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pQueryFilter\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryStakeDistribution :: Parser QueryCmd\n    pQueryStakeDistribution =\n      QueryStakeDistribution\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryStakeAddressInfo :: Parser QueryCmd\n    pQueryStakeAddressInfo =\n      QueryStakeAddressInfo\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pFilterByStakeAddress\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryLedgerState :: Parser QueryCmd\n    pQueryLedgerState = QueryLedgerState <$> pCardanoEra <*> pProtocol <*> pNetworkId <*> pMaybeOutputFile\n\n    pQueryProtocolState :: Parser QueryCmd\n    pQueryProtocolState = QueryProtocolState\n                            <$> pCardanoEra\n                            <*> pProtocol\n                            <*> pNetworkId\n                            <*> pMaybeOutputFile\n\npGovernanceCmd :: Parser GovernanceCmd\npGovernanceCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"create-mir-certificate\"\n          (Opt.info pMIRCertificate $\n            Opt.progDesc \"Create an MIR (Move Instantaneous Rewards) certificate\")\n      , Opt.command \"create-genesis-key-delegation-certificate\"\n          (Opt.info pGovernanceGenesisKeyDelegationCertificate $\n            Opt.progDesc \"Create a genesis key delegation certificate\")\n      , Opt.command \"create-update-proposal\"\n          (Opt.info pUpdateProposal $\n            Opt.progDesc \"Create an update proposal\")\n      ]\n  where\n    pMIRCertificate :: Parser GovernanceCmd\n    pMIRCertificate = GovernanceMIRCertificate\n                        <$> pMIRPot\n                        <*> some pStakeVerificationKeyFile\n                        <*> some pRewardAmt\n                        <*> pOutputFile\n\n    pGovernanceGenesisKeyDelegationCertificate :: Parser GovernanceCmd\n    pGovernanceGenesisKeyDelegationCertificate =\n      GovernanceGenesisKeyDelegationCertificate\n        <$> pGenesisVerificationKeyOrHashOrFile\n        <*> pGenesisDelegateVerificationKeyOrHashOrFile\n        <*> pVrfVerificationKeyOrHashOrFile\n        <*> pOutputFile\n\n    pMIRPot :: Parser Shelley.MIRPot\n    pMIRPot =\n          Opt.flag' Shelley.ReservesMIR\n            (  Opt.long \"reserves\"\n            <> Opt.help \"Use the reserves pot.\"\n            )\n      <|> Opt.flag' Shelley.TreasuryMIR\n            (  Opt.long \"treasury\"\n            <> Opt.help \"Use the treasury pot.\"\n            )\n\n    pUpdateProposal :: Parser GovernanceCmd\n    pUpdateProposal = GovernanceUpdateProposal\n                        <$> pOutputFile\n                        <*> pEpochNoUpdateProp\n                        <*> some pGenesisVerificationKeyFile\n                        <*> pShelleyProtocolParametersUpdate\n\npRewardAmt :: Parser Lovelace\npRewardAmt =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"reward\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The reward for the relevant reward account.\"\n      )\n\npGenesisCmd :: Parser GenesisCmd\npGenesisCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen-genesis\"\n          (Opt.info pGenesisKeyGen $\n             Opt.progDesc \"Create a Shelley genesis key pair\")\n      , Opt.command \"key-gen-delegate\"\n          (Opt.info pGenesisDelegateKeyGen $\n             Opt.progDesc \"Create a Shelley genesis delegate key pair\")\n      , Opt.command \"key-gen-utxo\"\n          (Opt.info pGenesisUTxOKeyGen $\n             Opt.progDesc \"Create a Shelley genesis UTxO key pair\")\n      , Opt.command \"key-hash\"\n          (Opt.info pGenesisKeyHash $\n             Opt.progDesc \"Print the identifier (hash) of a public key\")\n      , Opt.command \"get-ver-key\"\n          (Opt.info pGenesisVerKey $\n             Opt.progDesc \"Derive the verification key from a signing key\")\n      , Opt.command \"initial-addr\"\n          (Opt.info pGenesisAddr $\n             Opt.progDesc \"Get the address for an initial UTxO based on the verification key\")\n      , Opt.command \"initial-txin\"\n          (Opt.info pGenesisTxIn $\n             Opt.progDesc \"Get the TxIn for an initial UTxO based on the verification key\")\n      , Opt.command \"create\"\n          (Opt.info pGenesisCreate $\n             Opt.progDesc (\"Create a Shelley genesis file from a genesis \"\n                        ++ \"template and genesis/delegation/spending keys.\"))\n\n      , Opt.command \"create-staked\"\n          (Opt.info pGenesisCreateStaked $\n             Opt.progDesc (\"Create a staked Shelley genesis file from a genesis \"\n                        ++ \"template and genesis/delegation/spending keys.\"))\n\n      , Opt.command \"hash\"\n          (Opt.info pGenesisHash $\n             Opt.progDesc \"Compute the hash of a genesis file\")\n      ]\n  where\n    pGenesisKeyGen :: Parser GenesisCmd\n    pGenesisKeyGen =\n      GenesisKeyGenGenesis <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pGenesisDelegateKeyGen :: Parser GenesisCmd\n    pGenesisDelegateKeyGen =\n      GenesisKeyGenDelegate <$> pVerificationKeyFile Output\n                            <*> pSigningKeyFile Output\n                            <*> pOperatorCertIssueCounterFile\n\n    pGenesisUTxOKeyGen :: Parser GenesisCmd\n    pGenesisUTxOKeyGen =\n      GenesisKeyGenUTxO <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pGenesisKeyHash :: Parser GenesisCmd\n    pGenesisKeyHash =\n      GenesisCmdKeyHash <$> pVerificationKeyFile Input\n\n    pGenesisVerKey :: Parser GenesisCmd\n    pGenesisVerKey =\n      GenesisVerKey <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pGenesisAddr :: Parser GenesisCmd\n    pGenesisAddr =\n      GenesisAddr <$> pVerificationKeyFile Input <*> pNetworkId <*> pMaybeOutputFile\n\n    pGenesisTxIn :: Parser GenesisCmd\n    pGenesisTxIn =\n      GenesisTxIn <$> pVerificationKeyFile Input <*> pNetworkId <*> pMaybeOutputFile\n\n    pGenesisCreate :: Parser GenesisCmd\n    pGenesisCreate =\n      GenesisCreate <$> pGenesisDir\n                    <*> pGenesisNumGenesisKeys\n                    <*> pGenesisNumUTxOKeys\n                    <*> pMaybeSystemStart\n                    <*> pInitialSupplyNonDelegated\n                    <*> pNetworkId\n\n    pGenesisCreateStaked :: Parser GenesisCmd\n    pGenesisCreateStaked =\n      GenesisCreateStaked\n        <$> pGenesisDir\n        <*> pGenesisNumGenesisKeys\n        <*> pGenesisNumUTxOKeys\n        <*> pGenesisNumPools\n        <*> pGenesisNumStDelegs\n        <*> pMaybeSystemStart\n        <*> pInitialSupplyNonDelegated\n        <*> pInitialSupplyDelegated\n        <*> pNetworkId\n        <*> pBulkPoolCredFiles\n        <*> pBulkPoolsPerFile\n        <*> pStuffedUtxoCount\n\n    pGenesisHash :: Parser GenesisCmd\n    pGenesisHash =\n      GenesisHashFile <$> pGenesisFile\n\n    pGenesisDir :: Parser GenesisDir\n    pGenesisDir =\n      GenesisDir <$>\n        Opt.strOption\n          (  Opt.long \"genesis-dir\"\n          <> Opt.metavar \"DIR\"\n          <> Opt.help \"The genesis directory containing the genesis template and required genesis/delegation/spending keys.\"\n          )\n\n    pMaybeSystemStart :: Parser (Maybe SystemStart)\n    pMaybeSystemStart =\n      Opt.optional $\n        SystemStart . convertTime <$>\n          Opt.strOption\n            (  Opt.long \"start-time\"\n            <> Opt.metavar \"UTC-TIME\"\n            <> Opt.help \"The genesis start time in YYYY-MM-DDThh:mm:ssZ format. If unspecified, will be the current time +30 seconds.\"\n            )\n\n    pGenesisNumGenesisKeys :: Parser Word\n    pGenesisNumGenesisKeys =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-genesis-keys\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of genesis keys to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pGenesisNumUTxOKeys :: Parser Word\n    pGenesisNumUTxOKeys =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-utxo-keys\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of UTxO keys to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pGenesisNumPools :: Parser Word\n    pGenesisNumPools =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-pools\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of stake pool credential sets to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pGenesisNumStDelegs :: Parser Word\n    pGenesisNumStDelegs =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-stake-delegs\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of stake delegator credential sets to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pStuffedUtxoCount :: Parser Word\n    pStuffedUtxoCount =\n        Opt.option Opt.auto\n          (  Opt.long \"num-stuffed-utxo\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of fake UTxO entries to generate [default is 0].\"\n          <> Opt.value 0\n          )\n\n    convertTime :: String -> UTCTime\n    convertTime =\n      parseTimeOrError False defaultTimeLocale (iso8601DateFormat $ Just \"%H:%M:%SZ\")\n\n    pInitialSupplyNonDelegated :: Parser (Maybe Lovelace)\n    pInitialSupplyNonDelegated =\n      Opt.optional $\n      Lovelace <$>\n        Opt.option Opt.auto\n          (  Opt.long \"supply\"\n          <> Opt.metavar \"LOVELACE\"\n          <> Opt.help \"The initial coin supply in Lovelace which will be evenly distributed across initial, non-delegating stake holders.\"\n          )\n\n    pInitialSupplyDelegated :: Parser Lovelace\n    pInitialSupplyDelegated =\n      fmap (Lovelace . fromMaybe 0) $ Opt.optional $\n        Opt.option Opt.auto\n          (  Opt.long \"supply-delegated\"\n          <> Opt.metavar \"LOVELACE\"\n          <> Opt.help \"The initial coin supply in Lovelace which will be evenly distributed across initial, delegating stake holders.\"\n          <> Opt.value 0\n          )\n\n    pBulkPoolCredFiles :: Parser Word\n    pBulkPoolCredFiles =\n        Opt.option Opt.auto\n          (  Opt.long \"bulk-pool-cred-files\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"Generate bulk pool credential files [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pBulkPoolsPerFile :: Parser Word\n    pBulkPoolsPerFile =\n        Opt.option Opt.auto\n          (  Opt.long \"bulk-pools-per-file\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"Each bulk pool to contain this many pool credential sets [default is 0].\"\n          <> Opt.value 0\n          )\n\n\n--\n-- Shelley CLI flag parsers\n--\n\ndata FileDirection\n  = Input\n  | Output\n  deriving (Eq, Show)\n\npAddressKeyType :: Parser AddressKeyType\npAddressKeyType =\n    Opt.flag' AddressKeyShelley\n      (  Opt.long \"normal-key\"\n      <> Opt.help \"Use a normal Shelley-era key (default).\"\n      )\n  <|>\n    Opt.flag' AddressKeyShelleyExtended\n      (  Opt.long \"extended-key\"\n      <> Opt.help \"Use an extended ed25519 Shelley-era key.\"\n      )\n  <|>\n    Opt.flag' AddressKeyByron\n      (  Opt.long \"byron-key\"\n      <> Opt.help \"Use a Byron-era key.\"\n      )\n  <|>\n    pure AddressKeyShelley\n\n\npProtocolParamsFile :: Parser ProtocolParamsFile\npProtocolParamsFile =\n  ProtocolParamsFile <$>\n    Opt.strOption\n      (  Opt.long \"protocol-params-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the JSON-encoded protocol parameters file\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npCertificateFile :: Parser CertificateFile\npCertificateFile =\n  CertificateFile <$>\n    (  Opt.strOption\n         (  Opt.long \"certificate-file\"\n         <> Opt.metavar \"FILE\"\n         <> Opt.help \"Filepath of the certificate. This encompasses all \\\n                     \\types of certificates (stake pool certificates, \\\n                     \\stake key certificates etc)\"\n         <> Opt.completer (Opt.bashCompleter \"file\")\n         )\n    <|>\n       Opt.strOption\n         (  Opt.long \"certificate\"\n         <> Opt.internal\n         )\n    )\n\npPoolMetaDataFile :: Parser PoolMetaDataFile\npPoolMetaDataFile =\n  PoolMetaDataFile <$>\n    Opt.strOption\n      (  Opt.long \"pool-metadata-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the pool metadata.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npTxMetadataJsonSchema :: Parser TxMetadataJsonSchema\npTxMetadataJsonSchema =\n    (  Opt.flag' ()\n        (  Opt.long \"json-metadata-no-schema\"\n        <> Opt.help \"Use the \\\"no schema\\\" conversion from JSON to tx metadata.\"\n        )\n    *> pure TxMetadataJsonNoSchema\n    )\n  <|>\n    (  Opt.flag' ()\n        (  Opt.long \"json-metadata-detailed-schema\"\n        <> Opt.help \"Use the \\\"detailed schema\\\" conversion from JSON to tx metadata.\"\n        )\n    *> pure TxMetadataJsonDetailedSchema\n    )\n  <|>\n    -- Default to the no-schema conversion.\n    pure TxMetadataJsonNoSchema\n\npMetaDataFile :: Parser MetaDataFile\npMetaDataFile =\n      MetaDataFileJSON <$>\n        ( Opt.strOption\n            (  Opt.long \"metadata-json-file\"\n            <> Opt.metavar \"FILE\"\n            <> Opt.help \"Filepath of the metadata file, in JSON format.\"\n            <> Opt.completer (Opt.bashCompleter \"file\")\n            )\n        <|>\n          Opt.strOption\n            (  Opt.long \"metadata-file\" -- backward compat name\n            <> Opt.internal\n            )\n        )\n  <|>\n      MetaDataFileCBOR <$>\n        Opt.strOption\n          (  Opt.long \"metadata-cbor-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Filepath of the metadata, in raw CBOR format.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\npWithdrawal :: Parser (StakeAddress, Lovelace)\npWithdrawal =\n    Opt.option (readerFromAttoParser parseWithdrawal)\n      (  Opt.long \"withdrawal\"\n      <> Opt.metavar \"WITHDRAWAL\"\n      <> Opt.help \"The reward withdrawal as StakeAddress+Lovelace where \\\n                  \\StakeAddress is the Bech32-encoded stake address \\\n                  \\followed by the amount in Lovelace.\"\n      )\n  where\n    parseWithdrawal :: Atto.Parser (StakeAddress, Lovelace)\n    parseWithdrawal =\n      (,) <$> parseStakeAddress <* Atto.char '+' <*> parseLovelace\n\n\npUpdateProposalFile :: Parser UpdateProposalFile\npUpdateProposalFile =\n  UpdateProposalFile <$>\n  ( Opt.strOption\n     (  Opt.long \"update-proposal-file\"\n     <> Opt.metavar \"FILE\"\n     <> Opt.help \"Filepath of the update proposal.\"\n     <> Opt.completer (Opt.bashCompleter \"file\")\n     )\n  <|>\n    Opt.strOption\n      (  Opt.long \"update-proposal\"\n      <> Opt.internal\n      )\n  )\n\n\npColdSigningKeyFile :: Parser SigningKeyFile\npColdSigningKeyFile =\n  SigningKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"cold-signing-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the cold signing key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n      (  Opt.long \"signing-key-file\"\n      <> Opt.internal\n      )\n    )\n\npSomeWitnessSigningData :: Parser [WitnessSigningData]\npSomeWitnessSigningData =\n  some $\n      KeyWitnessSigningData\n        <$>\n          ( SigningKeyFile <$>\n              Opt.strOption\n                (  Opt.long \"signing-key-file\"\n                <> Opt.metavar \"FILE\"\n                <> Opt.help \"Input filepath of the signing key (one or more).\"\n                <> Opt.completer (Opt.bashCompleter \"file\")\n                )\n          )\n        <*>\n          optional pByronAddress\n    <|>\n      ScriptWitnessSigningData <$> pScript\n\npSigningKeyFile :: FileDirection -> Parser SigningKeyFile\npSigningKeyFile fdir =\n  SigningKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"signing-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help (show fdir ++ \" filepath of the signing key.\")\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npWitnessSigningData :: Parser WitnessSigningData\npWitnessSigningData =\n    KeyWitnessSigningData\n      <$>\n        ( SigningKeyFile <$>\n            Opt.strOption\n              (  Opt.long \"signing-key-file\"\n              <> Opt.metavar \"FILE\"\n              <> Opt.help \"Filepath of the signing key to be used in witness construction.\"\n              <> Opt.completer (Opt.bashCompleter \"file\")\n              )\n        )\n      <*>\n        optional pByronAddress\n  <|>\n    ScriptWitnessSigningData <$> pScript\n\npKesPeriod :: Parser KESPeriod\npKesPeriod =\n  KESPeriod <$>\n    Opt.option Opt.auto\n      (  Opt.long \"kes-period\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The start of the KES key validity period.\"\n      )\n\npEpochNo :: Parser EpochNo\npEpochNo =\n  EpochNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"epoch\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The epoch number.\"\n      )\n\n\npEpochNoUpdateProp :: Parser EpochNo\npEpochNoUpdateProp =\n  EpochNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"epoch\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The epoch number in which the update proposal is valid.\"\n      )\n\npGenesisFile :: Parser GenesisFile\npGenesisFile =\n  GenesisFile <$>\n    Opt.strOption\n      (  Opt.long \"genesis\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"The genesis file.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npOperatorCertIssueCounterFile :: Parser OpCertCounterFile\npOperatorCertIssueCounterFile =\n  OpCertCounterFile <$>\n    ( Opt.strOption\n        (  Opt.long \"operational-certificate-issue-counter-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"The file with the issue counter for the operational certificate.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"operational-certificate-issue-counter\"\n        <> Opt.internal\n        )\n    )\n\n\npOutputFormat :: Parser OutputFormat\npOutputFormat =\n  Opt.option readOutputFormat\n    (  Opt.long \"output-format\"\n    <> Opt.metavar \"STRING\"\n    <> Opt.help \"Optional output format. Accepted output formats are \\\"hex\\\" \\\n                \\and \\\"bech32\\\" (default is \\\"bech32\\\").\"\n    <> Opt.value OutputFormatBech32\n    )\n\n\npMaybeOutputFile :: Parser (Maybe OutputFile)\npMaybeOutputFile =\n  optional $\n    OutputFile <$>\n      Opt.strOption\n        (  Opt.long \"out-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Optional output file. Default is to write to stdout.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n\npOutputFile :: Parser OutputFile\npOutputFile =\n  OutputFile <$>\n    Opt.strOption\n      (  Opt.long \"out-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"The output file.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npColdVerificationKeyOrFile :: Parser ColdVerificationKeyOrFile\npColdVerificationKeyOrFile =\n  ColdStakePoolVerificationKey <$> pStakePoolVerificationKey\n    <|> ColdGenesisDelegateVerificationKey <$> pGenesisDelegateVerificationKey\n    <|> ColdVerificationKeyFile <$> pColdVerificationKeyFile\n\npColdVerificationKeyFile :: Parser VerificationKeyFile\npColdVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"cold-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the cold verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npVerificationKey\n  :: forall keyrole. SerialiseAsBech32 (VerificationKey keyrole)\n  => AsType keyrole\n  -> Parser (VerificationKey keyrole)\npVerificationKey asType =\n  Opt.option\n    (readVerificationKey asType)\n      (  Opt.long \"verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Verification key (Bech32 or hex-encoded).\"\n      )\n\npVerificationKeyOrFile\n  :: SerialiseAsBech32 (VerificationKey keyrole)\n  => AsType keyrole\n  -> Parser (VerificationKeyOrFile keyrole)\npVerificationKeyOrFile asType =\n  VerificationKeyValue <$> pVerificationKey asType\n    <|> VerificationKeyFilePath <$> pVerificationKeyFile Input\n\npVerificationKeyFile :: FileDirection -> Parser VerificationKeyFile\npVerificationKeyFile fdir =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help (show fdir ++ \" filepath of the verification key.\")\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npExtendedVerificationKeyFile :: FileDirection -> Parser VerificationKeyFile\npExtendedVerificationKeyFile fdir =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"extended-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help (show fdir ++ \" filepath of the ed25519-bip32 verification key.\")\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npGenesisVerificationKeyFile :: Parser VerificationKeyFile\npGenesisVerificationKeyFile =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"genesis-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the genesis verification key.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npGenesisVerificationKeyHash :: Parser (Hash GenesisKey)\npGenesisVerificationKeyHash =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-verification-key-hash\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis verification key hash (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (Hash GenesisKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis verification key hash.\") Right\n        . deserialiseFromRawBytesHex (AsHash AsGenesisKey)\n        . BSC.pack\n\npGenesisVerificationKey :: Parser (VerificationKey GenesisKey)\npGenesisVerificationKey =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-verification-key\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis verification key (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (VerificationKey GenesisKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis verification key.\") Right\n        . deserialiseFromRawBytesHex (AsVerificationKey AsGenesisKey)\n        . BSC.pack\n\npGenesisVerificationKeyOrFile :: Parser (VerificationKeyOrFile GenesisKey)\npGenesisVerificationKeyOrFile =\n  VerificationKeyValue <$> pGenesisVerificationKey\n    <|> VerificationKeyFilePath <$> pGenesisVerificationKeyFile\n\npGenesisVerificationKeyOrHashOrFile :: Parser (VerificationKeyOrHashOrFile GenesisKey)\npGenesisVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pGenesisVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pGenesisVerificationKeyHash\n\npGenesisDelegateVerificationKeyFile :: Parser VerificationKeyFile\npGenesisDelegateVerificationKeyFile =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"genesis-delegate-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the genesis delegate verification key.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npGenesisDelegateVerificationKeyHash :: Parser (Hash GenesisDelegateKey)\npGenesisDelegateVerificationKeyHash =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-delegate-verification-key-hash\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis delegate verification key hash (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (Hash GenesisDelegateKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis delegate verification key hash.\") Right\n        . deserialiseFromRawBytesHex (AsHash AsGenesisDelegateKey)\n        . BSC.pack\n\npGenesisDelegateVerificationKey :: Parser (VerificationKey GenesisDelegateKey)\npGenesisDelegateVerificationKey =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-delegate-verification-key\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis delegate verification key (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex\n      :: String\n      -> Either String (VerificationKey GenesisDelegateKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis delegate verification key.\") Right\n        . deserialiseFromRawBytesHex (AsVerificationKey AsGenesisDelegateKey)\n        . BSC.pack\n\npGenesisDelegateVerificationKeyOrFile\n  :: Parser (VerificationKeyOrFile GenesisDelegateKey)\npGenesisDelegateVerificationKeyOrFile =\n  VerificationKeyValue <$> pGenesisDelegateVerificationKey\n    <|> VerificationKeyFilePath <$> pGenesisDelegateVerificationKeyFile\n\npGenesisDelegateVerificationKeyOrHashOrFile\n  :: Parser (VerificationKeyOrHashOrFile GenesisDelegateKey)\npGenesisDelegateVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pGenesisDelegateVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pGenesisDelegateVerificationKeyHash\n\npKesVerificationKeyOrFile :: Parser (VerificationKeyOrFile KesKey)\npKesVerificationKeyOrFile =\n  VerificationKeyValue <$> pKesVerificationKey\n    <|> VerificationKeyFilePath <$> pKesVerificationKeyFile\n\npKesVerificationKey :: Parser (VerificationKey KesKey)\npKesVerificationKey =\n    Opt.option\n      (Opt.eitherReader deserialiseVerKey)\n        (  Opt.long \"kes-verification-key\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"A Bech32 or hex-encoded hot KES verification key.\"\n        )\n  where\n    asType :: AsType (VerificationKey KesKey)\n    asType = AsVerificationKey AsKesKey\n\n    deserialiseVerKey :: String -> Either String (VerificationKey KesKey)\n    deserialiseVerKey str =\n      case deserialiseFromBech32 asType (Text.pack str) of\n        Right res -> Right res\n\n        -- The input was valid Bech32, but some other error occurred.\n        Left err@(Bech32UnexpectedPrefix _ _) -> Left (displayError err)\n        Left err@(Bech32DataPartToBytesError _) -> Left (displayError err)\n        Left err@(Bech32DeserialiseFromBytesError _) -> Left (displayError err)\n        Left err@(Bech32WrongPrefix _ _) -> Left (displayError err)\n\n        -- The input was not valid Bech32. Attempt to deserialize it as hex.\n        Left (Bech32DecodingError _) ->\n          case deserialiseFromRawBytesHex asType (BSC.pack str) of\n            Just res' -> Right res'\n            Nothing -> Left \"Invalid stake pool verification key.\"\n\npKesVerificationKeyFile :: Parser VerificationKeyFile\npKesVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"kes-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the hot KES verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n    Opt.strOption\n        (  Opt.long \"hot-kes-verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npNetworkId :: Parser NetworkId\npNetworkId =\n  pMainnet <|> fmap Testnet pTestnetMagic\n where\n   pMainnet :: Parser NetworkId\n   pMainnet =\n    Opt.flag' Mainnet\n      (  Opt.long \"mainnet\"\n      <> Opt.help \"Use the mainnet magic id.\"\n      )\n\npTestnetMagic :: Parser NetworkMagic\npTestnetMagic =\n  NetworkMagic <$>\n    Opt.option Opt.auto\n      (  Opt.long \"testnet-magic\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Specify a testnet magic id.\"\n      )\n\npTxSubmitFile :: Parser FilePath\npTxSubmitFile =\n  Opt.strOption\n    (  Opt.long \"tx-file\"\n    <> Opt.metavar \"FILE\"\n    <> Opt.help \"Filepath of the transaction you intend to submit.\"\n    <> Opt.completer (Opt.bashCompleter \"file\")\n    )\n\npCardanoEra :: Parser AnyCardanoEra\npCardanoEra = asum\n  [ Opt.flag' (AnyCardanoEra ByronEra)\n      (  Opt.long \"byron-era\"\n      <> Opt.help \"Specify the Byron era\"\n      )\n  , Opt.flag' (AnyCardanoEra ShelleyEra)\n      (  Opt.long \"shelley-era\"\n      <> Opt.help \"Specify the Shelley era (default)\"\n      )\n  , Opt.flag' (AnyCardanoEra AllegraEra)\n      (  Opt.long \"allegra-era\"\n      <> Opt.help \"Specify the Allegra era\"\n      )\n  , Opt.flag' (AnyCardanoEra MaryEra)\n      (  Opt.long \"mary-era\"\n      <> Opt.help \"Specify the Mary era\"\n      )\n\n    -- Default for now:\n  , pure (AnyCardanoEra ShelleyEra)\n  ]\n\npTxIn :: Parser TxIn\npTxIn =\n  Opt.option (readerFromAttoParser parseTxIn)\n    (  Opt.long \"tx-in\"\n    <> Opt.metavar \"TX-IN\"\n    <> Opt.help \"The input transaction as TxId#TxIx where TxId is the transaction hash and TxIx is the index.\"\n    )\n\nparseTxIn :: Atto.Parser TxIn\nparseTxIn = TxIn <$> parseTxId <*> (Atto.char '#' *> parseTxIx)\n\nrenderTxIn :: TxIn -> Text\nrenderTxIn (TxIn txid (TxIx txix)) =\n  mconcat\n    [ Text.decodeUtf8 (serialiseToRawBytesHex txid)\n    , \"#\"\n    , Text.pack (show txix)\n    ]\n\nparseTxId :: Atto.Parser TxId\nparseTxId = (<?> \"Transaction ID (hexadecimal)\") $ do\n  bstr <- Atto.takeWhile1 Char.isHexDigit\n  case deserialiseFromRawBytesHex AsTxId bstr of\n    Just addr -> return addr\n    Nothing -> fail $ \"Incorrect transaction id format:: \" ++ show bstr\n\nparseTxIx :: Atto.Parser TxIx\nparseTxIx = toEnum <$> Atto.decimal\n\n\npTxOut :: Parser TxOutAnyEra\npTxOut =\n    Opt.option (readerFromParsecParser parseTxOutAnyEra)\n      (  Opt.long \"tx-out\"\n      <> Opt.metavar \"TX-OUT\"\n      -- TODO: Update the help text to describe the new syntax as well.\n      <> Opt.help \"The transaction output as Address+Lovelace where Address is \\\n                  \\the Bech32-encoded address followed by the amount in \\\n                  \\Lovelace.\"\n      )\n\npMintMultiAsset :: Parser Value\npMintMultiAsset =\n  Opt.option\n    (readerFromParsecParser parseValue)\n      (  Opt.long \"mint\"\n      <> Opt.metavar \"VALUE\"\n      <> Opt.help \"Mint multi-asset value(s) with the multi-asset cli syntax\"\n      )\n\npTxLowerBound :: Parser SlotNo\npTxLowerBound =\n  SlotNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"lower-bound\"\n      <> Opt.metavar \"SLOT\"\n      <> Opt.help \"Time that transaction is valid from (in slots).\"\n      )\n\npTxUpperBound :: Parser SlotNo\npTxUpperBound =\n  SlotNo <$>\n    ( Opt.option Opt.auto\n        (  Opt.long \"upper-bound\"\n        <> Opt.metavar \"SLOT\"\n        <> Opt.help \"Time that transaction is valid until (in slots).\"\n        )\n    <|>\n      Opt.option Opt.auto\n        (  Opt.long \"ttl\"\n        <> Opt.metavar \"SLOT\"\n        <> Opt.help \"Time to live (in slots) (deprecated; use --upper-bound instead).\"\n        )\n    )\n\npTxFee :: Parser Lovelace\npTxFee =\n  Lovelace . (fromIntegral :: Natural -> Integer) <$>\n    Opt.option Opt.auto\n      (  Opt.long \"fee\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The fee amount in Lovelace.\"\n      )\n\npWitnessFile :: Parser WitnessFile\npWitnessFile =\n  WitnessFile <$>\n    Opt.strOption\n      (  Opt.long \"witness-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the witness\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npTxBodyFile :: FileDirection -> Parser TxBodyFile\npTxBodyFile fdir =\n    TxBodyFile <$>\n      (  Opt.strOption\n           (  Opt.long optName\n           <> Opt.metavar \"FILE\"\n           <> Opt.help (show fdir ++ \" filepath of the TxBody.\")\n           <> Opt.completer (Opt.bashCompleter \"file\")\n           )\n      <|>\n         Opt.strOption\n           (  Opt.long \"tx-body-file\"\n           <> Opt.internal\n           )\n      )\n  where\n    optName =\n      case fdir of\n        Input -> \"tx-body-file\"\n        Output -> \"out-file\"\n\n\npTxFile :: FileDirection -> Parser TxFile\npTxFile fdir =\n    TxFile <$>\n      (  Opt.strOption\n           (  Opt.long optName\n           <> Opt.metavar \"FILE\"\n           <> Opt.help (show fdir ++ \" filepath of the Tx.\")\n           <> Opt.completer (Opt.bashCompleter \"file\")\n           )\n      <|>\n         Opt.strOption\n           (  Opt.long \"tx-file\"\n           <> Opt.internal\n           )\n      )\n  where\n    optName =\n      case fdir of\n        Input -> \"tx-file\"\n        Output -> \"out-file\"\n\npTxInCount :: Parser TxInCount\npTxInCount =\n  TxInCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"tx-in-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of transaction inputs.\"\n      )\n\npTxOutCount :: Parser TxOutCount\npTxOutCount =\n  TxOutCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"tx-out-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of transaction outputs.\"\n      )\n\npTxShelleyWitnessCount :: Parser TxShelleyWitnessCount\npTxShelleyWitnessCount =\n  TxShelleyWitnessCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"witness-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of Shelley key witnesses.\"\n      )\n\npTxByronWitnessCount :: Parser TxByronWitnessCount\npTxByronWitnessCount =\n  TxByronWitnessCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"byron-witness-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of Byron key witnesses (default is 0).\"\n      <> Opt.value 0\n      )\n\npQueryFilter :: Parser QueryFilter\npQueryFilter = pAddresses <|> pure NoFilter\n  where\n    pAddresses :: Parser QueryFilter\n    pAddresses = FilterByAddress . Set.fromList <$>\n                   some pFilterByAddress\n\npFilterByAddress :: Parser AddressAny\npFilterByAddress =\n    Opt.option (readerFromAttoParser parseAddressAny)\n      (  Opt.long \"address\"\n      <> Opt.metavar \"ADDRESS\"\n      <> Opt.help \"Filter by Cardano address(es) (Bech32-encoded).\"\n      )\n\npFilterByStakeAddress :: Parser StakeAddress\npFilterByStakeAddress =\n    Opt.option (readerFromAttoParser parseStakeAddress)\n      (  Opt.long \"address\"\n      <> Opt.metavar \"ADDRESS\"\n      <> Opt.help \"Filter by Cardano stake address (Bech32-encoded).\"\n      )\n\npByronAddress :: Parser (Address ByronAddr)\npByronAddress =\n    Opt.option\n      (Opt.eitherReader deserialise)\n        (  Opt.long \"address\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Byron address (Base58-encoded).\"\n        )\n  where\n    deserialise :: String -> Either String (Address ByronAddr)\n    deserialise =\n      maybe (Left \"Invalid Byron address.\") Right\n        . deserialiseAddress AsByronAddress\n        . Text.pack\n\npAddress :: Parser Text\npAddress =\n  Text.pack <$>\n    Opt.strOption\n      (  Opt.long \"address\"\n      <> Opt.metavar \"ADDRESS\"\n      <> Opt.help \"A Cardano address\"\n      )\n\npStakeVerificationKeyOrFile :: Parser (VerificationKeyOrFile StakeKey)\npStakeVerificationKeyOrFile =\n  VerificationKeyValue <$> pStakeVerificationKey\n    <|> VerificationKeyFilePath <$> pStakeVerificationKeyFile\n\npStakeVerificationKey :: Parser (VerificationKey StakeKey)\npStakeVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakeKey)\n      (  Opt.long \"stake-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Stake verification key (Bech32 or hex-encoded).\"\n      )\n\npStakeVerificationKeyFile :: Parser VerificationKeyFile\npStakeVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"stake-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the staking verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"staking-verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\n\npStakePoolVerificationKeyFile :: Parser VerificationKeyFile\npStakePoolVerificationKeyFile =\n  VerificationKeyFile <$>\n    (  Opt.strOption\n         (  Opt.long \"cold-verification-key-file\"\n         <> Opt.metavar \"FILE\"\n         <> Opt.help \"Filepath of the stake pool verification key.\"\n         <> Opt.completer (Opt.bashCompleter \"file\")\n         )\n    <|>\n       Opt.strOption\n         (  Opt.long \"stake-pool-verification-key-file\"\n         <> Opt.internal\n         )\n    )\n\npStakePoolVerificationKeyHash :: Parser (Hash StakePoolKey)\npStakePoolVerificationKeyHash =\n    Opt.option\n      (Opt.maybeReader pBech32OrHexStakePoolId)\n        (  Opt.long \"stake-pool-id\"\n        <> Opt.metavar \"STAKE-POOL-ID\"\n        <> Opt.help \"Stake pool ID/verification key hash (either \\\n                    \\Bech32-encoded or hex-encoded).\"\n        )\n  where\n    pBech32OrHexStakePoolId :: String -> Maybe (Hash StakePoolKey)\n    pBech32OrHexStakePoolId str =\n      pBech32StakePoolId str <|> pHexStakePoolId str\n\n    pHexStakePoolId :: String -> Maybe (Hash StakePoolKey)\n    pHexStakePoolId =\n      deserialiseFromRawBytesHex (AsHash AsStakePoolKey) . BSC.pack\n\n    pBech32StakePoolId :: String -> Maybe (Hash StakePoolKey)\n    pBech32StakePoolId =\n      either (const Nothing) Just\n        . deserialiseFromBech32 (AsHash AsStakePoolKey)\n        . Text.pack\n\npStakePoolVerificationKey :: Parser (VerificationKey StakePoolKey)\npStakePoolVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakePoolKey)\n      (  Opt.long \"stake-pool-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Stake pool verification key (Bech32 or hex-encoded).\"\n      )\n\npStakePoolVerificationKeyOrFile\n  :: Parser (VerificationKeyOrFile StakePoolKey)\npStakePoolVerificationKeyOrFile =\n  VerificationKeyValue <$> pStakePoolVerificationKey\n    <|> VerificationKeyFilePath <$> pStakePoolVerificationKeyFile\n\npStakePoolVerificationKeyOrHashOrFile\n  :: Parser (VerificationKeyOrHashOrFile StakePoolKey)\npStakePoolVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pStakePoolVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pStakePoolVerificationKeyHash\n\npVrfVerificationKeyFile :: Parser VerificationKeyFile\npVrfVerificationKeyFile =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"vrf-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the VRF verification key.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npVrfVerificationKeyHash :: Parser (Hash VrfKey)\npVrfVerificationKeyHash =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"vrf-verification-key-hash\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"VRF verification key hash (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (Hash VrfKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid VRF verification key hash.\") Right\n        . deserialiseFromRawBytesHex (AsHash AsVrfKey)\n        . BSC.pack\n\npVrfVerificationKey :: Parser (VerificationKey VrfKey)\npVrfVerificationKey =\n  Opt.option\n    (readVerificationKey AsVrfKey)\n      (  Opt.long \"vrf-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"VRF verification key (Bech32 or hex-encoded).\"\n      )\n\npVrfVerificationKeyOrFile :: Parser (VerificationKeyOrFile VrfKey)\npVrfVerificationKeyOrFile =\n  VerificationKeyValue <$> pVrfVerificationKey\n    <|> VerificationKeyFilePath <$> pVrfVerificationKeyFile\n\npVrfVerificationKeyOrHashOrFile :: Parser (VerificationKeyOrHashOrFile VrfKey)\npVrfVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pVrfVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pVrfVerificationKeyHash\n\npRewardAcctVerificationKeyFile :: Parser VerificationKeyFile\npRewardAcctVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"pool-reward-account-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the reward account stake verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"reward-account-verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npRewardAcctVerificationKey :: Parser (VerificationKey StakeKey)\npRewardAcctVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakeKey)\n      (  Opt.long \"pool-reward-account-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Reward account stake verification key (Bech32 or hex-encoded).\"\n      )\n\npRewardAcctVerificationKeyOrFile :: Parser (VerificationKeyOrFile StakeKey)\npRewardAcctVerificationKeyOrFile =\n  VerificationKeyValue <$> pRewardAcctVerificationKey\n    <|> VerificationKeyFilePath <$> pRewardAcctVerificationKeyFile\n\npPoolOwnerVerificationKeyFile :: Parser VerificationKeyFile\npPoolOwnerVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"pool-owner-stake-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the pool owner stake verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n          (  Opt.long \"pool-owner-staking-verification-key\"\n          <> Opt.internal\n          )\n    )\n\npPoolOwnerVerificationKey :: Parser (VerificationKey StakeKey)\npPoolOwnerVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakeKey)\n      (  Opt.long \"pool-owner-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Pool owner stake verification key (Bech32 or hex-encoded).\"\n      )\n\npPoolOwnerVerificationKeyOrFile :: Parser (VerificationKeyOrFile StakeKey)\npPoolOwnerVerificationKeyOrFile =\n  VerificationKeyValue <$> pPoolOwnerVerificationKey\n    <|> VerificationKeyFilePath <$> pPoolOwnerVerificationKeyFile\n\npPoolPledge :: Parser Lovelace\npPoolPledge =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"pool-pledge\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The stake pool's pledge.\"\n      )\n\n\npPoolCost :: Parser Lovelace\npPoolCost =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"pool-cost\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The stake pool's cost.\"\n      )\n\npPoolMargin :: Parser Rational\npPoolMargin =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"pool-margin\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"The stake pool's margin.\"\n      )\n\npPoolRelay :: Parser StakePoolRelay\npPoolRelay = pSingleHostAddress <|> pSingleHostName <|> pMultiHostName\n\npMultiHostName :: Parser StakePoolRelay\npMultiHostName =\n  StakePoolRelayDnsSrvRecord <$> pDNSName\n where\n  pDNSName :: Parser ByteString\n  pDNSName = Opt.option (Opt.eitherReader eDNSName)\n               (  Opt.long \"multi-host-pool-relay\"\n               <> Opt.metavar \"STRING\"\n               <> Opt.help \"The stake pool relay's DNS name that corresponds to \\\n                            \\an SRV DNS record\"\n               )\n\npSingleHostName :: Parser StakePoolRelay\npSingleHostName =\n  StakePoolRelayDnsARecord <$> pDNSName <*> optional pPort\n where\n  pDNSName :: Parser ByteString\n  pDNSName = Opt.option (Opt.eitherReader eDNSName)\n               (  Opt.long \"single-host-pool-relay\"\n               <> Opt.metavar \"STRING\"\n               <> Opt.help \"The stake pool relay's DNS name that corresponds to an\\\n                            \\ A or AAAA DNS record\"\n               )\n\neDNSName :: String -> Either String ByteString\neDNSName str =\n  -- We're using 'Shelley.textToDns' to validate the string.\n  case Shelley.textToDns (toS str) of\n    Nothing -> Left \"DNS name is more than 64 bytes\"\n    Just dnsName -> Right . Text.encodeUtf8 . Shelley.dnsToText $ dnsName\n\npSingleHostAddress :: Parser StakePoolRelay\npSingleHostAddress = singleHostAddress\n  <$> optional pIpV4\n  <*> optional pIpV6\n  <*> pPort\n where\n  singleHostAddress :: Maybe IP.IPv4 -> Maybe IP.IPv6 -> PortNumber -> StakePoolRelay\n  singleHostAddress ipv4 ipv6 port =\n    case (ipv4, ipv6) of\n      (Nothing, Nothing) ->\n        panic \"Please enter either an IPv4 or IPv6 address for the pool relay\"\n      (Just i4, Nothing) ->\n        StakePoolRelayIp (Just i4) Nothing (Just port)\n      (Nothing, Just i6) ->\n        StakePoolRelayIp Nothing (Just i6) (Just port)\n      (Just i4, Just i6) ->\n        StakePoolRelayIp (Just i4) (Just i6) (Just port)\n\n\n\npIpV4 :: Parser IP.IPv4\npIpV4 = Opt.option (Opt.maybeReader readMaybe :: Opt.ReadM IP.IPv4)\n          (  Opt.long \"pool-relay-ipv4\"\n          <> Opt.metavar \"STRING\"\n          <> Opt.help \"The stake pool relay's IPv4 address\"\n          )\n\npIpV6 :: Parser IP.IPv6\npIpV6 = Opt.option (Opt.maybeReader readMaybe :: Opt.ReadM IP.IPv6)\n           (  Opt.long \"pool-relay-ipv6\"\n           <> Opt.metavar \"STRING\"\n           <> Opt.help \"The stake pool relay's IPv6 address\"\n           )\n\npPort :: Parser PortNumber\npPort = Opt.option (fromInteger <$> Opt.eitherReader readEither)\n           (  Opt.long \"pool-relay-port\"\n           <> Opt.metavar \"INT\"\n           <> Opt.help \"The stake pool relay's port\"\n           )\n\npStakePoolMetadataReference :: Parser (Maybe StakePoolMetadataReference)\npStakePoolMetadataReference =\n  optional $\n    StakePoolMetadataReference\n      <$> pStakePoolMetadataUrl\n      <*> pStakePoolMetadataHash\n\npStakePoolMetadataUrl :: Parser Text\npStakePoolMetadataUrl =\n  Opt.option (readURIOfMaxLength 64)\n    (  Opt.long \"metadata-url\"\n    <> Opt.metavar \"URL\"\n    <> Opt.help \"Pool metadata URL (maximum length of 64 characters).\"\n    )\n\npStakePoolMetadataHash :: Parser (Hash StakePoolMetadata)\npStakePoolMetadataHash =\n    Opt.option\n      (Opt.maybeReader metadataHash)\n        (  Opt.long \"metadata-hash\"\n        <> Opt.metavar \"HASH\"\n        <> Opt.help \"Pool metadata hash.\"\n        )\n  where\n    metadataHash :: String -> Maybe (Hash StakePoolMetadata)\n    metadataHash = deserialiseFromRawBytesHex (AsHash AsStakePoolMetadata)\n                 . BSC.pack\n\npStakePoolRegistrationCert :: Parser PoolCmd\npStakePoolRegistrationCert =\n  PoolRegistrationCert\n    <$> pStakePoolVerificationKeyOrFile\n    <*> pVrfVerificationKeyOrFile\n    <*> pPoolPledge\n    <*> pPoolCost\n    <*> pPoolMargin\n    <*> pRewardAcctVerificationKeyOrFile\n    <*> some pPoolOwnerVerificationKeyOrFile\n    <*> many pPoolRelay\n    <*> pStakePoolMetadataReference\n    <*> pNetworkId\n    <*> pOutputFile\n\npStakePoolRetirementCert :: Parser PoolCmd\npStakePoolRetirementCert =\n  PoolRetirementCert\n    <$> pStakePoolVerificationKeyOrFile\n    <*> pEpochNo\n    <*> pOutputFile\n\n\npShelleyProtocolParametersUpdate :: Parser ProtocolParametersUpdate\npShelleyProtocolParametersUpdate =\n  ProtocolParametersUpdate\n    <$> optional pProtocolVersion\n    <*> optional pDecentralParam\n    <*> optional pExtraEntropy\n    <*> optional pMaxBlockHeaderSize\n    <*> optional pMaxBodySize\n    <*> optional pMaxTransactionSize\n    <*> optional pMinFeeConstantFactor\n    <*> optional pMinFeeLinearFactor\n    <*> optional pMinUTxOValue\n    <*> optional pKeyRegistDeposit\n    <*> optional pPoolDeposit\n    <*> optional pMinPoolCost\n    <*> optional pEpochBoundRetirement\n    <*> optional pNumberOfPools\n    <*> optional pPoolInfluence\n    <*> optional pMonetaryExpansion\n    <*> optional pTreasuryExpansion\n\npMinFeeLinearFactor :: Parser Natural\npMinFeeLinearFactor =\n    Opt.option Opt.auto\n      (  Opt.long \"min-fee-linear\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The linear factor for the minimum fee calculation.\"\n      )\n\npMinFeeConstantFactor :: Parser Natural\npMinFeeConstantFactor =\n    Opt.option Opt.auto\n      (  Opt.long \"min-fee-constant\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The constant factor for the minimum fee calculation.\"\n      )\n\npMinUTxOValue :: Parser Lovelace\npMinUTxOValue =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"min-utxo-value\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The minimum allowed UTxO value.\"\n      )\n\npMinPoolCost :: Parser Lovelace\npMinPoolCost =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"min-pool-cost\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The minimum allowed cost parameter for stake pools.\"\n      )\n\npMaxBodySize :: Parser Natural\npMaxBodySize =\n    Opt.option Opt.auto\n      (  Opt.long \"max-block-body-size\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Maximal block body size.\"\n      )\n\npMaxTransactionSize :: Parser Natural\npMaxTransactionSize =\n    Opt.option Opt.auto\n      (  Opt.long \"max-tx-size\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Maximum transaction size.\"\n      )\n\npMaxBlockHeaderSize :: Parser Natural\npMaxBlockHeaderSize =\n    Opt.option Opt.auto\n      (  Opt.long \"max-block-header-size\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Maximum block header size.\"\n      )\n\npKeyRegistDeposit :: Parser Lovelace\npKeyRegistDeposit =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"key-reg-deposit-amt\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Key registration deposit amount.\"\n      )\n\npPoolDeposit :: Parser Lovelace\npPoolDeposit =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"pool-reg-deposit\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The amount of a pool registration deposit.\"\n      )\n\npEpochBoundRetirement :: Parser EpochNo\npEpochBoundRetirement =\n    EpochNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"pool-retirement-epoch-boundary\"\n      <> Opt.metavar \"INT\"\n      <> Opt.help \"Epoch bound on pool retirement.\"\n      )\n\npNumberOfPools :: Parser Natural\npNumberOfPools =\n    Opt.option Opt.auto\n      (  Opt.long \"number-of-pools\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Desired number of pools.\"\n      )\n\npPoolInfluence :: Parser Rational\npPoolInfluence =\n    Opt.option readRational\n      (  Opt.long \"pool-influence\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Pool influence.\"\n      )\n\npTreasuryExpansion :: Parser Rational\npTreasuryExpansion =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"treasury-expansion\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Treasury expansion.\"\n      )\n\npMonetaryExpansion :: Parser Rational\npMonetaryExpansion =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"monetary-expansion\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Monetary expansion.\"\n      )\n\npDecentralParam :: Parser Rational\npDecentralParam =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"decentralization-parameter\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Decentralization parameter.\"\n      )\n\npExtraEntropy :: Parser (Maybe PraosNonce)\npExtraEntropy =\n      Opt.option (Just <$> readerFromAttoParser parsePraosNonce)\n        (  Opt.long \"extra-entropy\"\n        <> Opt.metavar \"HEX\"\n        <> Opt.help \"Praos extra entropy, as a hex byte string.\"\n        )\n  <|> Opt.flag' Nothing\n        (  Opt.long \"reset-extra-entropy\"\n        <> Opt.help \"Reset the Praos extra entropy to none.\"\n        )\n  where\n    parsePraosNonce :: Atto.Parser PraosNonce\n    parsePraosNonce = makePraosNonce <$> parseEntropyBytes\n\n    parseEntropyBytes :: Atto.Parser ByteString\n    parseEntropyBytes = either fail return\n                      . decodeEitherBase16\n                    =<< Atto.takeWhile1 Char.isHexDigit\n\npProtocol :: Parser Protocol\npProtocol =\n    (  Opt.flag' ()\n        (  Opt.long \"shelley-mode\"\n        <> Opt.help \"For talking to a node running in Shelley-only mode.\"\n        )\n    *> pShelleyMode\n    )\n  <|>\n    (  Opt.flag' ()\n        (  Opt.long \"byron-mode\"\n        <> Opt.help \"For talking to a node running in Byron-only mode.\"\n        )\n    *> pByronMode\n    )\n  <|>\n    (  Opt.flag' ()\n        (  Opt.long \"cardano-mode\"\n        <> Opt.help \"For talking to a node running in full Cardano mode (default).\"\n        )\n    *> pCardanoMode\n    )\n  <|>\n    -- Default to the Cardano protocol.\n    pure\n      (CardanoProtocol\n        (EpochSlots defaultByronEpochSlots))\n  where\n    pByronMode :: Parser Protocol\n    pByronMode = ByronProtocol <$> pEpochSlots\n\n    pShelleyMode :: Parser Protocol\n    pShelleyMode = pure ShelleyProtocol\n\n    pCardanoMode :: Parser Protocol\n    pCardanoMode = CardanoProtocol <$> pEpochSlots\n\n    pEpochSlots :: Parser EpochSlots\n    pEpochSlots =\n      EpochSlots <$>\n        Opt.option Opt.auto\n          (  Opt.long \"epoch-slots\"\n          <> Opt.metavar \"NATURAL\"\n          <> Opt.help \"The number of slots per epoch for the Byron era.\"\n          <> Opt.value defaultByronEpochSlots -- Default to the mainnet value.\n          <> Opt.showDefault\n          )\n\n    defaultByronEpochSlots :: Word64\n    defaultByronEpochSlots = 21600\n\npProtocolVersion :: Parser (Natural, Natural)\npProtocolVersion =\n    (,) <$> pProtocolMajorVersion <*> pProtocolMinorVersion\n  where\n    pProtocolMajorVersion =\n      Opt.option Opt.auto\n        (  Opt.long \"protocol-major-version\"\n        <> Opt.metavar \"NATURAL\"\n        <> Opt.help \"Major protocol version. An increase indicates a hard fork.\"\n        )\n    pProtocolMinorVersion =\n      Opt.option Opt.auto\n        (  Opt.long \"protocol-minor-version\"\n        <> Opt.metavar \"NATURAL\"\n        <> Opt.help \"Minor protocol version. An increase indicates a soft fork\\\n                    \\ (old software canvalidate but not produce new blocks).\"\n        )\n\n--\n-- Shelley CLI flag field parsers\n--\n\nparseLovelace :: Atto.Parser Lovelace\nparseLovelace = Lovelace <$> Atto.decimal\n\nparseAddressAny :: Atto.Parser AddressAny\nparseAddressAny = do\n    str <- lexPlausibleAddressString\n    case deserialiseAddress AsAddressAny str of\n      Nothing   -> fail \"invalid address\"\n      Just addr -> pure addr\n\nparseStakeAddress :: Atto.Parser StakeAddress\nparseStakeAddress = do\n    str <- lexPlausibleAddressString\n    case deserialiseAddress AsStakeAddress str of\n      Nothing   -> fail \"invalid address\"\n      Just addr -> pure addr\n\nlexPlausibleAddressString :: Atto.Parser Text\nlexPlausibleAddressString =\n    Text.decodeLatin1 <$> Atto.takeWhile1 isPlausibleAddressChar\n  where\n    -- Covers both base58 and bech32 (with constrained prefixes)\n    isPlausibleAddressChar c =\n         (c >= 'a' && c <= 'z')\n      || (c >= 'A' && c <= 'Z')\n      || (c >= '0' && c <= '9')\n      || c == '_'\n\n\n--------------------------------------------------------------------------------\n-- Helpers\n--------------------------------------------------------------------------------\n\n-- | Read a Bech32 or hex-encoded verification key.\nreadVerificationKey\n  :: forall keyrole. SerialiseAsBech32 (VerificationKey keyrole)\n  => AsType keyrole\n  -> Opt.ReadM (VerificationKey keyrole)\nreadVerificationKey asType =\n    Opt.eitherReader deserialiseFromBech32OrHex\n  where\n    keyFormats :: NonEmpty (InputFormat (VerificationKey keyrole))\n    keyFormats = NE.fromList [InputFormatBech32, InputFormatHex]\n\n    deserialiseFromBech32OrHex\n      :: String\n      -> Either String (VerificationKey keyrole)\n    deserialiseFromBech32OrHex str =\n      first (Text.unpack . renderInputDecodeError) $\n        deserialiseInput (AsVerificationKey asType) keyFormats (BSC.pack str)\n\nreadOutputFormat :: Opt.ReadM OutputFormat\nreadOutputFormat = do\n  s <- Opt.str\n  case s of\n    \"hex\" -> pure OutputFormatHex\n    \"bech32\" -> pure OutputFormatBech32\n    _ ->\n      fail $ \"Invalid output format: \\\"\"\n        <> s\n        <> \"\\\". Accepted output formats are \\\"hex\\\" and \\\"bech32\\\".\"\n\nreadURIOfMaxLength :: Int -> Opt.ReadM Text\nreadURIOfMaxLength maxLen =\n  Text.pack <$> readStringOfMaxLength maxLen\n\nreadStringOfMaxLength :: Int -> Opt.ReadM String\nreadStringOfMaxLength maxLen = do\n  s <- Opt.str\n  let strLen = length s\n  if strLen <= maxLen\n    then pure s\n    else fail $\n      \"The provided string must have at most 64 characters, but it has \"\n        <> show strLen\n        <> \" characters.\"\n\nreadRationalUnitInterval :: Opt.ReadM Rational\nreadRationalUnitInterval = readRational >>= checkUnitInterval\n  where\n   checkUnitInterval :: Rational -> Opt.ReadM Rational\n   checkUnitInterval q\n     | q >= 0 && q <= 1 = return q\n     | otherwise        = fail \"Please enter a value in the range [0,1]\"\n\nreadRational :: Opt.ReadM Rational\nreadRational = toRational <$> readerFromAttoParser Atto.scientific\n\nreaderFromAttoParser :: Atto.Parser a -> Opt.ReadM a\nreaderFromAttoParser p =\n    Opt.eitherReader (Atto.parseOnly (p <* Atto.endOfInput) . BSC.pack)\n\nreaderFromParsecParser :: Parsec.Parser a -> Opt.ReadM a\nreaderFromParsecParser p =\n    Opt.eitherReader (first formatError . Parsec.parse (p <* Parsec.eof) \"\")\n  where\n    --TODO: the default parsec error formatting is quite good, but we could\n    -- customise it somewhat:\n    formatError err =\n      Parsec.showErrorMessages \"or\" \"unknown parse error\"\n                               \"expecting\" \"unexpected\" \"end of input\"\n                               (Parsec.errorMessages err)\n\n\n"}}}
2020-12-03 13:36:26.613511455 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":231}}
2020-12-03 13:36:26.613676707 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",Modified)]
2020-12-03 13:36:26.625297171 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":215}}
2020-12-03 13:36:26.625499336 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":232}}
2020-12-03 13:36:26.625552608 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":234,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:26.625645831 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":235,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}}}
2020-12-03 13:36:26.62580981 [ThreadId 7572] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:36:26.625878181 [ThreadId 25] - Restarting build session (aborting the previous one took 0.01s)
2020-12-03 13:36:26.625924373 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:36:26.626059363 [ThreadId 8127] - codeLens was cancelled
2020-12-03 13:36:26.626066166 [ThreadId 8224] - C:GetHieAst was cancelled
2020-12-03 13:36:26.626090447 [ThreadId 8229] - CodeAction was cancelled
2020-12-03 13:36:26.626115007 [ThreadId 8125] - Cancelled request IdInt 215
2020-12-03 13:36:26.626119832 [ThreadId 8222] - Cancelled request IdInt 231
2020-12-03 13:36:26.626145418 [ThreadId 8227] - Cancelled request IdInt 232
2020-12-03 13:36:26.626207942 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":215}
2020-12-03 13:36:26.626251752 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":231}
2020-12-03 13:36:26.626287682 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":232}
2020-12-03 13:36:26.834655495 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":236,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}}}
2020-12-03 13:36:26.834799721 [ThreadId 8763] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:36:26.856763604 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":237,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":468,"character":16},"end":{"line":468,"character":26}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:26.856902882 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":234}}
2020-12-03 13:36:26.856984195 [ThreadId 8483] - CodeAction was cancelled
2020-12-03 13:36:26.857041455 [ThreadId 8477] - Cancelled request IdInt 234
2020-12-03 13:36:26.857113093 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":234}
2020-12-03 13:36:27.459557062 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":238,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":470,"character":44}}}
2020-12-03 13:36:27.459707735 [ThreadId 8774] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:27.459790922 [ThreadId 8774] - Hover request at position 471:45 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:36:27.922499854 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":238}}
2020-12-03 13:36:27.922690831 [ThreadId 8774] - C:GetHieAst was cancelled
2020-12-03 13:36:27.922739541 [ThreadId 8772] - Cancelled request IdInt 238
2020-12-03 13:36:27.922894649 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":238}
2020-12-03 13:36:28.073689364 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":239,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":470,"character":43}}}
2020-12-03 13:36:28.073853411 [ThreadId 8781] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:28.074010612 [ThreadId 8781] - Hover request at position 471:44 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:36:28.356617953 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":239}}
2020-12-03 13:36:28.35684586 [ThreadId 8781] - C:GetHieAst was cancelled
2020-12-03 13:36:28.356902348 [ThreadId 8779] - Cancelled request IdInt 239
2020-12-03 13:36:28.357038457 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":239}
2020-12-03 13:36:28.565823611 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":240,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":469,"character":41}}}
2020-12-03 13:36:28.566028652 [ThreadId 8787] - DocumentHighlight request at position 470:42 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:36:28.976759638 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":241,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":469,"character":18},"end":{"line":469,"character":47}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:28.977014928 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":237}}
2020-12-03 13:36:28.977192024 [ThreadId 8768] - CodeAction was cancelled
2020-12-03 13:36:28.97726543 [ThreadId 8766] - Cancelled request IdInt 237
2020-12-03 13:36:28.977370988 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":237}
2020-12-03 13:36:30.026429589 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":242,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":469,"character":40}}}
2020-12-03 13:36:30.026620113 [ThreadId 8798] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:30.026747246 [ThreadId 8798] - Hover request at position 470:41 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:36:30.081064848 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":242}}
2020-12-03 13:36:30.081374254 [ThreadId 8798] - C:GetHieAst was cancelled
2020-12-03 13:36:30.081462657 [ThreadId 8796] - Cancelled request IdInt 242
2020-12-03 13:36:30.081591095 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":242}
2020-12-03 13:36:31.446893666 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":240}}
2020-12-03 13:36:31.44716514 [ThreadId 8787] - C:GetHieAst was cancelled
2020-12-03 13:36:31.447228671 [ThreadId 8785] - Cancelled request IdInt 240
2020-12-03 13:36:31.447354255 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":240}
2020-12-03 13:36:31.66592592 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":243,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":530,"character":2},"end":{"line":530,"character":31}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:31.666059616 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":241}}
2020-12-03 13:36:31.666228725 [ThreadId 8792] - CodeAction was cancelled
2020-12-03 13:36:31.666283241 [ThreadId 8790] - Cancelled request IdInt 241
2020-12-03 13:36:31.666395424 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":241}
2020-12-03 13:36:34.726687175 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":244,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":492,"character":13},"end":{"line":492,"character":42}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:34.726809988 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":243}}
2020-12-03 13:36:34.726947045 [ThreadId 8805] - CodeAction was cancelled
2020-12-03 13:36:34.727028617 [ThreadId 8803] - Cancelled request IdInt 243
2020-12-03 13:36:34.72715335 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":243}
2020-12-03 13:36:36.32161744 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":245,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":529,"character":2},"end":{"line":529,"character":31}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:36.321755347 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":244}}
2020-12-03 13:36:36.321893987 [ThreadId 8811] - CodeAction was cancelled
2020-12-03 13:36:36.321936944 [ThreadId 8809] - Cancelled request IdInt 244
2020-12-03 13:36:36.322016937 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":244}
2020-12-03 13:36:37.267681425 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":246,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":530,"character":49}}}
2020-12-03 13:36:37.267854299 [ThreadId 8823] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:37.267957331 [ThreadId 8823] - Hover request at position 531:50 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:36:37.316810116 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":247,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":530,"character":49}}}
2020-12-03 13:36:37.31708662 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":246}}
2020-12-03 13:36:37.317154933 [ThreadId 8828] - DocumentHighlight request at position 531:50 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:36:37.317301258 [ThreadId 8823] - C:GetHieAst was cancelled
2020-12-03 13:36:37.317365684 [ThreadId 8821] - Cancelled request IdInt 246
2020-12-03 13:36:37.31748238 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":246}
2020-12-03 13:36:37.658718498 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":248,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":530,"character":34},"end":{"line":530,"character":57}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:37.658845518 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":245}}
2020-12-03 13:36:37.658974578 [ThreadId 8817] - CodeAction was cancelled
2020-12-03 13:36:37.659057128 [ThreadId 8815] - Cancelled request IdInt 245
2020-12-03 13:36:37.659154189 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":245}
2020-12-03 13:36:38.265183822 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":233}}
2020-12-03 13:36:38.265462354 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":249,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":530,"character":48}}}
2020-12-03 13:36:38.265481191 [ThreadId 8236] - C:GetHieAst was cancelled
2020-12-03 13:36:38.265574654 [ThreadId 8234] - Cancelled request IdInt 233
2020-12-03 13:36:38.265731204 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":233}
2020-12-03 13:36:38.265761424 [ThreadId 8841] - Definition request at position 531:49 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:36:41.134475085 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":247}}
2020-12-03 13:36:41.134601847 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":236}}
2020-12-03 13:36:41.134671851 [ThreadId 8828] - C:GetHieAst was cancelled
2020-12-03 13:36:41.134732498 [ThreadId 8763] - codeLens was cancelled
2020-12-03 13:36:41.134782402 [ThreadId 8761] - Cancelled request IdInt 236
2020-12-03 13:36:41.134754646 [ThreadId 8826] - Cancelled request IdInt 247
2020-12-03 13:36:41.134888649 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":236}
2020-12-03 13:36:41.134961643 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":247}
2020-12-03 13:36:41.135019882 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":248}}
2020-12-03 13:36:41.13511524 [ThreadId 8834] - CodeAction was cancelled
2020-12-03 13:36:41.135123399 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":250,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:41.135164545 [ThreadId 8832] - Cancelled request IdInt 248
2020-12-03 13:36:41.135236202 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":248}
2020-12-03 13:36:41.388845972 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":251,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"}}}
2020-12-03 13:36:41.388995303 [ThreadId 8854] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:36:41.389035872 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":252,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":192,"character":4},"end":{"line":192,"character":27}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:41.389183777 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":250}}
2020-12-03 13:36:41.389318587 [ThreadId 8849] - CodeAction was cancelled
2020-12-03 13:36:41.389402168 [ThreadId 8847] - Cancelled request IdInt 250
2020-12-03 13:36:41.389485714 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":250}
2020-12-03 13:36:41.974685248 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":253,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":192,"character":18}}}
2020-12-03 13:36:41.974862967 [ThreadId 8865] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:41.974967956 [ThreadId 8865] - Hover request at position 193:19 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:42.159046575 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":253}}
2020-12-03 13:36:42.159299359 [ThreadId 8865] - C:GetHieAst was cancelled
2020-12-03 13:36:42.159353544 [ThreadId 8863] - Cancelled request IdInt 253
2020-12-03 13:36:42.159443427 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":253}
2020-12-03 13:36:42.269899799 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":254,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":193,"character":19}}}
2020-12-03 13:36:42.270240323 [ThreadId 8871] - DocumentHighlight request at position 194:20 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:42.634377504 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":255,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":193,"character":6},"end":{"line":193,"character":22}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:42.634897803 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":252}}
2020-12-03 13:36:42.635105743 [ThreadId 8859] - CodeAction was cancelled
2020-12-03 13:36:42.63522405 [ThreadId 8857] - Cancelled request IdInt 252
2020-12-03 13:36:42.635334035 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":252}
2020-12-03 13:36:44.712080862 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":254}}
2020-12-03 13:36:44.712358373 [ThreadId 8871] - C:GetHieAst was cancelled
2020-12-03 13:36:44.712435467 [ThreadId 8869] - Cancelled request IdInt 254
2020-12-03 13:36:44.712557799 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":254}
2020-12-03 13:36:44.933354059 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":256,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":817,"character":0},"end":{"line":817,"character":16}},"context":{"diagnostics":[]}}}
2020-12-03 13:36:44.933513352 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":255}}
2020-12-03 13:36:44.933660924 [ThreadId 8876] - CodeAction was cancelled
2020-12-03 13:36:44.933712836 [ThreadId 8874] - Cancelled request IdInt 255
2020-12-03 13:36:44.933872298 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":255}
2020-12-03 13:36:45.454736968 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":257,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":819,"character":43}}}
2020-12-03 13:36:45.454871727 [ThreadId 8889] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:45.454979321 [ThreadId 8889] - Hover request at position 820:44 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:45.499141667 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":257}}
2020-12-03 13:36:45.499328547 [ThreadId 8889] - C:GetHieAst was cancelled
2020-12-03 13:36:45.499417938 [ThreadId 8887] - Cancelled request IdInt 257
2020-12-03 13:36:45.499606933 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":257}
2020-12-03 13:36:45.849875827 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":258,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":822,"character":54}}}
2020-12-03 13:36:45.85003539 [ThreadId 8895] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:45.850177926 [ThreadId 8895] - Hover request at position 823:55 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:47.272426672 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":258}}
2020-12-03 13:36:47.272645394 [ThreadId 8895] - C:GetHieAst was cancelled
2020-12-03 13:36:47.272712061 [ThreadId 8893] - Cancelled request IdInt 258
2020-12-03 13:36:47.272879344 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":258}
2020-12-03 13:36:56.458999964 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":259,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":823,"character":60}}}
2020-12-03 13:36:56.459169212 [ThreadId 8901] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:56.459296969 [ThreadId 8901] - Hover request at position 824:61 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:56.648790513 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":259}}
2020-12-03 13:36:56.648960936 [ThreadId 8901] - C:GetHieAst was cancelled
2020-12-03 13:36:56.649016591 [ThreadId 8899] - Cancelled request IdInt 259
2020-12-03 13:36:56.649147834 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":259}
2020-12-03 13:36:56.805040374 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":260,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":823,"character":59}}}
2020-12-03 13:36:56.805232226 [ThreadId 8907] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:56.805332222 [ThreadId 8907] - Hover request at position 824:60 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:57.586691005 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":260}}
2020-12-03 13:36:57.586930663 [ThreadId 8907] - C:GetHieAst was cancelled
2020-12-03 13:36:57.586979763 [ThreadId 8905] - Cancelled request IdInt 260
2020-12-03 13:36:57.58708597 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":260}
2020-12-03 13:36:58.182808409 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":261,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":822,"character":24}}}
2020-12-03 13:36:58.18303812 [ThreadId 8913] - GhcIde.hover entered (ideLogger)
2020-12-03 13:36:58.183144692 [ThreadId 8913] - Hover request at position 823:25 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:59.791543041 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":262,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":822,"character":25}}}
2020-12-03 13:36:59.791767161 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":261}}
2020-12-03 13:36:59.791922828 [ThreadId 8913] - C:GetHieAst was cancelled
2020-12-03 13:36:59.79193257 [ThreadId 8918] - DocumentHighlight request at position 823:26 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:36:59.791984572 [ThreadId 8911] - Cancelled request IdInt 261
2020-12-03 13:36:59.79216771 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":261}
2020-12-03 13:37:00.163669259 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":263,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":822,"character":10},"end":{"line":822,"character":32}},"context":{"diagnostics":[]}}}
2020-12-03 13:37:00.163805571 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":256}}
2020-12-03 13:37:00.16476876 [ThreadId 8883] - CodeAction was cancelled
2020-12-03 13:37:00.164832439 [ThreadId 8881] - Cancelled request IdInt 256
2020-12-03 13:37:00.164928741 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":256}
2020-12-03 13:37:11.006246763 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":264,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":828,"character":41}}}
2020-12-03 13:37:11.006413929 [ThreadId 8930] - GhcIde.hover entered (ideLogger)
2020-12-03 13:37:11.006541488 [ThreadId 8930] - Hover request at position 829:42 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:37:11.419719136 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":264}}
2020-12-03 13:37:11.419925405 [ThreadId 8930] - C:GetHieAst was cancelled
2020-12-03 13:37:11.419970579 [ThreadId 8928] - Cancelled request IdInt 264
2020-12-03 13:37:11.42009916 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":264}
2020-12-03 13:37:11.570057001 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":265,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":829,"character":42}}}
2020-12-03 13:37:11.57023418 [ThreadId 8936] - GhcIde.hover entered (ideLogger)
2020-12-03 13:37:11.570336571 [ThreadId 8936] - Hover request at position 830:43 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:37:11.922495812 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":265}}
2020-12-03 13:37:11.922703131 [ThreadId 8936] - C:GetHieAst was cancelled
2020-12-03 13:37:11.922763507 [ThreadId 8934] - Cancelled request IdInt 265
2020-12-03 13:37:11.922954182 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":265}
2020-12-03 13:37:12.50779868 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":266,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":833,"character":37}}}
2020-12-03 13:37:12.507951392 [ThreadId 8942] - GhcIde.hover entered (ideLogger)
2020-12-03 13:37:12.508089975 [ThreadId 8942] - Hover request at position 834:38 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:37:13.749089393 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":266}}
2020-12-03 13:37:13.749264864 [ThreadId 8942] - C:GetHieAst was cancelled
2020-12-03 13:37:13.749355056 [ThreadId 8940] - Cancelled request IdInt 266
2020-12-03 13:37:13.749474286 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":266}
2020-12-03 13:37:13.999462819 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":267,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":834,"character":47}}}
2020-12-03 13:37:13.999627406 [ThreadId 8948] - GhcIde.hover entered (ideLogger)
2020-12-03 13:37:13.999718394 [ThreadId 8948] - Hover request at position 835:48 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:37:14.197775639 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":267}}
2020-12-03 13:37:14.197980629 [ThreadId 8948] - C:GetHieAst was cancelled
2020-12-03 13:37:14.198062517 [ThreadId 8946] - Cancelled request IdInt 267
2020-12-03 13:37:14.198217164 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":267}
2020-12-03 13:37:14.467764731 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":268,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":836,"character":46}}}
2020-12-03 13:37:14.467983245 [ThreadId 8954] - GhcIde.hover entered (ideLogger)
2020-12-03 13:37:14.468169453 [ThreadId 8954] - Hover request at position 837:47 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:37:15.679055681 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":268}}
2020-12-03 13:37:15.679275703 [ThreadId 8954] - C:GetHieAst was cancelled
2020-12-03 13:37:15.679346865 [ThreadId 8952] - Cancelled request IdInt 268
2020-12-03 13:37:15.679478605 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":268}
2020-12-03 13:37:16.032196731 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":269,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":831,"character":54}}}
2020-12-03 13:37:16.032347615 [ThreadId 8960] - GhcIde.hover entered (ideLogger)
2020-12-03 13:37:16.032427951 [ThreadId 8960] - Hover request at position 832:55 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:37:16.200011464 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":269}}
2020-12-03 13:37:16.200251403 [ThreadId 8960] - C:GetHieAst was cancelled
2020-12-03 13:37:16.200320225 [ThreadId 8958] - Cancelled request IdInt 269
2020-12-03 13:37:16.200538365 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":269}
2020-12-03 13:37:17.771317118 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":270,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":836,"character":32}}}
2020-12-03 13:37:17.771486709 [ThreadId 8966] - GhcIde.hover entered (ideLogger)
2020-12-03 13:37:17.771606648 [ThreadId 8966] - Hover request at position 837:33 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:37:18.367201041 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":262}}
2020-12-03 13:37:18.367437551 [ThreadId 8918] - C:GetHieAst was cancelled
2020-12-03 13:37:18.367429142 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":271,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"position":{"line":836,"character":33}}}
2020-12-03 13:37:18.367514211 [ThreadId 8916] - Cancelled request IdInt 262
2020-12-03 13:37:18.367632331 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":262}
2020-12-03 13:37:18.367727069 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":270}}
2020-12-03 13:37:18.367675581 [ThreadId 8972] - DocumentHighlight request at position 837:34 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs
2020-12-03 13:37:18.367823738 [ThreadId 8966] - C:GetHieAst was cancelled
2020-12-03 13:37:18.36786406 [ThreadId 8964] - Cancelled request IdInt 270
2020-12-03 13:37:18.367943258 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":270}
2020-12-03 13:37:18.598175785 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":272,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":836,"character":33},"end":{"line":836,"character":33}},"context":{"diagnostics":[]}}}
2020-12-03 13:37:18.598357896 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":263}}
2020-12-03 13:37:18.598505533 [ThreadId 8924] - CodeAction was cancelled
2020-12-03 13:37:18.598575085 [ThreadId 8922] - Cancelled request IdInt 263
2020-12-03 13:37:18.598685822 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":263}
2020-12-03 13:37:20.012609394 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":273,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"},"range":{"start":{"line":836,"character":17},"end":{"line":836,"character":38}},"context":{"diagnostics":[]}}}
2020-12-03 13:37:20.012814425 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":272}}
2020-12-03 13:37:20.012994386 [ThreadId 8978] - CodeAction was cancelled
2020-12-03 13:37:20.013075273 [ThreadId 8976] - Cancelled request IdInt 272
2020-12-03 13:37:20.013154834 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":272}
2020-12-03 13:37:26.923747108 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}}}
2020-12-03 13:37:26.92391547 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}
2020-12-03 13:37:26.924081172 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",Modified)]
2020-12-03 13:37:26.924285607 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:37:26.93296058 [ThreadId 9253] - Data.HashMap.Internal.(!): key not found
CallStack (from HasCallStack):
  error, called at ./Data/HashMap/Internal.hs:756:16 in unordered-containers-0.2.13.0-f519383be173bea40a77beaaf5249f6ae8af1a29545fb7d3d57c773b8188dc00:Data.HashMap.Internal
  !, called at src/Development/IDE/Import/DependencyInformation.hs:107:40 in ghcide-0.4.0-inplace:Development.IDE.Import.DependencyInformation
2020-12-03 13:37:26.933041828 [ThreadId 9253] - finish: ParentTC (took 0.01s)
2020-12-03 13:37:27.003040119 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE EmptyCase #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE PatternSynonyms #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TypeFamilies #-}\n\n-- The Shelley ledger uses promoted data kinds which we have to use, but we do\n-- not export any from this API. We also use them unticked as nature intended.\n{-# LANGUAGE DataKinds #-}\n{-# OPTIONS_GHC -Wno-unticked-promoted-constructors #-}\n\n-- | Complete, signed transactions\n--\nmodule Cardano.Api.Tx (\n\n    -- * Signing transactions\n    -- | Creating transaction witnesses one by one, or all in one go.\n    Tx(..),\n    getTxBody,\n    getTxWitnesses,\n\n    -- ** Signing in one go\n    ShelleySigningKey(..),\n    toShelleySigningKey,\n    signByronTransaction,\n    signShelleyTransaction,\n    -- ** Incremental signing and separate witnesses\n    makeSignedTransaction,\n    Witness(..),\n    makeByronKeyWitness,\n    ShelleyWitnessSigningKey(..),\n    makeShelleyKeyWitness,\n    WitnessNetworkIdOrByronAddress (..),\n    makeShelleyBootstrapWitness,\n    makeScriptWitness,\n    makeShelleySignature,\n    getShelleyKeyWitnessVerificationKey,\n\n    -- * Data family instances\n    AsType(AsTx, AsByronTx, AsShelleyTx,\n           AsWitness, AsByronWitness, AsShelleyWitness),\n  ) where\n\nimport           Prelude\n\nimport           Data.Maybe\n\nimport           Data.ByteString (ByteString)\nimport qualified Data.ByteString as BS\nimport qualified Data.ByteString.Lazy as LBS\n\nimport qualified Data.Map.Strict as Map\nimport qualified Data.Set as Set\nimport qualified Data.Vector as Vector\n\n--\n-- Common types, consensus, network\n--\nimport           Cardano.Binary (Annotated (..))\nimport qualified Cardano.Binary as CBOR\nimport qualified Cardano.Prelude as CBOR (cborError)\n\n--\n-- Crypto API used by consensus and Shelley (and should be used by Byron)\n--\nimport qualified Cardano.Crypto.DSIGN.Class as Crypto\nimport qualified Cardano.Crypto.Util as Crypto\nimport qualified Cardano.Crypto.Wallet as Crypto.HD\n\n--\n-- Byron imports\n--\nimport qualified Cardano.Crypto.Hashing as Byron\nimport qualified Cardano.Crypto.ProtocolMagic as Byron\nimport qualified Cardano.Crypto.Signing as Byron\nimport qualified Cardano.Chain.Common as Byron\nimport qualified Cardano.Chain.UTxO as Byron\n\n--\n-- Shelley imports\n--\nimport           Ouroboros.Consensus.Shelley.Protocol.Crypto (StandardCrypto)\n\nimport qualified Cardano.Ledger.Core as Ledger\nimport qualified Cardano.Ledger.Era as Ledger\nimport qualified Cardano.Ledger.Shelley.Constraints as Shelley\n\nimport qualified Shelley.Spec.Ledger.Address.Bootstrap as Shelley\nimport           Shelley.Spec.Ledger.BaseTypes (maybeToStrictMaybe, strictMaybeToMaybe)\nimport qualified Shelley.Spec.Ledger.Hashing as Shelley\nimport qualified Shelley.Spec.Ledger.Keys as Shelley\nimport qualified Shelley.Spec.Ledger.Tx as Shelley\n\nimport           Cardano.Api.Address\nimport           Cardano.Api.Certificate\nimport           Cardano.Api.Eras\nimport           Cardano.Api.HasTypeProxy\nimport           Cardano.Api.Key\nimport           Cardano.Api.KeysByron\nimport           Cardano.Api.KeysShelley\nimport           Cardano.Api.NetworkId\nimport           Cardano.Api.Script\nimport           Cardano.Api.SerialiseCBOR\nimport           Cardano.Api.SerialiseTextEnvelope\nimport           Cardano.Api.TxBody\n\n\n-- ----------------------------------------------------------------------------\n-- Signed transactions\n--\n\ndata Tx era where\n\n     ByronTx\n       :: Byron.ATxAux ByteString\n       -> Tx ByronEra\n\n     ShelleyTx\n       :: ShelleyBasedEra era\n       -> Shelley.Tx (ShelleyLedgerEra era)\n       -> Tx era\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Eq (Tx era) where\n    (==) (ByronTx txA)\n         (ByronTx txB) = txA == txB\n\n    (==) (ShelleyTx era txA)\n         (ShelleyTx _   txB) =\n      case era of\n        ShelleyBasedEraShelley -> txA == txB\n        ShelleyBasedEraAllegra -> txA == txB\n        ShelleyBasedEraMary    -> txA == txB\n\n    (==) ByronTx{} (ShelleyTx era _) = case era of {}\n\n-- The GADT in the ShelleyTx case requires a custom instance\ninstance Show (Tx era) where\n    showsPrec p (ByronTx tx) =\n      showParen (p >= 11) $\n        showString \"ByronTx \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyTx ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyTx ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Tx era) where\n    data AsType (Tx era) = AsTx (AsType era)\n    proxyToAsType _ = AsTx (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronTx :: AsType (Tx ByronEra)\npattern AsByronTx   = AsTx AsByronEra\n{-# COMPLETE AsByronTx #-}\n\npattern AsShelleyTx :: AsType (Tx ShelleyEra)\npattern AsShelleyTx = AsTx AsShelleyEra\n{-# COMPLETE AsShelleyTx #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Tx era) where\n    serialiseToCBOR (ByronTx tx) = CBOR.recoverBytes tx\n\n    serialiseToCBOR (ShelleyTx era tx) =\n      case era of\n        ShelleyBasedEraShelley -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraAllegra -> serialiseShelleyBasedTx tx\n        ShelleyBasedEraMary    -> serialiseShelleyBasedTx tx\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronTx <$>\n            CBOR.decodeFullAnnotatedBytes\n              \"Byron Tx\" fromCBOR (LBS.fromStrict bs)\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraShelley) bs\n        AllegraEra -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraAllegra) bs\n        MaryEra    -> deserialiseShelleyBasedTx\n                        (ShelleyTx ShelleyBasedEraMary) bs\n\n-- | The serialisation format for the different Shelley-based eras are not the\n-- same, but they can be handled generally with one overloaded implementation.\n--\nserialiseShelleyBasedTx :: ToCBOR tx => tx -> ByteString\nserialiseShelleyBasedTx = CBOR.serialize'\n\ndeserialiseShelleyBasedTx :: FromCBOR (CBOR.Annotator tx)\n                          => (tx -> tx')\n                          -> ByteString\n                          -> Either CBOR.DecoderError tx'\ndeserialiseShelleyBasedTx mkTx bs =\n    mkTx <$> CBOR.decodeAnnotator \"Shelley Tx\" fromCBOR (LBS.fromStrict bs)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Tx era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxSignedByron\"\n        ShelleyEra -> \"TxSignedShelley\"\n        AllegraEra -> \"Tx AllegraEra\"\n        MaryEra    -> \"Tx MaryEra\"\n\n\ndata Witness era where\n\n     ByronKeyWitness\n       :: Byron.TxInWitness\n       -> Witness ByronEra\n\n     ShelleyBootstrapWitness\n       :: ShelleyBasedEra era\n       -> Shelley.BootstrapWitness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyKeyWitness\n       :: ShelleyBasedEra era\n       -> Shelley.WitVKey Shelley.Witness (ShelleyLedgerEra era)\n       -> Witness era\n\n     ShelleyScriptWitness\n       :: ShelleyBasedEra era\n       -> Ledger.Script (ShelleyLedgerEra era)\n       -> Witness era\n\n\n-- The GADT in the Shelley cases requires a custom instance\ninstance Eq (Witness era) where\n    (==) (ByronKeyWitness wA)\n         (ByronKeyWitness wB) = wA == wB\n\n    (==) (ShelleyBootstrapWitness era wA)\n         (ShelleyBootstrapWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyKeyWitness era wA)\n         (ShelleyKeyWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) (ShelleyScriptWitness era wA)\n         (ShelleyScriptWitness _   wB) =\n      case era of\n        ShelleyBasedEraShelley -> wA == wB\n        ShelleyBasedEraAllegra -> wA == wB\n        ShelleyBasedEraMary    -> wA == wB\n\n    (==) _ _ = False\n\n-- The GADT in the ShelleyTx case requires a custom instance\n--TODO: once we start providing custom patterns we should do the show in terms\n-- of those. It'll be less verbose too!\ninstance Show (Witness era) where\n    showsPrec p (ByronKeyWitness tx) =\n      showParen (p >= 11) $\n        showString \"ByronKeyWitness \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyBootstrapWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyBootstrapWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyKeyWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyKeyWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraShelley tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraShelley \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraAllegra tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraAllegra \"\n      . showsPrec 11 tx\n\n    showsPrec p (ShelleyScriptWitness ShelleyBasedEraMary tx) =\n      showParen (p >= 11) $\n        showString \"ShelleyScriptWitness ShelleyBasedEraMary \"\n      . showsPrec 11 tx\n\n\ninstance HasTypeProxy era => HasTypeProxy (Witness era) where\n    data AsType (Witness era) = AsWitness (AsType era)\n    proxyToAsType _ = AsWitness (proxyToAsType (Proxy :: Proxy era))\n\npattern AsByronWitness :: AsType (Witness ByronEra)\npattern AsByronWitness   = AsWitness AsByronEra\n{-# COMPLETE AsByronWitness #-}\n\npattern AsShelleyWitness :: AsType (Witness ShelleyEra)\npattern AsShelleyWitness = AsWitness AsShelleyEra\n{-# COMPLETE AsShelleyWitness #-}\n\n\ninstance IsCardanoEra era => SerialiseAsCBOR (Witness era) where\n    serialiseToCBOR (ByronKeyWitness wit) = CBOR.serialize' wit\n\n    serialiseToCBOR (ShelleyKeyWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedKeyWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedKeyWitness wit\n\n    serialiseToCBOR (ShelleyBootstrapWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedBootstrapWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedBootstrapWitness wit\n\n    serialiseToCBOR (ShelleyScriptWitness era wit) =\n      CBOR.serializeEncoding' $\n      case era of\n        ShelleyBasedEraShelley -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraAllegra -> encodeShelleyBasedScriptWitness wit\n        ShelleyBasedEraMary    -> encodeShelleyBasedScriptWitness wit\n\n    deserialiseFromCBOR _ bs =\n      case cardanoEra :: CardanoEra era of\n        ByronEra ->\n          ByronKeyWitness <$> CBOR.decodeFull' bs\n\n        -- Use the same derialisation impl, but at different types:\n        ShelleyEra -> decodeShelleyBasedWitness ShelleyBasedEraShelley bs\n        AllegraEra -> decodeShelleyBasedWitness ShelleyBasedEraAllegra bs\n        MaryEra    -> decodeShelleyBasedWitness ShelleyBasedEraMary    bs\n\n\nencodeShelleyBasedKeyWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedKeyWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 0 <> toCBOR wit\n\nencodeShelleyBasedBootstrapWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedBootstrapWitness wit =\n    CBOR.encodeListLen 2 <> CBOR.encodeWord 1 <> toCBOR wit\n\nencodeShelleyBasedScriptWitness :: ToCBOR w => w -> CBOR.Encoding\nencodeShelleyBasedScriptWitness wit =\n    CBOR.encodeListLen 2\n <> CBOR.encodeWord 2\n    -- We use an extra level of wrapping here to support the legacy\n    -- binary serialisation format for the @Script@ type from\n    -- @cardano-ledger-specs@.\n    --\n    -- TODO: make this go away by providing a WitnessSet type and only\n    -- providing serialisation for witness sets, using the serialisation\n    -- from the ledger lib rather than needing something custom here.\n    -- Signed transactions have witness sets, so this is an existing on-chain\n    -- stable format.\n <> CBOR.encodeListLen 2\n <> CBOR.encodeWord 0\n <> toCBOR wit\n\ndecodeShelleyBasedWitness :: forall era.\n                             Ledger.Era (ShelleyLedgerEra era)\n                          => FromCBOR (CBOR.Annotator (Ledger.Script (ShelleyLedgerEra era)))\n                          => ShelleyBasedEra era\n                          -> ByteString\n                          -> Either CBOR.DecoderError (Witness era)\ndecodeShelleyBasedWitness era =\n    CBOR.decodeAnnotator \"Shelley Witness\" decode . LBS.fromStrict\n  where\n    decode :: CBOR.Decoder s (CBOR.Annotator (Witness era))\n    decode =  do\n      CBOR.decodeListLenOf 2\n      t <- CBOR.decodeWord\n      case t of\n        0 -> fmap (fmap (ShelleyKeyWitness era)) fromCBOR\n        1 -> fmap (fmap (ShelleyBootstrapWitness era)) fromCBOR\n        -- We use an extra level of wrapping here to support the legacy\n        -- binary serialisation format for the @Script@ type from\n        -- @cardano-ledger-specs@.\n        2 -> do CBOR.decodeListLenOf 2\n                CBOR.decodeWordOf 0\n                fmap (fmap (ShelleyScriptWitness era)) fromCBOR\n        _ -> CBOR.cborError $ CBOR.DecoderErrorUnknownTag\n                                \"Shelley Witness\" (fromIntegral t)\n\n\ninstance IsCardanoEra era => HasTextEnvelope (Witness era) where\n    textEnvelopeType _ =\n      case cardanoEra :: CardanoEra era of\n        ByronEra   -> \"TxWitnessByron\"\n        ShelleyEra -> \"TxWitnessShelley\"\n        AllegraEra -> \"TxWitness AllegraEra\"\n        MaryEra    -> \"TxWitness MaryEra\"\n\n\ngetTxBody :: forall era. Tx era -> TxBody era\ngetTxBody (ByronTx Byron.ATxAux { Byron.aTaTx = txbody }) =\n    ByronTxBody txbody\n\ngetTxBody (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxBody tx\n      ShelleyBasedEraAllegra -> getShelleyTxBody tx\n      ShelleyBasedEraMary    -> getShelleyTxBody tx\n  where\n    getShelleyTxBody :: forall ledgerera.\n                        ShelleyLedgerEra era ~ ledgerera\n                     => Shelley.ShelleyBased ledgerera\n                     => Shelley.Tx ledgerera\n                     -> TxBody era\n    getShelleyTxBody Shelley.Tx {\n                       Shelley._body     = txbody,\n                       Shelley._metadata = txmetadata\n                     } =\n      ShelleyTxBody era txbody (strictMaybeToMaybe txmetadata)\n\n\ngetTxWitnesses :: forall era. Tx era -> [Witness era]\ngetTxWitnesses (ByronTx Byron.ATxAux { Byron.aTaWitness = witnesses }) =\n    map ByronKeyWitness\n  . Vector.toList\n  . unAnnotated\n  $ witnesses\n\ngetTxWitnesses (ShelleyTx era tx) =\n    case era of\n      ShelleyBasedEraShelley -> getShelleyTxWitnesses tx\n      ShelleyBasedEraAllegra -> getShelleyTxWitnesses tx\n      ShelleyBasedEraMary    -> getShelleyTxWitnesses tx\n  where\n    getShelleyTxWitnesses :: forall ledgerera.\n                             ShelleyLedgerEra era ~ ledgerera\n                          => Shelley.ShelleyBased ledgerera\n                          => Shelley.Tx ledgerera\n                          -> [Witness era]\n    getShelleyTxWitnesses Shelley.Tx {\n                            Shelley._witnessSet =\n                              Shelley.WitnessSet\n                                addrWits\n                                msigWits\n                                bootWits\n                          } =\n        map (ShelleyBootstrapWitness era) (Set.elems bootWits)\n     ++ map (ShelleyKeyWitness       era) (Set.elems addrWits)\n     ++ map (ShelleyScriptWitness    era) (Map.elems msigWits)\n\n\nmakeSignedTransaction :: forall era.\n                         [Witness era]\n                      -> TxBody era\n                      -> Tx era\nmakeSignedTransaction witnesses (ByronTxBody txbody) =\n    ByronTx\n  . Byron.annotateTxAux\n  $ Byron.mkTxAux\n      (unAnnotated txbody)\n      (Vector.fromList [ w | ByronKeyWitness w <- witnesses ])\n\nmakeSignedTransaction witnesses (ShelleyTxBody era txbody txmetadata) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraAllegra -> makeShelleySignedTransaction txbody\n      ShelleyBasedEraMary    -> makeShelleySignedTransaction txbody\n  where\n    makeShelleySignedTransaction :: forall ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Shelley.ValidateScript ledgerera\n                                 => Ledger.TxBody ledgerera\n                                 -> Tx era\n    makeShelleySignedTransaction txbody' =\n      ShelleyTx era $\n        Shelley.Tx\n          txbody'\n          (Shelley.WitnessSet\n            (Set.fromList [ w | ShelleyKeyWitness _ w <- witnesses ])\n            (Map.fromList [ (Shelley.hashScript sw, sw)\n                          | ShelleyScriptWitness _ sw <- witnesses ])\n            (Set.fromList [ w | ShelleyBootstrapWitness _ w <- witnesses ]))\n          (maybeToStrictMaybe txmetadata)\n\n\nmakeByronKeyWitness :: NetworkId\n                    -> TxBody ByronEra\n                    -> SigningKey ByronKey\n                    -> Witness ByronEra\nmakeByronKeyWitness _ (ShelleyTxBody era _ _) = case era of {}\nmakeByronKeyWitness nw (ByronTxBody txbody) =\n    let txhash :: Byron.Hash Byron.Tx\n        txhash = Byron.hashDecoded txbody\n\n        pm :: Byron.ProtocolMagicId\n        pm = toByronProtocolMagicId nw\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\(ByronSigningKey sk) ->\n        ByronKeyWitness $\n          Byron.VKWitness\n            (Byron.toVerification sk)\n            (Byron.sign pm Byron.SignTx sk (Byron.TxSigData txhash))\n\n-- | Either a network ID or a Byron address to be used in constructing a\n-- Shelley bootstrap witness.\ndata WitnessNetworkIdOrByronAddress\n  = WitnessNetworkId !NetworkId\n  -- ^ Network ID.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- the result will not consist of a derivation path. If that is required,\n  -- specify a 'WitnessByronAddress' value instead.\n  | WitnessByronAddress !(Address ByronAddr)\n  -- ^ Byron address.\n  --\n  -- If this value is used in the construction of a Shelley bootstrap witness,\n  -- both the network ID and derivation path will be extracted from the\n  -- address and used in the construction of the witness.\n\nmakeShelleyBootstrapWitness :: forall era.\n                               IsShelleyBasedEra era\n                            => WitnessNetworkIdOrByronAddress\n                            -> TxBody era\n                            -> SigningKey ByronKey\n                            -> Witness era\nmakeShelleyBootstrapWitness _ ByronTxBody{} _ =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\nmakeShelleyBootstrapWitness nwOrAddr (ShelleyTxBody era txbody _) sk =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraAllegra -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n      ShelleyBasedEraMary    -> makeShelleyBasedBootstrapWitness era\n                                  nwOrAddr txbody sk\n\nmakeShelleyBasedBootstrapWitness :: forall era ledgerera.\n                                    ShelleyLedgerEra era ~ ledgerera\n                                 => Shelley.ShelleyBased ledgerera\n                                 => Ledger.Crypto ledgerera ~ StandardCrypto\n                                 => ShelleyBasedEra era\n                                 -> WitnessNetworkIdOrByronAddress\n                                 -> Ledger.TxBody ledgerera\n                                 -> SigningKey ByronKey\n                                 -> Witness era\nmakeShelleyBasedBootstrapWitness era nwOrAddr txbody (ByronSigningKey sk) =\n    ShelleyBootstrapWitness era $\n      -- Byron era witnesses were weird. This reveals all that weirdness.\n      Shelley.BootstrapWitness {\n        Shelley.bwKey        = vk,\n        Shelley.bwSig        = signature,\n        Shelley.bwChainCode  = chainCode,\n        Shelley.bwAttributes = attributes\n      }\n  where\n    -- Starting with the easy bits: we /can/ convert the Byron verification key\n    -- to a the pair of a Shelley verification key plus the chain code.\n    --\n    (vk, chainCode) = Shelley.unpackByronVKey (Byron.toVerification sk)\n\n    -- Now the hairy bits.\n    --\n    -- Byron era signing keys were all /extended/ ed25519 keys. We have to\n    -- produce a signature using this extended signing key directly. They\n    -- /cannot/ be converted to a plain (non-extended) signing keys. Since we\n    -- now support extended signing keys for the Shelley too, we are able to\n    -- reuse that here.\n    --\n    signature :: Shelley.SignedDSIGN StandardCrypto\n                  (Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody)\n    signature = makeShelleySignature\n                  txhash\n                  -- Make the signature with the extended key directly:\n                  (ShelleyExtendedSigningKey (Byron.unSigningKey sk))\n\n    txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n    txhash = Shelley.hashAnnotated txbody\n    --TODO: use Shelley.eraIndTxBodyHash txbody once that function has a\n    -- suitably general type.\n\n    -- And finally we need to provide the extra suffix bytes necessary to\n    -- reconstruct the mini-Merkel tree that is a Byron address. The suffix\n    -- bytes are the serialised address attributes.\n    attributes =\n      CBOR.serialize' $\n        Byron.mkAttributes Byron.AddrAttributes {\n          Byron.aaVKDerivationPath = derivationPath,\n          Byron.aaNetworkMagic     = networkMagic\n        }\n\n    -- The 'WitnessNetworkIdOrByronAddress' value converted to an 'Either'.\n    eitherNwOrAddr :: Either NetworkId (Address ByronAddr)\n    eitherNwOrAddr =\n      case nwOrAddr of\n        WitnessNetworkId nw -> Left nw\n        WitnessByronAddress addr -> Right addr\n\n    unByronAddr :: Address ByronAddr -> Byron.Address\n    unByronAddr (ByronAddress addr) = addr\n\n    unAddrAttrs :: Address ByronAddr -> Byron.AddrAttributes\n    unAddrAttrs = Byron.attrData . Byron.addrAttributes . unByronAddr\n\n    derivationPath :: Maybe Byron.HDAddressPayload\n    derivationPath =\n      either\n        (const Nothing)\n        (Byron.aaVKDerivationPath . unAddrAttrs)\n        eitherNwOrAddr\n\n    networkMagic :: Byron.NetworkMagic\n    networkMagic =\n      either\n        toByronNetworkMagic\n        (Byron.aaNetworkMagic . unAddrAttrs)\n        eitherNwOrAddr\n\n\ndata ShelleyWitnessSigningKey =\n       WitnessPaymentKey         (SigningKey PaymentKey)\n     | WitnessPaymentExtendedKey (SigningKey PaymentExtendedKey)\n     | WitnessStakeKey           (SigningKey StakeKey)\n     | WitnessStakeExtendedKey   (SigningKey StakeExtendedKey)\n     | WitnessStakePoolKey       (SigningKey StakePoolKey)\n     | WitnessGenesisKey         (SigningKey GenesisKey)\n     | WitnessGenesisExtendedKey (SigningKey GenesisExtendedKey)\n     | WitnessGenesisDelegateKey (SigningKey GenesisDelegateKey)\n     | WitnessGenesisDelegateExtendedKey\n                                 (SigningKey GenesisDelegateExtendedKey)\n     | WitnessGenesisUTxOKey     (SigningKey GenesisUTxOKey)\n\n\nmakeShelleyKeyWitness :: forall era.\n                         IsShelleyBasedEra era\n                      => TxBody era\n                      -> ShelleyWitnessSigningKey\n                      -> Witness era\nmakeShelleyKeyWitness (ShelleyTxBody era txbody _) =\n    case era of\n      ShelleyBasedEraShelley -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraAllegra -> makeShelleyBasedKeyWitness txbody\n      ShelleyBasedEraMary    -> makeShelleyBasedKeyWitness txbody\n  where\n    makeShelleyBasedKeyWitness :: forall ledgerera.\n                                  ShelleyLedgerEra era ~ ledgerera\n                               => Shelley.ShelleyBased ledgerera\n                               => Ledger.Crypto ledgerera ~ StandardCrypto\n                               => Ledger.TxBody ledgerera\n                               -> ShelleyWitnessSigningKey\n                               -> Witness era\n    makeShelleyBasedKeyWitness txbody' =\n\n     let txhash :: Shelley.Hash StandardCrypto Shelley.EraIndependentTxBody\n         txhash = Shelley.hashAnnotated txbody'\n\n        -- To allow sharing of the txhash computation across many signatures we\n        -- define and share the txhash outside the lambda for the signing key:\n     in \\wsk ->\n        let sk        = toShelleySigningKey wsk\n            vk        = getShelleyKeyWitnessVerificationKey sk\n            signature = makeShelleySignature txhash sk\n         in ShelleyKeyWitness era $\n              Shelley.WitVKey vk signature\n\nmakeShelleyKeyWitness ByronTxBody{} =\n    case shelleyBasedEra :: ShelleyBasedEra era of {}\n\n\n-- | We support making key witnesses with both normal and extended signing keys.\n--\ndata ShelleySigningKey =\n       -- | A normal ed25519 signing key\n       ShelleyNormalSigningKey   (Shelley.SignKeyDSIGN StandardCrypto)\n\n       -- | An extended ed25519 signing key\n     | ShelleyExtendedSigningKey Crypto.HD.XPrv\n\n\ntoShelleySigningKey :: ShelleyWitnessSigningKey -> ShelleySigningKey\ntoShelleySigningKey key = case key of\n  WitnessPaymentKey     (PaymentSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessStakeKey       (StakeSigningKey       sk) -> ShelleyNormalSigningKey sk\n  WitnessStakePoolKey   (StakePoolSigningKey   sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisKey     (GenesisSigningKey     sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisUTxOKey (GenesisUTxOSigningKey sk) -> ShelleyNormalSigningKey sk\n  WitnessGenesisDelegateKey (GenesisDelegateSigningKey sk) ->\n    ShelleyNormalSigningKey sk\n\n  -- The cases for extended keys\n  WitnessPaymentExtendedKey (PaymentExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessStakeExtendedKey (StakeExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisExtendedKey (GenesisExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n  WitnessGenesisDelegateExtendedKey (GenesisDelegateExtendedSigningKey sk) ->\n    ShelleyExtendedSigningKey sk\n\n\ngetShelleyKeyWitnessVerificationKey\n  :: ShelleySigningKey\n  -> Shelley.VKey Shelley.Witness StandardCrypto\ngetShelleyKeyWitnessVerificationKey (ShelleyNormalSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . getVerificationKey\n    . PaymentSigningKey\n    $ sk\n\ngetShelleyKeyWitnessVerificationKey (ShelleyExtendedSigningKey sk) =\n      (Shelley.coerceKeyRole :: Shelley.VKey Shelley.Payment StandardCrypto\n                             -> Shelley.VKey Shelley.Witness StandardCrypto)\n    . (\\(PaymentVerificationKey vk) -> vk)\n    . (castVerificationKey :: VerificationKey PaymentExtendedKey\n                           -> VerificationKey PaymentKey)\n    . getVerificationKey\n    . PaymentExtendedSigningKey\n    $ sk\n\n\nmakeShelleySignature\n  :: Crypto.SignableRepresentation tosign\n  => tosign\n  -> ShelleySigningKey\n  -> Shelley.SignedDSIGN StandardCrypto tosign\nmakeShelleySignature tosign (ShelleyNormalSigningKey sk) =\n    Crypto.signedDSIGN () tosign sk\n\nmakeShelleySignature tosign (ShelleyExtendedSigningKey sk) =\n    fromXSignature $\n      Crypto.HD.sign\n        BS.empty  -- passphrase for (unused) in-memory encryption\n        sk\n        (Crypto.getSignableRepresentation tosign)\n  where\n    fromXSignature :: Crypto.HD.XSignature\n                   -> Shelley.SignedDSIGN StandardCrypto b\n    fromXSignature =\n        Crypto.SignedDSIGN\n      . fromMaybe impossible\n      . Crypto.rawDeserialiseSigDSIGN\n      . Crypto.HD.unXSignature\n\n    impossible =\n      error \"makeShelleyKeyWitnessSignature: byron and shelley signature sizes do not match\"\n\n\nmakeScriptWitness :: forall era. ScriptInEra era -> Witness era\nmakeScriptWitness s = ShelleyScriptWitness\n                        (eraOfScriptInEra s)\n                        (toShelleyScript s)\n\n\n-- order of signing keys must match txins\nsignByronTransaction :: NetworkId\n                     -> TxBody ByronEra\n                     -> [SigningKey ByronKey]\n                     -> Tx ByronEra\nsignByronTransaction nw txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeByronKeyWitness nw txbody) sks\n\n-- signing keys is a set\nsignShelleyTransaction :: IsShelleyBasedEra era\n                       => TxBody era\n                       -> [ShelleyWitnessSigningKey]\n                       -> Tx era\nsignShelleyTransaction txbody sks =\n    makeSignedTransaction witnesses txbody\n  where\n    witnesses = map (makeShelleyKeyWitness txbody) sks\n\n"}}}
2020-12-03 13:37:27.00625953 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":271}}
2020-12-03 13:37:27.006397235 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":251}}
2020-12-03 13:37:27.006464446 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":273}}
2020-12-03 13:37:27.006477249 [ThreadId 8854] - codeLens was cancelled
2020-12-03 13:37:27.00640158 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",Modified)]
2020-12-03 13:37:27.006519276 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":274,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:37:27.006544509 [ThreadId 8852] - Cancelled request IdInt 251
2020-12-03 13:37:27.006598755 [ThreadId 8972] - C:GetHieAst was cancelled
2020-12-03 13:37:27.006546414 [ThreadId 8984] - CodeAction was cancelled
2020-12-03 13:37:27.006648742 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":275,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 13:37:27.006678509 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":251}
2020-12-03 13:37:27.006686262 [ThreadId 8970] - Cancelled request IdInt 271
2020-12-03 13:37:27.006681324 [ThreadId 8982] - Cancelled request IdInt 273
2020-12-03 13:37:27.006766599 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":271}
2020-12-03 13:37:27.006827815 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":273}
2020-12-03 13:37:27.006865983 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:37:27.00684134 [ThreadId 8475] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:37:27.007051667 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:37:27.008178919 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":15,"character":7},"end":{"line":15,"character":21}},"kind":1,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}},"kind":2,"children":[{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":45,"character":0},"end":{"line":45,"character":24}}},{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}},"kind":2,"name":"import Data.Maybe","range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}}},{"selectionRange":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}}},{"selectionRange":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"kind":2,"name":"import Data.ByteString","range":{"start":{"line":50,"character":0},"end":{"line":50,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"kind":2,"name":"import Data.Map.Strict","range":{"start":{"line":53,"character":0},"end":{"line":53,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"kind":2,"name":"import Data.Set","range":{"start":{"line":54,"character":0},"end":{"line":54,"character":32}},"detail":"qualified"},{"selectionRange":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"kind":2,"name":"import Data.Vector","range":{"start":{"line":55,"character":0},"end":{"line":55,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":60,"character":0},"end":{"line":60,"character":48}}},{"selectionRange":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":61,"character":0},"end":{"line":61,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":62,"character":0},"end":{"line":62,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"kind":2,"name":"import Cardano.Crypto.DSIGN.Class","range":{"start":{"line":67,"character":0},"end":{"line":67,"character":53}},"detail":"qualified"},{"selectionRange":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"kind":2,"name":"import Cardano.Crypto.Util","range":{"start":{"line":68,"character":0},"end":{"line":68,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"kind":2,"name":"import Cardano.Crypto.Wallet","range":{"start":{"line":69,"character":0},"end":{"line":69,"character":51}},"detail":"qualified"},{"selectionRange":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"kind":2,"name":"import Cardano.Crypto.Hashing","range":{"start":{"line":74,"character":0},"end":{"line":74,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"kind":2,"name":"import Cardano.Crypto.ProtocolMagic","range":{"start":{"line":75,"character":0},"end":{"line":75,"character":54}},"detail":"qualified"},{"selectionRange":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"kind":2,"name":"import Cardano.Crypto.Signing","range":{"start":{"line":76,"character":0},"end":{"line":76,"character":48}},"detail":"qualified"},{"selectionRange":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"kind":2,"name":"import Cardano.Chain.Common","range":{"start":{"line":77,"character":0},"end":{"line":77,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"kind":2,"name":"import Cardano.Chain.UTxO","range":{"start":{"line":78,"character":0},"end":{"line":78,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Protocol.Crypto","range":{"start":{"line":83,"character":0},"end":{"line":83,"character":77}}},{"selectionRange":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"kind":2,"name":"import Cardano.Ledger.Core","range":{"start":{"line":85,"character":0},"end":{"line":85,"character":46}},"detail":"qualified"},{"selectionRange":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"kind":2,"name":"import Cardano.Ledger.Era","range":{"start":{"line":86,"character":0},"end":{"line":86,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"kind":2,"name":"import Cardano.Ledger.Shelley.Constraints","range":{"start":{"line":87,"character":0},"end":{"line":87,"character":62}},"detail":"qualified"},{"selectionRange":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"kind":2,"name":"import Shelley.Spec.Ledger.Address.Bootstrap","range":{"start":{"line":89,"character":0},"end":{"line":89,"character":65}},"detail":"qualified"},{"selectionRange":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}},"kind":2,"name":"import Shelley.Spec.Ledger.BaseTypes","range":{"start":{"line":90,"character":0},"end":{"line":90,"character":87}}},{"selectionRange":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.Hashing","range":{"start":{"line":91,"character":0},"end":{"line":91,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.Keys","range":{"start":{"line":92,"character":0},"end":{"line":92,"character":52}},"detail":"qualified"},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"kind":2,"name":"import Shelley.Spec.Ledger.Tx","range":{"start":{"line":93,"character":0},"end":{"line":93,"character":50}},"detail":"qualified"},{"selectionRange":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}},"kind":2,"name":"import Cardano.Api.Address","range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}}},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}},"kind":2,"name":"import Cardano.Api.Certificate","range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}}},{"selectionRange":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"kind":2,"name":"import Cardano.Api.Eras","range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"selectionRange":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"kind":2,"name":"import Cardano.Api.HasTypeProxy","range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"selectionRange":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}},"kind":2,"name":"import Cardano.Api.Key","range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}}},{"selectionRange":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}},"kind":2,"name":"import Cardano.Api.KeysByron","range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}}},{"selectionRange":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}},"kind":2,"name":"import Cardano.Api.KeysShelley","range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}}},{"selectionRange":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}},"kind":2,"name":"import Cardano.Api.NetworkId","range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}}},{"selectionRange":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}},"kind":2,"name":"import Cardano.Api.Script","range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}}},{"selectionRange":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}},"kind":2,"name":"import Cardano.Api.SerialiseCBOR","range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}}},{"selectionRange":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}},"kind":2,"name":"import Cardano.Api.SerialiseTextEnvelope","range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}}},{"selectionRange":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}},"kind":2,"name":"import Cardano.Api.TxBody","range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}}}],"name":"imports","range":{"start":{"line":45,"character":0},"end":{"line":106,"character":35}}},{"selectionRange":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}},"kind":23,"children":[{"selectionRange":{"start":{"line":115,"character":5},"end":{"line":115,"character":12}},"kind":9,"name":"ByronTx","range":{"start":{"line":115,"character":5},"end":{"line":117,"character":21}}},{"selectionRange":{"start":{"line":119,"character":5},"end":{"line":119,"character":14}},"kind":9,"name":"ShelleyTx","range":{"start":{"line":119,"character":5},"end":{"line":122,"character":16}}}],"name":"Tx","range":{"start":{"line":113,"character":0},"end":{"line":122,"character":16}}},{"selectionRange":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}},"kind":11,"name":"Eq (Tx era)","range":{"start":{"line":125,"character":0},"end":{"line":136,"character":53}}},{"selectionRange":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}},"kind":11,"name":"Show (Tx era)","range":{"start":{"line":139,"character":0},"end":{"line":158,"character":23}}},{"selectionRange":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Tx era)","range":{"start":{"line":161,"character":0},"end":{"line":163,"character":63}}},{"selectionRange":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Tx era)","range":{"start":{"line":174,"character":0},"end":{"line":196,"character":58}}},{"selectionRange":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}},"kind":12,"name":"serialiseShelleyBasedTx","range":{"start":{"line":202,"character":0},"end":{"line":202,"character":41}}},{"selectionRange":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}},"kind":12,"name":"deserialiseShelleyBasedTx","range":{"start":{"line":208,"character":0},"end":{"line":209,"character":75}}},{"selectionRange":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Tx era)","range":{"start":{"line":212,"character":0},"end":{"line":218,"character":34}}},{"selectionRange":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":223,"character":5},"end":{"line":223,"character":20}},"kind":9,"name":"ByronKeyWitness","range":{"start":{"line":223,"character":5},"end":{"line":225,"character":26}}},{"selectionRange":{"start":{"line":227,"character":5},"end":{"line":227,"character":28}},"kind":9,"name":"ShelleyBootstrapWitness","range":{"start":{"line":227,"character":5},"end":{"line":230,"character":21}}},{"selectionRange":{"start":{"line":232,"character":5},"end":{"line":232,"character":22}},"kind":9,"name":"ShelleyKeyWitness","range":{"start":{"line":232,"character":5},"end":{"line":235,"character":21}}},{"selectionRange":{"start":{"line":237,"character":5},"end":{"line":237,"character":25}},"kind":9,"name":"ShelleyScriptWitness","range":{"start":{"line":237,"character":5},"end":{"line":240,"character":21}}}],"name":"Witness","range":{"start":{"line":221,"character":0},"end":{"line":240,"character":21}}},{"selectionRange":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}},"kind":11,"name":"Eq (Witness era)","range":{"start":{"line":244,"character":0},"end":{"line":269,"character":20}}},{"selectionRange":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}},"kind":11,"name":"Show (Witness era)","range":{"start":{"line":274,"character":0},"end":{"line":323,"character":23}}},{"selectionRange":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}},"kind":11,"name":"HasTypeProxy era => HasTypeProxy (Witness era)","range":{"start":{"line":326,"character":0},"end":{"line":328,"character":68}}},{"selectionRange":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}},"kind":11,"name":"IsCardanoEra era => SerialiseAsCBOR (Witness era)","range":{"start":{"line":339,"character":0},"end":{"line":371,"character":73}}},{"selectionRange":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}},"kind":12,"name":"encodeShelleyBasedKeyWitness","range":{"start":{"line":375,"character":0},"end":{"line":376,"character":59}}},{"selectionRange":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}},"kind":12,"name":"encodeShelleyBasedBootstrapWitness","range":{"start":{"line":379,"character":0},"end":{"line":380,"character":59}}},{"selectionRange":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}},"kind":12,"name":"encodeShelleyBasedScriptWitness","range":{"start":{"line":383,"character":0},"end":{"line":397,"character":14}}},{"selectionRange":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}},"kind":12,"name":"decodeShelleyBasedWitness","range":{"start":{"line":405,"character":0},"end":{"line":422,"character":66}}},{"selectionRange":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}},"kind":11,"name":"IsCardanoEra era => HasTextEnvelope (Witness era)","range":{"start":{"line":425,"character":0},"end":{"line":431,"character":41}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}},"kind":12,"name":"getTxBody","range":{"start":{"line":435,"character":0},"end":{"line":453,"character":62}}},{"selectionRange":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}},"kind":12,"name":"getTxWitnesses","range":{"start":{"line":457,"character":0},"end":{"line":483,"character":62}}},{"selectionRange":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}},"kind":12,"name":"makeSignedTransaction","range":{"start":{"line":490,"character":0},"end":{"line":518,"character":41}}},{"selectionRange":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}},"kind":12,"name":"makeByronKeyWitness","range":{"start":{"line":525,"character":0},"end":{"line":542,"character":29}}},{"selectionRange":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}},"kind":23,"children":[{"selectionRange":{"start":{"line":544,"character":4},"end":{"line":544,"character":20}},"kind":9,"name":"WitnessNetworkId","range":{"start":{"line":544,"character":4},"end":{"line":549,"character":51}}},{"selectionRange":{"start":{"line":550,"character":4},"end":{"line":550,"character":23}},"kind":9,"name":"WitnessByronAddress","range":{"start":{"line":550,"character":4},"end":{"line":555,"character":57}}}],"name":"WitnessNetworkIdOrByronAddress","range":{"start":{"line":543,"character":0},"end":{"line":555,"character":57}}},{"selectionRange":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}},"kind":12,"name":"makeShelleyBootstrapWitness","range":{"start":{"line":563,"character":0},"end":{"line":573,"character":52}}},{"selectionRange":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}},"kind":12,"name":"makeShelleyBasedBootstrapWitness","range":{"start":{"line":584,"character":0},"end":{"line":654,"character":22}}},{"selectionRange":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}},"kind":23,"children":[{"selectionRange":{"start":{"line":658,"character":7},"end":{"line":658,"character":24}},"kind":9,"name":"WitnessPaymentKey","range":{"start":{"line":658,"character":7},"end":{"line":658,"character":56}}},{"selectionRange":{"start":{"line":659,"character":7},"end":{"line":659,"character":32}},"kind":9,"name":"WitnessPaymentExtendedKey","range":{"start":{"line":659,"character":7},"end":{"line":659,"character":64}}},{"selectionRange":{"start":{"line":660,"character":7},"end":{"line":660,"character":22}},"kind":9,"name":"WitnessStakeKey","range":{"start":{"line":660,"character":7},"end":{"line":660,"character":54}}},{"selectionRange":{"start":{"line":661,"character":7},"end":{"line":661,"character":30}},"kind":9,"name":"WitnessStakeExtendedKey","range":{"start":{"line":661,"character":7},"end":{"line":661,"character":62}}},{"selectionRange":{"start":{"line":662,"character":7},"end":{"line":662,"character":26}},"kind":9,"name":"WitnessStakePoolKey","range":{"start":{"line":662,"character":7},"end":{"line":662,"character":58}}},{"selectionRange":{"start":{"line":663,"character":7},"end":{"line":663,"character":24}},"kind":9,"name":"WitnessGenesisKey","range":{"start":{"line":663,"character":7},"end":{"line":663,"character":56}}},{"selectionRange":{"start":{"line":664,"character":7},"end":{"line":664,"character":32}},"kind":9,"name":"WitnessGenesisExtendedKey","range":{"start":{"line":664,"character":7},"end":{"line":664,"character":64}}},{"selectionRange":{"start":{"line":665,"character":7},"end":{"line":665,"character":32}},"kind":9,"name":"WitnessGenesisDelegateKey","range":{"start":{"line":665,"character":7},"end":{"line":665,"character":64}}},{"selectionRange":{"start":{"line":666,"character":7},"end":{"line":666,"character":40}},"kind":9,"name":"WitnessGenesisDelegateExtendedKey","range":{"start":{"line":666,"character":7},"end":{"line":667,"character":72}}},{"selectionRange":{"start":{"line":668,"character":7},"end":{"line":668,"character":28}},"kind":9,"name":"WitnessGenesisUTxOKey","range":{"start":{"line":668,"character":7},"end":{"line":668,"character":60}}}],"name":"ShelleyWitnessSigningKey","range":{"start":{"line":657,"character":0},"end":{"line":668,"character":60}}},{"selectionRange":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}},"kind":12,"name":"makeShelleyKeyWitness","range":{"start":{"line":676,"character":0},"end":{"line":708,"character":2}}},{"selectionRange":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}},"kind":23,"children":[{"selectionRange":{"start":{"line":711,"character":7},"end":{"line":711,"character":30}},"kind":9,"name":"ShelleyNormalSigningKey","range":{"start":{"line":711,"character":7},"end":{"line":711,"character":70}}},{"selectionRange":{"start":{"line":714,"character":7},"end":{"line":714,"character":32}},"kind":9,"name":"ShelleyExtendedSigningKey","range":{"start":{"line":714,"character":7},"end":{"line":714,"character":47}}}],"name":"ShelleySigningKey","range":{"start":{"line":709,"character":0},"end":{"line":714,"character":47}}},{"selectionRange":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}},"kind":12,"name":"toShelleySigningKey","range":{"start":{"line":718,"character":0},"end":{"line":738,"character":32}}},{"selectionRange":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}},"kind":12,"name":"getShelleyKeyWitnessVerificationKey","range":{"start":{"line":744,"character":0},"end":{"line":760,"character":8}}},{"selectionRange":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}},"kind":12,"name":"makeShelleySignature","range":{"start":{"line":768,"character":0},"end":{"line":787,"character":92}}},{"selectionRange":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}},"kind":12,"name":"makeScriptWitness","range":{"start":{"line":791,"character":0},"end":{"line":793,"character":43}}},{"selectionRange":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}},"kind":12,"name":"signByronTransaction","range":{"start":{"line":801,"character":0},"end":{"line":804,"character":55}}},{"selectionRange":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}},"kind":12,"name":"signShelleyTransaction","range":{"start":{"line":811,"character":0},"end":{"line":814,"character":54}}}],"name":"Cardano.Api.Tx","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":275}
2020-12-03 13:37:27.299159933 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":276,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 13:37:27.299179969 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"86/91"},"token":"619"},"method":"$/progress"}
2020-12-03 13:37:27.299327747 [ThreadId 9563] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:37:27.29930716 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":277,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":497,"character":0},"end":{"line":497,"character":21}},"context":{"diagnostics":[]}}}
2020-12-03 13:37:27.299448185 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":274}}
2020-12-03 13:37:27.29955597 [ThreadId 9278] - CodeAction was cancelled
2020-12-03 13:37:27.299608529 [ThreadId 9271] - Cancelled request IdInt 274
2020-12-03 13:37:27.299678207 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":274}
2020-12-03 13:37:27.300541164 [ThreadId 9573] - finish: CodeAction (took 0.29s)
2020-12-03 13:37:27.300549692 [ThreadId 9574] - finish: C:GetParsedModule (took 0.28s)
2020-12-03 13:37:27.300554419 [ThreadId 9576] - finish: CodeAction (took 0.00s)
2020-12-03 13:37:27.300685342 [ThreadId 9581] - finish: CodeAction:PackageExports (took 0.00s)
2020-12-03 13:37:27.300865092 [ThreadId 9582] - finish: importLens (took 0.00s)
2020-12-03 13:37:27.470322856 [ThreadId 9772] - finish: codeLens (took 0.17s)
2020-12-03 13:37:27.470323448 [ThreadId 9773] - finish: retrie (took 0.17s)
2020-12-03 13:37:27.47120352 [ThreadId 9781] - finish:  (took 0.00s)
2020-12-03 13:37:27.472831223 [ThreadId 7] - <--2--{"result":[{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}},"newText":"import Data.Maybe ( fromMaybe )"}]}}],"title":"import Data.Maybe ( fromMaybe )"},"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":27}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}},"newText":"import Cardano.Api.Address\n    ( AsType,\n      StakeExtendedKey,\n      StakeKey,\n      Address(ByronAddress),\n      ByronAddr )"}]}}],"title":"import Cardano.Api.Address\n    ( AsType,\n      StakeExtendedKey,\n      StakeKey,\n      Address(ByronAddress),\n      ByronAddr )"},"range":{"start":{"line":95,"character":0},"end":{"line":95,"character":36}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}},"newText":"import Cardano.Api.Certificate ( AsType(AsShelleyEra, AsByronEra) )"}]}}],"title":"import Cardano.Api.Certificate ( AsType(AsShelleyEra, AsByronEra) )"},"range":{"start":{"line":96,"character":0},"end":{"line":96,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}},"newText":"import Cardano.Api.Eras\n    ( ByronEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"}]}}],"title":"import Cardano.Api.Eras\n    ( ByronEra,\n      CardanoEra(..),\n      IsCardanoEra(..),\n      IsShelleyBasedEra(..),\n      ShelleyBasedEra(..),\n      ShelleyEra,\n      ShelleyLedgerEra )"},"range":{"start":{"line":97,"character":0},"end":{"line":97,"character":33}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}},"newText":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"}]}}],"title":"import Cardano.Api.HasTypeProxy\n    ( Proxy(..), HasTypeProxy(proxyToAsType) )"},"range":{"start":{"line":98,"character":0},"end":{"line":98,"character":41}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}},"newText":"import Cardano.Api.Key\n    ( CastVerificationKeyRole(castVerificationKey),\n      Key(getVerificationKey, SigningKey, VerificationKey) )"}]}}],"title":"import Cardano.Api.Key\n    ( CastVerificationKeyRole(castVerificationKey),\n      Key(getVerificationKey, SigningKey, VerificationKey) )"},"range":{"start":{"line":99,"character":0},"end":{"line":99,"character":32}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}},"newText":"import Cardano.Api.KeysByron\n    ( SigningKey(PaymentExtendedSigningKey, ByronSigningKey,\n                 StakeSigningKey, StakePoolSigningKey, GenesisSigningKey,\n                 GenesisUTxOSigningKey, GenesisDelegateSigningKey,\n                 StakeExtendedSigningKey, GenesisExtendedSigningKey,\n                 GenesisDelegateExtendedSigningKey, PaymentSigningKey),\n      VerificationKey(PaymentVerificationKey),\n      ByronKey )"}]}}],"title":"import Cardano.Api.KeysByron\n    ( SigningKey(PaymentExtendedSigningKey, ByronSigningKey,\n                 StakeSigningKey, StakePoolSigningKey, GenesisSigningKey,\n                 GenesisUTxOSigningKey, GenesisDelegateSigningKey,\n                 StakeExtendedSigningKey, GenesisExtendedSigningKey,\n                 GenesisDelegateExtendedSigningKey, PaymentSigningKey),\n      VerificationKey(PaymentVerificationKey),\n      ByronKey )"},"range":{"start":{"line":100,"character":0},"end":{"line":100,"character":38}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}},"newText":"import Cardano.Api.KeysShelley\n    ( GenesisDelegateExtendedKey,\n      GenesisDelegateKey,\n      GenesisExtendedKey,\n      GenesisKey,\n      GenesisUTxOKey,\n      PaymentExtendedKey,\n      PaymentKey,\n      StakePoolKey )"}]}}],"title":"import Cardano.Api.KeysShelley\n    ( GenesisDelegateExtendedKey,\n      GenesisDelegateKey,\n      GenesisExtendedKey,\n      GenesisKey,\n      GenesisUTxOKey,\n      PaymentExtendedKey,\n      PaymentKey,\n      StakePoolKey )"},"range":{"start":{"line":101,"character":0},"end":{"line":101,"character":40}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}},"newText":"import Cardano.Api.NetworkId\n    ( toByronNetworkMagic, toByronProtocolMagicId, NetworkId )"}]}}],"title":"import Cardano.Api.NetworkId\n    ( toByronNetworkMagic, toByronProtocolMagicId, NetworkId )"},"range":{"start":{"line":102,"character":0},"end":{"line":102,"character":38}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}},"newText":"import Cardano.Api.Script\n    ( eraOfScriptInEra, toShelleyScript, ScriptInEra )"}]}}],"title":"import Cardano.Api.Script\n    ( eraOfScriptInEra, toShelleyScript, ScriptInEra )"},"range":{"start":{"line":103,"character":0},"end":{"line":103,"character":35}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}},"newText":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"}]}}],"title":"import Cardano.Api.SerialiseCBOR\n    ( FromCBOR(fromCBOR), ToCBOR(toCBOR), SerialiseAsCBOR(..) )"},"range":{"start":{"line":104,"character":0},"end":{"line":104,"character":42}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}},"newText":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"}]}}],"title":"import Cardano.Api.SerialiseTextEnvelope\n    ( HasTextEnvelope(textEnvelopeType) )"},"range":{"start":{"line":105,"character":0},"end":{"line":105,"character":50}}},{"command":{"command":"9683:importLens:ImportLensCommand","arguments":[{"changes":{"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs":[{"range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}},"newText":"import Cardano.Api.TxBody ( TxBody(..) )"}]}}],"title":"import Cardano.Api.TxBody ( TxBody(..) )"},"range":{"start":{"line":106,"character":0},"end":{"line":106,"character":35}}}],"jsonrpc":"2.0","id":276}
2020-12-03 13:37:27.488344298 [ThreadId 9784] - finish: tactic (took 0.02s)
2020-12-03 13:37:27.488503875 [ThreadId 9789] - finish: tactic (took 0.00s)
2020-12-03 13:37:27.488550604 [ThreadId 9790] - finish: tactic (took 0.00s)
2020-12-03 13:37:27.488669735 [ThreadId 7] - <--2--{"result":[],"jsonrpc":"2.0","id":277}
2020-12-03 13:37:27.499605416 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"87/91"},"token":"619"},"method":"$/progress"}
2020-12-03 13:37:27.597869309 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":278,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"position":{"line":505,"character":43}}}
2020-12-03 13:37:27.598002867 [ThreadId 9795] - GhcIde.hover entered (ideLogger)
2020-12-03 13:37:27.59809719 [ThreadId 9795] - Hover request at position 506:44 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:37:27.598238791 [ThreadId 9796] - finish: C:GetHieAst (took 0.00s)
2020-12-03 13:37:27.598335661 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nShelleyBased :: * -> Constraint\n```\n\n*Defined in ‘Cardano.Ledger.Shelley.Constraints’*\n\n\n\n"},"range":{"start":{"line":505,"character":36},"end":{"line":505,"character":56}}},"jsonrpc":"2.0","id":278}
2020-12-03 13:37:27.599776006 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"86/91"},"token":"619"},"method":"$/progress"}
2020-12-03 13:37:27.613135599 [ThreadId 9805] - finish: C:GetDocMap (took 0.01s)
2020-12-03 13:37:27.700283033 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"87/91"},"token":"619"},"method":"$/progress"}
2020-12-03 13:37:39.541654445 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":1},"method":"$/progress"}
2020-12-03 13:37:39.541587365 [ThreadId 5383] - Session loading result: Right (ComponentOptions {componentOptions = ["-fbuilding-cabal-package","-O0","-outputdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/build/cardano-cli-test/cardano-cli-test-tmp","-odir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/build/cardano-cli-test/cardano-cli-test-tmp","-hidir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/build/cardano-cli-test/cardano-cli-test-tmp","-stubdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/build/cardano-cli-test/cardano-cli-test-tmp","-i","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/build/cardano-cli-test/cardano-cli-test-tmp","-itest","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/build/cardano-cli-test/autogen","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/build/cardano-cli-test/autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/build/cardano-cli-test/cardano-cli-test-tmp","-optP-include","-optP/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/build/cardano-cli-test/autogen/cabal_macros.h","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","/home/jordan/.cabal/store/ghc-8.10.2/package.db","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/packagedb/ghc-8.10.2","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/t/cardano-cli-test/package.conf.inplace","-package-id","aeson-1.5.4.1-778a06fa5c9318198c793c5f8e2ca8d95fb38f4f10ed2bb32743f99d3f297246","-package-id","base-4.14.1.0","-package-id","base16-bytestring-1.0.1.0-9f11fc286491f106a9ef784dbd62d74f1270ad38dd03d9b8cbaa41c1bbf814c8","-package-id","bech32-1.1.0-ae5f2a1a89c10d7c25e2ebed7b7fb0cd489664bd6e6c0de80e0c1dff37d17063","-package-id","bytestring-0.10.10.0","-package-id","cardano-api-1.24.0-inplace","-package-id","cardano-cli-1.24.0-inplace","-package-id","cardano-crypto-class-2.0.0-inplace","-package-id","cardano-ledger-shelley-ma-0.1.0.0-inplace","-package-id","cardano-node-1.24.0-inplace","-package-id","cardano-prelude-0.1.0.0-inplace","-package-id","containers-0.6.2.1","-package-id","deepseq-1.4.4.0","-package-id","directory-1.3.6.0","-package-id","exceptions-0.10.4","-package-id","hedgehog-1.0.3-1d853577dd99f41fdf518d03a5e862d26fcc67b381f756c1282fa29d414544a6","-package-id","hedgehog-extras-0.1.0.0-inplace","-package-id","lifted-base-0.2.3.12-95fa9496c1c2d33d6a2a1a92e6a72de15c277c2567319b0f787a95cb173697be","-package-id","optparse-applicative-0.16.0.0-6005665cbdc6c67c10623d1a27ae7079df56bfb349d4c1af4f0d72cbfdeabd79","-package-id","ouroboros-consensus-shelley-0.1.0.0-inplace","-package-id","parsec-3.1.14.0","-package-id","process-1.6.9.0","-package-id","shelley-spec-ledger-0.1.0.0-inplace","-package-id","shelley-spec-ledger-test-0.1.0.0-inplace","-package-id","temporary-1.3-15562f3ea9326969aefd7d6cde1c887f9b45ecdf86df617667638b2968ba268c","-package-id","text-1.2.3.2","-package-id","time-1.9.3","-package-id","transformers-except-0.1.1-dff5057c0148093fdb22eb905288dea1dc40636273c3c43c25d303bb31f7e9cb","-package-id","unordered-containers-0.2.13.0-4cfa23410683cfe8b97b82ed15f0d30134b196b546cbf1fdf2d0a9054d02c7db","-XHaskell2010","-XNoImplicitPrelude","test/cardano-cli-test.hs","Test.Cli.FilePermissions","Test.Cli.ITN","Test.Cli.Pioneers.Exercise1","Test.Cli.Pioneers.Exercise2","Test.Cli.Pioneers.Exercise3","Test.Cli.Pioneers.Exercise4","Test.OptParse","-Wall","-Wincomplete-record-updates","-Wincomplete-uni-patterns","-Wredundant-constraints","-Wpartial-fields","-Wcompat","-rtsopts","-with-rtsopts=-N","-with-rtsopts=-T","-hide-all-packages","-Werror"], componentRoot = "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli", componentDependencies = ["cardano-cli/cardano-cli.cabal","cabal.project","cabal.project.local"]},"/usr/local/lib/ghc-8.10.2")
2020-12-03 13:37:39.612140707 [ThreadId 5383] - Using interface files cache dir: /home/jordan/.cache/ghcide/main-3558aaa4eb27e7d5d2a1727828832f01ab2776b9
2020-12-03 13:37:39.612441592 [ThreadId 5383] - Using interface files cache dir: /home/jordan/.cache/ghcide/cardano-api-1.24.0-inplace-e9f4ddc3bfb56ede05764e9f788c1ac6a6063a32
2020-12-03 13:37:39.612501023 [ThreadId 5383] - Making new HscEnv[main,cardano-api-1.24.0-inplace]
2020-12-03 13:37:39.63704529 [ThreadId 5383] - New Component Cache HscEnvEq: (([],Just HscEnvEq 767),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-cli/cardano-cli.cabal",Just 2020-12-03 08:39:45.279109699 UTC)])
2020-12-03 13:37:39.643582385 [ThreadId 5383] - New Component Cache HscEnvEq: (([],Just HscEnvEq 768),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-api/cardano-api.cabal",Just 2020-12-02 09:21:26.415901175 UTC)])
2020-12-03 13:37:39.688906121 [ThreadId 5383] - Known files updated: fromList [(TargetModule Cardano.Api.TxBody,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs"]),(TargetModule Cardano.Api.Tx,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Test.Cli.Pioneers.Exercise2,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise2.hs"]),(TargetModule Cardano.Api.SerialiseRaw,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseRaw.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseRaw.hs"]),(TargetModule Cardano.Api.Crypto.Ed25519Bip32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Crypto/Ed25519Bip32.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Crypto/Ed25519Bip32.hs"]),(TargetModule Cardano.Api.SerialiseJSON,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseJSON.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseJSON.hs"]),(TargetModule Test.Cli.Pioneers.Exercise3,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise3.hs"]),(TargetModule Cardano.Api.Typed,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs"]),(TargetModule Cardano.API,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"]),(TargetModule Test.OptParse,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/OptParse.hs"]),(TargetModule Cardano.Api.Shelley.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley/Genesis.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley/Genesis.hs"]),(TargetModule Cardano.Api.KeysShelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"]),(TargetModule Cardano.Api.SerialiseBech32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseBech32.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseBech32.hs"]),(TargetModule Test.Cli.Pioneers.Exercise1,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise1.hs"]),(TargetModule Cardano.Api.Error,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Error.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Error.hs"]),(TargetModule Cardano.Api.StakePoolMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs"]),(TargetModule Cardano.Api.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Key.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Key.hs"]),(TargetModule Test.Cli.Pioneers.Exercise4,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise4.hs"]),(TargetModule Cardano.Api.Hash,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Hash.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Hash.hs"]),(TargetModule Cardano.Api.Protocol,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol.hs"]),(TargetModule Cardano.Api.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Byron.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Byron.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Cardano.Api.OperationalCertificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs"]),(TargetModule Cardano.Api.Protocol.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Types.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Types.hs"]),(TargetModule Cardano.Api.NetworkId,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/NetworkId.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/NetworkId.hs"]),(TargetModule Cardano.Api.KeysPraos,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysPraos.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysPraos.hs"]),(TargetModule Cardano.Api.Address,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs"]),(TargetModule Cardano.Api.TxSubmit.ErrorRender,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/ErrorRender.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/ErrorRender.hs"]),(TargetModule Cardano.Api.TxSubmit,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit.hs"]),(TargetModule Cardano.Api.Protocol.Cardano,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Cardano.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Cardano.hs"]),(TargetModule Cardano.Api.Certificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Certificate.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Certificate.hs"]),(TargetModule Cardano.Api.Value,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/test/cardano-cli-test.hs",[]),(TargetModule Cardano.Api.TxSubmit.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/Types.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/Types.hs"]),(TargetModule Cardano.Api.LocalChainSync,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/LocalChainSync.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/LocalChainSync.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Cardano.Api.Script,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"]),(TargetModule Cardano.Api.Fees,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs"]),(TargetModule Test.Cli.ITN,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/ITN.hs"]),(TargetModule Test.Cli.FilePermissions,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/FilePermissions.hs"]),(TargetModule Cardano.Api.ProtocolParameters,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/ProtocolParameters.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/ProtocolParameters.hs"]),(TargetModule Cardano.Api.SerialiseCBOR,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseCBOR.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseCBOR.hs"]),(TargetModule Cardano.Api.Protocol.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Shelley.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Shelley.hs"]),(TargetModule Cardano.Api.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley.hs"]),(TargetModule Cardano.Api.TxMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxMetadata.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxMetadata.hs"]),(TargetModule Cardano.Api.Eras,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Eras.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Eras.hs"]),(TargetModule Cardano.Api.HasTypeProxy,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/HasTypeProxy.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/HasTypeProxy.hs"]),(TargetModule Cardano.Api.Protocol.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Byron.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Byron.hs"]),(TargetModule Cardano.Api.Utils,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Utils.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Utils.hs"]),(TargetModule Cardano.Api.SerialiseTextEnvelope,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseTextEnvelope.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseTextEnvelope.hs"]),(TargetModule Cardano.Api.KeysByron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysByron.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysByron.hs"])]
2020-12-03 13:37:39.689766222 [ThreadId 9264] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:37:39.689821557 [ThreadId 5383] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:37:39.706780478 [ThreadId 9868] - Consulting the cradle for "cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"
2020-12-03 13:37:39.708794715 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"token":2},"method":"window/workDoneProgress/create","id":7}
2020-12-03 13:37:39.708926348 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"begin","cancellable":false,"title":"Setting up cardano-node (for cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs)"},"token":2},"method":"$/progress"}
2020-12-03 13:37:39.709194398 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":7,"result":null}
2020-12-03 13:37:39.709249278 [ThreadId 5] - haskell-lsp:Got reply message:"{\"jsonrpc\":\"2.0\",\"id\":7,\"result\":null}"
2020-12-03 13:37:39.724503424 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"85/98"},"token":"619"},"method":"$/progress"}
2020-12-03 13:38:35.884361966 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":279,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"position":{"line":515,"character":54}}}
2020-12-03 13:38:35.884633829 [ThreadId 9889] - DocumentHighlight request at position 516:55 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:38:35.885110513 [ThreadId 7] - <--2--{"result":[{"kind":2,"range":{"start":{"line":515,"character":48},"end":{"line":515,"character":50}}},{"kind":2,"range":{"start":{"line":515,"character":52},"end":{"line":515,"character":54}}},{"kind":3,"range":{"start":{"line":516,"character":51},"end":{"line":516,"character":53}}}],"jsonrpc":"2.0","id":279}
2020-12-03 13:38:36.132183493 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":280,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"range":{"start":{"line":515,"character":54},"end":{"line":515,"character":54}},"context":{"diagnostics":[]}}}
2020-12-03 13:38:37.220989773 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":281,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"position":{"line":515,"character":54}}}
2020-12-03 13:38:37.221189962 [ThreadId 9896] - GhcIde.hover entered (ideLogger)
2020-12-03 13:38:37.221337296 [ThreadId 9896] - Hover request at position 516:55 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:38:37.221825274 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nsw :: Script (ShelleyLedgerEra era)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs:517:52*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: Script ledgerera\n```\n"},"range":{"start":{"line":515,"character":52},"end":{"line":515,"character":54}}},"jsonrpc":"2.0","id":281}
2020-12-03 13:38:38.271580884 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":282,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"},"position":{"line":515,"character":54}}}
2020-12-03 13:38:38.271761291 [ThreadId 9900] - GhcIde.hover entered (ideLogger)
2020-12-03 13:38:38.271879838 [ThreadId 9900] - Hover request at position 516:55 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:38:38.272233395 [ThreadId 7] - <--2--{"result":{"contents":{"kind":"markdown","value":"\n```haskell\nsw :: Script (ShelleyLedgerEra era)\n```\n\n*Defined at /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs:517:52*\n\n\n\n*\t*\t*\n\n```haskell\n_ :: Script ledgerera\n```\n"},"range":{"start":{"line":515,"character":52},"end":{"line":515,"character":54}}},"jsonrpc":"2.0","id":282}
2020-12-03 13:38:48.523564747 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}}}
2020-12-03 13:38:48.52366831 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"}
2020-12-03 13:38:48.52374941 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":280}}
2020-12-03 13:38:48.523858582 [ThreadId 9893] - CodeAction was cancelled
2020-12-03 13:38:48.523908385 [ThreadId 9891] - Cancelled request IdInt 280
2020-12-03 13:38:48.523829339 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",Modified)]
2020-12-03 13:38:48.523999716 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":280}
2020-12-03 13:38:48.524028716 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs
2020-12-03 13:38:48.584756144 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule Cardano.CLI.Shelley.Parsers\n  ( -- * CLI command parser\n    parseShelleyCommands\n\n    -- * CLI command and flag types\n  , module Cardano.CLI.Shelley.Commands\n\n    -- * Field parser and renderers\n  , parseTxIn\n  , renderTxIn\n  ) where\n\nimport           Cardano.Prelude hiding (All, Any, option)\nimport           Prelude (String)\n\nimport           Cardano.Api.Protocol (Protocol (..))\nimport           Cardano.Api.Typed hiding (PoolId)\n\nimport           Cardano.Chain.Slotting (EpochSlots (..))\nimport           Cardano.CLI.Mary.TxOutParser (parseTxOutAnyEra)\nimport           Cardano.CLI.Mary.ValueParser (parseValue)\nimport           Cardano.CLI.Shelley.Commands\nimport           Cardano.CLI.Shelley.Key (InputFormat (..), VerificationKeyOrFile (..),\n                     VerificationKeyOrHashOrFile (..), VerificationKeyTextOrFile (..),\n                     deserialiseInput, renderInputDecodeError)\nimport           Cardano.CLI.Types\nimport           Control.Monad.Fail (fail)\nimport           Data.Attoparsec.Combinator ((<?>))\nimport           Data.Time.Clock (UTCTime)\nimport           Data.Time.Format (defaultTimeLocale, iso8601DateFormat, parseTimeOrError)\nimport           Network.Socket (PortNumber)\nimport           Options.Applicative hiding (str)\nimport           Ouroboros.Consensus.BlockchainTime (SystemStart (..))\n\nimport qualified Data.ByteString.Char8 as BSC\nimport qualified Data.Char as Char\nimport qualified Data.IP as IP\nimport qualified Data.List.NonEmpty as NE\nimport qualified Data.Set as Set\nimport qualified Data.Text as Text\nimport qualified Data.Text.Encoding as Text\n\nimport qualified Options.Applicative as Opt\nimport qualified Data.Attoparsec.ByteString.Char8 as Atto\nimport qualified Text.Parsec as Parsec\nimport qualified Text.Parsec.String as Parsec\nimport qualified Text.Parsec.Error  as Parsec\n\nimport qualified Shelley.Spec.Ledger.BaseTypes as Shelley\nimport qualified Shelley.Spec.Ledger.TxBody as Shelley\n\n--\n-- Shelley CLI command parsers\n--\n\nparseShelleyCommands :: Parser ShelleyCommand\nparseShelleyCommands =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"address\"\n          (Opt.info (AddressCmd <$> pAddressCmd) $ Opt.progDesc \"Shelley payment address commands\")\n      , Opt.command \"stake-address\"\n          (Opt.info (StakeAddressCmd <$> pStakeAddress) $ Opt.progDesc \"Shelley stake address commands\")\n      , Opt.command \"key\"\n          (Opt.info (KeyCmd <$> pKeyCmd) $ Opt.progDesc \"Shelley key utility commands\")\n      , Opt.command \"transaction\"\n          (Opt.info (TransactionCmd <$> pTransaction) $ Opt.progDesc \"Shelley transaction commands\")\n      , Opt.command \"node\"\n          (Opt.info (NodeCmd <$> pNodeCmd) $ Opt.progDesc \"Shelley node operaton commands\")\n      , Opt.command \"stake-pool\"\n          (Opt.info (PoolCmd <$> pPoolCmd) $ Opt.progDesc \"Shelley stake pool commands\")\n      , Opt.command \"query\"\n          (Opt.info (QueryCmd <$> pQueryCmd) . Opt.progDesc $\n             mconcat\n               [ \"Shelley node query commands. Will query the local node whose Unix domain socket \"\n               , \"is obtained from the CARDANO_NODE_SOCKET_PATH enviromnent variable.\"\n               ]\n            )\n      , Opt.command \"genesis\"\n          (Opt.info (GenesisCmd <$> pGenesisCmd) $ Opt.progDesc \"Shelley genesis block commands\")\n      , Opt.command \"governance\"\n          (Opt.info (GovernanceCmd <$> pGovernanceCmd) $ Opt.progDesc \"Shelley governance commands\")\n      , Opt.command \"text-view\"\n          (Opt.info (TextViewCmd <$> pTextViewCmd) . Opt.progDesc $\n             mconcat\n               [ \"Commands for dealing with Shelley TextView files. \"\n               , \"Transactions, addresses etc are stored on disk as TextView files.\"\n               ]\n            )\n\n      ]\n\npTextViewCmd :: Parser TextViewCmd\npTextViewCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"decode-cbor\"\n          (Opt.info (TextViewInfo <$> pCBORInFile <*> pMaybeOutputFile)\n            $ Opt.progDesc \"Print a TextView file as decoded CBOR.\"\n            )\n      ]\n\npCBORInFile :: Parser FilePath\npCBORInFile =\n  Opt.strOption\n    (  Opt.long \"in-file\"\n    <> Opt.metavar \"FILE\"\n    <> Opt.help \"CBOR input file.\"\n    <> Opt.completer (Opt.bashCompleter \"file\")\n    )\n  <|>\n  Opt.strOption\n    (  Opt.long \"file\"\n    <> Opt.internal\n    )\n\npAddressCmd :: Parser AddressCmd\npAddressCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen\"\n          (Opt.info pAddressKeyGen $ Opt.progDesc \"Create an address key pair.\")\n      , Opt.command \"key-hash\"\n          (Opt.info pAddressKeyHash $ Opt.progDesc \"Print the hash of an address key.\")\n      , Opt.command \"build\"\n          (Opt.info pAddressBuild $ Opt.progDesc \"Build a Shelley payment address, with optional delegation to a stake address.\")\n      , Opt.command \"build-script\"\n          (Opt.info pAddressBuildScript $ Opt.progDesc \"Build a Shelley script address.\")\n      , Opt.command \"info\"\n          (Opt.info pAddressInfo $ Opt.progDesc \"Print information about an address.\")\n      ]\n  where\n    pAddressKeyGen :: Parser AddressCmd\n    pAddressKeyGen = AddressKeyGen <$> pAddressKeyType\n                                   <*> pVerificationKeyFile Output\n                                   <*> pSigningKeyFile Output\n\n    pAddressKeyHash :: Parser AddressCmd\n    pAddressKeyHash =\n      AddressKeyHash\n        <$> pPaymentVerificationKeyTextOrFile\n        <*> pMaybeOutputFile\n\n    pAddressBuild :: Parser AddressCmd\n    pAddressBuild =\n      AddressBuild\n        <$> pPaymentVerificationKeyTextOrFile\n        <*> Opt.optional pStakeVerificationKeyOrFile\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pAddressBuildScript :: Parser AddressCmd\n    pAddressBuildScript = AddressBuildMultiSig\n                            <$> pScript\n                            <*> pNetworkId\n                            <*> pMaybeOutputFile\n\n    pAddressInfo :: Parser AddressCmd\n    pAddressInfo = AddressInfo <$> pAddress <*> pMaybeOutputFile\n\npPaymentVerificationKeyTextOrFile :: Parser VerificationKeyTextOrFile\npPaymentVerificationKeyTextOrFile =\n  VktofVerificationKeyText <$> pPaymentVerificationKeyText\n    <|> VktofVerificationKeyFile <$> pPaymentVerificationKeyFile\n\npPaymentVerificationKeyText :: Parser Text\npPaymentVerificationKeyText =\n  Text.pack <$>\n    Opt.strOption\n      (  Opt.long \"payment-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Payment verification key (Bech32-encoded)\"\n      )\n\npPaymentVerificationKeyFile :: Parser VerificationKeyFile\npPaymentVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"payment-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the payment verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npScript :: Parser ScriptFile\npScript = ScriptFile <$> Opt.strOption\n  (  Opt.long \"script-file\"\n  <> Opt.metavar \"FILE\"\n  <> Opt.help \"Filepath of the script.\"\n  <> Opt.completer (Opt.bashCompleter \"file\")\n  )\n\npStakeAddress :: Parser StakeAddressCmd\npStakeAddress =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen\"\n          (Opt.info pStakeAddressKeyGen $ Opt.progDesc \"Create a stake address key pair\")\n      , Opt.command \"build\"\n          (Opt.info pStakeAddressBuild $ Opt.progDesc \"Build a stake address\")\n      , Opt.command \"key-hash\"\n          (Opt.info pStakeAddressKeyHash $ Opt.progDesc \"Print the hash of a stake address key.\")\n      , Opt.command \"registration-certificate\"\n          (Opt.info pStakeAddressRegistrationCert $ Opt.progDesc \"Create a stake address registration certificate\")\n      , Opt.command \"deregistration-certificate\"\n          (Opt.info pStakeAddressDeregistrationCert $ Opt.progDesc \"Create a stake address deregistration certificate\")\n      , Opt.command \"delegation-certificate\"\n          (Opt.info pStakeAddressDelegationCert $ Opt.progDesc \"Create a stake address delegation certificate\")\n      ]\n  where\n    pStakeAddressKeyGen :: Parser StakeAddressCmd\n    pStakeAddressKeyGen = StakeAddressKeyGen\n                            <$> pVerificationKeyFile Output\n                            <*> pSigningKeyFile Output\n\n    pStakeAddressKeyHash :: Parser StakeAddressCmd\n    pStakeAddressKeyHash = StakeAddressKeyHash <$> pStakeVerificationKeyOrFile <*> pMaybeOutputFile\n\n    pStakeAddressBuild :: Parser StakeAddressCmd\n    pStakeAddressBuild = StakeAddressBuild <$> pStakeVerificationKeyOrFile\n                                           <*> pNetworkId\n                                           <*> pMaybeOutputFile\n\n    pStakeAddressRegistrationCert :: Parser StakeAddressCmd\n    pStakeAddressRegistrationCert = StakeKeyRegistrationCert\n                                      <$> pStakeVerificationKeyOrFile\n                                      <*> pOutputFile\n\n    pStakeAddressDeregistrationCert :: Parser StakeAddressCmd\n    pStakeAddressDeregistrationCert = StakeKeyDeRegistrationCert\n                                        <$> pStakeVerificationKeyOrFile\n                                        <*> pOutputFile\n\n    pStakeAddressDelegationCert :: Parser StakeAddressCmd\n    pStakeAddressDelegationCert = StakeKeyDelegationCert\n                                    <$> pStakeVerificationKeyOrFile\n                                    <*> pStakePoolVerificationKeyOrHashOrFile\n                                    <*> pOutputFile\n\npKeyCmd :: Parser KeyCmd\npKeyCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"verification-key\" $\n          Opt.info pKeyGetVerificationKey $\n            Opt.progDesc $ \"Get a verification key from a signing key. This \"\n                        ++ \" supports all key types.\"\n\n      , Opt.command \"non-extended-key\" $\n          Opt.info pKeyNonExtendedKey $\n            Opt.progDesc $ \"Get a non-extended verification key from an \"\n                        ++ \"extended verification key. This supports all \"\n                        ++ \"extended key types.\"\n\n      , Opt.command \"convert-byron-key\" $\n          Opt.info pKeyConvertByronKey $\n            Opt.progDesc $ \"Convert a Byron payment, genesis or genesis \"\n                        ++ \"delegate key (signing or verification) to a \"\n                        ++ \"corresponding Shelley-format key.\"\n\n      , Opt.command \"convert-byron-genesis-vkey\" $\n          Opt.info pKeyConvertByronGenesisVKey $\n            Opt.progDesc $ \"Convert a Base64-encoded Byron genesis \"\n                        ++ \"verification key to a Shelley genesis \"\n                        ++ \"verification key\"\n\n      , Opt.command \"convert-itn-key\" $\n          Opt.info pKeyConvertITNKey $\n            Opt.progDesc $ \"Convert an Incentivized Testnet (ITN) non-extended \"\n                        ++ \"(Ed25519) signing or verification key to a \"\n                        ++ \"corresponding Shelley stake key\"\n      , Opt.command \"convert-itn-extended-key\" $\n          Opt.info pKeyConvertITNExtendedKey $\n            Opt.progDesc $ \"Convert an Incentivized Testnet (ITN) extended \"\n                        ++ \"(Ed25519Extended) signing key to a corresponding \"\n                        ++ \"Shelley stake signing key\"\n      , Opt.command \"convert-itn-bip32-key\" $\n          Opt.info pKeyConvertITNBip32Key $\n            Opt.progDesc $ \"Convert an Incentivized Testnet (ITN) BIP32 \"\n                        ++ \"(Ed25519Bip32) signing key to a corresponding \"\n                        ++ \"Shelley stake signing key\"\n\n      , Opt.command \"convert-cardano-address-key\" $\n          Opt.info pKeyConvertCardanoAddressSigningKey $\n            Opt.progDesc $ \"Convert a cardano-address extended signing key \"\n                        ++ \"to a corresponding Shelley-format key.\"\n      ]\n  where\n    pKeyGetVerificationKey :: Parser KeyCmd\n    pKeyGetVerificationKey =\n      KeyGetVerificationKey\n        <$> pSigningKeyFile      Input\n        <*> pVerificationKeyFile Output\n\n    pKeyNonExtendedKey :: Parser KeyCmd\n    pKeyNonExtendedKey =\n      KeyNonExtendedKey\n        <$> pExtendedVerificationKeyFile Input\n        <*> pVerificationKeyFile Output\n\n    pKeyConvertByronKey :: Parser KeyCmd\n    pKeyConvertByronKey =\n      KeyConvertByronKey\n        <$> optional pPassword\n        <*> pByronKeyType\n        <*> pByronKeyFile\n        <*> pOutputFile\n\n    pPassword :: Parser Text\n    pPassword = Opt.strOption\n                  (  Opt.long \"password\"\n                  <> Opt.metavar \"TEXT\"\n                  <> Opt.help \"Password for signing key (if applicable).\"\n                  )\n\n    pByronKeyType :: Parser ByronKeyType\n    pByronKeyType =\n          Opt.flag' (ByronPaymentKey NonLegacyByronKeyFormat)\n            (  Opt.long \"byron-payment-key-type\"\n            <> Opt.help \"Use a Byron-era payment key.\"\n            )\n      <|> Opt.flag' (ByronPaymentKey LegacyByronKeyFormat)\n            (  Opt.long \"legacy-byron-payment-key-type\"\n            <> Opt.help \"Use a Byron-era payment key, in legacy SL format.\"\n            )\n      <|> Opt.flag' (ByronGenesisKey NonLegacyByronKeyFormat)\n            (  Opt.long \"byron-genesis-key-type\"\n            <> Opt.help \"Use a Byron-era genesis key.\"\n            )\n      <|> Opt.flag' (ByronGenesisKey LegacyByronKeyFormat)\n            (  Opt.long \"legacy-byron-genesis-key-type\"\n            <> Opt.help \"Use a Byron-era genesis key, in legacy SL format.\"\n            )\n      <|> Opt.flag' (ByronDelegateKey NonLegacyByronKeyFormat)\n            (  Opt.long \"byron-genesis-delegate-key-type\"\n            <> Opt.help \"Use a Byron-era genesis delegate key.\"\n            )\n      <|> Opt.flag' (ByronDelegateKey LegacyByronKeyFormat)\n            (  Opt.long \"legacy-byron-genesis-delegate-key-type\"\n            <> Opt.help \"Use a Byron-era genesis delegate key, in legacy SL format.\"\n            )\n\n    pByronKeyFile :: Parser SomeKeyFile\n    pByronKeyFile =\n          (ASigningKeyFile      <$> pByronSigningKeyFile)\n      <|> (AVerificationKeyFile <$> pByronVerificationKeyFile)\n\n    pByronSigningKeyFile :: Parser SigningKeyFile\n    pByronSigningKeyFile =\n      SigningKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"byron-signing-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Input filepath of the Byron-format signing key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pByronVerificationKeyFile :: Parser VerificationKeyFile\n    pByronVerificationKeyFile =\n      VerificationKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"byron-verification-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Input filepath of the Byron-format verification key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pKeyConvertByronGenesisVKey :: Parser KeyCmd\n    pKeyConvertByronGenesisVKey =\n      KeyConvertByronGenesisVKey\n        <$> pByronGenesisVKeyBase64\n        <*> pOutputFile\n\n    pByronGenesisVKeyBase64 :: Parser VerificationKeyBase64\n    pByronGenesisVKeyBase64 =\n      VerificationKeyBase64 <$>\n        Opt.strOption\n          (  Opt.long \"byron-genesis-verification-key\"\n          <> Opt.metavar \"BASE64\"\n          <> Opt.help \"Base64 string for the Byron genesis verification key.\"\n          )\n\n    pKeyConvertITNKey :: Parser KeyCmd\n    pKeyConvertITNKey =\n      KeyConvertITNStakeKey\n        <$> pITNKeyFIle\n        <*> pOutputFile\n\n    pKeyConvertITNExtendedKey :: Parser KeyCmd\n    pKeyConvertITNExtendedKey =\n      KeyConvertITNExtendedToStakeKey\n        <$> pITNSigningKeyFile\n        <*> pOutputFile\n\n    pKeyConvertITNBip32Key :: Parser KeyCmd\n    pKeyConvertITNBip32Key =\n      KeyConvertITNBip32ToStakeKey\n        <$> pITNSigningKeyFile\n        <*> pOutputFile\n\n    pITNKeyFIle :: Parser SomeKeyFile\n    pITNKeyFIle = pITNSigningKeyFile\n              <|> pITNVerificationKeyFile\n\n    pITNSigningKeyFile :: Parser SomeKeyFile\n    pITNSigningKeyFile =\n      ASigningKeyFile . SigningKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"itn-signing-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Filepath of the ITN signing key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pITNVerificationKeyFile :: Parser SomeKeyFile\n    pITNVerificationKeyFile =\n      AVerificationKeyFile . VerificationKeyFile <$>\n        Opt.strOption\n          (  Opt.long \"itn-verification-key-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Filepath of the ITN verification key.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\n    pKeyConvertCardanoAddressSigningKey :: Parser KeyCmd\n    pKeyConvertCardanoAddressSigningKey =\n      KeyConvertCardanoAddressSigningKey\n        <$> pCardanoAddressKeyType\n        <*> pSigningKeyFile Input\n        <*> pOutputFile\n\n    pCardanoAddressKeyType :: Parser CardanoAddressKeyType\n    pCardanoAddressKeyType =\n          Opt.flag' CardanoAddressShelleyPaymentKey\n            (  Opt.long \"shelley-payment-key\"\n            <> Opt.help \"Use a Shelley-era extended payment key.\"\n            )\n      <|> Opt.flag' CardanoAddressShelleyStakeKey\n            (  Opt.long \"shelley-stake-key\"\n            <> Opt.help \"Use a Shelley-era extended stake key.\"\n            )\n      <|> Opt.flag' CardanoAddressIcarusPaymentKey\n            (  Opt.long \"icarus-payment-key\"\n            <> Opt.help \"Use a Byron-era extended payment key formatted in the Icarus style.\"\n            )\n      <|> Opt.flag' CardanoAddressByronPaymentKey\n            (  Opt.long \"byron-payment-key\"\n            <> Opt.help \"Use a Byron-era extended payment key formatted in the deprecated Byron style.\"\n            )\n\npTransaction :: Parser TransactionCmd\npTransaction =\n  asum\n    [ subParser \"build-raw\"\n        (Opt.info pTransactionBuild $ Opt.progDesc \"Build a transaction (low-level, inconvenient)\")\n    , subParser \"sign\"\n        (Opt.info pTransactionSign $ Opt.progDesc \"Sign a transaction\")\n    , subParser \"witness\"\n        (Opt.info pTransactionCreateWitness $ Opt.progDesc \"Create a transaction witness\")\n    , subParser \"assemble\"\n        (Opt.info pTransactionAssembleTxBodyWit\n          $ Opt.progDesc \"Assemble a tx body and witness(es) to form a transaction\")\n    , pSignWitnessBackwardCompatible\n    , subParser \"submit\"\n        (Opt.info pTransactionSubmit . Opt.progDesc $\n           mconcat\n             [ \"Submit a transaction to the local node whose Unix domain socket \"\n             , \"is obtained from the CARDANO_NODE_SOCKET_PATH enviromnent variable.\"\n             ]\n          )\n    , subParser \"policyid\"\n        (Opt.info pTransactionPolicyId $ Opt.progDesc \"Calculate the PolicyId from the monetary policy script.\")\n    , subParser \"calculate-min-fee\"\n        (Opt.info pTransactionCalculateMinFee $ Opt.progDesc \"Calculate the minimum fee for a transaction\")\n    , subParser \"txid\"\n        (Opt.info pTransactionId $ Opt.progDesc \"Print a transaction identifier\")\n    ]\n where\n  subParser :: String -> ParserInfo TransactionCmd -> Parser TransactionCmd\n  subParser name pInfo = Opt.subparser $ Opt.command name pInfo\n\n  assembleInfo :: ParserInfo TransactionCmd\n  assembleInfo =\n    Opt.info pTransactionAssembleTxBodyWit\n      $ Opt.progDesc \"Assemble a tx body and witness(es) to form a transaction\"\n\n  pSignWitnessBackwardCompatible :: Parser TransactionCmd\n  pSignWitnessBackwardCompatible =\n    Opt.subparser\n      $ Opt.command \"sign-witness\" assembleInfo <> Opt.internal\n\n  pTransactionBuild :: Parser TransactionCmd\n  pTransactionBuild = TxBuildRaw <$> pCardanoEra\n                                 <*> some pTxIn\n                                 <*> some pTxOut\n                                 <*> optional pMintMultiAsset\n                                 <*> optional pTxLowerBound\n                                 <*> optional pTxUpperBound\n                                 <*> optional pTxFee\n                                 <*> many pCertificateFile\n                                 <*> many pWithdrawal\n                                 <*> pTxMetadataJsonSchema\n                                 <*> many pScript\n                                 <*> many pMetaDataFile\n                                 <*> optional pUpdateProposalFile\n                                 <*> pTxBodyFile Output\n\n  pTransactionSign  :: Parser TransactionCmd\n  pTransactionSign = TxSign <$> pTxBodyFile Input\n                            <*> pSomeWitnessSigningData\n                            <*> optional pNetworkId\n                            <*> pTxFile Output\n\n  pTransactionCreateWitness :: Parser TransactionCmd\n  pTransactionCreateWitness = TxCreateWitness\n                                <$> pTxBodyFile Input\n                                <*> pWitnessSigningData\n                                <*> optional pNetworkId\n                                <*> pOutputFile\n\n  pTransactionAssembleTxBodyWit :: Parser TransactionCmd\n  pTransactionAssembleTxBodyWit = TxAssembleTxBodyWitness\n                                    <$> pTxBodyFile Input\n                                    <*> some pWitnessFile\n                                    <*> pOutputFile\n\n  pTransactionSubmit :: Parser TransactionCmd\n  pTransactionSubmit = TxSubmit <$> pProtocol\n                                <*> pNetworkId\n                                <*> pTxSubmitFile\n\n  pTransactionPolicyId :: Parser TransactionCmd\n  pTransactionPolicyId = TxMintedPolicyId <$> pScript\n\n  pTransactionCalculateMinFee :: Parser TransactionCmd\n  pTransactionCalculateMinFee =\n    TxCalculateMinFee\n      <$> pTxBodyFile Input\n      <*> optional pNetworkId\n      <*> pProtocolParamsFile\n      <*> pTxInCount\n      <*> pTxOutCount\n      <*> pTxShelleyWitnessCount\n      <*> pTxByronWitnessCount\n\n  pTransactionId  :: Parser TransactionCmd\n  pTransactionId = TxGetTxId <$> pTxBodyFile Input\n\n\npNodeCmd :: Parser NodeCmd\npNodeCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen\"\n          (Opt.info pKeyGenOperator $\n             Opt.progDesc \"Create a key pair for a node operator's offline \\\n                         \\ key and a new certificate issue counter\")\n      , Opt.command \"key-gen-KES\"\n          (Opt.info pKeyGenKES $\n             Opt.progDesc \"Create a key pair for a node KES operational key\")\n      , Opt.command \"key-gen-VRF\"\n          (Opt.info pKeyGenVRF $\n             Opt.progDesc \"Create a key pair for a node VRF operational key\")\n      , Opt.command \"key-hash-VRF\"\n          (Opt.info pKeyHashVRF $\n             Opt.progDesc \"Print hash of a node's operational VRF key.\")\n      , Opt.command \"new-counter\"\n          (Opt.info pNewCounter $\n             Opt.progDesc \"Create a new certificate issue counter\")\n      , Opt.command \"issue-op-cert\"\n          (Opt.info pIssueOpCert $\n             Opt.progDesc \"Issue a node operational certificate\")\n      ]\n  where\n    pKeyGenOperator :: Parser NodeCmd\n    pKeyGenOperator =\n      NodeKeyGenCold <$> pColdVerificationKeyFile\n                     <*> pColdSigningKeyFile\n                     <*> pOperatorCertIssueCounterFile\n\n    pKeyGenKES :: Parser NodeCmd\n    pKeyGenKES =\n      NodeKeyGenKES <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pKeyGenVRF :: Parser NodeCmd\n    pKeyGenVRF =\n      NodeKeyGenVRF <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pKeyHashVRF :: Parser NodeCmd\n    pKeyHashVRF =\n      NodeKeyHashVRF <$> pVerificationKeyOrFile AsVrfKey <*> pMaybeOutputFile\n\n    pNewCounter :: Parser NodeCmd\n    pNewCounter =\n      NodeNewCounter <$> pColdVerificationKeyOrFile\n                     <*> pCounterValue\n                     <*> pOperatorCertIssueCounterFile\n\n    pCounterValue :: Parser Word\n    pCounterValue =\n        Opt.option Opt.auto\n          (  Opt.long \"counter-value\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The next certificate issue counter value to use.\"\n          )\n\n    pIssueOpCert :: Parser NodeCmd\n    pIssueOpCert =\n      NodeIssueOpCert <$> pKesVerificationKeyOrFile\n                      <*> pColdSigningKeyFile\n                      <*> pOperatorCertIssueCounterFile\n                      <*> pKesPeriod\n                      <*> pOutputFile\n\n\npPoolCmd :: Parser PoolCmd\npPoolCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"registration-certificate\"\n          (Opt.info pStakePoolRegistrationCert $ Opt.progDesc \"Create a stake pool registration certificate\")\n      , Opt.command \"deregistration-certificate\"\n          (Opt.info pStakePoolRetirementCert $ Opt.progDesc \"Create a stake pool deregistration certificate\")\n      , Opt.command \"id\"\n          (Opt.info pId $\n             Opt.progDesc \"Build pool id from the offline key\")\n      , Opt.command \"metadata-hash\"\n          (Opt.info pPoolMetaDataHashSubCmd $ Opt.progDesc \"Print the hash of pool metadata.\")\n      ]\n  where\n    pId :: Parser PoolCmd\n    pId = PoolGetId <$> pStakePoolVerificationKeyOrFile <*> pOutputFormat\n\n    pPoolMetaDataHashSubCmd :: Parser PoolCmd\n    pPoolMetaDataHashSubCmd = PoolMetaDataHash <$> pPoolMetaDataFile <*> pMaybeOutputFile\n\n\npQueryCmd :: Parser QueryCmd\npQueryCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"protocol-parameters\"\n          (Opt.info pQueryProtocolParameters $ Opt.progDesc \"Get the node's current protocol parameters\")\n      , Opt.command \"tip\"\n          (Opt.info pQueryTip $ Opt.progDesc \"Get the node's current tip (slot no, hash, block no)\")\n      , Opt.command \"stake-distribution\"\n          (Opt.info pQueryStakeDistribution $ Opt.progDesc \"Get the node's current aggregated stake distribution\")\n      , Opt.command \"stake-address-info\"\n          (Opt.info pQueryStakeAddressInfo $ Opt.progDesc \"Get the current delegations and \\\n                                                          \\reward accounts filtered by stake \\\n                                                          \\address.\")\n      , Opt.command \"utxo\"\n          (Opt.info pQueryUTxO $ Opt.progDesc \"Get the node's current UTxO with the option of \\\n                                              \\filtering by address(es)\")\n      , Opt.command \"ledger-state\"\n          (Opt.info pQueryLedgerState $ Opt.progDesc \"Dump the current ledger state of the node (Ledger.NewEpochState -- advanced command)\")\n      , Opt.command \"protocol-state\"\n          (Opt.info pQueryProtocolState $ Opt.progDesc \"Dump the current protocol state of the node (Ledger.ChainDepState -- advanced command)\")\n      ]\n  where\n    pQueryProtocolParameters :: Parser QueryCmd\n    pQueryProtocolParameters =\n      QueryProtocolParameters\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryTip :: Parser QueryCmd\n    pQueryTip = QueryTip\n                  <$> pProtocol\n                  <*> pNetworkId\n                  <*> pMaybeOutputFile\n\n    pQueryUTxO :: Parser QueryCmd\n    pQueryUTxO =\n      QueryUTxO\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pQueryFilter\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryStakeDistribution :: Parser QueryCmd\n    pQueryStakeDistribution =\n      QueryStakeDistribution\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryStakeAddressInfo :: Parser QueryCmd\n    pQueryStakeAddressInfo =\n      QueryStakeAddressInfo\n        <$> pCardanoEra\n        <*> pProtocol\n        <*> pFilterByStakeAddress\n        <*> pNetworkId\n        <*> pMaybeOutputFile\n\n    pQueryLedgerState :: Parser QueryCmd\n    pQueryLedgerState = QueryLedgerState <$> pCardanoEra <*> pProtocol <*> pNetworkId <*> pMaybeOutputFile\n\n    pQueryProtocolState :: Parser QueryCmd\n    pQueryProtocolState = QueryProtocolState\n                            <$> pCardanoEra\n                            <*> pProtocol\n                            <*> pNetworkId\n                            <*> pMaybeOutputFile\n\npGovernanceCmd :: Parser GovernanceCmd\npGovernanceCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"create-mir-certificate\"\n          (Opt.info pMIRCertificate $\n            Opt.progDesc \"Create an MIR (Move Instantaneous Rewards) certificate\")\n      , Opt.command \"create-genesis-key-delegation-certificate\"\n          (Opt.info pGovernanceGenesisKeyDelegationCertificate $\n            Opt.progDesc \"Create a genesis key delegation certificate\")\n      , Opt.command \"create-update-proposal\"\n          (Opt.info pUpdateProposal $\n            Opt.progDesc \"Create an update proposal\")\n      ]\n  where\n    pMIRCertificate :: Parser GovernanceCmd\n    pMIRCertificate = GovernanceMIRCertificate\n                        <$> pMIRPot\n                        <*> some pStakeVerificationKeyFile\n                        <*> some pRewardAmt\n                        <*> pOutputFile\n\n    pGovernanceGenesisKeyDelegationCertificate :: Parser GovernanceCmd\n    pGovernanceGenesisKeyDelegationCertificate =\n      GovernanceGenesisKeyDelegationCertificate\n        <$> pGenesisVerificationKeyOrHashOrFile\n        <*> pGenesisDelegateVerificationKeyOrHashOrFile\n        <*> pVrfVerificationKeyOrHashOrFile\n        <*> pOutputFile\n\n    pMIRPot :: Parser Shelley.MIRPot\n    pMIRPot =\n          Opt.flag' Shelley.ReservesMIR\n            (  Opt.long \"reserves\"\n            <> Opt.help \"Use the reserves pot.\"\n            )\n      <|> Opt.flag' Shelley.TreasuryMIR\n            (  Opt.long \"treasury\"\n            <> Opt.help \"Use the treasury pot.\"\n            )\n\n    pUpdateProposal :: Parser GovernanceCmd\n    pUpdateProposal = GovernanceUpdateProposal\n                        <$> pOutputFile\n                        <*> pEpochNoUpdateProp\n                        <*> some pGenesisVerificationKeyFile\n                        <*> pShelleyProtocolParametersUpdate\n\npRewardAmt :: Parser Lovelace\npRewardAmt =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"reward\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The reward for the relevant reward account.\"\n      )\n\npGenesisCmd :: Parser GenesisCmd\npGenesisCmd =\n  Opt.subparser $\n    mconcat\n      [ Opt.command \"key-gen-genesis\"\n          (Opt.info pGenesisKeyGen $\n             Opt.progDesc \"Create a Shelley genesis key pair\")\n      , Opt.command \"key-gen-delegate\"\n          (Opt.info pGenesisDelegateKeyGen $\n             Opt.progDesc \"Create a Shelley genesis delegate key pair\")\n      , Opt.command \"key-gen-utxo\"\n          (Opt.info pGenesisUTxOKeyGen $\n             Opt.progDesc \"Create a Shelley genesis UTxO key pair\")\n      , Opt.command \"key-hash\"\n          (Opt.info pGenesisKeyHash $\n             Opt.progDesc \"Print the identifier (hash) of a public key\")\n      , Opt.command \"get-ver-key\"\n          (Opt.info pGenesisVerKey $\n             Opt.progDesc \"Derive the verification key from a signing key\")\n      , Opt.command \"initial-addr\"\n          (Opt.info pGenesisAddr $\n             Opt.progDesc \"Get the address for an initial UTxO based on the verification key\")\n      , Opt.command \"initial-txin\"\n          (Opt.info pGenesisTxIn $\n             Opt.progDesc \"Get the TxIn for an initial UTxO based on the verification key\")\n      , Opt.command \"create\"\n          (Opt.info pGenesisCreate $\n             Opt.progDesc (\"Create a Shelley genesis file from a genesis \"\n                        ++ \"template and genesis/delegation/spending keys.\"))\n\n      , Opt.command \"create-staked\"\n          (Opt.info pGenesisCreateStaked $\n             Opt.progDesc (\"Create a staked Shelley genesis file from a genesis \"\n                        ++ \"template and genesis/delegation/spending keys.\"))\n\n      , Opt.command \"hash\"\n          (Opt.info pGenesisHash $\n             Opt.progDesc \"Compute the hash of a genesis file\")\n      ]\n  where\n    pGenesisKeyGen :: Parser GenesisCmd\n    pGenesisKeyGen =\n      GenesisKeyGenGenesis <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pGenesisDelegateKeyGen :: Parser GenesisCmd\n    pGenesisDelegateKeyGen =\n      GenesisKeyGenDelegate <$> pVerificationKeyFile Output\n                            <*> pSigningKeyFile Output\n                            <*> pOperatorCertIssueCounterFile\n\n    pGenesisUTxOKeyGen :: Parser GenesisCmd\n    pGenesisUTxOKeyGen =\n      GenesisKeyGenUTxO <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pGenesisKeyHash :: Parser GenesisCmd\n    pGenesisKeyHash =\n      GenesisCmdKeyHash <$> pVerificationKeyFile Input\n\n    pGenesisVerKey :: Parser GenesisCmd\n    pGenesisVerKey =\n      GenesisVerKey <$> pVerificationKeyFile Output <*> pSigningKeyFile Output\n\n    pGenesisAddr :: Parser GenesisCmd\n    pGenesisAddr =\n      GenesisAddr <$> pVerificationKeyFile Input <*> pNetworkId <*> pMaybeOutputFile\n\n    pGenesisTxIn :: Parser GenesisCmd\n    pGenesisTxIn =\n      GenesisTxIn <$> pVerificationKeyFile Input <*> pNetworkId <*> pMaybeOutputFile\n\n    pGenesisCreate :: Parser GenesisCmd\n    pGenesisCreate =\n      GenesisCreate <$> pGenesisDir\n                    <*> pGenesisNumGenesisKeys\n                    <*> pGenesisNumUTxOKeys\n                    <*> pMaybeSystemStart\n                    <*> pInitialSupplyNonDelegated\n                    <*> pNetworkId\n\n    pGenesisCreateStaked :: Parser GenesisCmd\n    pGenesisCreateStaked =\n      GenesisCreateStaked\n        <$> pGenesisDir\n        <*> pGenesisNumGenesisKeys\n        <*> pGenesisNumUTxOKeys\n        <*> pGenesisNumPools\n        <*> pGenesisNumStDelegs\n        <*> pMaybeSystemStart\n        <*> pInitialSupplyNonDelegated\n        <*> pInitialSupplyDelegated\n        <*> pNetworkId\n        <*> pBulkPoolCredFiles\n        <*> pBulkPoolsPerFile\n        <*> pStuffedUtxoCount\n\n    pGenesisHash :: Parser GenesisCmd\n    pGenesisHash =\n      GenesisHashFile <$> pGenesisFile\n\n    pGenesisDir :: Parser GenesisDir\n    pGenesisDir =\n      GenesisDir <$>\n        Opt.strOption\n          (  Opt.long \"genesis-dir\"\n          <> Opt.metavar \"DIR\"\n          <> Opt.help \"The genesis directory containing the genesis template and required genesis/delegation/spending keys.\"\n          )\n\n    pMaybeSystemStart :: Parser (Maybe SystemStart)\n    pMaybeSystemStart =\n      Opt.optional $\n        SystemStart . convertTime <$>\n          Opt.strOption\n            (  Opt.long \"start-time\"\n            <> Opt.metavar \"UTC-TIME\"\n            <> Opt.help \"The genesis start time in YYYY-MM-DDThh:mm:ssZ format. If unspecified, will be the current time +30 seconds.\"\n            )\n\n    pGenesisNumGenesisKeys :: Parser Word\n    pGenesisNumGenesisKeys =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-genesis-keys\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of genesis keys to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pGenesisNumUTxOKeys :: Parser Word\n    pGenesisNumUTxOKeys =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-utxo-keys\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of UTxO keys to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pGenesisNumPools :: Parser Word\n    pGenesisNumPools =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-pools\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of stake pool credential sets to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pGenesisNumStDelegs :: Parser Word\n    pGenesisNumStDelegs =\n        Opt.option Opt.auto\n          (  Opt.long \"gen-stake-delegs\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of stake delegator credential sets to make [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pStuffedUtxoCount :: Parser Word\n    pStuffedUtxoCount =\n        Opt.option Opt.auto\n          (  Opt.long \"num-stuffed-utxo\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"The number of fake UTxO entries to generate [default is 0].\"\n          <> Opt.value 0\n          )\n\n    convertTime :: String -> UTCTime\n    convertTime =\n      parseTimeOrError False defaultTimeLocale (iso8601DateFormat $ Just \"%H:%M:%SZ\")\n\n    pInitialSupplyNonDelegated :: Parser (Maybe Lovelace)\n    pInitialSupplyNonDelegated =\n      Opt.optional $\n      Lovelace <$>\n        Opt.option Opt.auto\n          (  Opt.long \"supply\"\n          <> Opt.metavar \"LOVELACE\"\n          <> Opt.help \"The initial coin supply in Lovelace which will be evenly distributed across initial, non-delegating stake holders.\"\n          )\n\n    pInitialSupplyDelegated :: Parser Lovelace\n    pInitialSupplyDelegated =\n      fmap (Lovelace . fromMaybe 0) $ Opt.optional $\n        Opt.option Opt.auto\n          (  Opt.long \"supply-delegated\"\n          <> Opt.metavar \"LOVELACE\"\n          <> Opt.help \"The initial coin supply in Lovelace which will be evenly distributed across initial, delegating stake holders.\"\n          <> Opt.value 0\n          )\n\n    pBulkPoolCredFiles :: Parser Word\n    pBulkPoolCredFiles =\n        Opt.option Opt.auto\n          (  Opt.long \"bulk-pool-cred-files\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"Generate bulk pool credential files [default is 0].\"\n          <> Opt.value 0\n          )\n\n    pBulkPoolsPerFile :: Parser Word\n    pBulkPoolsPerFile =\n        Opt.option Opt.auto\n          (  Opt.long \"bulk-pools-per-file\"\n          <> Opt.metavar \"INT\"\n          <> Opt.help \"Each bulk pool to contain this many pool credential sets [default is 0].\"\n          <> Opt.value 0\n          )\n\n\n--\n-- Shelley CLI flag parsers\n--\n\ndata FileDirection\n  = Input\n  | Output\n  deriving (Eq, Show)\n\npAddressKeyType :: Parser AddressKeyType\npAddressKeyType =\n    Opt.flag' AddressKeyShelley\n      (  Opt.long \"normal-key\"\n      <> Opt.help \"Use a normal Shelley-era key (default).\"\n      )\n  <|>\n    Opt.flag' AddressKeyShelleyExtended\n      (  Opt.long \"extended-key\"\n      <> Opt.help \"Use an extended ed25519 Shelley-era key.\"\n      )\n  <|>\n    Opt.flag' AddressKeyByron\n      (  Opt.long \"byron-key\"\n      <> Opt.help \"Use a Byron-era key.\"\n      )\n  <|>\n    pure AddressKeyShelley\n\n\npProtocolParamsFile :: Parser ProtocolParamsFile\npProtocolParamsFile =\n  ProtocolParamsFile <$>\n    Opt.strOption\n      (  Opt.long \"protocol-params-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the JSON-encoded protocol parameters file\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npCertificateFile :: Parser CertificateFile\npCertificateFile =\n  CertificateFile <$>\n    (  Opt.strOption\n         (  Opt.long \"certificate-file\"\n         <> Opt.metavar \"FILE\"\n         <> Opt.help \"Filepath of the certificate. This encompasses all \\\n                     \\types of certificates (stake pool certificates, \\\n                     \\stake key certificates etc)\"\n         <> Opt.completer (Opt.bashCompleter \"file\")\n         )\n    <|>\n       Opt.strOption\n         (  Opt.long \"certificate\"\n         <> Opt.internal\n         )\n    )\n\npPoolMetaDataFile :: Parser PoolMetaDataFile\npPoolMetaDataFile =\n  PoolMetaDataFile <$>\n    Opt.strOption\n      (  Opt.long \"pool-metadata-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the pool metadata.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npTxMetadataJsonSchema :: Parser TxMetadataJsonSchema\npTxMetadataJsonSchema =\n    (  Opt.flag' ()\n        (  Opt.long \"json-metadata-no-schema\"\n        <> Opt.help \"Use the \\\"no schema\\\" conversion from JSON to tx metadata.\"\n        )\n    *> pure TxMetadataJsonNoSchema\n    )\n  <|>\n    (  Opt.flag' ()\n        (  Opt.long \"json-metadata-detailed-schema\"\n        <> Opt.help \"Use the \\\"detailed schema\\\" conversion from JSON to tx metadata.\"\n        )\n    *> pure TxMetadataJsonDetailedSchema\n    )\n  <|>\n    -- Default to the no-schema conversion.\n    pure TxMetadataJsonNoSchema\n\npMetaDataFile :: Parser MetaDataFile\npMetaDataFile =\n      MetaDataFileJSON <$>\n        ( Opt.strOption\n            (  Opt.long \"metadata-json-file\"\n            <> Opt.metavar \"FILE\"\n            <> Opt.help \"Filepath of the metadata file, in JSON format.\"\n            <> Opt.completer (Opt.bashCompleter \"file\")\n            )\n        <|>\n          Opt.strOption\n            (  Opt.long \"metadata-file\" -- backward compat name\n            <> Opt.internal\n            )\n        )\n  <|>\n      MetaDataFileCBOR <$>\n        Opt.strOption\n          (  Opt.long \"metadata-cbor-file\"\n          <> Opt.metavar \"FILE\"\n          <> Opt.help \"Filepath of the metadata, in raw CBOR format.\"\n          <> Opt.completer (Opt.bashCompleter \"file\")\n          )\n\npWithdrawal :: Parser (StakeAddress, Lovelace)\npWithdrawal =\n    Opt.option (readerFromAttoParser parseWithdrawal)\n      (  Opt.long \"withdrawal\"\n      <> Opt.metavar \"WITHDRAWAL\"\n      <> Opt.help \"The reward withdrawal as StakeAddress+Lovelace where \\\n                  \\StakeAddress is the Bech32-encoded stake address \\\n                  \\followed by the amount in Lovelace.\"\n      )\n  where\n    parseWithdrawal :: Atto.Parser (StakeAddress, Lovelace)\n    parseWithdrawal =\n      (,) <$> parseStakeAddress <* Atto.char '+' <*> parseLovelace\n\n\npUpdateProposalFile :: Parser UpdateProposalFile\npUpdateProposalFile =\n  UpdateProposalFile <$>\n  ( Opt.strOption\n     (  Opt.long \"update-proposal-file\"\n     <> Opt.metavar \"FILE\"\n     <> Opt.help \"Filepath of the update proposal.\"\n     <> Opt.completer (Opt.bashCompleter \"file\")\n     )\n  <|>\n    Opt.strOption\n      (  Opt.long \"update-proposal\"\n      <> Opt.internal\n      )\n  )\n\n\npColdSigningKeyFile :: Parser SigningKeyFile\npColdSigningKeyFile =\n  SigningKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"cold-signing-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the cold signing key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n      (  Opt.long \"signing-key-file\"\n      <> Opt.internal\n      )\n    )\n\npSomeWitnessSigningData :: Parser [WitnessSigningData]\npSomeWitnessSigningData =\n  some $\n      KeyWitnessSigningData\n        <$>\n          ( SigningKeyFile <$>\n              Opt.strOption\n                (  Opt.long \"signing-key-file\"\n                <> Opt.metavar \"FILE\"\n                <> Opt.help \"Input filepath of the signing key (one or more).\"\n                <> Opt.completer (Opt.bashCompleter \"file\")\n                )\n          )\n        <*>\n          optional pByronAddress\n    <|>\n      ScriptWitnessSigningData <$> pScript\n\npSigningKeyFile :: FileDirection -> Parser SigningKeyFile\npSigningKeyFile fdir =\n  SigningKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"signing-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help (show fdir ++ \" filepath of the signing key.\")\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npWitnessSigningData :: Parser WitnessSigningData\npWitnessSigningData =\n    KeyWitnessSigningData\n      <$>\n        ( SigningKeyFile <$>\n            Opt.strOption\n              (  Opt.long \"signing-key-file\"\n              <> Opt.metavar \"FILE\"\n              <> Opt.help \"Filepath of the signing key to be used in witness construction.\"\n              <> Opt.completer (Opt.bashCompleter \"file\")\n              )\n        )\n      <*>\n        optional pByronAddress\n  <|>\n    ScriptWitnessSigningData <$> pScript\n\npKesPeriod :: Parser KESPeriod\npKesPeriod =\n  KESPeriod <$>\n    Opt.option Opt.auto\n      (  Opt.long \"kes-period\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The start of the KES key validity period.\"\n      )\n\npEpochNo :: Parser EpochNo\npEpochNo =\n  EpochNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"epoch\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The epoch number.\"\n      )\n\n\npEpochNoUpdateProp :: Parser EpochNo\npEpochNoUpdateProp =\n  EpochNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"epoch\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The epoch number in which the update proposal is valid.\"\n      )\n\npGenesisFile :: Parser GenesisFile\npGenesisFile =\n  GenesisFile <$>\n    Opt.strOption\n      (  Opt.long \"genesis\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"The genesis file.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npOperatorCertIssueCounterFile :: Parser OpCertCounterFile\npOperatorCertIssueCounterFile =\n  OpCertCounterFile <$>\n    ( Opt.strOption\n        (  Opt.long \"operational-certificate-issue-counter-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"The file with the issue counter for the operational certificate.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"operational-certificate-issue-counter\"\n        <> Opt.internal\n        )\n    )\n\n\npOutputFormat :: Parser OutputFormat\npOutputFormat =\n  Opt.option readOutputFormat\n    (  Opt.long \"output-format\"\n    <> Opt.metavar \"STRING\"\n    <> Opt.help \"Optional output format. Accepted output formats are \\\"hex\\\" \\\n                \\and \\\"bech32\\\" (default is \\\"bech32\\\").\"\n    <> Opt.value OutputFormatBech32\n    )\n\n\npMaybeOutputFile :: Parser (Maybe OutputFile)\npMaybeOutputFile =\n  optional $\n    OutputFile <$>\n      Opt.strOption\n        (  Opt.long \"out-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Optional output file. Default is to write to stdout.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n\npOutputFile :: Parser OutputFile\npOutputFile =\n  OutputFile <$>\n    Opt.strOption\n      (  Opt.long \"out-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"The output file.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npColdVerificationKeyOrFile :: Parser ColdVerificationKeyOrFile\npColdVerificationKeyOrFile =\n  ColdStakePoolVerificationKey <$> pStakePoolVerificationKey\n    <|> ColdGenesisDelegateVerificationKey <$> pGenesisDelegateVerificationKey\n    <|> ColdVerificationKeyFile <$> pColdVerificationKeyFile\n\npColdVerificationKeyFile :: Parser VerificationKeyFile\npColdVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"cold-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the cold verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npVerificationKey\n  :: forall keyrole. SerialiseAsBech32 (VerificationKey keyrole)\n  => AsType keyrole\n  -> Parser (VerificationKey keyrole)\npVerificationKey asType =\n  Opt.option\n    (readVerificationKey asType)\n      (  Opt.long \"verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Verification key (Bech32 or hex-encoded).\"\n      )\n\npVerificationKeyOrFile\n  :: SerialiseAsBech32 (VerificationKey keyrole)\n  => AsType keyrole\n  -> Parser (VerificationKeyOrFile keyrole)\npVerificationKeyOrFile asType =\n  VerificationKeyValue <$> pVerificationKey asType\n    <|> VerificationKeyFilePath <$> pVerificationKeyFile Input\n\npVerificationKeyFile :: FileDirection -> Parser VerificationKeyFile\npVerificationKeyFile fdir =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help (show fdir ++ \" filepath of the verification key.\")\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npExtendedVerificationKeyFile :: FileDirection -> Parser VerificationKeyFile\npExtendedVerificationKeyFile fdir =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"extended-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help (show fdir ++ \" filepath of the ed25519-bip32 verification key.\")\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npGenesisVerificationKeyFile :: Parser VerificationKeyFile\npGenesisVerificationKeyFile =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"genesis-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the genesis verification key.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npGenesisVerificationKeyHash :: Parser (Hash GenesisKey)\npGenesisVerificationKeyHash =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-verification-key-hash\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis verification key hash (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (Hash GenesisKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis verification key hash.\") Right\n        . deserialiseFromRawBytesHex (AsHash AsGenesisKey)\n        . BSC.pack\n\npGenesisVerificationKey :: Parser (VerificationKey GenesisKey)\npGenesisVerificationKey =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-verification-key\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis verification key (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (VerificationKey GenesisKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis verification key.\") Right\n        . deserialiseFromRawBytesHex (AsVerificationKey AsGenesisKey)\n        . BSC.pack\n\npGenesisVerificationKeyOrFile :: Parser (VerificationKeyOrFile GenesisKey)\npGenesisVerificationKeyOrFile =\n  VerificationKeyValue <$> pGenesisVerificationKey\n    <|> VerificationKeyFilePath <$> pGenesisVerificationKeyFile\n\npGenesisVerificationKeyOrHashOrFile :: Parser (VerificationKeyOrHashOrFile GenesisKey)\npGenesisVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pGenesisVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pGenesisVerificationKeyHash\n\npGenesisDelegateVerificationKeyFile :: Parser VerificationKeyFile\npGenesisDelegateVerificationKeyFile =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"genesis-delegate-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the genesis delegate verification key.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npGenesisDelegateVerificationKeyHash :: Parser (Hash GenesisDelegateKey)\npGenesisDelegateVerificationKeyHash =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-delegate-verification-key-hash\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis delegate verification key hash (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (Hash GenesisDelegateKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis delegate verification key hash.\") Right\n        . deserialiseFromRawBytesHex (AsHash AsGenesisDelegateKey)\n        . BSC.pack\n\npGenesisDelegateVerificationKey :: Parser (VerificationKey GenesisDelegateKey)\npGenesisDelegateVerificationKey =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"genesis-delegate-verification-key\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Genesis delegate verification key (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex\n      :: String\n      -> Either String (VerificationKey GenesisDelegateKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid genesis delegate verification key.\") Right\n        . deserialiseFromRawBytesHex (AsVerificationKey AsGenesisDelegateKey)\n        . BSC.pack\n\npGenesisDelegateVerificationKeyOrFile\n  :: Parser (VerificationKeyOrFile GenesisDelegateKey)\npGenesisDelegateVerificationKeyOrFile =\n  VerificationKeyValue <$> pGenesisDelegateVerificationKey\n    <|> VerificationKeyFilePath <$> pGenesisDelegateVerificationKeyFile\n\npGenesisDelegateVerificationKeyOrHashOrFile\n  :: Parser (VerificationKeyOrHashOrFile GenesisDelegateKey)\npGenesisDelegateVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pGenesisDelegateVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pGenesisDelegateVerificationKeyHash\n\npKesVerificationKeyOrFile :: Parser (VerificationKeyOrFile KesKey)\npKesVerificationKeyOrFile =\n  VerificationKeyValue <$> pKesVerificationKey\n    <|> VerificationKeyFilePath <$> pKesVerificationKeyFile\n\npKesVerificationKey :: Parser (VerificationKey KesKey)\npKesVerificationKey =\n    Opt.option\n      (Opt.eitherReader deserialiseVerKey)\n        (  Opt.long \"kes-verification-key\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"A Bech32 or hex-encoded hot KES verification key.\"\n        )\n  where\n    asType :: AsType (VerificationKey KesKey)\n    asType = AsVerificationKey AsKesKey\n\n    deserialiseVerKey :: String -> Either String (VerificationKey KesKey)\n    deserialiseVerKey str =\n      case deserialiseFromBech32 asType (Text.pack str) of\n        Right res -> Right res\n\n        -- The input was valid Bech32, but some other error occurred.\n        Left err@(Bech32UnexpectedPrefix _ _) -> Left (displayError err)\n        Left err@(Bech32DataPartToBytesError _) -> Left (displayError err)\n        Left err@(Bech32DeserialiseFromBytesError _) -> Left (displayError err)\n        Left err@(Bech32WrongPrefix _ _) -> Left (displayError err)\n\n        -- The input was not valid Bech32. Attempt to deserialize it as hex.\n        Left (Bech32DecodingError _) ->\n          case deserialiseFromRawBytesHex asType (BSC.pack str) of\n            Just res' -> Right res'\n            Nothing -> Left \"Invalid stake pool verification key.\"\n\npKesVerificationKeyFile :: Parser VerificationKeyFile\npKesVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"kes-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the hot KES verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n    Opt.strOption\n        (  Opt.long \"hot-kes-verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npNetworkId :: Parser NetworkId\npNetworkId =\n  pMainnet <|> fmap Testnet pTestnetMagic\n where\n   pMainnet :: Parser NetworkId\n   pMainnet =\n    Opt.flag' Mainnet\n      (  Opt.long \"mainnet\"\n      <> Opt.help \"Use the mainnet magic id.\"\n      )\n\npTestnetMagic :: Parser NetworkMagic\npTestnetMagic =\n  NetworkMagic <$>\n    Opt.option Opt.auto\n      (  Opt.long \"testnet-magic\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Specify a testnet magic id.\"\n      )\n\npTxSubmitFile :: Parser FilePath\npTxSubmitFile =\n  Opt.strOption\n    (  Opt.long \"tx-file\"\n    <> Opt.metavar \"FILE\"\n    <> Opt.help \"Filepath of the transaction you intend to submit.\"\n    <> Opt.completer (Opt.bashCompleter \"file\")\n    )\n\npCardanoEra :: Parser AnyCardanoEra\npCardanoEra = asum\n  [ Opt.flag' (AnyCardanoEra ByronEra)\n      (  Opt.long \"byron-era\"\n      <> Opt.help \"Specify the Byron era\"\n      )\n  , Opt.flag' (AnyCardanoEra ShelleyEra)\n      (  Opt.long \"shelley-era\"\n      <> Opt.help \"Specify the Shelley era (default)\"\n      )\n  , Opt.flag' (AnyCardanoEra AllegraEra)\n      (  Opt.long \"allegra-era\"\n      <> Opt.help \"Specify the Allegra era\"\n      )\n  , Opt.flag' (AnyCardanoEra MaryEra)\n      (  Opt.long \"mary-era\"\n      <> Opt.help \"Specify the Mary era\"\n      )\n\n    -- Default for now:\n  , pure (AnyCardanoEra ShelleyEra)\n  ]\n\npTxIn :: Parser TxIn\npTxIn =\n  Opt.option (readerFromAttoParser parseTxIn)\n    (  Opt.long \"tx-in\"\n    <> Opt.metavar \"TX-IN\"\n    <> Opt.help \"The input transaction as TxId#TxIx where TxId is the transaction hash and TxIx is the index.\"\n    )\n\nparseTxIn :: Atto.Parser TxIn\nparseTxIn = TxIn <$> parseTxId <*> (Atto.char '#' *> parseTxIx)\n\nrenderTxIn :: TxIn -> Text\nrenderTxIn (TxIn txid (TxIx txix)) =\n  mconcat\n    [ Text.decodeUtf8 (serialiseToRawBytesHex txid)\n    , \"#\"\n    , Text.pack (show txix)\n    ]\n\nparseTxId :: Atto.Parser TxId\nparseTxId = (<?> \"Transaction ID (hexadecimal)\") $ do\n  bstr <- Atto.takeWhile1 Char.isHexDigit\n  case deserialiseFromRawBytesHex AsTxId bstr of\n    Just addr -> return addr\n    Nothing -> fail $ \"Incorrect transaction id format:: \" ++ show bstr\n\nparseTxIx :: Atto.Parser TxIx\nparseTxIx = toEnum <$> Atto.decimal\n\n\npTxOut :: Parser TxOutAnyEra\npTxOut =\n    Opt.option (readerFromParsecParser parseTxOutAnyEra)\n      (  Opt.long \"tx-out\"\n      <> Opt.metavar \"TX-OUT\"\n      -- TODO: Update the help text to describe the new syntax as well.\n      <> Opt.help \"The transaction output as Address+Lovelace where Address is \\\n                  \\the Bech32-encoded address followed by the amount in \\\n                  \\Lovelace.\"\n      )\n\npMintMultiAsset :: Parser Value\npMintMultiAsset =\n  Opt.option\n    (readerFromParsecParser parseValue)\n      (  Opt.long \"mint\"\n      <> Opt.metavar \"VALUE\"\n      <> Opt.help \"Mint multi-asset value(s) with the multi-asset cli syntax\"\n      )\n\npTxLowerBound :: Parser SlotNo\npTxLowerBound =\n  SlotNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"lower-bound\"\n      <> Opt.metavar \"SLOT\"\n      <> Opt.help \"Time that transaction is valid from (in slots).\"\n      )\n\npTxUpperBound :: Parser SlotNo\npTxUpperBound =\n  SlotNo <$>\n    ( Opt.option Opt.auto\n        (  Opt.long \"upper-bound\"\n        <> Opt.metavar \"SLOT\"\n        <> Opt.help \"Time that transaction is valid until (in slots).\"\n        )\n    <|>\n      Opt.option Opt.auto\n        (  Opt.long \"ttl\"\n        <> Opt.metavar \"SLOT\"\n        <> Opt.help \"Time to live (in slots) (deprecated; use --upper-bound instead).\"\n        )\n    )\n\npTxFee :: Parser Lovelace\npTxFee =\n  Lovelace . (fromIntegral :: Natural -> Integer) <$>\n    Opt.option Opt.auto\n      (  Opt.long \"fee\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The fee amount in Lovelace.\"\n      )\n\npWitnessFile :: Parser WitnessFile\npWitnessFile =\n  WitnessFile <$>\n    Opt.strOption\n      (  Opt.long \"witness-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the witness\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npTxBodyFile :: FileDirection -> Parser TxBodyFile\npTxBodyFile fdir =\n    TxBodyFile <$>\n      (  Opt.strOption\n           (  Opt.long optName\n           <> Opt.metavar \"FILE\"\n           <> Opt.help (show fdir ++ \" filepath of the TxBody.\")\n           <> Opt.completer (Opt.bashCompleter \"file\")\n           )\n      <|>\n         Opt.strOption\n           (  Opt.long \"tx-body-file\"\n           <> Opt.internal\n           )\n      )\n  where\n    optName =\n      case fdir of\n        Input -> \"tx-body-file\"\n        Output -> \"out-file\"\n\n\npTxFile :: FileDirection -> Parser TxFile\npTxFile fdir =\n    TxFile <$>\n      (  Opt.strOption\n           (  Opt.long optName\n           <> Opt.metavar \"FILE\"\n           <> Opt.help (show fdir ++ \" filepath of the Tx.\")\n           <> Opt.completer (Opt.bashCompleter \"file\")\n           )\n      <|>\n         Opt.strOption\n           (  Opt.long \"tx-file\"\n           <> Opt.internal\n           )\n      )\n  where\n    optName =\n      case fdir of\n        Input -> \"tx-file\"\n        Output -> \"out-file\"\n\npTxInCount :: Parser TxInCount\npTxInCount =\n  TxInCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"tx-in-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of transaction inputs.\"\n      )\n\npTxOutCount :: Parser TxOutCount\npTxOutCount =\n  TxOutCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"tx-out-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of transaction outputs.\"\n      )\n\npTxShelleyWitnessCount :: Parser TxShelleyWitnessCount\npTxShelleyWitnessCount =\n  TxShelleyWitnessCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"witness-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of Shelley key witnesses.\"\n      )\n\npTxByronWitnessCount :: Parser TxByronWitnessCount\npTxByronWitnessCount =\n  TxByronWitnessCount <$>\n    Opt.option Opt.auto\n      (  Opt.long \"byron-witness-count\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The number of Byron key witnesses (default is 0).\"\n      <> Opt.value 0\n      )\n\npQueryFilter :: Parser QueryFilter\npQueryFilter = pAddresses <|> pure NoFilter\n  where\n    pAddresses :: Parser QueryFilter\n    pAddresses = FilterByAddress . Set.fromList <$>\n                   some pFilterByAddress\n\npFilterByAddress :: Parser AddressAny\npFilterByAddress =\n    Opt.option (readerFromAttoParser parseAddressAny)\n      (  Opt.long \"address\"\n      <> Opt.metavar \"ADDRESS\"\n      <> Opt.help \"Filter by Cardano address(es) (Bech32-encoded).\"\n      )\n\npFilterByStakeAddress :: Parser StakeAddress\npFilterByStakeAddress =\n    Opt.option (readerFromAttoParser parseStakeAddress)\n      (  Opt.long \"address\"\n      <> Opt.metavar \"ADDRESS\"\n      <> Opt.help \"Filter by Cardano stake address (Bech32-encoded).\"\n      )\n\npByronAddress :: Parser (Address ByronAddr)\npByronAddress =\n    Opt.option\n      (Opt.eitherReader deserialise)\n        (  Opt.long \"address\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"Byron address (Base58-encoded).\"\n        )\n  where\n    deserialise :: String -> Either String (Address ByronAddr)\n    deserialise =\n      maybe (Left \"Invalid Byron address.\") Right\n        . deserialiseAddress AsByronAddress\n        . Text.pack\n\npAddress :: Parser Text\npAddress =\n  Text.pack <$>\n    Opt.strOption\n      (  Opt.long \"address\"\n      <> Opt.metavar \"ADDRESS\"\n      <> Opt.help \"A Cardano address\"\n      )\n\npStakeVerificationKeyOrFile :: Parser (VerificationKeyOrFile StakeKey)\npStakeVerificationKeyOrFile =\n  VerificationKeyValue <$> pStakeVerificationKey\n    <|> VerificationKeyFilePath <$> pStakeVerificationKeyFile\n\npStakeVerificationKey :: Parser (VerificationKey StakeKey)\npStakeVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakeKey)\n      (  Opt.long \"stake-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Stake verification key (Bech32 or hex-encoded).\"\n      )\n\npStakeVerificationKeyFile :: Parser VerificationKeyFile\npStakeVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"stake-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the staking verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"staking-verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\n\npStakePoolVerificationKeyFile :: Parser VerificationKeyFile\npStakePoolVerificationKeyFile =\n  VerificationKeyFile <$>\n    (  Opt.strOption\n         (  Opt.long \"cold-verification-key-file\"\n         <> Opt.metavar \"FILE\"\n         <> Opt.help \"Filepath of the stake pool verification key.\"\n         <> Opt.completer (Opt.bashCompleter \"file\")\n         )\n    <|>\n       Opt.strOption\n         (  Opt.long \"stake-pool-verification-key-file\"\n         <> Opt.internal\n         )\n    )\n\npStakePoolVerificationKeyHash :: Parser (Hash StakePoolKey)\npStakePoolVerificationKeyHash =\n    Opt.option\n      (Opt.maybeReader pBech32OrHexStakePoolId)\n        (  Opt.long \"stake-pool-id\"\n        <> Opt.metavar \"STAKE-POOL-ID\"\n        <> Opt.help \"Stake pool ID/verification key hash (either \\\n                    \\Bech32-encoded or hex-encoded).\"\n        )\n  where\n    pBech32OrHexStakePoolId :: String -> Maybe (Hash StakePoolKey)\n    pBech32OrHexStakePoolId str =\n      pBech32StakePoolId str <|> pHexStakePoolId str\n\n    pHexStakePoolId :: String -> Maybe (Hash StakePoolKey)\n    pHexStakePoolId =\n      deserialiseFromRawBytesHex (AsHash AsStakePoolKey) . BSC.pack\n\n    pBech32StakePoolId :: String -> Maybe (Hash StakePoolKey)\n    pBech32StakePoolId =\n      either (const Nothing) Just\n        . deserialiseFromBech32 (AsHash AsStakePoolKey)\n        . Text.pack\n\npStakePoolVerificationKey :: Parser (VerificationKey StakePoolKey)\npStakePoolVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakePoolKey)\n      (  Opt.long \"stake-pool-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Stake pool verification key (Bech32 or hex-encoded).\"\n      )\n\npStakePoolVerificationKeyOrFile\n  :: Parser (VerificationKeyOrFile StakePoolKey)\npStakePoolVerificationKeyOrFile =\n  VerificationKeyValue <$> pStakePoolVerificationKey\n    <|> VerificationKeyFilePath <$> pStakePoolVerificationKeyFile\n\npStakePoolVerificationKeyOrHashOrFile\n  :: Parser (VerificationKeyOrHashOrFile StakePoolKey)\npStakePoolVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pStakePoolVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pStakePoolVerificationKeyHash\n\npVrfVerificationKeyFile :: Parser VerificationKeyFile\npVrfVerificationKeyFile =\n  VerificationKeyFile <$>\n    Opt.strOption\n      (  Opt.long \"vrf-verification-key-file\"\n      <> Opt.metavar \"FILE\"\n      <> Opt.help \"Filepath of the VRF verification key.\"\n      <> Opt.completer (Opt.bashCompleter \"file\")\n      )\n\npVrfVerificationKeyHash :: Parser (Hash VrfKey)\npVrfVerificationKeyHash =\n    Opt.option\n      (Opt.eitherReader deserialiseFromHex)\n        (  Opt.long \"vrf-verification-key-hash\"\n        <> Opt.metavar \"STRING\"\n        <> Opt.help \"VRF verification key hash (hex-encoded).\"\n        )\n  where\n    deserialiseFromHex :: String -> Either String (Hash VrfKey)\n    deserialiseFromHex =\n      maybe (Left \"Invalid VRF verification key hash.\") Right\n        . deserialiseFromRawBytesHex (AsHash AsVrfKey)\n        . BSC.pack\n\npVrfVerificationKey :: Parser (VerificationKey VrfKey)\npVrfVerificationKey =\n  Opt.option\n    (readVerificationKey AsVrfKey)\n      (  Opt.long \"vrf-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"VRF verification key (Bech32 or hex-encoded).\"\n      )\n\npVrfVerificationKeyOrFile :: Parser (VerificationKeyOrFile VrfKey)\npVrfVerificationKeyOrFile =\n  VerificationKeyValue <$> pVrfVerificationKey\n    <|> VerificationKeyFilePath <$> pVrfVerificationKeyFile\n\npVrfVerificationKeyOrHashOrFile :: Parser (VerificationKeyOrHashOrFile VrfKey)\npVrfVerificationKeyOrHashOrFile =\n  VerificationKeyOrFile <$> pVrfVerificationKeyOrFile\n    <|> VerificationKeyHash <$> pVrfVerificationKeyHash\n\npRewardAcctVerificationKeyFile :: Parser VerificationKeyFile\npRewardAcctVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"pool-reward-account-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the reward account stake verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n        (  Opt.long \"reward-account-verification-key-file\"\n        <> Opt.internal\n        )\n    )\n\npRewardAcctVerificationKey :: Parser (VerificationKey StakeKey)\npRewardAcctVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakeKey)\n      (  Opt.long \"pool-reward-account-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Reward account stake verification key (Bech32 or hex-encoded).\"\n      )\n\npRewardAcctVerificationKeyOrFile :: Parser (VerificationKeyOrFile StakeKey)\npRewardAcctVerificationKeyOrFile =\n  VerificationKeyValue <$> pRewardAcctVerificationKey\n    <|> VerificationKeyFilePath <$> pRewardAcctVerificationKeyFile\n\npPoolOwnerVerificationKeyFile :: Parser VerificationKeyFile\npPoolOwnerVerificationKeyFile =\n  VerificationKeyFile <$>\n    ( Opt.strOption\n        (  Opt.long \"pool-owner-stake-verification-key-file\"\n        <> Opt.metavar \"FILE\"\n        <> Opt.help \"Filepath of the pool owner stake verification key.\"\n        <> Opt.completer (Opt.bashCompleter \"file\")\n        )\n    <|>\n      Opt.strOption\n          (  Opt.long \"pool-owner-staking-verification-key\"\n          <> Opt.internal\n          )\n    )\n\npPoolOwnerVerificationKey :: Parser (VerificationKey StakeKey)\npPoolOwnerVerificationKey =\n  Opt.option\n    (readVerificationKey AsStakeKey)\n      (  Opt.long \"pool-owner-verification-key\"\n      <> Opt.metavar \"STRING\"\n      <> Opt.help \"Pool owner stake verification key (Bech32 or hex-encoded).\"\n      )\n\npPoolOwnerVerificationKeyOrFile :: Parser (VerificationKeyOrFile StakeKey)\npPoolOwnerVerificationKeyOrFile =\n  VerificationKeyValue <$> pPoolOwnerVerificationKey\n    <|> VerificationKeyFilePath <$> pPoolOwnerVerificationKeyFile\n\npPoolPledge :: Parser Lovelace\npPoolPledge =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"pool-pledge\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The stake pool's pledge.\"\n      )\n\n\npPoolCost :: Parser Lovelace\npPoolCost =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"pool-cost\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The stake pool's cost.\"\n      )\n\npPoolMargin :: Parser Rational\npPoolMargin =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"pool-margin\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"The stake pool's margin.\"\n      )\n\npPoolRelay :: Parser StakePoolRelay\npPoolRelay = pSingleHostAddress <|> pSingleHostName <|> pMultiHostName\n\npMultiHostName :: Parser StakePoolRelay\npMultiHostName =\n  StakePoolRelayDnsSrvRecord <$> pDNSName\n where\n  pDNSName :: Parser ByteString\n  pDNSName = Opt.option (Opt.eitherReader eDNSName)\n               (  Opt.long \"multi-host-pool-relay\"\n               <> Opt.metavar \"STRING\"\n               <> Opt.help \"The stake pool relay's DNS name that corresponds to \\\n                            \\an SRV DNS record\"\n               )\n\npSingleHostName :: Parser StakePoolRelay\npSingleHostName =\n  StakePoolRelayDnsARecord <$> pDNSName <*> optional pPort\n where\n  pDNSName :: Parser ByteString\n  pDNSName = Opt.option (Opt.eitherReader eDNSName)\n               (  Opt.long \"single-host-pool-relay\"\n               <> Opt.metavar \"STRING\"\n               <> Opt.help \"The stake pool relay's DNS name that corresponds to an\\\n                            \\ A or AAAA DNS record\"\n               )\n\neDNSName :: String -> Either String ByteString\neDNSName str =\n  -- We're using 'Shelley.textToDns' to validate the string.\n  case Shelley.textToDns (toS str) of\n    Nothing -> Left \"DNS name is more than 64 bytes\"\n    Just dnsName -> Right . Text.encodeUtf8 . Shelley.dnsToText $ dnsName\n\npSingleHostAddress :: Parser StakePoolRelay\npSingleHostAddress = singleHostAddress\n  <$> optional pIpV4\n  <*> optional pIpV6\n  <*> pPort\n where\n  singleHostAddress :: Maybe IP.IPv4 -> Maybe IP.IPv6 -> PortNumber -> StakePoolRelay\n  singleHostAddress ipv4 ipv6 port =\n    case (ipv4, ipv6) of\n      (Nothing, Nothing) ->\n        panic \"Please enter either an IPv4 or IPv6 address for the pool relay\"\n      (Just i4, Nothing) ->\n        StakePoolRelayIp (Just i4) Nothing (Just port)\n      (Nothing, Just i6) ->\n        StakePoolRelayIp Nothing (Just i6) (Just port)\n      (Just i4, Just i6) ->\n        StakePoolRelayIp (Just i4) (Just i6) (Just port)\n\n\n\npIpV4 :: Parser IP.IPv4\npIpV4 = Opt.option (Opt.maybeReader readMaybe :: Opt.ReadM IP.IPv4)\n          (  Opt.long \"pool-relay-ipv4\"\n          <> Opt.metavar \"STRING\"\n          <> Opt.help \"The stake pool relay's IPv4 address\"\n          )\n\npIpV6 :: Parser IP.IPv6\npIpV6 = Opt.option (Opt.maybeReader readMaybe :: Opt.ReadM IP.IPv6)\n           (  Opt.long \"pool-relay-ipv6\"\n           <> Opt.metavar \"STRING\"\n           <> Opt.help \"The stake pool relay's IPv6 address\"\n           )\n\npPort :: Parser PortNumber\npPort = Opt.option (fromInteger <$> Opt.eitherReader readEither)\n           (  Opt.long \"pool-relay-port\"\n           <> Opt.metavar \"INT\"\n           <> Opt.help \"The stake pool relay's port\"\n           )\n\npStakePoolMetadataReference :: Parser (Maybe StakePoolMetadataReference)\npStakePoolMetadataReference =\n  optional $\n    StakePoolMetadataReference\n      <$> pStakePoolMetadataUrl\n      <*> pStakePoolMetadataHash\n\npStakePoolMetadataUrl :: Parser Text\npStakePoolMetadataUrl =\n  Opt.option (readURIOfMaxLength 64)\n    (  Opt.long \"metadata-url\"\n    <> Opt.metavar \"URL\"\n    <> Opt.help \"Pool metadata URL (maximum length of 64 characters).\"\n    )\n\npStakePoolMetadataHash :: Parser (Hash StakePoolMetadata)\npStakePoolMetadataHash =\n    Opt.option\n      (Opt.maybeReader metadataHash)\n        (  Opt.long \"metadata-hash\"\n        <> Opt.metavar \"HASH\"\n        <> Opt.help \"Pool metadata hash.\"\n        )\n  where\n    metadataHash :: String -> Maybe (Hash StakePoolMetadata)\n    metadataHash = deserialiseFromRawBytesHex (AsHash AsStakePoolMetadata)\n                 . BSC.pack\n\npStakePoolRegistrationCert :: Parser PoolCmd\npStakePoolRegistrationCert =\n  PoolRegistrationCert\n    <$> pStakePoolVerificationKeyOrFile\n    <*> pVrfVerificationKeyOrFile\n    <*> pPoolPledge\n    <*> pPoolCost\n    <*> pPoolMargin\n    <*> pRewardAcctVerificationKeyOrFile\n    <*> some pPoolOwnerVerificationKeyOrFile\n    <*> many pPoolRelay\n    <*> pStakePoolMetadataReference\n    <*> pNetworkId\n    <*> pOutputFile\n\npStakePoolRetirementCert :: Parser PoolCmd\npStakePoolRetirementCert =\n  PoolRetirementCert\n    <$> pStakePoolVerificationKeyOrFile\n    <*> pEpochNo\n    <*> pOutputFile\n\n\npShelleyProtocolParametersUpdate :: Parser ProtocolParametersUpdate\npShelleyProtocolParametersUpdate =\n  ProtocolParametersUpdate\n    <$> optional pProtocolVersion\n    <*> optional pDecentralParam\n    <*> optional pExtraEntropy\n    <*> optional pMaxBlockHeaderSize\n    <*> optional pMaxBodySize\n    <*> optional pMaxTransactionSize\n    <*> optional pMinFeeConstantFactor\n    <*> optional pMinFeeLinearFactor\n    <*> optional pMinUTxOValue\n    <*> optional pKeyRegistDeposit\n    <*> optional pPoolDeposit\n    <*> optional pMinPoolCost\n    <*> optional pEpochBoundRetirement\n    <*> optional pNumberOfPools\n    <*> optional pPoolInfluence\n    <*> optional pMonetaryExpansion\n    <*> optional pTreasuryExpansion\n\npMinFeeLinearFactor :: Parser Natural\npMinFeeLinearFactor =\n    Opt.option Opt.auto\n      (  Opt.long \"min-fee-linear\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The linear factor for the minimum fee calculation.\"\n      )\n\npMinFeeConstantFactor :: Parser Natural\npMinFeeConstantFactor =\n    Opt.option Opt.auto\n      (  Opt.long \"min-fee-constant\"\n      <> Opt.metavar \"LOVELACE\"\n      <> Opt.help \"The constant factor for the minimum fee calculation.\"\n      )\n\npMinUTxOValue :: Parser Lovelace\npMinUTxOValue =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"min-utxo-value\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The minimum allowed UTxO value.\"\n      )\n\npMinPoolCost :: Parser Lovelace\npMinPoolCost =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"min-pool-cost\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The minimum allowed cost parameter for stake pools.\"\n      )\n\npMaxBodySize :: Parser Natural\npMaxBodySize =\n    Opt.option Opt.auto\n      (  Opt.long \"max-block-body-size\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Maximal block body size.\"\n      )\n\npMaxTransactionSize :: Parser Natural\npMaxTransactionSize =\n    Opt.option Opt.auto\n      (  Opt.long \"max-tx-size\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Maximum transaction size.\"\n      )\n\npMaxBlockHeaderSize :: Parser Natural\npMaxBlockHeaderSize =\n    Opt.option Opt.auto\n      (  Opt.long \"max-block-header-size\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Maximum block header size.\"\n      )\n\npKeyRegistDeposit :: Parser Lovelace\npKeyRegistDeposit =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"key-reg-deposit-amt\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Key registration deposit amount.\"\n      )\n\npPoolDeposit :: Parser Lovelace\npPoolDeposit =\n    Opt.option (readerFromAttoParser parseLovelace)\n      (  Opt.long \"pool-reg-deposit\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"The amount of a pool registration deposit.\"\n      )\n\npEpochBoundRetirement :: Parser EpochNo\npEpochBoundRetirement =\n    EpochNo <$>\n    Opt.option Opt.auto\n      (  Opt.long \"pool-retirement-epoch-boundary\"\n      <> Opt.metavar \"INT\"\n      <> Opt.help \"Epoch bound on pool retirement.\"\n      )\n\npNumberOfPools :: Parser Natural\npNumberOfPools =\n    Opt.option Opt.auto\n      (  Opt.long \"number-of-pools\"\n      <> Opt.metavar \"NATURAL\"\n      <> Opt.help \"Desired number of pools.\"\n      )\n\npPoolInfluence :: Parser Rational\npPoolInfluence =\n    Opt.option readRational\n      (  Opt.long \"pool-influence\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Pool influence.\"\n      )\n\npTreasuryExpansion :: Parser Rational\npTreasuryExpansion =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"treasury-expansion\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Treasury expansion.\"\n      )\n\npMonetaryExpansion :: Parser Rational\npMonetaryExpansion =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"monetary-expansion\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Monetary expansion.\"\n      )\n\npDecentralParam :: Parser Rational\npDecentralParam =\n    Opt.option readRationalUnitInterval\n      (  Opt.long \"decentralization-parameter\"\n      <> Opt.metavar \"DOUBLE\"\n      <> Opt.help \"Decentralization parameter.\"\n      )\n\npExtraEntropy :: Parser (Maybe PraosNonce)\npExtraEntropy =\n      Opt.option (Just <$> readerFromAttoParser parsePraosNonce)\n        (  Opt.long \"extra-entropy\"\n        <> Opt.metavar \"HEX\"\n        <> Opt.help \"Praos extra entropy, as a hex byte string.\"\n        )\n  <|> Opt.flag' Nothing\n        (  Opt.long \"reset-extra-entropy\"\n        <> Opt.help \"Reset the Praos extra entropy to none.\"\n        )\n  where\n    parsePraosNonce :: Atto.Parser PraosNonce\n    parsePraosNonce = makePraosNonce <$> parseEntropyBytes\n\n    parseEntropyBytes :: Atto.Parser ByteString\n    parseEntropyBytes = either fail return\n                      . decodeEitherBase16\n                    =<< Atto.takeWhile1 Char.isHexDigit\n\npProtocol :: Parser Protocol\npProtocol =\n    (  Opt.flag' ()\n        (  Opt.long \"shelley-mode\"\n        <> Opt.help \"For talking to a node running in Shelley-only mode.\"\n        )\n    *> pShelleyMode\n    )\n  <|>\n    (  Opt.flag' ()\n        (  Opt.long \"byron-mode\"\n        <> Opt.help \"For talking to a node running in Byron-only mode.\"\n        )\n    *> pByronMode\n    )\n  <|>\n    (  Opt.flag' ()\n        (  Opt.long \"cardano-mode\"\n        <> Opt.help \"For talking to a node running in full Cardano mode (default).\"\n        )\n    *> pCardanoMode\n    )\n  <|>\n    -- Default to the Cardano protocol.\n    pure\n      (CardanoProtocol\n        (EpochSlots defaultByronEpochSlots))\n  where\n    pByronMode :: Parser Protocol\n    pByronMode = ByronProtocol <$> pEpochSlots\n\n    pShelleyMode :: Parser Protocol\n    pShelleyMode = pure ShelleyProtocol\n\n    pCardanoMode :: Parser Protocol\n    pCardanoMode = CardanoProtocol <$> pEpochSlots\n\n    pEpochSlots :: Parser EpochSlots\n    pEpochSlots =\n      EpochSlots <$>\n        Opt.option Opt.auto\n          (  Opt.long \"epoch-slots\"\n          <> Opt.metavar \"NATURAL\"\n          <> Opt.help \"The number of slots per epoch for the Byron era.\"\n          <> Opt.value defaultByronEpochSlots -- Default to the mainnet value.\n          <> Opt.showDefault\n          )\n\n    defaultByronEpochSlots :: Word64\n    defaultByronEpochSlots = 21600\n\npProtocolVersion :: Parser (Natural, Natural)\npProtocolVersion =\n    (,) <$> pProtocolMajorVersion <*> pProtocolMinorVersion\n  where\n    pProtocolMajorVersion =\n      Opt.option Opt.auto\n        (  Opt.long \"protocol-major-version\"\n        <> Opt.metavar \"NATURAL\"\n        <> Opt.help \"Major protocol version. An increase indicates a hard fork.\"\n        )\n    pProtocolMinorVersion =\n      Opt.option Opt.auto\n        (  Opt.long \"protocol-minor-version\"\n        <> Opt.metavar \"NATURAL\"\n        <> Opt.help \"Minor protocol version. An increase indicates a soft fork\\\n                    \\ (old software canvalidate but not produce new blocks).\"\n        )\n\n--\n-- Shelley CLI flag field parsers\n--\n\nparseLovelace :: Atto.Parser Lovelace\nparseLovelace = Lovelace <$> Atto.decimal\n\nparseAddressAny :: Atto.Parser AddressAny\nparseAddressAny = do\n    str <- lexPlausibleAddressString\n    case deserialiseAddress AsAddressAny str of\n      Nothing   -> fail \"invalid address\"\n      Just addr -> pure addr\n\nparseStakeAddress :: Atto.Parser StakeAddress\nparseStakeAddress = do\n    str <- lexPlausibleAddressString\n    case deserialiseAddress AsStakeAddress str of\n      Nothing   -> fail \"invalid address\"\n      Just addr -> pure addr\n\nlexPlausibleAddressString :: Atto.Parser Text\nlexPlausibleAddressString =\n    Text.decodeLatin1 <$> Atto.takeWhile1 isPlausibleAddressChar\n  where\n    -- Covers both base58 and bech32 (with constrained prefixes)\n    isPlausibleAddressChar c =\n         (c >= 'a' && c <= 'z')\n      || (c >= 'A' && c <= 'Z')\n      || (c >= '0' && c <= '9')\n      || c == '_'\n\n\n--------------------------------------------------------------------------------\n-- Helpers\n--------------------------------------------------------------------------------\n\n-- | Read a Bech32 or hex-encoded verification key.\nreadVerificationKey\n  :: forall keyrole. SerialiseAsBech32 (VerificationKey keyrole)\n  => AsType keyrole\n  -> Opt.ReadM (VerificationKey keyrole)\nreadVerificationKey asType =\n    Opt.eitherReader deserialiseFromBech32OrHex\n  where\n    keyFormats :: NonEmpty (InputFormat (VerificationKey keyrole))\n    keyFormats = NE.fromList [InputFormatBech32, InputFormatHex]\n\n    deserialiseFromBech32OrHex\n      :: String\n      -> Either String (VerificationKey keyrole)\n    deserialiseFromBech32OrHex str =\n      first (Text.unpack . renderInputDecodeError) $\n        deserialiseInput (AsVerificationKey asType) keyFormats (BSC.pack str)\n\nreadOutputFormat :: Opt.ReadM OutputFormat\nreadOutputFormat = do\n  s <- Opt.str\n  case s of\n    \"hex\" -> pure OutputFormatHex\n    \"bech32\" -> pure OutputFormatBech32\n    _ ->\n      fail $ \"Invalid output format: \\\"\"\n        <> s\n        <> \"\\\". Accepted output formats are \\\"hex\\\" and \\\"bech32\\\".\"\n\nreadURIOfMaxLength :: Int -> Opt.ReadM Text\nreadURIOfMaxLength maxLen =\n  Text.pack <$> readStringOfMaxLength maxLen\n\nreadStringOfMaxLength :: Int -> Opt.ReadM String\nreadStringOfMaxLength maxLen = do\n  s <- Opt.str\n  let strLen = length s\n  if strLen <= maxLen\n    then pure s\n    else fail $\n      \"The provided string must have at most 64 characters, but it has \"\n        <> show strLen\n        <> \" characters.\"\n\nreadRationalUnitInterval :: Opt.ReadM Rational\nreadRationalUnitInterval = readRational >>= checkUnitInterval\n  where\n   checkUnitInterval :: Rational -> Opt.ReadM Rational\n   checkUnitInterval q\n     | q >= 0 && q <= 1 = return q\n     | otherwise        = fail \"Please enter a value in the range [0,1]\"\n\nreadRational :: Opt.ReadM Rational\nreadRational = toRational <$> readerFromAttoParser Atto.scientific\n\nreaderFromAttoParser :: Atto.Parser a -> Opt.ReadM a\nreaderFromAttoParser p =\n    Opt.eitherReader (Atto.parseOnly (p <* Atto.endOfInput) . BSC.pack)\n\nreaderFromParsecParser :: Parsec.Parser a -> Opt.ReadM a\nreaderFromParsecParser p =\n    Opt.eitherReader (first formatError . Parsec.parse (p <* Parsec.eof) \"\")\n  where\n    --TODO: the default parsec error formatting is quite good, but we could\n    -- customise it somewhat:\n    formatError err =\n      Parsec.showErrorMessages \"or\" \"unknown parse error\"\n                               \"expecting\" \"unexpected\" \"end of input\"\n                               (Parsec.errorMessages err)\n\n\n"}}}
2020-12-03 13:38:48.59519139 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",Modified)]
2020-12-03 13:38:48.59562666 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":283,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:38:48.595735656 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":284,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}}}
2020-12-03 13:38:48.595851348 [ThreadId 9814] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:38:48.595906979 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:38:48.596028839 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:38:48.665548796 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"83/98"},"token":"619"},"method":"$/progress"}
2020-12-03 13:38:48.808297524 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":285,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}}}
2020-12-03 13:38:48.808436735 [ThreadId 9982] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:38:48.834053776 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":286,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":129,"character":20},"end":{"line":129,"character":34}},"context":{"diagnostics":[]}}}
2020-12-03 13:38:48.834167966 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":283}}
2020-12-03 13:38:48.83430713 [ThreadId 9926] - CodeAction was cancelled
2020-12-03 13:38:48.834366024 [ThreadId 9921] - Cancelled request IdInt 283
2020-12-03 13:38:48.834515827 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":283}
2020-12-03 13:38:49.989777945 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":287,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":130,"character":32}}}
2020-12-03 13:38:49.99002541 [ThreadId 9989] - DocumentHighlight request at position 131:33 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:38:50.333126423 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":288,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":130,"character":20},"end":{"line":130,"character":39}},"context":{"diagnostics":[]}}}
2020-12-03 13:38:50.333269103 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":286}}
2020-12-03 13:38:50.333413341 [ThreadId 9985] - CodeAction was cancelled
2020-12-03 13:38:50.333462217 [ThreadId 9983] - Cancelled request IdInt 286
2020-12-03 13:38:50.333544132 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":286}
2020-12-03 13:38:52.497820195 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":287}}
2020-12-03 13:38:52.498000779 [ThreadId 9989] - C:GetHieAst was cancelled
2020-12-03 13:38:52.498060991 [ThreadId 9987] - Cancelled request IdInt 287
2020-12-03 13:38:52.498166616 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":287}
2020-12-03 13:38:52.72214597 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":289,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":154,"character":4},"end":{"line":154,"character":23}},"context":{"diagnostics":[]}}}
2020-12-03 13:38:52.722314628 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":288}}
2020-12-03 13:38:52.722455559 [ThreadId 9992] - CodeAction was cancelled
2020-12-03 13:38:52.722517717 [ThreadId 9990] - Cancelled request IdInt 288
2020-12-03 13:38:52.722655118 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":288}
2020-12-03 13:38:53.974092728 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":290,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":155,"character":36}}}
2020-12-03 13:38:53.974249378 [ThreadId 10001] - GhcIde.hover entered (ideLogger)
2020-12-03 13:38:53.974328517 [ThreadId 10001] - Hover request at position 156:37 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:38:54.030171566 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":291,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"position":{"line":155,"character":36}}}
2020-12-03 13:38:54.030435807 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":290}}
2020-12-03 13:38:54.030487366 [ThreadId 10004] - DocumentHighlight request at position 156:37 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:38:54.030569669 [ThreadId 10001] - C:GetHieAst was cancelled
2020-12-03 13:38:54.030649917 [ThreadId 9999] - Cancelled request IdInt 290
2020-12-03 13:38:54.030810526 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":290}
2020-12-03 13:38:54.419222459 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":292,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"},"range":{"start":{"line":155,"character":26},"end":{"line":155,"character":46}},"context":{"diagnostics":[]}}}
2020-12-03 13:38:54.419354783 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":289}}
2020-12-03 13:38:54.419493761 [ThreadId 9997] - CodeAction was cancelled
2020-12-03 13:38:54.419550146 [ThreadId 9995] - Cancelled request IdInt 289
2020-12-03 13:38:54.419684714 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":289}
2020-12-03 13:38:57.769001501 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}}}
2020-12-03 13:38:57.769143223 [ThreadId 5] - Closed: Uri {getUri = "file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"}
2020-12-03 13:38:57.769211861 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":291}}
2020-12-03 13:38:57.769342506 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":285}}
2020-12-03 13:38:57.769445195 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":292}}
2020-12-03 13:38:57.769422983 [ThreadId 10004] - C:GetHieAst was cancelled
2020-12-03 13:38:57.769496231 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",Modified)]
2020-12-03 13:38:57.76971442 [ThreadId 25] - Closed text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs
2020-12-03 13:38:57.769463801 [ThreadId 9982] - codeLens was cancelled
2020-12-03 13:38:57.769823768 [ThreadId 10008] - CodeAction was cancelled
2020-12-03 13:38:57.769828347 [ThreadId 10002] - Cancelled request IdInt 291
2020-12-03 13:38:57.769843422 [ThreadId 9980] - Cancelled request IdInt 285
2020-12-03 13:38:57.769863543 [ThreadId 10006] - Cancelled request IdInt 292
2020-12-03 13:38:57.769914307 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":291}
2020-12-03 13:38:57.769969967 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":285}
2020-12-03 13:38:57.770019958 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":292}
2020-12-03 13:38:57.79651032 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs","languageId":"haskell","version":1,"text":"{-# LANGUAGE RankNTypes #-}\n\nmodule Cardano.CLI.Shelley.Run.Address\n  ( ShelleyAddressCmdError(..)\n  , SomeAddressVerificationKey(..)\n  , buildShelleyAddress\n  , renderShelleyAddressCmdError\n  , runAddressCmd\n  , runAddressKeyGen\n  , readAddressVerificationKeyTextOrFile\n  ) where\n\nimport           Cardano.Prelude hiding (putStrLn)\n\nimport           Data.Aeson as Aeson\nimport qualified Data.ByteString.Char8 as BS\nimport qualified Data.ByteString.Lazy as LBS\nimport qualified Data.Text as Text\nimport qualified Data.Text.IO as Text\n\nimport           Control.Monad.Trans.Except.Extra\n                   (firstExceptT, handleIOExceptT, hoistEither, newExceptT)\n\nimport           Cardano.Api.Typed\n\nimport           Cardano.CLI.Shelley.Key (InputDecodeError, VerificationKeyOrFile,\n                     VerificationKeyTextOrFile, VerificationKeyTextOrFileError (..),\n                     readVerificationKeyOrFile, readVerificationKeyTextOrFileAnyOf,\n                     renderVerificationKeyTextOrFileError)\nimport           Cardano.CLI.Shelley.Parsers (AddressCmd (..), AddressKeyType (..), OutputFile (..))\nimport           Cardano.CLI.Shelley.Run.Address.Info (ShelleyAddressInfoError, runAddressInfo)\nimport           Cardano.CLI.Types\n\ndata ShelleyAddressCmdError\n  = ShelleyAddressCmdAddressInfoError !ShelleyAddressInfoError\n  | ShelleyAddressCmdAesonDecodeError !FilePath !Text\n  | ShelleyAddressCmdReadKeyFileError !(FileError InputDecodeError)\n  | ShelleyAddressCmdReadFileException !(FileError ())\n  | ShelleyAddressCmdVerificationKeyTextOrFileError !VerificationKeyTextOrFileError\n  | ShelleyAddressCmdWriteFileError !(FileError ())\n  deriving Show\n\nrenderShelleyAddressCmdError :: ShelleyAddressCmdError -> Text\nrenderShelleyAddressCmdError err =\n  case err of\n    ShelleyAddressCmdAddressInfoError addrInfoErr ->\n      Text.pack (displayError addrInfoErr)\n    ShelleyAddressCmdReadKeyFileError fileErr ->\n      Text.pack (displayError fileErr)\n    ShelleyAddressCmdVerificationKeyTextOrFileError vkTextOrFileErr ->\n      renderVerificationKeyTextOrFileError vkTextOrFileErr\n    ShelleyAddressCmdWriteFileError fileErr -> Text.pack (displayError fileErr)\n    ShelleyAddressCmdAesonDecodeError fp decErr -> \"Error decoding multisignature JSON object at: \"\n                                                   <> Text.pack fp <> \" Error: \" <> decErr\n    ShelleyAddressCmdReadFileException fileErr -> Text.pack (displayError fileErr)\n\nrunAddressCmd :: AddressCmd -> ExceptT ShelleyAddressCmdError IO ()\nrunAddressCmd cmd =\n  case cmd of\n    AddressKeyGen kt vkf skf -> runAddressKeyGen kt vkf skf\n    AddressKeyHash vkf mOFp -> runAddressKeyHash vkf mOFp\n    AddressBuild payVk stkVk nw mOutFp -> runAddressBuild payVk stkVk nw mOutFp\n    AddressBuildMultiSig sFp nId mOutFp -> runAddressBuildScript sFp nId mOutFp\n    AddressInfo txt mOFp -> firstExceptT ShelleyAddressCmdAddressInfoError $ runAddressInfo txt mOFp\n\nrunAddressKeyGen :: AddressKeyType\n                 -> VerificationKeyFile\n                 -> SigningKeyFile\n                 -> ExceptT ShelleyAddressCmdError IO ()\nrunAddressKeyGen kt (VerificationKeyFile vkeyPath) (SigningKeyFile skeyPath) =\n    case kt of\n      AddressKeyShelley         -> generateAndWriteKeyFiles AsPaymentKey\n      AddressKeyShelleyExtended -> generateAndWriteKeyFiles AsPaymentExtendedKey\n      AddressKeyByron           -> generateAndWriteKeyFiles AsByronKey\n  where\n    generateAndWriteKeyFiles asType = do\n      skey <- liftIO $ generateSigningKey asType\n      let vkey = getVerificationKey skey\n      firstExceptT ShelleyAddressCmdWriteFileError\n        . newExceptT\n        $ writeFileTextEnvelope skeyPath (Just skeyDesc) skey\n      firstExceptT ShelleyAddressCmdWriteFileError\n        . newExceptT\n        $ writeFileTextEnvelope vkeyPath (Just vkeyDesc) vkey\n\n    skeyDesc, vkeyDesc :: TextEnvelopeDescr\n    skeyDesc = \"Payment Signing Key\"\n    vkeyDesc = \"Payment Verification Key\"\n\n\nrunAddressKeyHash :: VerificationKeyTextOrFile\n                  -> Maybe OutputFile\n                  -> ExceptT ShelleyAddressCmdError IO ()\nrunAddressKeyHash vkeyTextOrFile mOutputFp = do\n  vkey <- firstExceptT ShelleyAddressCmdVerificationKeyTextOrFileError $\n            readAddressVerificationKeyTextOrFile vkeyTextOrFile\n\n  let hexKeyHash = foldSomeAddressVerificationKey\n                     (serialiseToRawBytesHex . verificationKeyHash) vkey\n\n  case mOutputFp of\n    Just (OutputFile fpath) -> liftIO $ BS.writeFile fpath hexKeyHash\n    Nothing -> liftIO $ BS.putStrLn hexKeyHash\n\n\nrunAddressBuild :: VerificationKeyTextOrFile\n                -> Maybe (VerificationKeyOrFile StakeKey)\n                -> NetworkId\n                -> Maybe OutputFile\n                -> ExceptT ShelleyAddressCmdError IO ()\nrunAddressBuild payVkeyTextOrFile mbStkVkeyOrFile nw mOutFp = do\n    payVKey <- firstExceptT ShelleyAddressCmdVerificationKeyTextOrFileError $\n                 readAddressVerificationKeyTextOrFile payVkeyTextOrFile\n\n    addr <- case payVKey of\n              AByronVerificationKey vk ->\n                return (AddressByron (makeByronAddress nw vk))\n\n              APaymentVerificationKey vk ->\n                AddressShelley <$> buildShelleyAddress vk mbStkVkeyOrFile nw\n\n              APaymentExtendedVerificationKey vk ->\n                AddressShelley <$> buildShelleyAddress (castVerificationKey vk) mbStkVkeyOrFile nw\n\n              AGenesisUTxOVerificationKey vk ->\n                AddressShelley <$> buildShelleyAddress (castVerificationKey vk) mbStkVkeyOrFile nw\n\n    let addrText = serialiseAddress (addr :: AddressAny)\n\n    case mOutFp of\n      Just (OutputFile fpath) -> liftIO $ Text.writeFile fpath addrText\n      Nothing                 -> liftIO $ Text.putStrLn        addrText\n\nbuildShelleyAddress\n  :: VerificationKey PaymentKey\n  -> Maybe (VerificationKeyOrFile StakeKey)\n  -> NetworkId\n  -> ExceptT ShelleyAddressCmdError IO (Address ShelleyAddr)\nbuildShelleyAddress vkey mbStkVkeyOrFile nw = do\n  mstakeVKey <-\n    case mbStkVkeyOrFile of\n      Nothing -> pure Nothing\n      Just stkVkeyOrFile ->\n        firstExceptT ShelleyAddressCmdReadKeyFileError $\n          fmap Just $ newExceptT $\n            readVerificationKeyOrFile AsStakeKey stkVkeyOrFile\n\n  let paymentCred  = PaymentCredentialByKey (verificationKeyHash vkey)\n      stakeAddrRef = maybe NoStakeAddress\n                           (StakeAddressByValue . StakeCredentialByKey\n                                                . verificationKeyHash)\n                           mstakeVKey\n      address      = makeShelleyAddress nw paymentCred stakeAddrRef\n\n  return address\n\n\n--\n-- Handling the variety of address key types\n--\n\n-- TODO: if we could make unions like this an instance of the Key class then\n-- it would simplify some of the code above\ndata SomeAddressVerificationKey\n  = AByronVerificationKey           (VerificationKey ByronKey)\n  | APaymentVerificationKey         (VerificationKey PaymentKey)\n  | APaymentExtendedVerificationKey (VerificationKey PaymentExtendedKey)\n  | AGenesisUTxOVerificationKey     (VerificationKey GenesisUTxOKey)\n  deriving (Show)\n\nfoldSomeAddressVerificationKey :: (forall keyrole. Key keyrole =>\n                                   VerificationKey keyrole -> a)\n                               -> SomeAddressVerificationKey -> a\nfoldSomeAddressVerificationKey f (AByronVerificationKey           vk) = f vk\nfoldSomeAddressVerificationKey f (APaymentVerificationKey         vk) = f vk\nfoldSomeAddressVerificationKey f (APaymentExtendedVerificationKey vk) = f vk\nfoldSomeAddressVerificationKey f (AGenesisUTxOVerificationKey     vk) = f vk\n\nreadAddressVerificationKeyTextOrFile\n  :: VerificationKeyTextOrFile\n  -> ExceptT VerificationKeyTextOrFileError IO SomeAddressVerificationKey\nreadAddressVerificationKeyTextOrFile vkTextOrFile =\n    newExceptT $\n      readVerificationKeyTextOrFileAnyOf bech32Types textEnvTypes vkTextOrFile\n  where\n    bech32Types =\n      [ FromSomeType (AsVerificationKey AsByronKey)\n                     AByronVerificationKey\n      , FromSomeType (AsVerificationKey AsPaymentKey)\n                     APaymentVerificationKey\n      , FromSomeType (AsVerificationKey AsPaymentExtendedKey)\n                     APaymentExtendedVerificationKey\n      ]\n\n    textEnvTypes =\n      [ FromSomeType (AsVerificationKey AsByronKey)\n                     AByronVerificationKey\n      , FromSomeType (AsVerificationKey AsPaymentKey)\n                     APaymentVerificationKey\n      , FromSomeType (AsVerificationKey AsPaymentExtendedKey)\n                     APaymentExtendedVerificationKey\n      , FromSomeType (AsVerificationKey AsGenesisUTxOKey)\n                     AGenesisUTxOVerificationKey\n      ]\n\n--\n-- Multisig addresses\n--\n\nrunAddressBuildScript\n  :: ScriptFile\n  -> NetworkId\n  -> Maybe OutputFile\n  -> ExceptT ShelleyAddressCmdError IO ()\nrunAddressBuildScript (ScriptFile fp) nId mOutFp = do\n  scriptBytes <-\n    handleIOExceptT (ShelleyAddressCmdReadFileException . FileIOError fp) $\n      LBS.readFile fp\n  ScriptInAnyLang _lang script <-\n    firstExceptT (ShelleyAddressCmdAesonDecodeError fp . Text.pack) $\n    hoistEither $\n      Aeson.eitherDecode scriptBytes\n\n  let payCred = PaymentCredentialByScript (hashScript script)\n\n      scriptAddr :: Address ShelleyAddr\n      scriptAddr = makeShelleyAddress nId payCred NoStakeAddress\n                   --TODO: add support for referring to stake addresses\n\n      scriptAddrText :: Text\n      scriptAddrText = serialiseAddress scriptAddr\n\n  liftIO $ case mOutFp of\n    Just (OutputFile oFp) -> Text.writeFile oFp scriptAddrText\n    Nothing               -> Text.putStr        scriptAddrText\n\n"}}}
2020-12-03 13:38:57.79767466 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":293,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
2020-12-03 13:38:57.797963027 [ThreadId 25] - Set files of interest to: [(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",Modified),(NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs",Modified)]
2020-12-03 13:38:57.798460798 [ThreadId 9917] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:38:57.798526144 [ThreadId 25] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:38:57.798634305 [ThreadId 25] - Opened text document: file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:38:57.798725874 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":294,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"}}}
2020-12-03 13:38:57.885132971 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"83/99"},"token":"619"},"method":"$/progress"}
2020-12-03 13:38:58.032251509 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":295,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"}}}
2020-12-03 13:38:58.032525663 [ThreadId 10087] - Plugin.makeCodeLens (ideLogger)
2020-12-03 13:38:58.038420563 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":296,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"range":{"start":{"line":62,"character":4},"end":{"line":62,"character":24}},"context":{"diagnostics":[]}}}
2020-12-03 13:38:58.038548069 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":293}}
2020-12-03 13:38:58.038668558 [ThreadId 10036] - CodeAction was cancelled
2020-12-03 13:38:58.038786186 [ThreadId 10034] - Cancelled request IdInt 293
2020-12-03 13:38:58.038913763 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":293}
2020-12-03 13:38:58.891510413 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":297,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":62,"character":48}}}
2020-12-03 13:38:58.891667048 [ThreadId 10094] - GhcIde.hover entered (ideLogger)
2020-12-03 13:38:58.89178662 [ThreadId 10094] - Hover request at position 63:49 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:38:59.077360563 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":298,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":62,"character":49}}}
2020-12-03 13:38:59.077677073 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":297}}
2020-12-03 13:38:59.07781055 [ThreadId 10097] - DocumentHighlight request at position 63:50 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:38:59.07787367 [ThreadId 10094] - C:GetHieAst was cancelled
2020-12-03 13:38:59.077943191 [ThreadId 10092] - Cancelled request IdInt 297
2020-12-03 13:38:59.078023276 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":297}
2020-12-03 13:38:59.421252401 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":299,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"range":{"start":{"line":62,"character":43},"end":{"line":62,"character":64}},"context":{"diagnostics":[]}}}
2020-12-03 13:38:59.421375056 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":296}}
2020-12-03 13:38:59.421480134 [ThreadId 10090] - CodeAction was cancelled
2020-12-03 13:38:59.421561812 [ThreadId 10088] - Cancelled request IdInt 296
2020-12-03 13:38:59.421713779 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":296}
2020-12-03 13:39:00.666224917 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":300,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":60,"character":1}}}
2020-12-03 13:39:00.666390261 [ThreadId 10105] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:00.666490392 [ThreadId 10105] - Hover request at position 61:2 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:00.702209428 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":300}}
2020-12-03 13:39:00.702407542 [ThreadId 10105] - C:GetHieAst was cancelled
2020-12-03 13:39:00.702467286 [ThreadId 10103] - Cancelled request IdInt 300
2020-12-03 13:39:00.702587112 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":300}
2020-12-03 13:39:01.212585303 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":298}}
2020-12-03 13:39:01.213349917 [ThreadId 10097] - C:GetHieAst was cancelled
2020-12-03 13:39:01.213509333 [ThreadId 10095] - Cancelled request IdInt 298
2020-12-03 13:39:01.21365908 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":298}
2020-12-03 13:39:01.439760757 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":301,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"range":{"start":{"line":214,"character":0},"end":{"line":214,"character":21}},"context":{"diagnostics":[]}}}
2020-12-03 13:39:01.440043444 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":299}}
2020-12-03 13:39:01.440690346 [ThreadId 10101] - CodeAction was cancelled
2020-12-03 13:39:01.440831961 [ThreadId 10099] - Cancelled request IdInt 299
2020-12-03 13:39:01.440975592 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":299}
2020-12-03 13:39:02.219827103 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":302,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":214,"character":24}}}
2020-12-03 13:39:02.220091559 [ThreadId 10114] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:02.220276698 [ThreadId 10114] - Hover request at position 215:25 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:05.833091626 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":302}}
2020-12-03 13:39:05.833357686 [ThreadId 10114] - C:GetHieAst was cancelled
2020-12-03 13:39:05.833419323 [ThreadId 10112] - Cancelled request IdInt 302
2020-12-03 13:39:05.833523524 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":302}
2020-12-03 13:39:07.59417962 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":303,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":223,"character":51}}}
2020-12-03 13:39:07.594321648 [ThreadId 10118] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:07.594428135 [ThreadId 10118] - Hover request at position 224:52 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:09.218454557 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":303}}
2020-12-03 13:39:09.218828036 [ThreadId 10118] - C:GetHieAst was cancelled
2020-12-03 13:39:09.21891275 [ThreadId 10116] - Cancelled request IdInt 303
2020-12-03 13:39:09.219051878 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":303}
2020-12-03 13:39:12.030134713 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":304,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":223,"character":46}}}
2020-12-03 13:39:12.030487872 [ThreadId 10122] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:12.030667698 [ThreadId 10122] - Hover request at position 224:47 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:12.184562928 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":304}}
2020-12-03 13:39:12.185078637 [ThreadId 10122] - C:GetHieAst was cancelled
2020-12-03 13:39:12.185180603 [ThreadId 10120] - Cancelled request IdInt 304
2020-12-03 13:39:12.185370242 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":304}
2020-12-03 13:39:12.704900992 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":305,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":223,"character":48}}}
2020-12-03 13:39:12.705243532 [ThreadId 10126] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:12.705439148 [ThreadId 10126] - Hover request at position 224:49 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:12.984523223 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":305}}
2020-12-03 13:39:12.984793153 [ThreadId 10126] - C:GetHieAst was cancelled
2020-12-03 13:39:12.984873086 [ThreadId 10124] - Cancelled request IdInt 305
2020-12-03 13:39:12.984989105 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":305}
2020-12-03 13:39:43.576568817 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":306,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":223,"character":41}}}
2020-12-03 13:39:43.576736726 [ThreadId 10132] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:43.576885247 [ThreadId 10132] - Hover request at position 224:42 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:43.894101068 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":306}}
2020-12-03 13:39:43.894345173 [ThreadId 10132] - C:GetHieAst was cancelled
2020-12-03 13:39:43.894407686 [ThreadId 10130] - Cancelled request IdInt 306
2020-12-03 13:39:43.894544838 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":306}
2020-12-03 13:39:44.145936061 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":307,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":223,"character":38}}}
2020-12-03 13:39:44.146123536 [ThreadId 10136] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:44.146273795 [ThreadId 10136] - Hover request at position 224:39 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:44.177957666 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":307}}
2020-12-03 13:39:44.17819132 [ThreadId 10136] - C:GetHieAst was cancelled
2020-12-03 13:39:44.178258919 [ThreadId 10134] - Cancelled request IdInt 307
2020-12-03 13:39:44.178379373 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":307}
2020-12-03 13:39:46.268982945 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":308,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":226,"character":34}}}
2020-12-03 13:39:46.269115763 [ThreadId 10140] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:46.269220624 [ThreadId 10140] - Hover request at position 227:35 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:46.381073101 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":308}}
2020-12-03 13:39:46.381303566 [ThreadId 10140] - C:GetHieAst was cancelled
2020-12-03 13:39:46.381347398 [ThreadId 10138] - Cancelled request IdInt 308
2020-12-03 13:39:46.381447336 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":308}
2020-12-03 13:39:46.531478888 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":309,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":226,"character":33}}}
2020-12-03 13:39:46.531646743 [ThreadId 10144] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:46.531762711 [ThreadId 10144] - Hover request at position 227:34 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:51.312616288 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":309}}
2020-12-03 13:39:51.312820868 [ThreadId 10144] - C:GetHieAst was cancelled
2020-12-03 13:39:51.312896247 [ThreadId 10142] - Cancelled request IdInt 309
2020-12-03 13:39:51.313032898 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":309}
2020-12-03 13:39:51.555145619 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":310,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":227,"character":48}}}
2020-12-03 13:39:51.555329014 [ThreadId 10148] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:51.555413847 [ThreadId 10148] - Hover request at position 228:49 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:51.655401177 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":310}}
2020-12-03 13:39:51.655638873 [ThreadId 10148] - C:GetHieAst was cancelled
2020-12-03 13:39:51.655727257 [ThreadId 10146] - Cancelled request IdInt 310
2020-12-03 13:39:51.655884797 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":310}
2020-12-03 13:39:52.489608594 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":311,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":226,"character":47}}}
2020-12-03 13:39:52.489761072 [ThreadId 10152] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:52.489879619 [ThreadId 10152] - Hover request at position 227:48 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:52.723516985 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":311}}
2020-12-03 13:39:52.723711886 [ThreadId 10152] - C:GetHieAst was cancelled
2020-12-03 13:39:52.723778299 [ThreadId 10150] - Cancelled request IdInt 311
2020-12-03 13:39:52.723854224 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":311}
2020-12-03 13:39:53.074562969 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":312,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":226,"character":38}}}
2020-12-03 13:39:53.074702904 [ThreadId 10156] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:53.074797026 [ThreadId 10156] - Hover request at position 227:39 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:53.212243805 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":312}}
2020-12-03 13:39:53.212445098 [ThreadId 10156] - C:GetHieAst was cancelled
2020-12-03 13:39:53.212490678 [ThreadId 10154] - Cancelled request IdInt 312
2020-12-03 13:39:53.212578927 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":312}
2020-12-03 13:39:53.502326643 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":313,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":226,"character":35}}}
2020-12-03 13:39:53.502575079 [ThreadId 10160] - DocumentHighlight request at position 227:36 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:53.934817846 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":314,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"range":{"start":{"line":226,"character":19},"end":{"line":226,"character":37}},"context":{"diagnostics":[]}}}
2020-12-03 13:39:53.93495607 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":301}}
2020-12-03 13:39:53.935074649 [ThreadId 10110] - CodeAction was cancelled
2020-12-03 13:39:53.935126791 [ThreadId 10108] - Cancelled request IdInt 301
2020-12-03 13:39:53.93944514 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":301}
2020-12-03 13:39:54.827287252 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":315,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":226,"character":51}}}
2020-12-03 13:39:54.827463164 [ThreadId 10167] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:54.82755673 [ThreadId 10167] - Hover request at position 227:52 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:55.354209492 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":249}}
2020-12-03 13:39:55.354411472 [ThreadId 8841] - C:GetHieAst was cancelled
2020-12-03 13:39:55.354379612 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":316,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":226,"character":52}}}
2020-12-03 13:39:55.354493151 [ThreadId 8839] - Cancelled request IdInt 249
2020-12-03 13:39:55.35463828 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":249}
2020-12-03 13:39:55.354694729 [ThreadId 10171] - Definition request at position 227:53 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:55.951172969 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":315}}
2020-12-03 13:39:55.951424973 [ThreadId 10167] - C:GetHieAst was cancelled
2020-12-03 13:39:55.951504157 [ThreadId 10165] - Cancelled request IdInt 315
2020-12-03 13:39:55.951648543 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":315}
2020-12-03 13:39:59.136315793 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":317,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":223,"character":23}}}
2020-12-03 13:39:59.136489542 [ThreadId 10175] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:59.14141032 [ThreadId 10175] - Hover request at position 224:24 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:59.300074175 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":317}}
2020-12-03 13:39:59.300290342 [ThreadId 10175] - C:GetHieAst was cancelled
2020-12-03 13:39:59.300381781 [ThreadId 10173] - Cancelled request IdInt 317
2020-12-03 13:39:59.300524684 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":317}
2020-12-03 13:39:59.55603467 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":318,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":223,"character":40}}}
2020-12-03 13:39:59.556205702 [ThreadId 10179] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:59.556308252 [ThreadId 10179] - Hover request at position 224:41 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:39:59.6341628 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":318}}
2020-12-03 13:39:59.634342424 [ThreadId 10179] - C:GetHieAst was cancelled
2020-12-03 13:39:59.63440419 [ThreadId 10177] - Cancelled request IdInt 318
2020-12-03 13:39:59.634510646 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":318}
2020-12-03 13:39:59.942744898 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":319,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":223,"character":44}}}
2020-12-03 13:39:59.942904998 [ThreadId 10183] - GhcIde.hover entered (ideLogger)
2020-12-03 13:39:59.9430233 [ThreadId 10183] - Hover request at position 224:45 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:40:00.134902609 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":319}}
2020-12-03 13:40:00.135081076 [ThreadId 10183] - C:GetHieAst was cancelled
2020-12-03 13:40:00.1351371 [ThreadId 10181] - Cancelled request IdInt 319
2020-12-03 13:40:00.135311445 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":319}
2020-12-03 13:40:00.285398762 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":320,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":223,"character":45}}}
2020-12-03 13:40:00.285534619 [ThreadId 10187] - GhcIde.hover entered (ideLogger)
2020-12-03 13:40:00.285627972 [ThreadId 10187] - Hover request at position 224:46 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:40:01.203830729 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":320}}
2020-12-03 13:40:01.204030223 [ThreadId 10187] - C:GetHieAst was cancelled
2020-12-03 13:40:01.20407658 [ThreadId 10185] - Cancelled request IdInt 320
2020-12-03 13:40:01.204155522 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":320}
2020-12-03 13:40:01.565386037 [ThreadId 5] - ---> {"jsonrpc":"2.0","id":321,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"},"position":{"line":223,"character":57}}}
2020-12-03 13:40:01.565563735 [ThreadId 10191] - GhcIde.hover entered (ideLogger)
2020-12-03 13:40:01.565666174 [ThreadId 10191] - Hover request at position 224:58 in file: /home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs
2020-12-03 13:40:02.109482601 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":321}}
2020-12-03 13:40:02.109818893 [ThreadId 10191] - C:GetHieAst was cancelled
2020-12-03 13:40:02.109887866 [ThreadId 10189] - Cancelled request IdInt 321
2020-12-03 13:40:02.110032621 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":321}
2020-12-03 13:40:42.480146954 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":313}}
2020-12-03 13:40:42.480388665 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":295}}
2020-12-03 13:40:42.480386509 [ThreadId 10160] - C:GetHieAst was cancelled
2020-12-03 13:40:42.48048917 [ThreadId 10158] - Cancelled request IdInt 313
2020-12-03 13:40:42.480612856 [ThreadId 5] - ---> {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":314}}
2020-12-03 13:40:42.480638308 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":313}
2020-12-03 13:40:42.480713849 [ThreadId 10087] - codeLens was cancelled
2020-12-03 13:40:42.480716744 [ThreadId 10163] - CodeAction was cancelled
2020-12-03 13:40:42.480783476 [ThreadId 10085] - Cancelled request IdInt 295
2020-12-03 13:40:42.480792457 [ThreadId 10161] - Cancelled request IdInt 314
2020-12-03 13:40:42.480866061 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":295}
2020-12-03 13:40:42.480924046 [ThreadId 7] - <--2--{"error":{"code":-32800,"message":""},"jsonrpc":"2.0","id":314}
2020-12-03 13:40:58.350444845 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":2},"method":"$/progress"}
2020-12-03 13:40:58.350403875 [ThreadId 9868] - Session loading result: Right (ComponentOptions {componentOptions = ["-fbuilding-cabal-package","-O0","-outputdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-odir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-hidir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-stubdir","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-i","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-isrc","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/autogen","-i/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/global-autogen","-I/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build","-optP-include","-optP/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/autogen/cabal_macros.h","-this-unit-id","cardano-cli-1.24.0-inplace","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","/home/jordan/.cabal/store/ghc-8.10.2/package.db","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/packagedb/ghc-8.10.2","-package-db","/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/package.conf.inplace","-package-id","aeson-1.5.4.1-778a06fa5c9318198c793c5f8e2ca8d95fb38f4f10ed2bb32743f99d3f297246","-package-id","aeson-pretty-0.8.8-9b8e5a813f7409b128fda52cd6ba78fcfcdafe24319cbe51431a74775267e91b","-package-id","attoparsec-0.13.2.4-b396c2be954a9ffb3e95bbdaa6fb35ac8c27f1db8915f7964aec17a75da742b8","-package-id","base-4.14.1.0","-package-id","base16-bytestring-1.0.1.0-9f11fc286491f106a9ef784dbd62d74f1270ad38dd03d9b8cbaa41c1bbf814c8","-package-id","base58-bytestring-0.1.0-05a60df8b198010614f5302714ff68e040396e56ff7519d163761623c0de2d98","-package-id","bech32-1.1.0-ae5f2a1a89c10d7c25e2ebed7b7fb0cd489664bd6e6c0de80e0c1dff37d17063","-package-id","binary-0.8.8.0","-package-id","bytestring-0.10.10.0","-package-id","canonical-json-0.6.0.0-ac56e854cb5bbbf28e7a139a204e07dbf874c3bdd188ad7c5a2e0a6c8225de5c","-package-id","cardano-api-1.24.0-inplace","-package-id","cardano-binary-1.5.0-inplace","-package-id","cardano-config-0.1.0.0-inplace","-package-id","cardano-crypto-1.1.0-inplace","-package-id","cardano-crypto-class-2.0.0-inplace","-package-id","cardano-crypto-wrapper-1.3.0-inplace","-package-id","cardano-ledger-0.1.0.0-inplace","-package-id","cardano-ledger-shelley-ma-0.1.0.0-inplace","-package-id","cardano-node-1.24.0-inplace","-package-id","cardano-prelude-0.1.0.0-inplace","-package-id","cardano-slotting-0.1.0.0-inplace","-package-id","cborg-0.2.4.0-4a245966fd5882ffb16d2ef07bb992473fd41fea0a4e61c4acd669aab7242ef9","-package-id","containers-0.6.2.1","-package-id","contra-tracer-0.1.0.0-inplace","-package-id","cryptonite-0.27-8826084f96fb9db464240662656382b25f16ff766ee68e8d02dd9d995db86b80","-package-id","directory-1.3.6.0","-package-id","filepath-1.4.2.1","-package-id","formatting-6.3.7-330f1aaaee1a6193dee6fd50994a301f73441c53ff813f4d131c0e6261ec6d04","-package-id","io-sim-classes-0.2.0.0-inplace","-package-id","iproute-1.7.9-43bc36e75965a204ad802bfb667361131efd65210901659e34179dc2da9d1118","-package-id","memory-0.15.0-618aae508e33731dca15e11c7e941c9d1279b1ed04bf74d2a2b887208cef7d4c","-package-id","microlens-0.4.11.2-d5b93158a7575c34794f2b317f4229428f42a1b93a426edc629c3cc3b601d83f","-package-id","network-3.1.2.0-f313f458cfb9472e49923061663feda9781129bd7a55b5c51b8bf13fb9eff621","-package-id","network-mux-0.1.0.0-inplace","-package-id","network-uri-2.6.3.0-5bbc25b922944130d3a812c001fbe448d17321f63665fc89b3c6ab483fba8ba1","-package-id","optparse-applicative-0.16.0.0-6005665cbdc6c67c10623d1a27ae7079df56bfb349d4c1af4f0d72cbfdeabd79","-package-id","ouroboros-consensus-0.1.0.0-inplace","-package-id","ouroboros-consensus-byron-0.1.0.0-inplace","-package-id","ouroboros-consensus-cardano-0.1.0.0-inplace","-package-id","ouroboros-consensus-shelley-0.1.0.0-inplace","-package-id","ouroboros-network-0.1.0.0-inplace","-package-id","ouroboros-network-framework-0.1.0.0-inplace","-package-id","parsec-3.1.14.0","-package-id","primitive-0.7.1.0-f012577575c0a83a7acb71352c37f9c2228aa22d38df742952e879128e014616","-package-id","process-1.6.9.0","-package-id","scientific-0.3.6.2-8634ec87686367cd9854d817075c6b174f7c80b793cfe710d1a33fad0d669b83","-package-id","shelley-spec-ledger-0.1.0.0-inplace","-package-id","small-steps-0.1.0.0-inplace","-package-id","split-0.2.3.4-fc1699d7aa70bfb0825b796155271fb7cf155c2e532eed2811833e645ca6d844","-package-id","text-1.2.3.2","-package-id","time-1.9.3","-package-id","transformers-0.5.6.2","-package-id","transformers-except-0.1.1-dff5057c0148093fdb22eb905288dea1dc40636273c3c43c25d303bb31f7e9cb","-package-id","unix-2.7.2.2","-package-id","unordered-containers-0.2.13.0-4cfa23410683cfe8b97b82ed15f0d30134b196b546cbf1fdf2d0a9054d02c7db","-package-id","utf8-string-1.0.1.1-d2e6cd8a2f3a2275cd8ab0c899c2cda2466b2849b34f41573a4d3c6fe2038a5a","-package-id","vector-0.12.1.2-9df9fc999682f51f3e81c90fce28e7b7f7243cc5f3e33ff871c9d5a147125c1d","-XHaskell2010","-XNoImplicitPrelude","-XOverloadedStrings","Cardano.CLI.Helpers","Cardano.CLI.Parsers","Cardano.CLI.Run","Cardano.CLI.Types","Cardano.CLI.Environment","Cardano.CLI.Byron.Commands","Cardano.CLI.Byron.Parsers","Cardano.CLI.Byron.Run","Cardano.CLI.Byron.Delegation","Cardano.CLI.Byron.Genesis","Cardano.CLI.Byron.Key","Cardano.CLI.Byron.Legacy","Cardano.CLI.Byron.Tx","Cardano.CLI.Byron.Query","Cardano.CLI.Byron.UpdateProposal","Cardano.CLI.Byron.Vote","Cardano.CLI.Shelley.Commands","Cardano.CLI.Shelley.Key","Cardano.CLI.Shelley.Orphans","Cardano.CLI.Shelley.Parsers","Cardano.CLI.Shelley.Run","Cardano.CLI.Shelley.Run.Address","Cardano.CLI.Shelley.Run.Address.Info","Cardano.CLI.Shelley.Run.Genesis","Cardano.CLI.Shelley.Run.Governance","Cardano.CLI.Shelley.Run.Key","Cardano.CLI.Shelley.Run.Node","Cardano.CLI.Shelley.Run.Pool","Cardano.CLI.Shelley.Run.Query","Cardano.CLI.Shelley.Run.StakeAddress","Cardano.CLI.Shelley.Run.TextView","Cardano.CLI.Shelley.Run.Transaction","Cardano.CLI.Mary.TxOutParser","Cardano.CLI.Mary.ValueParser","Cardano.CLI.TopHandler","Paths_cardano_cli","-Wall","-Wincomplete-record-updates","-Wincomplete-uni-patterns","-Wredundant-constraints","-Wpartial-fields","-Wcompat","-hide-all-packages","-Werror"], componentRoot = "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli", componentDependencies = ["cardano-cli/cardano-cli.cabal","cabal.project","cabal.project.local"]},"/usr/local/lib/ghc-8.10.2")
2020-12-03 13:40:58.428584202 [ThreadId 9868] - Using interface files cache dir: /home/jordan/.cache/ghcide/cardano-cli-1.24.0-inplace-ad7938664ecf3b7aac7d75a8d72de0d4979812e3
2020-12-03 13:40:58.429078162 [ThreadId 9868] - Using interface files cache dir: /home/jordan/.cache/ghcide/main-552b354bfb7dd20bf5398a4f7ca2409ef468b040
2020-12-03 13:40:58.429176504 [ThreadId 9868] - Using interface files cache dir: /home/jordan/.cache/ghcide/cardano-api-1.24.0-inplace-034b560baa29292bc6353ab201ea8f8112974f87
2020-12-03 13:40:58.429256971 [ThreadId 9868] - Making new HscEnv[cardano-cli-1.24.0-inplace,main,cardano-api-1.24.0-inplace]
2020-12-03 13:40:58.465288042 [ThreadId 9868] - New Component Cache HscEnvEq: (([],Just HscEnvEq 817),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-cli/cardano-cli.cabal",Just 2020-12-03 08:39:45.279109699 UTC)])
2020-12-03 13:40:58.491440807 [ThreadId 9868] - New Component Cache HscEnvEq: (([],Just HscEnvEq 818),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-cli/cardano-cli.cabal",Just 2020-12-03 08:39:45.279109699 UTC)])
2020-12-03 13:40:58.497561034 [ThreadId 9868] - New Component Cache HscEnvEq: (([],Just HscEnvEq 819),fromList [("/home/jordan/Repos/Work/cardano-haskell/cardano-node/hie.yaml",Just 2020-10-29 10:35:46.972435801 UTC),("cabal.project",Just 2020-12-02 09:21:26.415901175 UTC),("cabal.project.local",Just 2020-06-23 09:55:24.10208939 UTC),("cardano-api/cardano-api.cabal",Just 2020-12-02 09:21:26.415901175 UTC)])
2020-12-03 13:40:58.556233861 [ThreadId 9868] - Known files updated: fromList [(TargetModule Cardano.Api.TxBody,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs"]),(TargetModule Cardano.Api.Tx,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Test.Cli.Pioneers.Exercise2,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise2.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise2.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Query,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Query.hs"]),(TargetModule Cardano.CLI.Byron.UpdateProposal,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/UpdateProposal.hs"]),(TargetModule Cardano.Api.SerialiseRaw,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseRaw.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseRaw.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseRaw.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Pool,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Pool.hs"]),(TargetModule Cardano.Api.Crypto.Ed25519Bip32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Crypto/Ed25519Bip32.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Crypto/Ed25519Bip32.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Crypto/Ed25519Bip32.hs"]),(TargetModule Cardano.CLI.Shelley.Run.TextView,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/TextView.hs"]),(TargetModule Cardano.CLI.Byron.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Genesis.hs"]),(TargetModule Cardano.Api.SerialiseJSON,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseJSON.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseJSON.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseJSON.hs"]),(TargetModule Test.Cli.Pioneers.Exercise3,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise3.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise3.hs"]),(TargetModule Cardano.Api.Typed,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs"]),(TargetModule Cardano.API,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/API.hs"]),(TargetModule Test.OptParse,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/OptParse.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/OptParse.hs"]),(TargetModule Cardano.CLI.Shelley.Run,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run.hs"]),(TargetModule Cardano.CLI.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Types.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Key.hs"]),(TargetModule Cardano.Api.Shelley.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley/Genesis.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley/Genesis.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley/Genesis.hs"]),(TargetModule Cardano.Api.KeysShelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysShelley.hs"]),(TargetModule Cardano.Api.SerialiseBech32,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseBech32.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseBech32.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseBech32.hs"]),(TargetModule Test.Cli.Pioneers.Exercise1,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise1.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise1.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Governance,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Governance.hs"]),(TargetModule Cardano.Api.Error,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Error.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Error.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Error.hs"]),(TargetModule Paths_cardano_cli,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/dist-newstyle/build/x86_64-linux/ghc-8.10.2/cardano-cli-1.24.0/build/autogen/Paths_cardano_cli.hs"]),(TargetModule Cardano.Api.StakePoolMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/StakePoolMetadata.hs"]),(TargetModule Cardano.Api.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Key.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Key.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Key.hs"]),(TargetModule Cardano.CLI.Byron.Commands,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Commands.hs"]),(TargetModule Test.Cli.Pioneers.Exercise4,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise4.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/Pioneers/Exercise4.hs"]),(TargetModule Cardano.CLI.Run,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Run.hs"]),(TargetModule Cardano.CLI.Helpers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Helpers.hs"]),(TargetModule Cardano.CLI.Shelley.Orphans,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Orphans.hs"]),(TargetModule Cardano.Api.Hash,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Hash.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Hash.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Hash.hs"]),(TargetModule Cardano.Api.Protocol,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol.hs"]),(TargetModule Cardano.Api.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Byron.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Byron.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Byron.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Cardano.Api.OperationalCertificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs"]),(TargetModule Cardano.Api.Protocol.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Types.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Types.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Types.hs"]),(TargetModule Cardano.Api.NetworkId,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/NetworkId.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/NetworkId.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/NetworkId.hs"]),(TargetModule Cardano.CLI.Byron.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Key.hs"]),(TargetModule Cardano.Api.KeysPraos,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysPraos.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysPraos.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysPraos.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Genesis,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs"]),(TargetModule Cardano.Api.Address,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs"]),(TargetModule Cardano.CLI.Shelley.Parsers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Cardano.CLI.Shelley.Run.StakeAddress,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/StakeAddress.hs"]),(TargetModule Cardano.CLI.Environment,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Environment.hs"]),(TargetModule Cardano.Api.TxSubmit.ErrorRender,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/ErrorRender.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/ErrorRender.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/ErrorRender.hs"]),(TargetModule Cardano.Api.TxSubmit,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Transaction,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs"]),(TargetModule Cardano.Api.Protocol.Cardano,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Cardano.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Cardano.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Cardano.hs"]),(TargetModule Cardano.Api.Certificate,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Certificate.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Certificate.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Certificate.hs"]),(TargetModule Cardano.CLI.Byron.Run,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Run.hs"]),(TargetModule Cardano.CLI.Mary.TxOutParser,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Mary/TxOutParser.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Address,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs"]),(TargetModule Cardano.Api.Value,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Value.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/test/cardano-cli-test.hs",[]),(TargetModule Cardano.Api.TxSubmit.Types,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/Types.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/Types.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxSubmit/Types.hs"]),(TargetModule Cardano.Api.LocalChainSync,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/LocalChainSync.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/LocalChainSync.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/LocalChainSync.hs"]),(TargetFile NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Golden/Shelley/Transaction/CreateWitness.hs",["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Node,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Node.hs"]),(TargetModule Cardano.CLI.Mary.ValueParser,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Mary/ValueParser.hs"]),(TargetModule Cardano.Api.Script,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Script.hs"]),(TargetModule Cardano.Api.Fees,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs"]),(TargetModule Cardano.CLI.Parsers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Parsers.hs"]),(TargetModule Test.Cli.ITN,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/ITN.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/ITN.hs"]),(TargetModule Cardano.CLI.Byron.Delegation,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Delegation.hs"]),(TargetModule Test.Cli.FilePermissions,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/FilePermissions.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/test/Test/Cli/FilePermissions.hs"]),(TargetModule Cardano.Api.ProtocolParameters,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/ProtocolParameters.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/ProtocolParameters.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/ProtocolParameters.hs"]),(TargetModule Cardano.Api.SerialiseCBOR,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseCBOR.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseCBOR.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseCBOR.hs"]),(TargetModule Cardano.Api.Protocol.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Shelley.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Shelley.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Shelley.hs"]),(TargetModule Cardano.CLI.Byron.Vote,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Vote.hs"]),(TargetModule Cardano.CLI.Shelley.Commands,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Commands.hs"]),(TargetModule Cardano.Api.Shelley,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Shelley.hs"]),(TargetModule Cardano.CLI.Shelley.Run.Address.Info,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address/Info.hs"]),(TargetModule Cardano.CLI.Byron.Legacy,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Legacy.hs"]),(TargetModule Cardano.CLI.Byron.Query,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Query.hs"]),(TargetModule Cardano.Api.TxMetadata,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxMetadata.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxMetadata.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxMetadata.hs"]),(TargetModule Cardano.Api.Eras,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Eras.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Eras.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Eras.hs"]),(TargetModule Cardano.Api.HasTypeProxy,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/HasTypeProxy.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/HasTypeProxy.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/HasTypeProxy.hs"]),(TargetModule Cardano.CLI.Shelley.Key,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Key.hs"]),(TargetModule Cardano.CLI.Byron.Tx,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Tx.hs"]),(TargetModule Cardano.Api.Protocol.Byron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Byron.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Byron.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Protocol/Byron.hs"]),(TargetModule Cardano.Api.Utils,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Utils.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Utils.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Utils.hs"]),(TargetModule Cardano.Api.SerialiseTextEnvelope,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseTextEnvelope.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseTextEnvelope.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/SerialiseTextEnvelope.hs"]),(TargetModule Cardano.CLI.Byron.Parsers,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Byron/Parsers.hs"]),(TargetModule Cardano.CLI.TopHandler,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/TopHandler.hs"]),(TargetModule Cardano.Api.KeysByron,["/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysByron.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysByron.hs","/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/KeysByron.hs"])]
2020-12-03 13:40:58.558085137 [ThreadId 10027] - Finishing build session(exception: AsyncCancelled)
2020-12-03 13:40:58.558131837 [ThreadId 9868] - Restarting build session (aborting the previous one took 0.00s)
2020-12-03 13:40:58.966749182 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"89/132"},"token":"619"},"method":"$/progress"}
2020-12-03 13:40:58.968114372 [ThreadId 10226] - finish: C:GetParsedModule (took 0.41s)
2020-12-03 13:40:58.968125907 [ThreadId 10233] - finish: C:GetParsedModule (took 0.41s)
2020-12-03 13:40:58.971849928 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":4,"character":7},"end":{"line":4,"character":35}},"kind":1,"children":[{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":59,"character":52}},"kind":2,"children":[{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":47,"character":33}},"kind":2,"name":"import Data.Text","range":{"start":{"line":47,"character":0},"end":{"line":47,"character":33}}},{"selectionRange":{"start":{"line":48,"character":0},"end":{"line":48,"character":24}},"kind":2,"name":"import Prelude","range":{"start":{"line":48,"character":0},"end":{"line":48,"character":24}}},{"selectionRange":{"start":{"line":50,"character":0},"end":{"line":50,"character":50}},"kind":2,"name":"import Cardano.Api.Typed","range":{"start":{"line":50,"character":0},"end":{"line":50,"character":50}}},{"selectionRange":{"start":{"line":51,"character":0},"end":{"line":51,"character":48}},"kind":2,"name":"import Cardano.Api.Protocol","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":48}}},{"selectionRange":{"start":{"line":53,"character":0},"end":{"line":53,"character":70}},"kind":2,"name":"import Ouroboros.Consensus.BlockchainTime","range":{"start":{"line":53,"character":0},"end":{"line":53,"character":70}}},{"selectionRange":{"start":{"line":55,"character":0},"end":{"line":56,"character":47}},"kind":2,"name":"import Cardano.CLI.Shelley.Key","range":{"start":{"line":55,"character":0},"end":{"line":56,"character":47}}},{"selectionRange":{"start":{"line":57,"character":0},"end":{"line":57,"character":34}},"kind":2,"name":"import Cardano.CLI.Types","range":{"start":{"line":57,"character":0},"end":{"line":57,"character":34}}},{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":59,"character":52}},"kind":2,"name":"import Shelley.Spec.Ledger.TxBody","range":{"start":{"line":59,"character":0},"end":{"line":59,"character":52}}}],"name":"imports","range":{"start":{"line":47,"character":0},"end":{"line":59,"character":52}}},{"selectionRange":{"start":{"line":67,"character":0},"end":{"line":78,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":68,"character":4},"end":{"line":68,"character":14}},"kind":9,"name":"AddressCmd","range":{"start":{"line":68,"character":4},"end":{"line":68,"character":30}}},{"selectionRange":{"start":{"line":69,"character":4},"end":{"line":69,"character":19}},"kind":9,"name":"StakeAddressCmd","range":{"start":{"line":69,"character":4},"end":{"line":69,"character":35}}},{"selectionRange":{"start":{"line":70,"character":4},"end":{"line":70,"character":10}},"kind":9,"name":"KeyCmd","range":{"start":{"line":70,"character":4},"end":{"line":70,"character":26}}},{"selectionRange":{"start":{"line":71,"character":4},"end":{"line":71,"character":18}},"kind":9,"name":"TransactionCmd","range":{"start":{"line":71,"character":4},"end":{"line":71,"character":34}}},{"selectionRange":{"start":{"line":72,"character":4},"end":{"line":72,"character":11}},"kind":9,"name":"NodeCmd","range":{"start":{"line":72,"character":4},"end":{"line":72,"character":27}}},{"selectionRange":{"start":{"line":73,"character":4},"end":{"line":73,"character":11}},"kind":9,"name":"PoolCmd","range":{"start":{"line":73,"character":4},"end":{"line":73,"character":27}}},{"selectionRange":{"start":{"line":74,"character":4},"end":{"line":74,"character":12}},"kind":9,"name":"QueryCmd","range":{"start":{"line":74,"character":4},"end":{"line":74,"character":28}}},{"selectionRange":{"start":{"line":75,"character":4},"end":{"line":75,"character":17}},"kind":9,"name":"GovernanceCmd","range":{"start":{"line":75,"character":4},"end":{"line":75,"character":33}}},{"selectionRange":{"start":{"line":76,"character":4},"end":{"line":76,"character":14}},"kind":9,"name":"GenesisCmd","range":{"start":{"line":76,"character":4},"end":{"line":76,"character":30}}},{"selectionRange":{"start":{"line":77,"character":4},"end":{"line":77,"character":15}},"kind":9,"name":"TextViewCmd","range":{"start":{"line":77,"character":4},"end":{"line":77,"character":31}}}],"name":"ShelleyCommand","range":{"start":{"line":67,"character":0},"end":{"line":78,"character":21}}},{"selectionRange":{"start":{"line":81,"character":0},"end":{"line":92,"character":44}},"kind":12,"name":"renderShelleyCommand","range":{"start":{"line":81,"character":0},"end":{"line":92,"character":44}}},{"selectionRange":{"start":{"line":94,"character":0},"end":{"line":104,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":95,"character":4},"end":{"line":95,"character":17}},"kind":9,"name":"AddressKeyGen","range":{"start":{"line":95,"character":4},"end":{"line":95,"character":67}}},{"selectionRange":{"start":{"line":96,"character":4},"end":{"line":96,"character":18}},"kind":9,"name":"AddressKeyHash","range":{"start":{"line":96,"character":4},"end":{"line":96,"character":63}}},{"selectionRange":{"start":{"line":97,"character":4},"end":{"line":97,"character":16}},"kind":9,"name":"AddressBuild","range":{"start":{"line":97,"character":4},"end":{"line":101,"character":24}}},{"selectionRange":{"start":{"line":102,"character":4},"end":{"line":102,"character":24}},"kind":9,"name":"AddressBuildMultiSig","range":{"start":{"line":102,"character":4},"end":{"line":102,"character":64}}},{"selectionRange":{"start":{"line":103,"character":4},"end":{"line":103,"character":15}},"kind":9,"name":"AddressInfo","range":{"start":{"line":103,"character":4},"end":{"line":103,"character":39}}}],"name":"AddressCmd","range":{"start":{"line":94,"character":0},"end":{"line":104,"character":21}}},{"selectionRange":{"start":{"line":108,"character":0},"end":{"line":114,"character":36}},"kind":12,"name":"renderAddressCmd","range":{"start":{"line":108,"character":0},"end":{"line":114,"character":36}}},{"selectionRange":{"start":{"line":116,"character":0},"end":{"line":126,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":117,"character":4},"end":{"line":117,"character":22}},"kind":9,"name":"StakeAddressKeyGen","range":{"start":{"line":117,"character":4},"end":{"line":117,"character":57}}},{"selectionRange":{"start":{"line":118,"character":4},"end":{"line":118,"character":23}},"kind":9,"name":"StakeAddressKeyHash","range":{"start":{"line":118,"character":4},"end":{"line":118,"character":75}}},{"selectionRange":{"start":{"line":119,"character":4},"end":{"line":119,"character":21}},"kind":9,"name":"StakeAddressBuild","range":{"start":{"line":119,"character":4},"end":{"line":119,"character":83}}},{"selectionRange":{"start":{"line":120,"character":4},"end":{"line":120,"character":28}},"kind":9,"name":"StakeKeyRegistrationCert","range":{"start":{"line":120,"character":4},"end":{"line":120,"character":72}}},{"selectionRange":{"start":{"line":121,"character":4},"end":{"line":121,"character":26}},"kind":9,"name":"StakeKeyDelegationCert","range":{"start":{"line":121,"character":4},"end":{"line":124,"character":16}}},{"selectionRange":{"start":{"line":125,"character":4},"end":{"line":125,"character":30}},"kind":9,"name":"StakeKeyDeRegistrationCert","range":{"start":{"line":125,"character":4},"end":{"line":125,"character":74}}}],"name":"StakeAddressCmd","range":{"start":{"line":116,"character":0},"end":{"line":126,"character":21}}},{"selectionRange":{"start":{"line":129,"character":0},"end":{"line":136,"character":79}},"kind":12,"name":"renderStakeAddressCmd","range":{"start":{"line":129,"character":0},"end":{"line":136,"character":79}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":147,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":139,"character":4},"end":{"line":139,"character":25}},"kind":9,"name":"KeyGetVerificationKey","range":{"start":{"line":139,"character":4},"end":{"line":139,"character":60}}},{"selectionRange":{"start":{"line":140,"character":4},"end":{"line":140,"character":21}},"kind":9,"name":"KeyNonExtendedKey","range":{"start":{"line":140,"character":4},"end":{"line":140,"character":62}}},{"selectionRange":{"start":{"line":141,"character":4},"end":{"line":141,"character":22}},"kind":9,"name":"KeyConvertByronKey","range":{"start":{"line":141,"character":4},"end":{"line":141,"character":71}}},{"selectionRange":{"start":{"line":142,"character":4},"end":{"line":142,"character":30}},"kind":9,"name":"KeyConvertByronGenesisVKey","range":{"start":{"line":142,"character":4},"end":{"line":142,"character":63}}},{"selectionRange":{"start":{"line":143,"character":4},"end":{"line":143,"character":25}},"kind":9,"name":"KeyConvertITNStakeKey","range":{"start":{"line":143,"character":4},"end":{"line":143,"character":48}}},{"selectionRange":{"start":{"line":144,"character":4},"end":{"line":144,"character":35}},"kind":9,"name":"KeyConvertITNExtendedToStakeKey","range":{"start":{"line":144,"character":4},"end":{"line":144,"character":58}}},{"selectionRange":{"start":{"line":145,"character":4},"end":{"line":145,"character":32}},"kind":9,"name":"KeyConvertITNBip32ToStakeKey","range":{"start":{"line":145,"character":4},"end":{"line":145,"character":55}}},{"selectionRange":{"start":{"line":146,"character":4},"end":{"line":146,"character":38}},"kind":9,"name":"KeyConvertCardanoAddressSigningKey","range":{"start":{"line":146,"character":4},"end":{"line":146,"character":86}}}],"name":"KeyCmd","range":{"start":{"line":138,"character":0},"end":{"line":147,"character":21}}},{"selectionRange":{"start":{"line":150,"character":0},"end":{"line":159,"character":86}},"kind":12,"name":"renderKeyCmd","range":{"start":{"line":150,"character":0},"end":{"line":159,"character":86}}},{"selectionRange":{"start":{"line":161,"character":0},"end":{"line":196,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":162,"character":4},"end":{"line":162,"character":14}},"kind":9,"name":"TxBuildRaw","range":{"start":{"line":162,"character":4},"end":{"line":181,"character":16}}},{"selectionRange":{"start":{"line":182,"character":4},"end":{"line":182,"character":10}},"kind":9,"name":"TxSign","range":{"start":{"line":182,"character":4},"end":{"line":182,"character":67}}},{"selectionRange":{"start":{"line":183,"character":4},"end":{"line":183,"character":19}},"kind":9,"name":"TxCreateWitness","range":{"start":{"line":183,"character":4},"end":{"line":183,"character":78}}},{"selectionRange":{"start":{"line":184,"character":4},"end":{"line":184,"character":27}},"kind":9,"name":"TxAssembleTxBodyWitness","range":{"start":{"line":184,"character":4},"end":{"line":184,"character":63}}},{"selectionRange":{"start":{"line":185,"character":4},"end":{"line":185,"character":12}},"kind":9,"name":"TxSubmit","range":{"start":{"line":185,"character":4},"end":{"line":185,"character":40}}},{"selectionRange":{"start":{"line":186,"character":4},"end":{"line":186,"character":20}},"kind":9,"name":"TxMintedPolicyId","range":{"start":{"line":186,"character":4},"end":{"line":186,"character":31}}},{"selectionRange":{"start":{"line":187,"character":4},"end":{"line":187,"character":21}},"kind":9,"name":"TxCalculateMinFee","range":{"start":{"line":187,"character":4},"end":{"line":194,"character":25}}},{"selectionRange":{"start":{"line":195,"character":4},"end":{"line":195,"character":13}},"kind":9,"name":"TxGetTxId","range":{"start":{"line":195,"character":4},"end":{"line":195,"character":24}}}],"name":"TransactionCmd","range":{"start":{"line":161,"character":0},"end":{"line":196,"character":21}}},{"selectionRange":{"start":{"line":199,"character":0},"end":{"line":208,"character":38}},"kind":12,"name":"renderTransactionCmd","range":{"start":{"line":199,"character":0},"end":{"line":208,"character":38}}},{"selectionRange":{"start":{"line":210,"character":0},"end":{"line":218,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":211,"character":4},"end":{"line":211,"character":18}},"kind":9,"name":"NodeKeyGenCold","range":{"start":{"line":211,"character":4},"end":{"line":211,"character":71}}},{"selectionRange":{"start":{"line":212,"character":4},"end":{"line":212,"character":17}},"kind":9,"name":"NodeKeyGenKES","range":{"start":{"line":212,"character":4},"end":{"line":212,"character":53}}},{"selectionRange":{"start":{"line":213,"character":4},"end":{"line":213,"character":17}},"kind":9,"name":"NodeKeyGenVRF","range":{"start":{"line":213,"character":4},"end":{"line":213,"character":53}}},{"selectionRange":{"start":{"line":214,"character":4},"end":{"line":214,"character":18}},"kind":9,"name":"NodeKeyHashVRF","range":{"start":{"line":214,"character":4},"end":{"line":214,"character":69}}},{"selectionRange":{"start":{"line":215,"character":4},"end":{"line":215,"character":18}},"kind":9,"name":"NodeNewCounter","range":{"start":{"line":215,"character":4},"end":{"line":215,"character":67}}},{"selectionRange":{"start":{"line":216,"character":4},"end":{"line":216,"character":19}},"kind":9,"name":"NodeIssueOpCert","range":{"start":{"line":216,"character":4},"end":{"line":217,"character":40}}}],"name":"NodeCmd","range":{"start":{"line":210,"character":0},"end":{"line":218,"character":21}}},{"selectionRange":{"start":{"line":221,"character":0},"end":{"line":228,"character":45}},"kind":12,"name":"renderNodeCmd","range":{"start":{"line":221,"character":0},"end":{"line":228,"character":45}}},{"selectionRange":{"start":{"line":231,"character":0},"end":{"line":261,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":232,"character":4},"end":{"line":232,"character":24}},"kind":9,"name":"PoolRegistrationCert","range":{"start":{"line":232,"character":4},"end":{"line":252,"character":16}}},{"selectionRange":{"start":{"line":253,"character":4},"end":{"line":253,"character":22}},"kind":9,"name":"PoolRetirementCert","range":{"start":{"line":253,"character":4},"end":{"line":258,"character":16}}},{"selectionRange":{"start":{"line":259,"character":4},"end":{"line":259,"character":13}},"kind":9,"name":"PoolGetId","range":{"start":{"line":259,"character":4},"end":{"line":259,"character":63}}},{"selectionRange":{"start":{"line":260,"character":4},"end":{"line":260,"character":20}},"kind":9,"name":"PoolMetaDataHash","range":{"start":{"line":260,"character":4},"end":{"line":260,"character":56}}}],"name":"PoolCmd","range":{"start":{"line":231,"character":0},"end":{"line":261,"character":21}}},{"selectionRange":{"start":{"line":264,"character":0},"end":{"line":269,"character":53}},"kind":12,"name":"renderPoolCmd","range":{"start":{"line":264,"character":0},"end":{"line":269,"character":53}}},{"selectionRange":{"start":{"line":271,"character":0},"end":{"line":279,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":272,"character":4},"end":{"line":272,"character":27}},"kind":9,"name":"QueryProtocolParameters","range":{"start":{"line":272,"character":4},"end":{"line":272,"character":79}}},{"selectionRange":{"start":{"line":273,"character":4},"end":{"line":273,"character":12}},"kind":9,"name":"QueryTip","range":{"start":{"line":273,"character":4},"end":{"line":273,"character":50}}},{"selectionRange":{"start":{"line":274,"character":4},"end":{"line":274,"character":26}},"kind":9,"name":"QueryStakeDistribution","range":{"start":{"line":274,"character":4},"end":{"line":274,"character":78}}},{"selectionRange":{"start":{"line":275,"character":4},"end":{"line":275,"character":25}},"kind":9,"name":"QueryStakeAddressInfo","range":{"start":{"line":275,"character":4},"end":{"line":275,"character":90}}},{"selectionRange":{"start":{"line":276,"character":4},"end":{"line":276,"character":13}},"kind":9,"name":"QueryUTxO","range":{"start":{"line":276,"character":4},"end":{"line":276,"character":77}}},{"selectionRange":{"start":{"line":277,"character":4},"end":{"line":277,"character":20}},"kind":9,"name":"QueryLedgerState","range":{"start":{"line":277,"character":4},"end":{"line":277,"character":72}}},{"selectionRange":{"start":{"line":278,"character":4},"end":{"line":278,"character":22}},"kind":9,"name":"QueryProtocolState","range":{"start":{"line":278,"character":4},"end":{"line":278,"character":74}}}],"name":"QueryCmd","range":{"start":{"line":271,"character":0},"end":{"line":279,"character":21}}},{"selectionRange":{"start":{"line":282,"character":0},"end":{"line":290,"character":51}},"kind":12,"name":"renderQueryCmd","range":{"start":{"line":282,"character":0},"end":{"line":290,"character":51}}},{"selectionRange":{"start":{"line":292,"character":0},"end":{"line":302,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":293,"character":4},"end":{"line":293,"character":28}},"kind":9,"name":"GovernanceMIRCertificate","range":{"start":{"line":293,"character":4},"end":{"line":293,"character":79}}},{"selectionRange":{"start":{"line":294,"character":4},"end":{"line":294,"character":45}},"kind":9,"name":"GovernanceGenesisKeyDelegationCertificate","range":{"start":{"line":294,"character":4},"end":{"line":298,"character":16}}},{"selectionRange":{"start":{"line":299,"character":4},"end":{"line":299,"character":28}},"kind":9,"name":"GovernanceUpdateProposal","range":{"start":{"line":299,"character":4},"end":{"line":301,"character":53}}}],"name":"GovernanceCmd","range":{"start":{"line":292,"character":0},"end":{"line":302,"character":21}}},{"selectionRange":{"start":{"line":305,"character":0},"end":{"line":309,"character":70}},"kind":12,"name":"renderGovernanceCmd","range":{"start":{"line":305,"character":0},"end":{"line":309,"character":70}}},{"selectionRange":{"start":{"line":311,"character":0},"end":{"line":313,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":312,"character":4},"end":{"line":312,"character":16}},"kind":9,"name":"TextViewInfo","range":{"start":{"line":312,"character":4},"end":{"line":312,"character":45}}}],"name":"TextViewCmd","range":{"start":{"line":311,"character":0},"end":{"line":313,"character":21}}},{"selectionRange":{"start":{"line":317,"character":0},"end":{"line":317,"character":62}},"kind":12,"name":"renderTextViewCmd","range":{"start":{"line":317,"character":0},"end":{"line":317,"character":62}}},{"selectionRange":{"start":{"line":319,"character":0},"end":{"line":330,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":320,"character":4},"end":{"line":320,"character":17}},"kind":9,"name":"GenesisCreate","range":{"start":{"line":320,"character":4},"end":{"line":320,"character":85}}},{"selectionRange":{"start":{"line":321,"character":4},"end":{"line":321,"character":23}},"kind":9,"name":"GenesisCreateStaked","range":{"start":{"line":321,"character":4},"end":{"line":321,"character":125}}},{"selectionRange":{"start":{"line":322,"character":4},"end":{"line":322,"character":24}},"kind":9,"name":"GenesisKeyGenGenesis","range":{"start":{"line":322,"character":4},"end":{"line":322,"character":59}}},{"selectionRange":{"start":{"line":323,"character":4},"end":{"line":323,"character":25}},"kind":9,"name":"GenesisKeyGenDelegate","range":{"start":{"line":323,"character":4},"end":{"line":323,"character":78}}},{"selectionRange":{"start":{"line":324,"character":4},"end":{"line":324,"character":21}},"kind":9,"name":"GenesisKeyGenUTxO","range":{"start":{"line":324,"character":4},"end":{"line":324,"character":56}}},{"selectionRange":{"start":{"line":325,"character":4},"end":{"line":325,"character":21}},"kind":9,"name":"GenesisCmdKeyHash","range":{"start":{"line":325,"character":4},"end":{"line":325,"character":41}}},{"selectionRange":{"start":{"line":326,"character":4},"end":{"line":326,"character":17}},"kind":9,"name":"GenesisVerKey","range":{"start":{"line":326,"character":4},"end":{"line":326,"character":52}}},{"selectionRange":{"start":{"line":327,"character":4},"end":{"line":327,"character":15}},"kind":9,"name":"GenesisTxIn","range":{"start":{"line":327,"character":4},"end":{"line":327,"character":64}}},{"selectionRange":{"start":{"line":328,"character":4},"end":{"line":328,"character":15}},"kind":9,"name":"GenesisAddr","range":{"start":{"line":328,"character":4},"end":{"line":328,"character":64}}},{"selectionRange":{"start":{"line":329,"character":4},"end":{"line":329,"character":19}},"kind":9,"name":"GenesisHashFile","range":{"start":{"line":329,"character":4},"end":{"line":329,"character":31}}}],"name":"GenesisCmd","range":{"start":{"line":319,"character":0},"end":{"line":330,"character":21}}},{"selectionRange":{"start":{"line":333,"character":0},"end":{"line":344,"character":40}},"kind":12,"name":"renderGenesisCmd","range":{"start":{"line":333,"character":0},"end":{"line":344,"character":40}}},{"selectionRange":{"start":{"line":350,"character":0},"end":{"line":352,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":351,"character":4},"end":{"line":351,"character":22}},"kind":9,"name":"ProtocolParamsFile","range":{"start":{"line":351,"character":4},"end":{"line":351,"character":31}}}],"name":"ProtocolParamsFile","range":{"start":{"line":350,"character":0},"end":{"line":352,"character":21}}},{"selectionRange":{"start":{"line":354,"character":0},"end":{"line":356,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":355,"character":4},"end":{"line":355,"character":13}},"kind":9,"name":"TxInCount","range":{"start":{"line":355,"character":4},"end":{"line":355,"character":17}}}],"name":"TxInCount","range":{"start":{"line":354,"character":0},"end":{"line":356,"character":21}}},{"selectionRange":{"start":{"line":358,"character":0},"end":{"line":360,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":359,"character":4},"end":{"line":359,"character":14}},"kind":9,"name":"TxOutCount","range":{"start":{"line":359,"character":4},"end":{"line":359,"character":18}}}],"name":"TxOutCount","range":{"start":{"line":358,"character":0},"end":{"line":360,"character":21}}},{"selectionRange":{"start":{"line":362,"character":0},"end":{"line":364,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":363,"character":4},"end":{"line":363,"character":25}},"kind":9,"name":"TxShelleyWitnessCount","range":{"start":{"line":363,"character":4},"end":{"line":363,"character":29}}}],"name":"TxShelleyWitnessCount","range":{"start":{"line":362,"character":0},"end":{"line":364,"character":21}}},{"selectionRange":{"start":{"line":366,"character":0},"end":{"line":368,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":367,"character":4},"end":{"line":367,"character":23}},"kind":9,"name":"TxByronWitnessCount","range":{"start":{"line":367,"character":4},"end":{"line":367,"character":27}}}],"name":"TxByronWitnessCount","range":{"start":{"line":366,"character":0},"end":{"line":368,"character":21}}},{"selectionRange":{"start":{"line":370,"character":0},"end":{"line":372,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":371,"character":4},"end":{"line":371,"character":11}},"kind":9,"name":"BlockId","range":{"start":{"line":371,"character":4},"end":{"line":371,"character":18}}}],"name":"BlockId","range":{"start":{"line":370,"character":0},"end":{"line":372,"character":21}}},{"selectionRange":{"start":{"line":374,"character":0},"end":{"line":376,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":375,"character":4},"end":{"line":375,"character":18}},"kind":9,"name":"GenesisKeyFile","range":{"start":{"line":375,"character":4},"end":{"line":375,"character":27}}}],"name":"GenesisKeyFile","range":{"start":{"line":374,"character":0},"end":{"line":376,"character":21}}},{"selectionRange":{"start":{"line":378,"character":0},"end":{"line":381,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":378,"character":20},"end":{"line":378,"character":36}},"kind":9,"name":"MetaDataFileJSON","range":{"start":{"line":378,"character":20},"end":{"line":378,"character":45}}},{"selectionRange":{"start":{"line":379,"character":20},"end":{"line":379,"character":36}},"kind":9,"name":"MetaDataFileCBOR","range":{"start":{"line":379,"character":20},"end":{"line":379,"character":45}}}],"name":"MetaDataFile","range":{"start":{"line":378,"character":0},"end":{"line":381,"character":21}}},{"selectionRange":{"start":{"line":383,"character":0},"end":{"line":385,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":384,"character":4},"end":{"line":384,"character":14}},"kind":9,"name":"OutputFile","range":{"start":{"line":384,"character":4},"end":{"line":384,"character":23}}}],"name":"OutputFile","range":{"start":{"line":383,"character":0},"end":{"line":385,"character":21}}},{"selectionRange":{"start":{"line":387,"character":0},"end":{"line":389,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":388,"character":4},"end":{"line":388,"character":10}},"kind":9,"name":"PoolId","range":{"start":{"line":388,"character":4},"end":{"line":388,"character":17}}}],"name":"PoolId","range":{"start":{"line":387,"character":0},"end":{"line":389,"character":21}}},{"selectionRange":{"start":{"line":391,"character":0},"end":{"line":393,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":391,"character":27},"end":{"line":391,"character":43}},"kind":9,"children":[{"selectionRange":{"start":{"line":392,"character":4},"end":{"line":392,"character":22}},"kind":8,"name":"unPoolMetaDataFile","range":{"start":{"line":392,"character":4},"end":{"line":392,"character":22}}}],"name":"PoolMetaDataFile","range":{"start":{"line":391,"character":27},"end":{"line":392,"character":36}}}],"name":"PoolMetaDataFile","range":{"start":{"line":391,"character":0},"end":{"line":393,"character":21}}},{"selectionRange":{"start":{"line":395,"character":0},"end":{"line":397,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":396,"character":4},"end":{"line":396,"character":14}},"kind":9,"name":"GenesisDir","range":{"start":{"line":396,"character":4},"end":{"line":396,"character":23}}}],"name":"GenesisDir","range":{"start":{"line":395,"character":0},"end":{"line":397,"character":21}}},{"selectionRange":{"start":{"line":402,"character":0},"end":{"line":405,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":403,"character":4},"end":{"line":403,"character":24}},"kind":9,"name":"AVerificationKeyFile","range":{"start":{"line":403,"character":4},"end":{"line":403,"character":44}}},{"selectionRange":{"start":{"line":404,"character":4},"end":{"line":404,"character":19}},"kind":9,"name":"ASigningKeyFile","range":{"start":{"line":404,"character":4},"end":{"line":404,"character":34}}}],"name":"SomeKeyFile","range":{"start":{"line":402,"character":0},"end":{"line":405,"character":21}}},{"selectionRange":{"start":{"line":407,"character":0},"end":{"line":411,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":408,"character":4},"end":{"line":408,"character":21}},"kind":9,"name":"AddressKeyShelley","range":{"start":{"line":408,"character":4},"end":{"line":408,"character":21}}},{"selectionRange":{"start":{"line":409,"character":4},"end":{"line":409,"character":29}},"kind":9,"name":"AddressKeyShelleyExtended","range":{"start":{"line":409,"character":4},"end":{"line":409,"character":29}}},{"selectionRange":{"start":{"line":410,"character":4},"end":{"line":410,"character":19}},"kind":9,"name":"AddressKeyByron","range":{"start":{"line":410,"character":4},"end":{"line":410,"character":19}}}],"name":"AddressKeyType","range":{"start":{"line":407,"character":0},"end":{"line":411,"character":21}}},{"selectionRange":{"start":{"line":413,"character":0},"end":{"line":417,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":414,"character":4},"end":{"line":414,"character":19}},"kind":9,"name":"ByronPaymentKey","range":{"start":{"line":414,"character":4},"end":{"line":414,"character":35}}},{"selectionRange":{"start":{"line":415,"character":4},"end":{"line":415,"character":19}},"kind":9,"name":"ByronGenesisKey","range":{"start":{"line":415,"character":4},"end":{"line":415,"character":35}}},{"selectionRange":{"start":{"line":416,"character":4},"end":{"line":416,"character":20}},"kind":9,"name":"ByronDelegateKey","range":{"start":{"line":416,"character":4},"end":{"line":416,"character":35}}}],"name":"ByronKeyType","range":{"start":{"line":413,"character":0},"end":{"line":417,"character":21}}},{"selectionRange":{"start":{"line":419,"character":0},"end":{"line":421,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":419,"character":22},"end":{"line":419,"character":45}},"kind":9,"name":"NonLegacyByronKeyFormat","range":{"start":{"line":419,"character":22},"end":{"line":419,"character":45}}},{"selectionRange":{"start":{"line":420,"character":22},"end":{"line":420,"character":42}},"kind":9,"name":"LegacyByronKeyFormat","range":{"start":{"line":420,"character":22},"end":{"line":420,"character":42}}}],"name":"ByronKeyFormat","range":{"start":{"line":419,"character":0},"end":{"line":421,"character":21}}},{"selectionRange":{"start":{"line":424,"character":0},"end":{"line":429,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":425,"character":4},"end":{"line":425,"character":35}},"kind":9,"name":"CardanoAddressShelleyPaymentKey","range":{"start":{"line":425,"character":4},"end":{"line":425,"character":35}}},{"selectionRange":{"start":{"line":426,"character":4},"end":{"line":426,"character":33}},"kind":9,"name":"CardanoAddressShelleyStakeKey","range":{"start":{"line":426,"character":4},"end":{"line":426,"character":33}}},{"selectionRange":{"start":{"line":427,"character":4},"end":{"line":427,"character":34}},"kind":9,"name":"CardanoAddressIcarusPaymentKey","range":{"start":{"line":427,"character":4},"end":{"line":427,"character":34}}},{"selectionRange":{"start":{"line":428,"character":4},"end":{"line":428,"character":33}},"kind":9,"name":"CardanoAddressByronPaymentKey","range":{"start":{"line":428,"character":4},"end":{"line":428,"character":33}}}],"name":"CardanoAddressKeyType","range":{"start":{"line":424,"character":0},"end":{"line":429,"character":21}}},{"selectionRange":{"start":{"line":431,"character":0},"end":{"line":433,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":432,"character":4},"end":{"line":432,"character":21}},"kind":9,"name":"OpCertCounterFile","range":{"start":{"line":432,"character":4},"end":{"line":432,"character":30}}}],"name":"OpCertCounterFile","range":{"start":{"line":431,"character":0},"end":{"line":433,"character":21}}},{"selectionRange":{"start":{"line":435,"character":0},"end":{"line":437,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":436,"character":4},"end":{"line":436,"character":15}},"kind":9,"name":"PrivKeyFile","range":{"start":{"line":436,"character":4},"end":{"line":436,"character":24}}}],"name":"PrivKeyFile","range":{"start":{"line":435,"character":0},"end":{"line":437,"character":21}}},{"selectionRange":{"start":{"line":439,"character":0},"end":{"line":441,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":440,"character":4},"end":{"line":440,"character":15}},"kind":9,"name":"WitnessFile","range":{"start":{"line":440,"character":4},"end":{"line":440,"character":24}}}],"name":"WitnessFile","range":{"start":{"line":439,"character":0},"end":{"line":441,"character":21}}},{"selectionRange":{"start":{"line":443,"character":0},"end":{"line":445,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":444,"character":4},"end":{"line":444,"character":14}},"kind":9,"name":"TxBodyFile","range":{"start":{"line":444,"character":4},"end":{"line":444,"character":23}}}],"name":"TxBodyFile","range":{"start":{"line":443,"character":0},"end":{"line":445,"character":21}}},{"selectionRange":{"start":{"line":447,"character":0},"end":{"line":449,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":448,"character":4},"end":{"line":448,"character":10}},"kind":9,"name":"TxFile","range":{"start":{"line":448,"character":4},"end":{"line":448,"character":19}}}],"name":"TxFile","range":{"start":{"line":447,"character":0},"end":{"line":449,"character":21}}},{"selectionRange":{"start":{"line":452,"character":0},"end":{"line":454,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":453,"character":4},"end":{"line":453,"character":25}},"kind":9,"name":"VerificationKeyBase64","range":{"start":{"line":453,"character":4},"end":{"line":453,"character":32}}}],"name":"VerificationKeyBase64","range":{"start":{"line":452,"character":0},"end":{"line":454,"character":21}}},{"selectionRange":{"start":{"line":457,"character":0},"end":{"line":467,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":458,"character":4},"end":{"line":458,"character":25}},"kind":9,"name":"KeyWitnessSigningData","range":{"start":{"line":458,"character":4},"end":{"line":465,"character":76}}},{"selectionRange":{"start":{"line":466,"character":4},"end":{"line":466,"character":28}},"kind":9,"name":"ScriptWitnessSigningData","range":{"start":{"line":466,"character":4},"end":{"line":466,"character":40}}}],"name":"WitnessSigningData","range":{"start":{"line":457,"character":0},"end":{"line":467,"character":21}}},{"selectionRange":{"start":{"line":476,"character":0},"end":{"line":480,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":477,"character":4},"end":{"line":477,"character":32}},"kind":9,"name":"ColdStakePoolVerificationKey","range":{"start":{"line":477,"character":4},"end":{"line":477,"character":64}}},{"selectionRange":{"start":{"line":478,"character":4},"end":{"line":478,"character":38}},"kind":9,"name":"ColdGenesisDelegateVerificationKey","range":{"start":{"line":478,"character":4},"end":{"line":478,"character":76}}},{"selectionRange":{"start":{"line":479,"character":4},"end":{"line":479,"character":27}},"kind":9,"name":"ColdVerificationKeyFile","range":{"start":{"line":479,"character":4},"end":{"line":479,"character":48}}}],"name":"ColdVerificationKeyOrFile","range":{"start":{"line":476,"character":0},"end":{"line":480,"character":21}}}],"name":"Cardano.CLI.Shelley.Commands","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":184}
2020-12-03 13:40:58.978546756 [ThreadId 10288] - finish: C:GetParsedModule (took 0.42s)
2020-12-03 13:40:58.978512998 [ThreadId 10230] - finish: C:GetParsedModule (took 0.42s)
2020-12-03 13:40:58.978734452 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":2,"character":7},"end":{"line":2,"character":38}},"kind":1,"children":[{"selectionRange":{"start":{"line":12,"character":0},"end":{"line":31,"character":34}},"kind":2,"children":[{"selectionRange":{"start":{"line":12,"character":0},"end":{"line":12,"character":50}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":12,"character":0},"end":{"line":12,"character":50}}},{"selectionRange":{"start":{"line":14,"character":0},"end":{"line":14,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":14,"character":0},"end":{"line":14,"character":36}}},{"selectionRange":{"start":{"line":15,"character":0},"end":{"line":15,"character":44}},"kind":2,"name":"import Data.ByteString.Char8","range":{"start":{"line":15,"character":0},"end":{"line":15,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":16,"character":0},"end":{"line":16,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":16,"character":0},"end":{"line":16,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":17,"character":0},"end":{"line":17,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":17,"character":0},"end":{"line":17,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":18,"character":0},"end":{"line":18,"character":37}},"kind":2,"name":"import Data.Text.IO","range":{"start":{"line":18,"character":0},"end":{"line":18,"character":37}},"detail":"qualified"},{"selectionRange":{"start":{"line":20,"character":0},"end":{"line":21,"character":75}},"kind":2,"name":"import Control.Monad.Trans.Except.Extra","range":{"start":{"line":20,"character":0},"end":{"line":21,"character":75}}},{"selectionRange":{"start":{"line":23,"character":0},"end":{"line":23,"character":34}},"kind":2,"name":"import Cardano.Api.Typed","range":{"start":{"line":23,"character":0},"end":{"line":23,"character":34}}},{"selectionRange":{"start":{"line":25,"character":0},"end":{"line":28,"character":58}},"kind":2,"name":"import Cardano.CLI.Shelley.Key","range":{"start":{"line":25,"character":0},"end":{"line":28,"character":58}}},{"selectionRange":{"start":{"line":29,"character":0},"end":{"line":29,"character":100}},"kind":2,"name":"import Cardano.CLI.Shelley.Parsers","range":{"start":{"line":29,"character":0},"end":{"line":29,"character":100}}},{"selectionRange":{"start":{"line":30,"character":0},"end":{"line":30,"character":95}},"kind":2,"name":"import Cardano.CLI.Shelley.Run.Address.Info","range":{"start":{"line":30,"character":0},"end":{"line":30,"character":95}}},{"selectionRange":{"start":{"line":31,"character":0},"end":{"line":31,"character":34}},"kind":2,"name":"import Cardano.CLI.Types","range":{"start":{"line":31,"character":0},"end":{"line":31,"character":34}}}],"name":"imports","range":{"start":{"line":12,"character":0},"end":{"line":31,"character":34}}},{"selectionRange":{"start":{"line":33,"character":0},"end":{"line":40,"character":15}},"kind":23,"children":[{"selectionRange":{"start":{"line":34,"character":4},"end":{"line":34,"character":37}},"kind":9,"name":"ShelleyAddressCmdAddressInfoError","range":{"start":{"line":34,"character":4},"end":{"line":34,"character":62}}},{"selectionRange":{"start":{"line":35,"character":4},"end":{"line":35,"character":37}},"kind":9,"name":"ShelleyAddressCmdAesonDecodeError","range":{"start":{"line":35,"character":4},"end":{"line":35,"character":53}}},{"selectionRange":{"start":{"line":36,"character":4},"end":{"line":36,"character":37}},"kind":9,"name":"ShelleyAddressCmdReadKeyFileError","range":{"start":{"line":36,"character":4},"end":{"line":36,"character":67}}},{"selectionRange":{"start":{"line":37,"character":4},"end":{"line":37,"character":38}},"kind":9,"name":"ShelleyAddressCmdReadFileException","range":{"start":{"line":37,"character":4},"end":{"line":37,"character":54}}},{"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":51}},"kind":9,"name":"ShelleyAddressCmdVerificationKeyTextOrFileError","range":{"start":{"line":38,"character":4},"end":{"line":38,"character":83}}},{"selectionRange":{"start":{"line":39,"character":4},"end":{"line":39,"character":35}},"kind":9,"name":"ShelleyAddressCmdWriteFileError","range":{"start":{"line":39,"character":4},"end":{"line":39,"character":51}}}],"name":"ShelleyAddressCmdError","range":{"start":{"line":33,"character":0},"end":{"line":40,"character":15}}},{"selectionRange":{"start":{"line":43,"character":0},"end":{"line":54,"character":82}},"kind":12,"name":"renderShelleyAddressCmdError","range":{"start":{"line":43,"character":0},"end":{"line":54,"character":82}}},{"selectionRange":{"start":{"line":57,"character":0},"end":{"line":63,"character":100}},"kind":12,"name":"runAddressCmd","range":{"start":{"line":57,"character":0},"end":{"line":63,"character":100}}},{"selectionRange":{"start":{"line":69,"character":0},"end":{"line":87,"character":41}},"kind":12,"name":"runAddressKeyGen","range":{"start":{"line":69,"character":0},"end":{"line":87,"character":41}}},{"selectionRange":{"start":{"line":93,"character":0},"end":{"line":102,"character":46}},"kind":12,"name":"runAddressKeyHash","range":{"start":{"line":93,"character":0},"end":{"line":102,"character":46}}},{"selectionRange":{"start":{"line":110,"character":0},"end":{"line":131,"character":71}},"kind":12,"name":"runAddressBuild","range":{"start":{"line":110,"character":0},"end":{"line":131,"character":71}}},{"selectionRange":{"start":{"line":138,"character":0},"end":{"line":154,"character":16}},"kind":12,"name":"buildShelleyAddress","range":{"start":{"line":138,"character":0},"end":{"line":154,"character":16}}},{"selectionRange":{"start":{"line":163,"character":0},"end":{"line":168,"character":17}},"kind":23,"children":[{"selectionRange":{"start":{"line":164,"character":4},"end":{"line":164,"character":25}},"kind":9,"name":"AByronVerificationKey","range":{"start":{"line":164,"character":4},"end":{"line":164,"character":62}}},{"selectionRange":{"start":{"line":165,"character":4},"end":{"line":165,"character":27}},"kind":9,"name":"APaymentVerificationKey","range":{"start":{"line":165,"character":4},"end":{"line":165,"character":64}}},{"selectionRange":{"start":{"line":166,"character":4},"end":{"line":166,"character":35}},"kind":9,"name":"APaymentExtendedVerificationKey","range":{"start":{"line":166,"character":4},"end":{"line":166,"character":72}}},{"selectionRange":{"start":{"line":167,"character":4},"end":{"line":167,"character":31}},"kind":9,"name":"AGenesisUTxOVerificationKey","range":{"start":{"line":167,"character":4},"end":{"line":167,"character":68}}}],"name":"SomeAddressVerificationKey","range":{"start":{"line":163,"character":0},"end":{"line":168,"character":17}}},{"selectionRange":{"start":{"line":173,"character":0},"end":{"line":176,"character":76}},"kind":12,"name":"foldSomeAddressVerificationKey","range":{"start":{"line":173,"character":0},"end":{"line":176,"character":76}}},{"selectionRange":{"start":{"line":181,"character":0},"end":{"line":203,"character":7}},"kind":12,"name":"readAddressVerificationKeyTextOrFile","range":{"start":{"line":181,"character":0},"end":{"line":203,"character":7}}},{"selectionRange":{"start":{"line":214,"character":0},"end":{"line":234,"character":62}},"kind":12,"name":"runAddressBuildScript","range":{"start":{"line":214,"character":0},"end":{"line":234,"character":62}}}],"name":"Cardano.CLI.Shelley.Run.Address","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":294}
2020-12-03 13:40:58.981573135 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":8,"character":7},"end":{"line":8,"character":42}},"kind":1,"children":[{"selectionRange":{"start":{"line":14,"character":0},"end":{"line":46,"character":44}},"kind":2,"children":[{"selectionRange":{"start":{"line":14,"character":0},"end":{"line":14,"character":50}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":14,"character":0},"end":{"line":14,"character":50}}},{"selectionRange":{"start":{"line":15,"character":0},"end":{"line":15,"character":33}},"kind":2,"name":"import Prelude","range":{"start":{"line":15,"character":0},"end":{"line":15,"character":33}}},{"selectionRange":{"start":{"line":17,"character":0},"end":{"line":17,"character":36}},"kind":2,"name":"import Data.Aeson","range":{"start":{"line":17,"character":0},"end":{"line":17,"character":36}},"detail":"qualified"},{"selectionRange":{"start":{"line":18,"character":0},"end":{"line":18,"character":44}},"kind":2,"name":"import Data.ByteString.Char8","range":{"start":{"line":18,"character":0},"end":{"line":18,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":19,"character":0},"end":{"line":19,"character":44}},"kind":2,"name":"import Data.ByteString.Lazy","range":{"start":{"line":19,"character":0},"end":{"line":19,"character":44}},"detail":"qualified"},{"selectionRange":{"start":{"line":20,"character":0},"end":{"line":20,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":20,"character":0},"end":{"line":20,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":21,"character":0},"end":{"line":21,"character":54}},"kind":2,"name":"import Data.Type.Equality","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":54}}},{"selectionRange":{"start":{"line":23,"character":0},"end":{"line":24,"character":32}},"kind":2,"name":"import Control.Monad.Trans.Except.Extra","range":{"start":{"line":23,"character":0},"end":{"line":24,"character":32}}},{"selectionRange":{"start":{"line":27,"character":0},"end":{"line":27,"character":39}},"kind":2,"name":"import Cardano.Binary","range":{"start":{"line":27,"character":0},"end":{"line":27,"character":39}},"detail":"qualified"},{"selectionRange":{"start":{"line":29,"character":0},"end":{"line":29,"character":55}},"kind":2,"name":"import Shelley.Spec.Ledger.PParams","range":{"start":{"line":29,"character":0},"end":{"line":29,"character":55}},"detail":"qualified"},{"selectionRange":{"start":{"line":31,"character":0},"end":{"line":31,"character":51}},"kind":2,"name":"import Cardano.Ledger.ShelleyMA.TxBody","range":{"start":{"line":31,"character":0},"end":{"line":31,"character":51}}},{"selectionRange":{"start":{"line":32,"character":0},"end":{"line":32,"character":47}},"kind":2,"name":"import Shelley.Spec.Ledger.Scripts","range":{"start":{"line":32,"character":0},"end":{"line":32,"character":47}}},{"selectionRange":{"start":{"line":34,"character":0},"end":{"line":34,"character":62}},"kind":2,"name":"import Ouroboros.Consensus.Byron.Ledger","range":{"start":{"line":34,"character":0},"end":{"line":34,"character":62}}},{"selectionRange":{"start":{"line":35,"character":0},"end":{"line":35,"character":94}},"kind":2,"name":"import Ouroboros.Consensus.Cardano.Block","range":{"start":{"line":35,"character":0},"end":{"line":35,"character":94}}},{"selectionRange":{"start":{"line":36,"character":0},"end":{"line":36,"character":72}},"kind":2,"name":"import Ouroboros.Consensus.Ledger.SupportsMempool","range":{"start":{"line":36,"character":0},"end":{"line":36,"character":72}}},{"selectionRange":{"start":{"line":37,"character":0},"end":{"line":37,"character":66}},"kind":2,"name":"import Ouroboros.Consensus.Shelley.Ledger","range":{"start":{"line":37,"character":0},"end":{"line":37,"character":66}}},{"selectionRange":{"start":{"line":39,"character":0},"end":{"line":39,"character":98}},"kind":2,"name":"import Cardano.CLI.Environment","range":{"start":{"line":39,"character":0},"end":{"line":39,"character":98}}},{"selectionRange":{"start":{"line":40,"character":0},"end":{"line":40,"character":84}},"kind":2,"name":"import Cardano.CLI.Shelley.Key","range":{"start":{"line":40,"character":0},"end":{"line":40,"character":84}}},{"selectionRange":{"start":{"line":41,"character":0},"end":{"line":41,"character":44}},"kind":2,"name":"import Cardano.CLI.Shelley.Parsers","range":{"start":{"line":41,"character":0},"end":{"line":41,"character":44}}},{"selectionRange":{"start":{"line":42,"character":0},"end":{"line":42,"character":34}},"kind":2,"name":"import Cardano.CLI.Types","range":{"start":{"line":42,"character":0},"end":{"line":42,"character":34}}},{"selectionRange":{"start":{"line":44,"character":0},"end":{"line":44,"character":41}},"kind":2,"name":"import Cardano.Api.Typed","range":{"start":{"line":44,"character":0},"end":{"line":44,"character":41}}},{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":45,"character":37}},"kind":2,"name":"import Cardano.Api.Protocol","range":{"start":{"line":45,"character":0},"end":{"line":45,"character":37}}},{"selectionRange":{"start":{"line":46,"character":0},"end":{"line":46,"character":44}},"kind":2,"name":"import Cardano.Api.TxSubmit","range":{"start":{"line":46,"character":0},"end":{"line":46,"character":44}}}],"name":"imports","range":{"start":{"line":14,"character":0},"end":{"line":46,"character":44}}},{"selectionRange":{"start":{"line":48,"character":0},"end":{"line":71,"character":15}},"kind":23,"children":[{"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":46}},"kind":9,"name":"ShelleyTxCmdAesonDecodeProtocolParamsError","range":{"start":{"line":49,"character":4},"end":{"line":49,"character":62}}},{"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":29}},"kind":9,"name":"ShelleyTxCmdReadFileError","range":{"start":{"line":50,"character":4},"end":{"line":50,"character":45}}},{"selectionRange":{"start":{"line":51,"character":4},"end":{"line":51,"character":33}},"kind":9,"name":"ShelleyTxCmdReadJsonFileError","range":{"start":{"line":51,"character":4},"end":{"line":51,"character":61}}},{"selectionRange":{"start":{"line":52,"character":4},"end":{"line":52,"character":37}},"kind":9,"name":"ShelleyTxCmdReadTextViewFileError","range":{"start":{"line":52,"character":4},"end":{"line":52,"character":68}}},{"selectionRange":{"start":{"line":53,"character":4},"end":{"line":53,"character":43}},"kind":9,"name":"ShelleyTxCmdReadWitnessSigningDataError","range":{"start":{"line":53,"character":4},"end":{"line":53,"character":72}}},{"selectionRange":{"start":{"line":54,"character":4},"end":{"line":54,"character":30}},"kind":9,"name":"ShelleyTxCmdWriteFileError","range":{"start":{"line":54,"character":4},"end":{"line":54,"character":46}}},{"selectionRange":{"start":{"line":55,"character":4},"end":{"line":55,"character":38}},"kind":9,"name":"ShelleyTxCmdMetaDataJsonParseError","range":{"start":{"line":55,"character":4},"end":{"line":55,"character":56}}},{"selectionRange":{"start":{"line":56,"character":4},"end":{"line":56,"character":39}},"kind":9,"name":"ShelleyTxCmdMetaDataConversionError","range":{"start":{"line":56,"character":4},"end":{"line":56,"character":70}}},{"selectionRange":{"start":{"line":57,"character":4},"end":{"line":57,"character":35}},"kind":9,"name":"ShelleyTxCmdMetaValidationError","range":{"start":{"line":57,"character":4},"end":{"line":57,"character":79}}},{"selectionRange":{"start":{"line":58,"character":4},"end":{"line":58,"character":31}},"kind":9,"name":"ShelleyTxCmdMetaDecodeError","range":{"start":{"line":58,"character":4},"end":{"line":58,"character":60}}},{"selectionRange":{"start":{"line":59,"character":4},"end":{"line":59,"character":37}},"kind":9,"name":"ShelleyTxCmdBootstrapWitnessError","range":{"start":{"line":59,"character":4},"end":{"line":59,"character":67}}},{"selectionRange":{"start":{"line":60,"character":4},"end":{"line":60,"character":30}},"kind":9,"name":"ShelleyTxCmdSocketEnvError","range":{"start":{"line":60,"character":4},"end":{"line":60,"character":46}}},{"selectionRange":{"start":{"line":61,"character":4},"end":{"line":61,"character":34}},"kind":9,"name":"ShelleyTxCmdTxSubmitErrorByron","range":{"start":{"line":61,"character":4},"end":{"line":61,"character":59}}},{"selectionRange":{"start":{"line":62,"character":4},"end":{"line":62,"character":36}},"kind":9,"name":"ShelleyTxCmdTxSubmitErrorShelley","range":{"start":{"line":62,"character":4},"end":{"line":62,"character":81}}},{"selectionRange":{"start":{"line":63,"character":4},"end":{"line":63,"character":36}},"kind":9,"name":"ShelleyTxCmdTxSubmitErrorAllegra","range":{"start":{"line":63,"character":4},"end":{"line":63,"character":81}}},{"selectionRange":{"start":{"line":64,"character":4},"end":{"line":64,"character":33}},"kind":9,"name":"ShelleyTxCmdTxSubmitErrorMary","range":{"start":{"line":64,"character":4},"end":{"line":64,"character":75}}},{"selectionRange":{"start":{"line":65,"character":4},"end":{"line":65,"character":40}},"kind":9,"name":"ShelleyTxCmdTxSubmitErrorEraMismatch","range":{"start":{"line":65,"character":4},"end":{"line":65,"character":53}}},{"selectionRange":{"start":{"line":66,"character":4},"end":{"line":66,"character":33}},"kind":9,"name":"ShelleyTxCmdTxFeatureMismatch","range":{"start":{"line":66,"character":4},"end":{"line":66,"character":57}}},{"selectionRange":{"start":{"line":67,"character":4},"end":{"line":67,"character":27}},"kind":9,"name":"ShelleyTxCmdTxBodyError","range":{"start":{"line":67,"character":4},"end":{"line":67,"character":43}}},{"selectionRange":{"start":{"line":68,"character":4},"end":{"line":68,"character":30}},"kind":9,"name":"ShelleyTxCmdNotImplemented","range":{"start":{"line":68,"character":4},"end":{"line":68,"character":35}}},{"selectionRange":{"start":{"line":69,"character":4},"end":{"line":69,"character":34}},"kind":9,"name":"ShelleyTxCmdWitnessEraMismatch","range":{"start":{"line":69,"character":4},"end":{"line":69,"character":74}}},{"selectionRange":{"start":{"line":70,"character":4},"end":{"line":70,"character":47}},"kind":9,"name":"ShelleyTxCmdScriptLanguageNotSupportedInEra","range":{"start":{"line":70,"character":4},"end":{"line":70,"character":79}}}],"name":"ShelleyTxCmdError","range":{"start":{"line":48,"character":0},"end":{"line":71,"character":15}}},{"selectionRange":{"start":{"line":73,"character":0},"end":{"line":74,"character":58}},"kind":23,"children":[{"selectionRange":{"start":{"line":74,"character":5},"end":{"line":74,"character":20}},"kind":9,"name":"SomeTxBodyError","range":{"start":{"line":74,"character":5},"end":{"line":74,"character":58}}}],"name":"SomeTxBodyError","range":{"start":{"line":73,"character":0},"end":{"line":74,"character":58}}},{"selectionRange":{"start":{"line":80,"character":0},"end":{"line":146,"character":30}},"kind":12,"name":"renderShelleyTxCmdError","range":{"start":{"line":80,"character":0},"end":{"line":146,"character":30}}},{"selectionRange":{"start":{"line":149,"character":0},"end":{"line":152,"character":45}},"kind":12,"name":"renderEra","range":{"start":{"line":149,"character":0},"end":{"line":152,"character":45}}},{"selectionRange":{"start":{"line":155,"character":0},"end":{"line":168,"character":60}},"kind":12,"name":"renderFeature","range":{"start":{"line":155,"character":0},"end":{"line":168,"character":60}}},{"selectionRange":{"start":{"line":171,"character":0},"end":{"line":193,"character":53}},"kind":12,"name":"runTransactionCmd","range":{"start":{"line":171,"character":0},"end":{"line":193,"character":53}}},{"selectionRange":{"start":{"line":220,"character":0},"end":{"line":255,"character":2}},"kind":12,"name":"runTxBuildRaw","range":{"start":{"line":220,"character":0},"end":{"line":255,"character":2}}},{"selectionRange":{"start":{"line":256,"character":0},"end":{"line":270,"character":15}},"kind":23,"children":[{"selectionRange":{"start":{"line":256,"character":17},"end":{"line":256,"character":42}},"kind":9,"name":"TxFeatureShelleyAddresses","range":{"start":{"line":256,"character":17},"end":{"line":256,"character":42}}},{"selectionRange":{"start":{"line":257,"character":17},"end":{"line":257,"character":38}},"kind":9,"name":"TxFeatureExplicitFees","range":{"start":{"line":257,"character":17},"end":{"line":257,"character":38}}},{"selectionRange":{"start":{"line":258,"character":17},"end":{"line":258,"character":38}},"kind":9,"name":"TxFeatureImplicitFees","range":{"start":{"line":258,"character":17},"end":{"line":258,"character":38}}},{"selectionRange":{"start":{"line":259,"character":17},"end":{"line":259,"character":44}},"kind":9,"name":"TxFeatureValidityLowerBound","range":{"start":{"line":259,"character":17},"end":{"line":259,"character":44}}},{"selectionRange":{"start":{"line":260,"character":17},"end":{"line":260,"character":44}},"kind":9,"name":"TxFeatureValidityUpperBound","range":{"start":{"line":260,"character":17},"end":{"line":260,"character":44}}},{"selectionRange":{"start":{"line":261,"character":17},"end":{"line":261,"character":46}},"kind":9,"name":"TxFeatureValidityNoUpperBound","range":{"start":{"line":261,"character":17},"end":{"line":261,"character":46}}},{"selectionRange":{"start":{"line":262,"character":17},"end":{"line":262,"character":36}},"kind":9,"name":"TxFeatureTxMetadata","range":{"start":{"line":262,"character":17},"end":{"line":262,"character":36}}},{"selectionRange":{"start":{"line":263,"character":17},"end":{"line":263,"character":36}},"kind":9,"name":"TxFeatureAuxScripts","range":{"start":{"line":263,"character":17},"end":{"line":263,"character":36}}},{"selectionRange":{"start":{"line":264,"character":17},"end":{"line":264,"character":37}},"kind":9,"name":"TxFeatureWithdrawals","range":{"start":{"line":264,"character":17},"end":{"line":264,"character":37}}},{"selectionRange":{"start":{"line":265,"character":17},"end":{"line":265,"character":38}},"kind":9,"name":"TxFeatureCertificates","range":{"start":{"line":265,"character":17},"end":{"line":265,"character":38}}},{"selectionRange":{"start":{"line":266,"character":17},"end":{"line":266,"character":35}},"kind":9,"name":"TxFeatureMintValue","range":{"start":{"line":266,"character":17},"end":{"line":266,"character":35}}},{"selectionRange":{"start":{"line":267,"character":17},"end":{"line":267,"character":43}},"kind":9,"name":"TxFeatureMultiAssetOutputs","range":{"start":{"line":267,"character":17},"end":{"line":267,"character":43}}},{"selectionRange":{"start":{"line":268,"character":17},"end":{"line":268,"character":41}},"kind":9,"name":"TxFeatureScriptWitnesses","range":{"start":{"line":268,"character":17},"end":{"line":268,"character":41}}},{"selectionRange":{"start":{"line":269,"character":17},"end":{"line":269,"character":37}},"kind":9,"name":"TxFeatureShelleyKeys","range":{"start":{"line":269,"character":17},"end":{"line":269,"character":37}}}],"name":"TxFeature","range":{"start":{"line":256,"character":0},"end":{"line":270,"character":15}}},{"selectionRange":{"start":{"line":275,"character":0},"end":{"line":276,"character":68}},"kind":12,"name":"txFeatureMismatch","range":{"start":{"line":275,"character":0},"end":{"line":276,"character":68}}},{"selectionRange":{"start":{"line":281,"character":0},"end":{"line":281,"character":24}},"kind":12,"name":"validateTxIns","range":{"start":{"line":281,"character":0},"end":{"line":281,"character":24}}},{"selectionRange":{"start":{"line":287,"character":0},"end":{"line":312,"character":72}},"kind":12,"name":"validateTxOuts","range":{"start":{"line":287,"character":0},"end":{"line":312,"character":72}}},{"selectionRange":{"start":{"line":318,"character":0},"end":{"line":324,"character":71}},"kind":12,"name":"validateTxFee","range":{"start":{"line":318,"character":0},"end":{"line":324,"character":71}}},{"selectionRange":{"start":{"line":331,"character":0},"end":{"line":335,"character":68}},"kind":12,"name":"validateTxValidityLowerBound","range":{"start":{"line":331,"character":0},"end":{"line":335,"character":68}}},{"selectionRange":{"start":{"line":342,"character":0},"end":{"line":349,"character":68}},"kind":12,"name":"validateTxValidityUpperBound","range":{"start":{"line":342,"character":0},"end":{"line":349,"character":68}}},{"selectionRange":{"start":{"line":356,"character":0},"end":{"line":362,"character":51}},"kind":12,"name":"validateTxMetadataInEra","range":{"start":{"line":356,"character":0},"end":{"line":362,"character":51}}},{"selectionRange":{"start":{"line":368,"character":0},"end":{"line":385,"character":55}},"kind":12,"name":"validateTxAuxScripts","range":{"start":{"line":368,"character":0},"end":{"line":385,"character":55}}},{"selectionRange":{"start":{"line":390,"character":0},"end":{"line":394,"character":68}},"kind":12,"name":"validateTxWithdrawals","range":{"start":{"line":390,"character":0},"end":{"line":394,"character":68}}},{"selectionRange":{"start":{"line":400,"character":0},"end":{"line":410,"character":45}},"kind":12,"name":"validateTxCertificates","range":{"start":{"line":400,"character":0},"end":{"line":410,"character":45}}},{"selectionRange":{"start":{"line":416,"character":0},"end":{"line":423,"character":49}},"kind":12,"name":"validateTxUpdateProposal","range":{"start":{"line":416,"character":0},"end":{"line":423,"character":49}}},{"selectionRange":{"start":{"line":429,"character":0},"end":{"line":433,"character":58}},"kind":12,"name":"validateTxMintValue","range":{"start":{"line":429,"character":0},"end":{"line":433,"character":58}}},{"selectionRange":{"start":{"line":445,"character":0},"end":{"line":471,"character":47}},"kind":12,"name":"runTxSign","range":{"start":{"line":445,"character":0},"end":{"line":471,"character":47}}},{"selectionRange":{"start":{"line":480,"character":0},"end":{"line":527,"character":66}},"kind":12,"name":"runTxSubmit","range":{"start":{"line":480,"character":0},"end":{"line":527,"character":66}}},{"selectionRange":{"start":{"line":543,"character":0},"end":{"line":564,"character":59}},"kind":12,"name":"runTxCalculateMinFee","range":{"start":{"line":543,"character":0},"end":{"line":564,"character":59}}},{"selectionRange":{"start":{"line":567,"character":0},"end":{"line":569,"character":42}},"kind":12,"name":"runTxCreatePolicyId","range":{"start":{"line":567,"character":0},"end":{"line":569,"character":42}}},{"selectionRange":{"start":{"line":575,"character":0},"end":{"line":578,"character":31}},"kind":12,"name":"readProtocolParameters","range":{"start":{"line":575,"character":0},"end":{"line":578,"character":31}}},{"selectionRange":{"start":{"line":580,"character":0},"end":{"line":593,"character":47}},"kind":23,"children":[{"selectionRange":{"start":{"line":581,"character":4},"end":{"line":581,"character":20}},"kind":9,"name":"AByronSigningKey","range":{"start":{"line":581,"character":4},"end":{"line":581,"character":88}}},{"selectionRange":{"start":{"line":582,"character":4},"end":{"line":582,"character":22}},"kind":9,"name":"APaymentSigningKey","range":{"start":{"line":582,"character":4},"end":{"line":582,"character":62}}},{"selectionRange":{"start":{"line":583,"character":4},"end":{"line":583,"character":30}},"kind":9,"name":"APaymentExtendedSigningKey","range":{"start":{"line":583,"character":4},"end":{"line":583,"character":70}}},{"selectionRange":{"start":{"line":584,"character":4},"end":{"line":584,"character":20}},"kind":9,"name":"AStakeSigningKey","range":{"start":{"line":584,"character":4},"end":{"line":584,"character":60}}},{"selectionRange":{"start":{"line":585,"character":4},"end":{"line":585,"character":28}},"kind":9,"name":"AStakeExtendedSigningKey","range":{"start":{"line":585,"character":4},"end":{"line":585,"character":68}}},{"selectionRange":{"start":{"line":586,"character":4},"end":{"line":586,"character":24}},"kind":9,"name":"AStakePoolSigningKey","range":{"start":{"line":586,"character":4},"end":{"line":586,"character":64}}},{"selectionRange":{"start":{"line":587,"character":4},"end":{"line":587,"character":22}},"kind":9,"name":"AGenesisSigningKey","range":{"start":{"line":587,"character":4},"end":{"line":587,"character":62}}},{"selectionRange":{"start":{"line":588,"character":4},"end":{"line":588,"character":30}},"kind":9,"name":"AGenesisExtendedSigningKey","range":{"start":{"line":588,"character":4},"end":{"line":588,"character":70}}},{"selectionRange":{"start":{"line":589,"character":4},"end":{"line":589,"character":30}},"kind":9,"name":"AGenesisDelegateSigningKey","range":{"start":{"line":589,"character":4},"end":{"line":589,"character":70}}},{"selectionRange":{"start":{"line":590,"character":4},"end":{"line":590,"character":38}},"kind":9,"name":"AGenesisDelegateExtendedSigningKey","range":{"start":{"line":590,"character":4},"end":{"line":591,"character":78}}},{"selectionRange":{"start":{"line":592,"character":4},"end":{"line":592,"character":26}},"kind":9,"name":"AGenesisUTxOSigningKey","range":{"start":{"line":592,"character":4},"end":{"line":592,"character":66}}},{"selectionRange":{"start":{"line":593,"character":4},"end":{"line":593,"character":18}},"kind":9,"name":"AShelleyScript","range":{"start":{"line":593,"character":4},"end":{"line":593,"character":47}}}],"name":"SomeWitness","range":{"start":{"line":580,"character":0},"end":{"line":593,"character":47}}},{"selectionRange":{"start":{"line":597,"character":0},"end":{"line":602,"character":15}},"kind":23,"children":[{"selectionRange":{"start":{"line":598,"character":4},"end":{"line":598,"character":47}},"kind":9,"name":"ReadWitnessSigningDataSigningKeyDecodeError","range":{"start":{"line":598,"character":4},"end":{"line":598,"character":77}}},{"selectionRange":{"start":{"line":599,"character":4},"end":{"line":599,"character":37}},"kind":9,"name":"ReadWitnessSigningDataScriptError","range":{"start":{"line":599,"character":4},"end":{"line":599,"character":66}}},{"selectionRange":{"start":{"line":600,"character":4},"end":{"line":600,"character":54}},"kind":9,"name":"ReadWitnessSigningDataSigningKeyAndAddressMismatch","range":{"start":{"line":600,"character":4},"end":{"line":601,"character":71}}}],"name":"ReadWitnessSigningDataError","range":{"start":{"line":597,"character":0},"end":{"line":602,"character":15}}},{"selectionRange":{"start":{"line":606,"character":0},"end":{"line":613,"character":71}},"kind":12,"name":"renderReadWitnessSigningDataError","range":{"start":{"line":606,"character":0},"end":{"line":613,"character":71}}},{"selectionRange":{"start":{"line":618,"character":0},"end":{"line":672,"character":7}},"kind":12,"name":"readWitnessSigningData","range":{"start":{"line":618,"character":0},"end":{"line":672,"character":7}}},{"selectionRange":{"start":{"line":680,"character":0},"end":{"line":692,"character":70}},"kind":12,"name":"partitionSomeWitnesses","range":{"start":{"line":680,"character":0},"end":{"line":692,"character":70}}},{"selectionRange":{"start":{"line":696,"character":0},"end":{"line":699,"character":42}},"kind":23,"children":[{"selectionRange":{"start":{"line":697,"character":4},"end":{"line":697,"character":17}},"kind":9,"name":"AByronWitness","range":{"start":{"line":697,"character":4},"end":{"line":697,"character":56}}},{"selectionRange":{"start":{"line":698,"character":4},"end":{"line":698,"character":22}},"kind":9,"name":"AShelleyKeyWitness","range":{"start":{"line":698,"character":4},"end":{"line":698,"character":52}}},{"selectionRange":{"start":{"line":699,"character":4},"end":{"line":699,"character":25}},"kind":9,"name":"AShelleyScriptWitness","range":{"start":{"line":699,"character":4},"end":{"line":699,"character":42}}}],"name":"ByronOrShelleyWitness","range":{"start":{"line":696,"character":0},"end":{"line":699,"character":42}}},{"selectionRange":{"start":{"line":702,"character":0},"end":{"line":718,"character":64}},"kind":12,"name":"categoriseSomeWitness","range":{"start":{"line":702,"character":0},"end":{"line":718,"character":64}}},{"selectionRange":{"start":{"line":719,"character":0},"end":{"line":727,"character":76}},"kind":23,"children":[{"selectionRange":{"start":{"line":720,"character":4},"end":{"line":720,"character":41}},"kind":9,"name":"ShelleyBootstrapWitnessSigningKeyData","range":{"start":{"line":720,"character":4},"end":{"line":727,"character":76}}}],"name":"ShelleyBootstrapWitnessSigningKeyData","range":{"start":{"line":719,"character":0},"end":{"line":727,"character":76}}},{"selectionRange":{"start":{"line":731,"character":0},"end":{"line":735,"character":15}},"kind":23,"children":[{"selectionRange":{"start":{"line":732,"character":4},"end":{"line":732,"character":39}},"kind":9,"name":"MissingNetworkIdOrByronAddressError","range":{"start":{"line":732,"character":4},"end":{"line":734,"character":61}}}],"name":"ShelleyBootstrapWitnessError","range":{"start":{"line":731,"character":0},"end":{"line":735,"character":15}}},{"selectionRange":{"start":{"line":739,"character":0},"end":{"line":746,"character":16}},"kind":12,"name":"renderShelleyBootstrapWitnessError","range":{"start":{"line":739,"character":0},"end":{"line":746,"character":16}}},{"selectionRange":{"start":{"line":753,"character":0},"end":{"line":761,"character":15}},"kind":12,"name":"mkShelleyBootstrapWitness","range":{"start":{"line":753,"character":0},"end":{"line":761,"character":15}}},{"selectionRange":{"start":{"line":768,"character":0},"end":{"line":769,"character":45}},"kind":12,"name":"mkShelleyBootstrapWitnesses","range":{"start":{"line":768,"character":0},"end":{"line":769,"character":45}}},{"selectionRange":{"start":{"line":773,"character":0},"end":{"line":775,"character":72}},"kind":12,"name":"runTxGetTxId","range":{"start":{"line":773,"character":0},"end":{"line":775,"character":72}}},{"selectionRange":{"start":{"line":783,"character":0},"end":{"line":809,"character":53}},"kind":12,"name":"runTxCreateWitness","range":{"start":{"line":783,"character":0},"end":{"line":809,"character":53}}},{"selectionRange":{"start":{"line":817,"character":0},"end":{"line":839,"character":48}},"kind":12,"name":"runTxSignWitness","range":{"start":{"line":817,"character":0},"end":{"line":839,"character":48}}},{"selectionRange":{"start":{"line":848,"character":0},"end":{"line":848,"character":51}},"kind":12,"name":"readFileWitness","range":{"start":{"line":848,"character":0},"end":{"line":848,"character":51}}},{"selectionRange":{"start":{"line":853,"character":0},"end":{"line":853,"character":49}},"kind":12,"name":"readFileTxBody","range":{"start":{"line":853,"character":0},"end":{"line":853,"character":49}}},{"selectionRange":{"start":{"line":857,"character":0},"end":{"line":857,"character":41}},"kind":12,"name":"readFileTx","range":{"start":{"line":857,"character":0},"end":{"line":857,"character":41}}},{"selectionRange":{"start":{"line":870,"character":0},"end":{"line":882,"character":2}},"kind":12,"name":"readFileInAnyCardanoEra","range":{"start":{"line":870,"character":0},"end":{"line":882,"character":2}}},{"selectionRange":{"start":{"line":887,"character":0},"end":{"line":890,"character":66}},"kind":12,"name":"onlyInShelleyBasedEras","range":{"start":{"line":887,"character":0},"end":{"line":890,"character":66}}},{"selectionRange":{"start":{"line":899,"character":0},"end":{"line":900,"character":52}},"kind":12,"name":"readFileScriptInAnyLang","range":{"start":{"line":899,"character":0},"end":{"line":900,"character":52}}},{"selectionRange":{"start":{"line":905,"character":0},"end":{"line":909,"character":34}},"kind":12,"name":"validateScriptSupportedInEra","range":{"start":{"line":905,"character":0},"end":{"line":909,"character":34}}},{"selectionRange":{"start":{"line":918,"character":0},"end":{"line":933,"character":25}},"kind":12,"name":"readFileTxMetaData","range":{"start":{"line":918,"character":0},"end":{"line":933,"character":25}}}],"name":"Cardano.CLI.Shelley.Run.Transaction","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":189}
2020-12-03 13:40:58.986644333 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":2,"character":7},"end":{"line":2,"character":52}},"kind":1,"children":[{"selectionRange":{"start":{"line":9,"character":0},"end":{"line":16,"character":47}},"kind":2,"children":[{"selectionRange":{"start":{"line":9,"character":0},"end":{"line":9,"character":32}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":9,"character":0},"end":{"line":9,"character":32}}},{"selectionRange":{"start":{"line":10,"character":0},"end":{"line":10,"character":33}},"kind":2,"name":"import Prelude","range":{"start":{"line":10,"character":0},"end":{"line":10,"character":33}}},{"selectionRange":{"start":{"line":12,"character":0},"end":{"line":12,"character":36}},"kind":2,"name":"import Hedgehog","range":{"start":{"line":12,"character":0},"end":{"line":12,"character":36}}},{"selectionRange":{"start":{"line":13,"character":0},"end":{"line":13,"character":30}},"kind":2,"name":"import Test.OptParse","range":{"start":{"line":13,"character":0},"end":{"line":13,"character":30}}},{"selectionRange":{"start":{"line":15,"character":0},"end":{"line":15,"character":47}},"kind":2,"name":"import Hedgehog.Extras.Test.Base","range":{"start":{"line":15,"character":0},"end":{"line":15,"character":47}},"detail":"qualified"},{"selectionRange":{"start":{"line":16,"character":0},"end":{"line":16,"character":47}},"kind":2,"name":"import Hedgehog.Extras.Test.File","range":{"start":{"line":16,"character":0},"end":{"line":16,"character":47}},"detail":"qualified"}],"name":"imports","range":{"start":{"line":9,"character":0},"end":{"line":16,"character":47}}},{"selectionRange":{"start":{"line":21,"character":0},"end":{"line":21,"character":75}},"kind":12,"name":"txIn","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":75}}},{"selectionRange":{"start":{"line":24,"character":0},"end":{"line":24,"character":117}},"kind":12,"name":"txOut","range":{"start":{"line":24,"character":0},"end":{"line":24,"character":117}}},{"selectionRange":{"start":{"line":27,"character":0},"end":{"line":56,"character":45}},"kind":12,"name":"golden_shelleyTransactionAllMultiSigWitness","range":{"start":{"line":27,"character":0},"end":{"line":56,"character":45}}},{"selectionRange":{"start":{"line":60,"character":0},"end":{"line":85,"character":45}},"kind":12,"name":"golden_shelleyTransactionAnyMultiSigWitness","range":{"start":{"line":60,"character":0},"end":{"line":85,"character":45}}},{"selectionRange":{"start":{"line":88,"character":0},"end":{"line":113,"character":45}},"kind":12,"name":"golden_shelleyTransactionAtLeastMultiSigWitness","range":{"start":{"line":88,"character":0},"end":{"line":113,"character":45}}},{"selectionRange":{"start":{"line":116,"character":0},"end":{"line":141,"character":45}},"kind":12,"name":"golden_shelleyTransactionSigningKeyWitness","range":{"start":{"line":116,"character":0},"end":{"line":141,"character":45}}}],"name":"Test.Golden.Shelley.Transaction.CreateWitness","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":160}
2020-12-03 13:40:58.989259839 [ThreadId 10284] - finish: C:GetParsedModule (took 0.43s)
2020-12-03 13:40:58.98926898 [ThreadId 10227] - finish: C:GetParsedModule (took 0.43s)
2020-12-03 13:40:58.9892099 [ThreadId 10286] - finish: C:GetParsedModule (took 0.43s)
2020-12-03 13:40:58.990745441 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":3,"character":7},"end":{"line":3,"character":34}},"kind":1,"children":[{"selectionRange":{"start":{"line":15,"character":0},"end":{"line":52,"character":54}},"kind":2,"children":[{"selectionRange":{"start":{"line":15,"character":0},"end":{"line":15,"character":58}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":15,"character":0},"end":{"line":15,"character":58}}},{"selectionRange":{"start":{"line":16,"character":0},"end":{"line":16,"character":33}},"kind":2,"name":"import Prelude","range":{"start":{"line":16,"character":0},"end":{"line":16,"character":33}}},{"selectionRange":{"start":{"line":18,"character":0},"end":{"line":18,"character":53}},"kind":2,"name":"import Cardano.Api.Protocol","range":{"start":{"line":18,"character":0},"end":{"line":18,"character":53}}},{"selectionRange":{"start":{"line":19,"character":0},"end":{"line":19,"character":50}},"kind":2,"name":"import Cardano.Api.Typed","range":{"start":{"line":19,"character":0},"end":{"line":19,"character":50}}},{"selectionRange":{"start":{"line":21,"character":0},"end":{"line":21,"character":57}},"kind":2,"name":"import Cardano.Chain.Slotting","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":57}}},{"selectionRange":{"start":{"line":22,"character":0},"end":{"line":22,"character":64}},"kind":2,"name":"import Cardano.CLI.Mary.TxOutParser","range":{"start":{"line":22,"character":0},"end":{"line":22,"character":64}}},{"selectionRange":{"start":{"line":23,"character":0},"end":{"line":23,"character":58}},"kind":2,"name":"import Cardano.CLI.Mary.ValueParser","range":{"start":{"line":23,"character":0},"end":{"line":23,"character":58}}},{"selectionRange":{"start":{"line":24,"character":0},"end":{"line":24,"character":45}},"kind":2,"name":"import Cardano.CLI.Shelley.Commands","range":{"start":{"line":24,"character":0},"end":{"line":24,"character":45}}},{"selectionRange":{"start":{"line":25,"character":0},"end":{"line":27,"character":62}},"kind":2,"name":"import Cardano.CLI.Shelley.Key","range":{"start":{"line":25,"character":0},"end":{"line":27,"character":62}}},{"selectionRange":{"start":{"line":28,"character":0},"end":{"line":28,"character":34}},"kind":2,"name":"import Cardano.CLI.Types","range":{"start":{"line":28,"character":0},"end":{"line":28,"character":34}}},{"selectionRange":{"start":{"line":29,"character":0},"end":{"line":29,"character":42}},"kind":2,"name":"import Control.Monad.Fail","range":{"start":{"line":29,"character":0},"end":{"line":29,"character":42}}},{"selectionRange":{"start":{"line":30,"character":0},"end":{"line":30,"character":51}},"kind":2,"name":"import Data.Attoparsec.Combinator","range":{"start":{"line":30,"character":0},"end":{"line":30,"character":51}}},{"selectionRange":{"start":{"line":31,"character":0},"end":{"line":31,"character":42}},"kind":2,"name":"import Data.Time.Clock","range":{"start":{"line":31,"character":0},"end":{"line":31,"character":42}}},{"selectionRange":{"start":{"line":32,"character":0},"end":{"line":32,"character":90}},"kind":2,"name":"import Data.Time.Format","range":{"start":{"line":32,"character":0},"end":{"line":32,"character":90}}},{"selectionRange":{"start":{"line":33,"character":0},"end":{"line":33,"character":44}},"kind":2,"name":"import Network.Socket","range":{"start":{"line":33,"character":0},"end":{"line":33,"character":44}}},{"selectionRange":{"start":{"line":34,"character":0},"end":{"line":34,"character":49}},"kind":2,"name":"import Options.Applicative","range":{"start":{"line":34,"character":0},"end":{"line":34,"character":49}}},{"selectionRange":{"start":{"line":35,"character":0},"end":{"line":35,"character":70}},"kind":2,"name":"import Ouroboros.Consensus.BlockchainTime","range":{"start":{"line":35,"character":0},"end":{"line":35,"character":70}}},{"selectionRange":{"start":{"line":37,"character":0},"end":{"line":37,"character":45}},"kind":2,"name":"import Data.ByteString.Char8","range":{"start":{"line":37,"character":0},"end":{"line":37,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":38,"character":0},"end":{"line":38,"character":34}},"kind":2,"name":"import Data.Char","range":{"start":{"line":38,"character":0},"end":{"line":38,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":39,"character":0},"end":{"line":39,"character":30}},"kind":2,"name":"import Data.IP","range":{"start":{"line":39,"character":0},"end":{"line":39,"character":30}},"detail":"qualified"},{"selectionRange":{"start":{"line":40,"character":0},"end":{"line":40,"character":41}},"kind":2,"name":"import Data.List.NonEmpty","range":{"start":{"line":40,"character":0},"end":{"line":40,"character":41}},"detail":"qualified"},{"selectionRange":{"start":{"line":41,"character":0},"end":{"line":41,"character":32}},"kind":2,"name":"import Data.Set","range":{"start":{"line":41,"character":0},"end":{"line":41,"character":32}},"detail":"qualified"},{"selectionRange":{"start":{"line":42,"character":0},"end":{"line":42,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":42,"character":0},"end":{"line":42,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":43,"character":0},"end":{"line":43,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":43,"character":0},"end":{"line":43,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":45,"character":43}},"kind":2,"name":"import Options.Applicative","range":{"start":{"line":45,"character":0},"end":{"line":45,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":46,"character":0},"end":{"line":46,"character":57}},"kind":2,"name":"import Data.Attoparsec.ByteString.Char8","range":{"start":{"line":46,"character":0},"end":{"line":46,"character":57}},"detail":"qualified"},{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"kind":2,"name":"import Text.Parsec","range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":48,"character":0},"end":{"line":48,"character":45}},"kind":2,"name":"import Text.Parsec.String","range":{"start":{"line":48,"character":0},"end":{"line":48,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"kind":2,"name":"import Text.Parsec.Error","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":51,"character":0},"end":{"line":51,"character":57}},"kind":2,"name":"import Shelley.Spec.Ledger.BaseTypes","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":57}},"detail":"qualified"},{"selectionRange":{"start":{"line":52,"character":0},"end":{"line":52,"character":54}},"kind":2,"name":"import Shelley.Spec.Ledger.TxBody","range":{"start":{"line":52,"character":0},"end":{"line":52,"character":54}},"detail":"qualified"}],"name":"imports","range":{"start":{"line":15,"character":0},"end":{"line":52,"character":54}}},{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":93,"character":7}},"kind":12,"name":"parseShelleyCommands","range":{"start":{"line":59,"character":0},"end":{"line":93,"character":7}}},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":103,"character":7}},"kind":12,"name":"pTextViewCmd","range":{"start":{"line":96,"character":0},"end":{"line":103,"character":7}}},{"selectionRange":{"start":{"line":106,"character":0},"end":{"line":117,"character":5}},"kind":12,"name":"pCBORInFile","range":{"start":{"line":106,"character":0},"end":{"line":117,"character":5}}},{"selectionRange":{"start":{"line":120,"character":0},"end":{"line":161,"character":64}},"kind":12,"name":"pAddressCmd","range":{"start":{"line":120,"character":0},"end":{"line":161,"character":64}}},{"selectionRange":{"start":{"line":164,"character":0},"end":{"line":166,"character":64}},"kind":12,"name":"pPaymentVerificationKeyTextOrFile","range":{"start":{"line":164,"character":0},"end":{"line":166,"character":64}}},{"selectionRange":{"start":{"line":169,"character":0},"end":{"line":175,"character":7}},"kind":12,"name":"pPaymentVerificationKeyText","range":{"start":{"line":169,"character":0},"end":{"line":175,"character":7}}},{"selectionRange":{"start":{"line":178,"character":0},"end":{"line":191,"character":5}},"kind":12,"name":"pPaymentVerificationKeyFile","range":{"start":{"line":178,"character":0},"end":{"line":191,"character":5}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":199,"character":3}},"kind":12,"name":"pScript","range":{"start":{"line":194,"character":0},"end":{"line":199,"character":3}}},{"selectionRange":{"start":{"line":202,"character":0},"end":{"line":246,"character":51}},"kind":12,"name":"pStakeAddress","range":{"start":{"line":202,"character":0},"end":{"line":246,"character":51}}},{"selectionRange":{"start":{"line":249,"character":0},"end":{"line":457,"character":13}},"kind":12,"name":"pKeyCmd","range":{"start":{"line":249,"character":0},"end":{"line":457,"character":13}}},{"selectionRange":{"start":{"line":460,"character":0},"end":{"line":555,"character":50}},"kind":12,"name":"pTransaction","range":{"start":{"line":460,"character":0},"end":{"line":555,"character":50}}},{"selectionRange":{"start":{"line":559,"character":0},"end":{"line":621,"character":37}},"kind":12,"name":"pNodeCmd","range":{"start":{"line":559,"character":0},"end":{"line":621,"character":37}}},{"selectionRange":{"start":{"line":625,"character":0},"end":{"line":643,"character":89}},"kind":12,"name":"pPoolCmd","range":{"start":{"line":625,"character":0},"end":{"line":643,"character":89}}},{"selectionRange":{"start":{"line":647,"character":0},"end":{"line":717,"character":48}},"kind":12,"name":"pQueryCmd","range":{"start":{"line":647,"character":0},"end":{"line":717,"character":48}}},{"selectionRange":{"start":{"line":720,"character":0},"end":{"line":765,"character":60}},"kind":12,"name":"pGovernanceCmd","range":{"start":{"line":720,"character":0},"end":{"line":765,"character":60}}},{"selectionRange":{"start":{"line":768,"character":0},"end":{"line":773,"character":7}},"kind":12,"name":"pRewardAmt","range":{"start":{"line":768,"character":0},"end":{"line":773,"character":7}}},{"selectionRange":{"start":{"line":776,"character":0},"end":{"line":978,"character":11}},"kind":12,"name":"pGenesisCmd","range":{"start":{"line":776,"character":0},"end":{"line":978,"character":11}}},{"selectionRange":{"start":{"line":985,"character":0},"end":{"line":988,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":986,"character":4},"end":{"line":986,"character":9}},"kind":9,"name":"Input","range":{"start":{"line":986,"character":4},"end":{"line":986,"character":9}}},{"selectionRange":{"start":{"line":987,"character":4},"end":{"line":987,"character":10}},"kind":9,"name":"Output","range":{"start":{"line":987,"character":4},"end":{"line":987,"character":10}}}],"name":"FileDirection","range":{"start":{"line":985,"character":0},"end":{"line":988,"character":21}}},{"selectionRange":{"start":{"line":991,"character":0},"end":{"line":1007,"character":26}},"kind":12,"name":"pAddressKeyType","range":{"start":{"line":991,"character":0},"end":{"line":1007,"character":26}}},{"selectionRange":{"start":{"line":1011,"character":0},"end":{"line":1018,"character":7}},"kind":12,"name":"pProtocolParamsFile","range":{"start":{"line":1011,"character":0},"end":{"line":1018,"character":7}}},{"selectionRange":{"start":{"line":1021,"character":0},"end":{"line":1036,"character":5}},"kind":12,"name":"pCertificateFile","range":{"start":{"line":1021,"character":0},"end":{"line":1036,"character":5}}},{"selectionRange":{"start":{"line":1039,"character":0},"end":{"line":1046,"character":7}},"kind":12,"name":"pPoolMetaDataFile","range":{"start":{"line":1039,"character":0},"end":{"line":1046,"character":7}}},{"selectionRange":{"start":{"line":1049,"character":0},"end":{"line":1065,"character":31}},"kind":12,"name":"pTxMetadataJsonSchema","range":{"start":{"line":1049,"character":0},"end":{"line":1065,"character":31}}},{"selectionRange":{"start":{"line":1068,"character":0},"end":{"line":1089,"character":11}},"kind":12,"name":"pMetaDataFile","range":{"start":{"line":1068,"character":0},"end":{"line":1089,"character":11}}},{"selectionRange":{"start":{"line":1092,"character":0},"end":{"line":1103,"character":66}},"kind":12,"name":"pWithdrawal","range":{"start":{"line":1092,"character":0},"end":{"line":1103,"character":66}}},{"selectionRange":{"start":{"line":1107,"character":0},"end":{"line":1120,"character":3}},"kind":12,"name":"pUpdateProposalFile","range":{"start":{"line":1107,"character":0},"end":{"line":1120,"character":3}}},{"selectionRange":{"start":{"line":1124,"character":0},"end":{"line":1137,"character":5}},"kind":12,"name":"pColdSigningKeyFile","range":{"start":{"line":1124,"character":0},"end":{"line":1137,"character":5}}},{"selectionRange":{"start":{"line":1140,"character":0},"end":{"line":1155,"character":42}},"kind":12,"name":"pSomeWitnessSigningData","range":{"start":{"line":1140,"character":0},"end":{"line":1155,"character":42}}},{"selectionRange":{"start":{"line":1158,"character":0},"end":{"line":1165,"character":7}},"kind":12,"name":"pSigningKeyFile","range":{"start":{"line":1158,"character":0},"end":{"line":1165,"character":7}}},{"selectionRange":{"start":{"line":1168,"character":0},"end":{"line":1182,"character":40}},"kind":12,"name":"pWitnessSigningData","range":{"start":{"line":1168,"character":0},"end":{"line":1182,"character":40}}},{"selectionRange":{"start":{"line":1185,"character":0},"end":{"line":1191,"character":7}},"kind":12,"name":"pKesPeriod","range":{"start":{"line":1185,"character":0},"end":{"line":1191,"character":7}}},{"selectionRange":{"start":{"line":1194,"character":0},"end":{"line":1200,"character":7}},"kind":12,"name":"pEpochNo","range":{"start":{"line":1194,"character":0},"end":{"line":1200,"character":7}}},{"selectionRange":{"start":{"line":1204,"character":0},"end":{"line":1210,"character":7}},"kind":12,"name":"pEpochNoUpdateProp","range":{"start":{"line":1204,"character":0},"end":{"line":1210,"character":7}}},{"selectionRange":{"start":{"line":1213,"character":0},"end":{"line":1220,"character":7}},"kind":12,"name":"pGenesisFile","range":{"start":{"line":1213,"character":0},"end":{"line":1220,"character":7}}},{"selectionRange":{"start":{"line":1223,"character":0},"end":{"line":1236,"character":5}},"kind":12,"name":"pOperatorCertIssueCounterFile","range":{"start":{"line":1223,"character":0},"end":{"line":1236,"character":5}}},{"selectionRange":{"start":{"line":1240,"character":0},"end":{"line":1247,"character":5}},"kind":12,"name":"pOutputFormat","range":{"start":{"line":1240,"character":0},"end":{"line":1247,"character":5}}},{"selectionRange":{"start":{"line":1251,"character":0},"end":{"line":1259,"character":9}},"kind":12,"name":"pMaybeOutputFile","range":{"start":{"line":1251,"character":0},"end":{"line":1259,"character":9}}},{"selectionRange":{"start":{"line":1262,"character":0},"end":{"line":1269,"character":7}},"kind":12,"name":"pOutputFile","range":{"start":{"line":1262,"character":0},"end":{"line":1269,"character":7}}},{"selectionRange":{"start":{"line":1272,"character":0},"end":{"line":1275,"character":60}},"kind":12,"name":"pColdVerificationKeyOrFile","range":{"start":{"line":1272,"character":0},"end":{"line":1275,"character":60}}},{"selectionRange":{"start":{"line":1278,"character":0},"end":{"line":1291,"character":5}},"kind":12,"name":"pColdVerificationKeyFile","range":{"start":{"line":1278,"character":0},"end":{"line":1291,"character":5}}},{"selectionRange":{"start":{"line":1297,"character":0},"end":{"line":1303,"character":7}},"kind":12,"name":"pVerificationKey","range":{"start":{"line":1297,"character":0},"end":{"line":1303,"character":7}}},{"selectionRange":{"start":{"line":1309,"character":0},"end":{"line":1311,"character":62}},"kind":12,"name":"pVerificationKeyOrFile","range":{"start":{"line":1309,"character":0},"end":{"line":1311,"character":62}}},{"selectionRange":{"start":{"line":1314,"character":0},"end":{"line":1321,"character":7}},"kind":12,"name":"pVerificationKeyFile","range":{"start":{"line":1314,"character":0},"end":{"line":1321,"character":7}}},{"selectionRange":{"start":{"line":1324,"character":0},"end":{"line":1331,"character":7}},"kind":12,"name":"pExtendedVerificationKeyFile","range":{"start":{"line":1324,"character":0},"end":{"line":1331,"character":7}}},{"selectionRange":{"start":{"line":1334,"character":0},"end":{"line":1341,"character":7}},"kind":12,"name":"pGenesisVerificationKeyFile","range":{"start":{"line":1334,"character":0},"end":{"line":1341,"character":7}}},{"selectionRange":{"start":{"line":1344,"character":0},"end":{"line":1356,"character":18}},"kind":12,"name":"pGenesisVerificationKeyHash","range":{"start":{"line":1344,"character":0},"end":{"line":1356,"character":18}}},{"selectionRange":{"start":{"line":1359,"character":0},"end":{"line":1371,"character":18}},"kind":12,"name":"pGenesisVerificationKey","range":{"start":{"line":1359,"character":0},"end":{"line":1371,"character":18}}},{"selectionRange":{"start":{"line":1374,"character":0},"end":{"line":1376,"character":63}},"kind":12,"name":"pGenesisVerificationKeyOrFile","range":{"start":{"line":1374,"character":0},"end":{"line":1376,"character":63}}},{"selectionRange":{"start":{"line":1379,"character":0},"end":{"line":1381,"character":59}},"kind":12,"name":"pGenesisVerificationKeyOrHashOrFile","range":{"start":{"line":1379,"character":0},"end":{"line":1381,"character":59}}},{"selectionRange":{"start":{"line":1384,"character":0},"end":{"line":1391,"character":7}},"kind":12,"name":"pGenesisDelegateVerificationKeyFile","range":{"start":{"line":1384,"character":0},"end":{"line":1391,"character":7}}},{"selectionRange":{"start":{"line":1394,"character":0},"end":{"line":1406,"character":18}},"kind":12,"name":"pGenesisDelegateVerificationKeyHash","range":{"start":{"line":1394,"character":0},"end":{"line":1406,"character":18}}},{"selectionRange":{"start":{"line":1409,"character":0},"end":{"line":1423,"character":18}},"kind":12,"name":"pGenesisDelegateVerificationKey","range":{"start":{"line":1409,"character":0},"end":{"line":1423,"character":18}}},{"selectionRange":{"start":{"line":1427,"character":0},"end":{"line":1429,"character":71}},"kind":12,"name":"pGenesisDelegateVerificationKeyOrFile","range":{"start":{"line":1427,"character":0},"end":{"line":1429,"character":71}}},{"selectionRange":{"start":{"line":1433,"character":0},"end":{"line":1435,"character":67}},"kind":12,"name":"pGenesisDelegateVerificationKeyOrHashOrFile","range":{"start":{"line":1433,"character":0},"end":{"line":1435,"character":67}}},{"selectionRange":{"start":{"line":1438,"character":0},"end":{"line":1440,"character":59}},"kind":12,"name":"pKesVerificationKeyOrFile","range":{"start":{"line":1438,"character":0},"end":{"line":1440,"character":59}}},{"selectionRange":{"start":{"line":1443,"character":0},"end":{"line":1469,"character":66}},"kind":12,"name":"pKesVerificationKey","range":{"start":{"line":1443,"character":0},"end":{"line":1469,"character":66}}},{"selectionRange":{"start":{"line":1472,"character":0},"end":{"line":1485,"character":5}},"kind":12,"name":"pKesVerificationKeyFile","range":{"start":{"line":1472,"character":0},"end":{"line":1485,"character":5}}},{"selectionRange":{"start":{"line":1488,"character":0},"end":{"line":1496,"character":7}},"kind":12,"name":"pNetworkId","range":{"start":{"line":1488,"character":0},"end":{"line":1496,"character":7}}},{"selectionRange":{"start":{"line":1499,"character":0},"end":{"line":1505,"character":7}},"kind":12,"name":"pTestnetMagic","range":{"start":{"line":1499,"character":0},"end":{"line":1505,"character":7}}},{"selectionRange":{"start":{"line":1508,"character":0},"end":{"line":1514,"character":5}},"kind":12,"name":"pTxSubmitFile","range":{"start":{"line":1508,"character":0},"end":{"line":1514,"character":5}}},{"selectionRange":{"start":{"line":1517,"character":0},"end":{"line":1537,"character":3}},"kind":12,"name":"pCardanoEra","range":{"start":{"line":1517,"character":0},"end":{"line":1537,"character":3}}},{"selectionRange":{"start":{"line":1540,"character":0},"end":{"line":1545,"character":5}},"kind":12,"name":"pTxIn","range":{"start":{"line":1540,"character":0},"end":{"line":1545,"character":5}}},{"selectionRange":{"start":{"line":1548,"character":0},"end":{"line":1548,"character":63}},"kind":12,"name":"parseTxIn","range":{"start":{"line":1548,"character":0},"end":{"line":1548,"character":63}}},{"selectionRange":{"start":{"line":1551,"character":0},"end":{"line":1556,"character":5}},"kind":12,"name":"renderTxIn","range":{"start":{"line":1551,"character":0},"end":{"line":1556,"character":5}}},{"selectionRange":{"start":{"line":1559,"character":0},"end":{"line":1563,"character":71}},"kind":12,"name":"parseTxId","range":{"start":{"line":1559,"character":0},"end":{"line":1563,"character":71}}},{"selectionRange":{"start":{"line":1566,"character":0},"end":{"line":1566,"character":35}},"kind":12,"name":"parseTxIx","range":{"start":{"line":1566,"character":0},"end":{"line":1566,"character":35}}},{"selectionRange":{"start":{"line":1570,"character":0},"end":{"line":1578,"character":7}},"kind":12,"name":"pTxOut","range":{"start":{"line":1570,"character":0},"end":{"line":1578,"character":7}}},{"selectionRange":{"start":{"line":1581,"character":0},"end":{"line":1587,"character":7}},"kind":12,"name":"pMintMultiAsset","range":{"start":{"line":1581,"character":0},"end":{"line":1587,"character":7}}},{"selectionRange":{"start":{"line":1590,"character":0},"end":{"line":1596,"character":7}},"kind":12,"name":"pTxLowerBound","range":{"start":{"line":1590,"character":0},"end":{"line":1596,"character":7}}},{"selectionRange":{"start":{"line":1599,"character":0},"end":{"line":1612,"character":5}},"kind":12,"name":"pTxUpperBound","range":{"start":{"line":1599,"character":0},"end":{"line":1612,"character":5}}},{"selectionRange":{"start":{"line":1615,"character":0},"end":{"line":1621,"character":7}},"kind":12,"name":"pTxFee","range":{"start":{"line":1615,"character":0},"end":{"line":1621,"character":7}}},{"selectionRange":{"start":{"line":1624,"character":0},"end":{"line":1631,"character":7}},"kind":12,"name":"pWitnessFile","range":{"start":{"line":1624,"character":0},"end":{"line":1631,"character":7}}},{"selectionRange":{"start":{"line":1634,"character":0},"end":{"line":1652,"character":28}},"kind":12,"name":"pTxBodyFile","range":{"start":{"line":1634,"character":0},"end":{"line":1652,"character":28}}},{"selectionRange":{"start":{"line":1656,"character":0},"end":{"line":1674,"character":28}},"kind":12,"name":"pTxFile","range":{"start":{"line":1656,"character":0},"end":{"line":1674,"character":28}}},{"selectionRange":{"start":{"line":1677,"character":0},"end":{"line":1683,"character":7}},"kind":12,"name":"pTxInCount","range":{"start":{"line":1677,"character":0},"end":{"line":1683,"character":7}}},{"selectionRange":{"start":{"line":1686,"character":0},"end":{"line":1692,"character":7}},"kind":12,"name":"pTxOutCount","range":{"start":{"line":1686,"character":0},"end":{"line":1692,"character":7}}},{"selectionRange":{"start":{"line":1695,"character":0},"end":{"line":1701,"character":7}},"kind":12,"name":"pTxShelleyWitnessCount","range":{"start":{"line":1695,"character":0},"end":{"line":1701,"character":7}}},{"selectionRange":{"start":{"line":1704,"character":0},"end":{"line":1711,"character":7}},"kind":12,"name":"pTxByronWitnessCount","range":{"start":{"line":1704,"character":0},"end":{"line":1711,"character":7}}},{"selectionRange":{"start":{"line":1714,"character":0},"end":{"line":1718,"character":40}},"kind":12,"name":"pQueryFilter","range":{"start":{"line":1714,"character":0},"end":{"line":1718,"character":40}}},{"selectionRange":{"start":{"line":1721,"character":0},"end":{"line":1726,"character":7}},"kind":12,"name":"pFilterByAddress","range":{"start":{"line":1721,"character":0},"end":{"line":1726,"character":7}}},{"selectionRange":{"start":{"line":1729,"character":0},"end":{"line":1734,"character":7}},"kind":12,"name":"pFilterByStakeAddress","range":{"start":{"line":1729,"character":0},"end":{"line":1734,"character":7}}},{"selectionRange":{"start":{"line":1737,"character":0},"end":{"line":1749,"character":19}},"kind":12,"name":"pByronAddress","range":{"start":{"line":1737,"character":0},"end":{"line":1749,"character":19}}},{"selectionRange":{"start":{"line":1752,"character":0},"end":{"line":1758,"character":7}},"kind":12,"name":"pAddress","range":{"start":{"line":1752,"character":0},"end":{"line":1758,"character":7}}},{"selectionRange":{"start":{"line":1761,"character":0},"end":{"line":1763,"character":61}},"kind":12,"name":"pStakeVerificationKeyOrFile","range":{"start":{"line":1761,"character":0},"end":{"line":1763,"character":61}}},{"selectionRange":{"start":{"line":1766,"character":0},"end":{"line":1772,"character":7}},"kind":12,"name":"pStakeVerificationKey","range":{"start":{"line":1766,"character":0},"end":{"line":1772,"character":7}}},{"selectionRange":{"start":{"line":1775,"character":0},"end":{"line":1788,"character":5}},"kind":12,"name":"pStakeVerificationKeyFile","range":{"start":{"line":1775,"character":0},"end":{"line":1788,"character":5}}},{"selectionRange":{"start":{"line":1792,"character":0},"end":{"line":1805,"character":5}},"kind":12,"name":"pStakePoolVerificationKeyFile","range":{"start":{"line":1792,"character":0},"end":{"line":1805,"character":5}}},{"selectionRange":{"start":{"line":1808,"character":0},"end":{"line":1829,"character":19}},"kind":12,"name":"pStakePoolVerificationKeyHash","range":{"start":{"line":1808,"character":0},"end":{"line":1829,"character":19}}},{"selectionRange":{"start":{"line":1832,"character":0},"end":{"line":1838,"character":7}},"kind":12,"name":"pStakePoolVerificationKey","range":{"start":{"line":1832,"character":0},"end":{"line":1838,"character":7}}},{"selectionRange":{"start":{"line":1842,"character":0},"end":{"line":1844,"character":65}},"kind":12,"name":"pStakePoolVerificationKeyOrFile","range":{"start":{"line":1842,"character":0},"end":{"line":1844,"character":65}}},{"selectionRange":{"start":{"line":1848,"character":0},"end":{"line":1850,"character":61}},"kind":12,"name":"pStakePoolVerificationKeyOrHashOrFile","range":{"start":{"line":1848,"character":0},"end":{"line":1850,"character":61}}},{"selectionRange":{"start":{"line":1853,"character":0},"end":{"line":1860,"character":7}},"kind":12,"name":"pVrfVerificationKeyFile","range":{"start":{"line":1853,"character":0},"end":{"line":1860,"character":7}}},{"selectionRange":{"start":{"line":1863,"character":0},"end":{"line":1875,"character":18}},"kind":12,"name":"pVrfVerificationKeyHash","range":{"start":{"line":1863,"character":0},"end":{"line":1875,"character":18}}},{"selectionRange":{"start":{"line":1878,"character":0},"end":{"line":1884,"character":7}},"kind":12,"name":"pVrfVerificationKey","range":{"start":{"line":1878,"character":0},"end":{"line":1884,"character":7}}},{"selectionRange":{"start":{"line":1887,"character":0},"end":{"line":1889,"character":59}},"kind":12,"name":"pVrfVerificationKeyOrFile","range":{"start":{"line":1887,"character":0},"end":{"line":1889,"character":59}}},{"selectionRange":{"start":{"line":1892,"character":0},"end":{"line":1894,"character":55}},"kind":12,"name":"pVrfVerificationKeyOrHashOrFile","range":{"start":{"line":1892,"character":0},"end":{"line":1894,"character":55}}},{"selectionRange":{"start":{"line":1897,"character":0},"end":{"line":1910,"character":5}},"kind":12,"name":"pRewardAcctVerificationKeyFile","range":{"start":{"line":1897,"character":0},"end":{"line":1910,"character":5}}},{"selectionRange":{"start":{"line":1913,"character":0},"end":{"line":1919,"character":7}},"kind":12,"name":"pRewardAcctVerificationKey","range":{"start":{"line":1913,"character":0},"end":{"line":1919,"character":7}}},{"selectionRange":{"start":{"line":1922,"character":0},"end":{"line":1924,"character":66}},"kind":12,"name":"pRewardAcctVerificationKeyOrFile","range":{"start":{"line":1922,"character":0},"end":{"line":1924,"character":66}}},{"selectionRange":{"start":{"line":1927,"character":0},"end":{"line":1940,"character":5}},"kind":12,"name":"pPoolOwnerVerificationKeyFile","range":{"start":{"line":1927,"character":0},"end":{"line":1940,"character":5}}},{"selectionRange":{"start":{"line":1943,"character":0},"end":{"line":1949,"character":7}},"kind":12,"name":"pPoolOwnerVerificationKey","range":{"start":{"line":1943,"character":0},"end":{"line":1949,"character":7}}},{"selectionRange":{"start":{"line":1952,"character":0},"end":{"line":1954,"character":65}},"kind":12,"name":"pPoolOwnerVerificationKeyOrFile","range":{"start":{"line":1952,"character":0},"end":{"line":1954,"character":65}}},{"selectionRange":{"start":{"line":1957,"character":0},"end":{"line":1962,"character":7}},"kind":12,"name":"pPoolPledge","range":{"start":{"line":1957,"character":0},"end":{"line":1962,"character":7}}},{"selectionRange":{"start":{"line":1966,"character":0},"end":{"line":1971,"character":7}},"kind":12,"name":"pPoolCost","range":{"start":{"line":1966,"character":0},"end":{"line":1971,"character":7}}},{"selectionRange":{"start":{"line":1974,"character":0},"end":{"line":1979,"character":7}},"kind":12,"name":"pPoolMargin","range":{"start":{"line":1974,"character":0},"end":{"line":1979,"character":7}}},{"selectionRange":{"start":{"line":1982,"character":0},"end":{"line":1982,"character":70}},"kind":12,"name":"pPoolRelay","range":{"start":{"line":1982,"character":0},"end":{"line":1982,"character":70}}},{"selectionRange":{"start":{"line":1985,"character":0},"end":{"line":1994,"character":16}},"kind":12,"name":"pMultiHostName","range":{"start":{"line":1985,"character":0},"end":{"line":1994,"character":16}}},{"selectionRange":{"start":{"line":1997,"character":0},"end":{"line":2006,"character":16}},"kind":12,"name":"pSingleHostName","range":{"start":{"line":1997,"character":0},"end":{"line":2006,"character":16}}},{"selectionRange":{"start":{"line":2009,"character":0},"end":{"line":2013,"character":73}},"kind":12,"name":"eDNSName","range":{"start":{"line":2009,"character":0},"end":{"line":2013,"character":73}}},{"selectionRange":{"start":{"line":2016,"character":0},"end":{"line":2031,"character":56}},"kind":12,"name":"pSingleHostAddress","range":{"start":{"line":2016,"character":0},"end":{"line":2031,"character":56}}},{"selectionRange":{"start":{"line":2036,"character":0},"end":{"line":2040,"character":11}},"kind":12,"name":"pIpV4","range":{"start":{"line":2036,"character":0},"end":{"line":2040,"character":11}}},{"selectionRange":{"start":{"line":2043,"character":0},"end":{"line":2047,"character":12}},"kind":12,"name":"pIpV6","range":{"start":{"line":2043,"character":0},"end":{"line":2047,"character":12}}},{"selectionRange":{"start":{"line":2050,"character":0},"end":{"line":2054,"character":12}},"kind":12,"name":"pPort","range":{"start":{"line":2050,"character":0},"end":{"line":2054,"character":12}}},{"selectionRange":{"start":{"line":2057,"character":0},"end":{"line":2061,"character":32}},"kind":12,"name":"pStakePoolMetadataReference","range":{"start":{"line":2057,"character":0},"end":{"line":2061,"character":32}}},{"selectionRange":{"start":{"line":2064,"character":0},"end":{"line":2069,"character":5}},"kind":12,"name":"pStakePoolMetadataUrl","range":{"start":{"line":2064,"character":0},"end":{"line":2069,"character":5}}},{"selectionRange":{"start":{"line":2072,"character":0},"end":{"line":2082,"character":27}},"kind":12,"name":"pStakePoolMetadataHash","range":{"start":{"line":2072,"character":0},"end":{"line":2082,"character":27}}},{"selectionRange":{"start":{"line":2085,"character":0},"end":{"line":2097,"character":19}},"kind":12,"name":"pStakePoolRegistrationCert","range":{"start":{"line":2085,"character":0},"end":{"line":2097,"character":19}}},{"selectionRange":{"start":{"line":2100,"character":0},"end":{"line":2104,"character":19}},"kind":12,"name":"pStakePoolRetirementCert","range":{"start":{"line":2100,"character":0},"end":{"line":2104,"character":19}}},{"selectionRange":{"start":{"line":2108,"character":0},"end":{"line":2126,"character":35}},"kind":12,"name":"pShelleyProtocolParametersUpdate","range":{"start":{"line":2108,"character":0},"end":{"line":2126,"character":35}}},{"selectionRange":{"start":{"line":2129,"character":0},"end":{"line":2134,"character":7}},"kind":12,"name":"pMinFeeLinearFactor","range":{"start":{"line":2129,"character":0},"end":{"line":2134,"character":7}}},{"selectionRange":{"start":{"line":2137,"character":0},"end":{"line":2142,"character":7}},"kind":12,"name":"pMinFeeConstantFactor","range":{"start":{"line":2137,"character":0},"end":{"line":2142,"character":7}}},{"selectionRange":{"start":{"line":2145,"character":0},"end":{"line":2150,"character":7}},"kind":12,"name":"pMinUTxOValue","range":{"start":{"line":2145,"character":0},"end":{"line":2150,"character":7}}},{"selectionRange":{"start":{"line":2153,"character":0},"end":{"line":2158,"character":7}},"kind":12,"name":"pMinPoolCost","range":{"start":{"line":2153,"character":0},"end":{"line":2158,"character":7}}},{"selectionRange":{"start":{"line":2161,"character":0},"end":{"line":2166,"character":7}},"kind":12,"name":"pMaxBodySize","range":{"start":{"line":2161,"character":0},"end":{"line":2166,"character":7}}},{"selectionRange":{"start":{"line":2169,"character":0},"end":{"line":2174,"character":7}},"kind":12,"name":"pMaxTransactionSize","range":{"start":{"line":2169,"character":0},"end":{"line":2174,"character":7}}},{"selectionRange":{"start":{"line":2177,"character":0},"end":{"line":2182,"character":7}},"kind":12,"name":"pMaxBlockHeaderSize","range":{"start":{"line":2177,"character":0},"end":{"line":2182,"character":7}}},{"selectionRange":{"start":{"line":2185,"character":0},"end":{"line":2190,"character":7}},"kind":12,"name":"pKeyRegistDeposit","range":{"start":{"line":2185,"character":0},"end":{"line":2190,"character":7}}},{"selectionRange":{"start":{"line":2193,"character":0},"end":{"line":2198,"character":7}},"kind":12,"name":"pPoolDeposit","range":{"start":{"line":2193,"character":0},"end":{"line":2198,"character":7}}},{"selectionRange":{"start":{"line":2201,"character":0},"end":{"line":2207,"character":7}},"kind":12,"name":"pEpochBoundRetirement","range":{"start":{"line":2201,"character":0},"end":{"line":2207,"character":7}}},{"selectionRange":{"start":{"line":2210,"character":0},"end":{"line":2215,"character":7}},"kind":12,"name":"pNumberOfPools","range":{"start":{"line":2210,"character":0},"end":{"line":2215,"character":7}}},{"selectionRange":{"start":{"line":2218,"character":0},"end":{"line":2223,"character":7}},"kind":12,"name":"pPoolInfluence","range":{"start":{"line":2218,"character":0},"end":{"line":2223,"character":7}}},{"selectionRange":{"start":{"line":2226,"character":0},"end":{"line":2231,"character":7}},"kind":12,"name":"pTreasuryExpansion","range":{"start":{"line":2226,"character":0},"end":{"line":2231,"character":7}}},{"selectionRange":{"start":{"line":2234,"character":0},"end":{"line":2239,"character":7}},"kind":12,"name":"pMonetaryExpansion","range":{"start":{"line":2234,"character":0},"end":{"line":2239,"character":7}}},{"selectionRange":{"start":{"line":2242,"character":0},"end":{"line":2247,"character":7}},"kind":12,"name":"pDecentralParam","range":{"start":{"line":2242,"character":0},"end":{"line":2247,"character":7}}},{"selectionRange":{"start":{"line":2250,"character":0},"end":{"line":2267,"character":55}},"kind":12,"name":"pExtraEntropy","range":{"start":{"line":2250,"character":0},"end":{"line":2267,"character":55}}},{"selectionRange":{"start":{"line":2270,"character":0},"end":{"line":2318,"character":34}},"kind":12,"name":"pProtocol","range":{"start":{"line":2270,"character":0},"end":{"line":2318,"character":34}}},{"selectionRange":{"start":{"line":2321,"character":0},"end":{"line":2336,"character":9}},"kind":12,"name":"pProtocolVersion","range":{"start":{"line":2321,"character":0},"end":{"line":2336,"character":9}}},{"selectionRange":{"start":{"line":2343,"character":0},"end":{"line":2343,"character":41}},"kind":12,"name":"parseLovelace","range":{"start":{"line":2343,"character":0},"end":{"line":2343,"character":41}}},{"selectionRange":{"start":{"line":2346,"character":0},"end":{"line":2350,"character":28}},"kind":12,"name":"parseAddressAny","range":{"start":{"line":2346,"character":0},"end":{"line":2350,"character":28}}},{"selectionRange":{"start":{"line":2353,"character":0},"end":{"line":2357,"character":28}},"kind":12,"name":"parseStakeAddress","range":{"start":{"line":2353,"character":0},"end":{"line":2357,"character":28}}},{"selectionRange":{"start":{"line":2360,"character":0},"end":{"line":2368,"character":17}},"kind":12,"name":"lexPlausibleAddressString","range":{"start":{"line":2360,"character":0},"end":{"line":2368,"character":17}}},{"selectionRange":{"start":{"line":2380,"character":0},"end":{"line":2391,"character":77}},"kind":12,"name":"readVerificationKey","range":{"start":{"line":2380,"character":0},"end":{"line":2391,"character":77}}},{"selectionRange":{"start":{"line":2394,"character":0},"end":{"line":2402,"character":68}},"kind":12,"name":"readOutputFormat","range":{"start":{"line":2394,"character":0},"end":{"line":2402,"character":68}}},{"selectionRange":{"start":{"line":2405,"character":0},"end":{"line":2406,"character":44}},"kind":12,"name":"readURIOfMaxLength","range":{"start":{"line":2405,"character":0},"end":{"line":2406,"character":44}}},{"selectionRange":{"start":{"line":2409,"character":0},"end":{"line":2417,"character":25}},"kind":12,"name":"readStringOfMaxLength","range":{"start":{"line":2409,"character":0},"end":{"line":2417,"character":25}}},{"selectionRange":{"start":{"line":2420,"character":0},"end":{"line":2425,"character":72}},"kind":12,"name":"readRationalUnitInterval","range":{"start":{"line":2420,"character":0},"end":{"line":2425,"character":72}}},{"selectionRange":{"start":{"line":2428,"character":0},"end":{"line":2428,"character":66}},"kind":12,"name":"readRational","range":{"start":{"line":2428,"character":0},"end":{"line":2428,"character":66}}},{"selectionRange":{"start":{"line":2431,"character":0},"end":{"line":2432,"character":71}},"kind":12,"name":"readerFromAttoParser","range":{"start":{"line":2431,"character":0},"end":{"line":2432,"character":71}}},{"selectionRange":{"start":{"line":2435,"character":0},"end":{"line":2443,"character":57}},"kind":12,"name":"readerFromParsecParser","range":{"start":{"line":2435,"character":0},"end":{"line":2443,"character":57}}}],"name":"Cardano.CLI.Shelley.Parsers","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":166}
2020-12-03 13:40:58.996527959 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":3,"character":7},"end":{"line":3,"character":34}},"kind":1,"children":[{"selectionRange":{"start":{"line":15,"character":0},"end":{"line":52,"character":54}},"kind":2,"children":[{"selectionRange":{"start":{"line":15,"character":0},"end":{"line":15,"character":58}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":15,"character":0},"end":{"line":15,"character":58}}},{"selectionRange":{"start":{"line":16,"character":0},"end":{"line":16,"character":33}},"kind":2,"name":"import Prelude","range":{"start":{"line":16,"character":0},"end":{"line":16,"character":33}}},{"selectionRange":{"start":{"line":18,"character":0},"end":{"line":18,"character":53}},"kind":2,"name":"import Cardano.Api.Protocol","range":{"start":{"line":18,"character":0},"end":{"line":18,"character":53}}},{"selectionRange":{"start":{"line":19,"character":0},"end":{"line":19,"character":50}},"kind":2,"name":"import Cardano.Api.Typed","range":{"start":{"line":19,"character":0},"end":{"line":19,"character":50}}},{"selectionRange":{"start":{"line":21,"character":0},"end":{"line":21,"character":57}},"kind":2,"name":"import Cardano.Chain.Slotting","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":57}}},{"selectionRange":{"start":{"line":22,"character":0},"end":{"line":22,"character":64}},"kind":2,"name":"import Cardano.CLI.Mary.TxOutParser","range":{"start":{"line":22,"character":0},"end":{"line":22,"character":64}}},{"selectionRange":{"start":{"line":23,"character":0},"end":{"line":23,"character":58}},"kind":2,"name":"import Cardano.CLI.Mary.ValueParser","range":{"start":{"line":23,"character":0},"end":{"line":23,"character":58}}},{"selectionRange":{"start":{"line":24,"character":0},"end":{"line":24,"character":45}},"kind":2,"name":"import Cardano.CLI.Shelley.Commands","range":{"start":{"line":24,"character":0},"end":{"line":24,"character":45}}},{"selectionRange":{"start":{"line":25,"character":0},"end":{"line":27,"character":62}},"kind":2,"name":"import Cardano.CLI.Shelley.Key","range":{"start":{"line":25,"character":0},"end":{"line":27,"character":62}}},{"selectionRange":{"start":{"line":28,"character":0},"end":{"line":28,"character":34}},"kind":2,"name":"import Cardano.CLI.Types","range":{"start":{"line":28,"character":0},"end":{"line":28,"character":34}}},{"selectionRange":{"start":{"line":29,"character":0},"end":{"line":29,"character":42}},"kind":2,"name":"import Control.Monad.Fail","range":{"start":{"line":29,"character":0},"end":{"line":29,"character":42}}},{"selectionRange":{"start":{"line":30,"character":0},"end":{"line":30,"character":51}},"kind":2,"name":"import Data.Attoparsec.Combinator","range":{"start":{"line":30,"character":0},"end":{"line":30,"character":51}}},{"selectionRange":{"start":{"line":31,"character":0},"end":{"line":31,"character":42}},"kind":2,"name":"import Data.Time.Clock","range":{"start":{"line":31,"character":0},"end":{"line":31,"character":42}}},{"selectionRange":{"start":{"line":32,"character":0},"end":{"line":32,"character":90}},"kind":2,"name":"import Data.Time.Format","range":{"start":{"line":32,"character":0},"end":{"line":32,"character":90}}},{"selectionRange":{"start":{"line":33,"character":0},"end":{"line":33,"character":44}},"kind":2,"name":"import Network.Socket","range":{"start":{"line":33,"character":0},"end":{"line":33,"character":44}}},{"selectionRange":{"start":{"line":34,"character":0},"end":{"line":34,"character":49}},"kind":2,"name":"import Options.Applicative","range":{"start":{"line":34,"character":0},"end":{"line":34,"character":49}}},{"selectionRange":{"start":{"line":35,"character":0},"end":{"line":35,"character":70}},"kind":2,"name":"import Ouroboros.Consensus.BlockchainTime","range":{"start":{"line":35,"character":0},"end":{"line":35,"character":70}}},{"selectionRange":{"start":{"line":37,"character":0},"end":{"line":37,"character":45}},"kind":2,"name":"import Data.ByteString.Char8","range":{"start":{"line":37,"character":0},"end":{"line":37,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":38,"character":0},"end":{"line":38,"character":34}},"kind":2,"name":"import Data.Char","range":{"start":{"line":38,"character":0},"end":{"line":38,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":39,"character":0},"end":{"line":39,"character":30}},"kind":2,"name":"import Data.IP","range":{"start":{"line":39,"character":0},"end":{"line":39,"character":30}},"detail":"qualified"},{"selectionRange":{"start":{"line":40,"character":0},"end":{"line":40,"character":41}},"kind":2,"name":"import Data.List.NonEmpty","range":{"start":{"line":40,"character":0},"end":{"line":40,"character":41}},"detail":"qualified"},{"selectionRange":{"start":{"line":41,"character":0},"end":{"line":41,"character":32}},"kind":2,"name":"import Data.Set","range":{"start":{"line":41,"character":0},"end":{"line":41,"character":32}},"detail":"qualified"},{"selectionRange":{"start":{"line":42,"character":0},"end":{"line":42,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":42,"character":0},"end":{"line":42,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":43,"character":0},"end":{"line":43,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":43,"character":0},"end":{"line":43,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":45,"character":43}},"kind":2,"name":"import Options.Applicative","range":{"start":{"line":45,"character":0},"end":{"line":45,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":46,"character":0},"end":{"line":46,"character":57}},"kind":2,"name":"import Data.Attoparsec.ByteString.Char8","range":{"start":{"line":46,"character":0},"end":{"line":46,"character":57}},"detail":"qualified"},{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"kind":2,"name":"import Text.Parsec","range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":48,"character":0},"end":{"line":48,"character":45}},"kind":2,"name":"import Text.Parsec.String","range":{"start":{"line":48,"character":0},"end":{"line":48,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"kind":2,"name":"import Text.Parsec.Error","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":51,"character":0},"end":{"line":51,"character":57}},"kind":2,"name":"import Shelley.Spec.Ledger.BaseTypes","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":57}},"detail":"qualified"},{"selectionRange":{"start":{"line":52,"character":0},"end":{"line":52,"character":54}},"kind":2,"name":"import Shelley.Spec.Ledger.TxBody","range":{"start":{"line":52,"character":0},"end":{"line":52,"character":54}},"detail":"qualified"}],"name":"imports","range":{"start":{"line":15,"character":0},"end":{"line":52,"character":54}}},{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":93,"character":7}},"kind":12,"name":"parseShelleyCommands","range":{"start":{"line":59,"character":0},"end":{"line":93,"character":7}}},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":103,"character":7}},"kind":12,"name":"pTextViewCmd","range":{"start":{"line":96,"character":0},"end":{"line":103,"character":7}}},{"selectionRange":{"start":{"line":106,"character":0},"end":{"line":117,"character":5}},"kind":12,"name":"pCBORInFile","range":{"start":{"line":106,"character":0},"end":{"line":117,"character":5}}},{"selectionRange":{"start":{"line":120,"character":0},"end":{"line":161,"character":64}},"kind":12,"name":"pAddressCmd","range":{"start":{"line":120,"character":0},"end":{"line":161,"character":64}}},{"selectionRange":{"start":{"line":164,"character":0},"end":{"line":166,"character":64}},"kind":12,"name":"pPaymentVerificationKeyTextOrFile","range":{"start":{"line":164,"character":0},"end":{"line":166,"character":64}}},{"selectionRange":{"start":{"line":169,"character":0},"end":{"line":175,"character":7}},"kind":12,"name":"pPaymentVerificationKeyText","range":{"start":{"line":169,"character":0},"end":{"line":175,"character":7}}},{"selectionRange":{"start":{"line":178,"character":0},"end":{"line":191,"character":5}},"kind":12,"name":"pPaymentVerificationKeyFile","range":{"start":{"line":178,"character":0},"end":{"line":191,"character":5}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":199,"character":3}},"kind":12,"name":"pScript","range":{"start":{"line":194,"character":0},"end":{"line":199,"character":3}}},{"selectionRange":{"start":{"line":202,"character":0},"end":{"line":246,"character":51}},"kind":12,"name":"pStakeAddress","range":{"start":{"line":202,"character":0},"end":{"line":246,"character":51}}},{"selectionRange":{"start":{"line":249,"character":0},"end":{"line":457,"character":13}},"kind":12,"name":"pKeyCmd","range":{"start":{"line":249,"character":0},"end":{"line":457,"character":13}}},{"selectionRange":{"start":{"line":460,"character":0},"end":{"line":555,"character":50}},"kind":12,"name":"pTransaction","range":{"start":{"line":460,"character":0},"end":{"line":555,"character":50}}},{"selectionRange":{"start":{"line":559,"character":0},"end":{"line":621,"character":37}},"kind":12,"name":"pNodeCmd","range":{"start":{"line":559,"character":0},"end":{"line":621,"character":37}}},{"selectionRange":{"start":{"line":625,"character":0},"end":{"line":643,"character":89}},"kind":12,"name":"pPoolCmd","range":{"start":{"line":625,"character":0},"end":{"line":643,"character":89}}},{"selectionRange":{"start":{"line":647,"character":0},"end":{"line":717,"character":48}},"kind":12,"name":"pQueryCmd","range":{"start":{"line":647,"character":0},"end":{"line":717,"character":48}}},{"selectionRange":{"start":{"line":720,"character":0},"end":{"line":765,"character":60}},"kind":12,"name":"pGovernanceCmd","range":{"start":{"line":720,"character":0},"end":{"line":765,"character":60}}},{"selectionRange":{"start":{"line":768,"character":0},"end":{"line":773,"character":7}},"kind":12,"name":"pRewardAmt","range":{"start":{"line":768,"character":0},"end":{"line":773,"character":7}}},{"selectionRange":{"start":{"line":776,"character":0},"end":{"line":978,"character":11}},"kind":12,"name":"pGenesisCmd","range":{"start":{"line":776,"character":0},"end":{"line":978,"character":11}}},{"selectionRange":{"start":{"line":985,"character":0},"end":{"line":988,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":986,"character":4},"end":{"line":986,"character":9}},"kind":9,"name":"Input","range":{"start":{"line":986,"character":4},"end":{"line":986,"character":9}}},{"selectionRange":{"start":{"line":987,"character":4},"end":{"line":987,"character":10}},"kind":9,"name":"Output","range":{"start":{"line":987,"character":4},"end":{"line":987,"character":10}}}],"name":"FileDirection","range":{"start":{"line":985,"character":0},"end":{"line":988,"character":21}}},{"selectionRange":{"start":{"line":991,"character":0},"end":{"line":1007,"character":26}},"kind":12,"name":"pAddressKeyType","range":{"start":{"line":991,"character":0},"end":{"line":1007,"character":26}}},{"selectionRange":{"start":{"line":1011,"character":0},"end":{"line":1018,"character":7}},"kind":12,"name":"pProtocolParamsFile","range":{"start":{"line":1011,"character":0},"end":{"line":1018,"character":7}}},{"selectionRange":{"start":{"line":1021,"character":0},"end":{"line":1036,"character":5}},"kind":12,"name":"pCertificateFile","range":{"start":{"line":1021,"character":0},"end":{"line":1036,"character":5}}},{"selectionRange":{"start":{"line":1039,"character":0},"end":{"line":1046,"character":7}},"kind":12,"name":"pPoolMetaDataFile","range":{"start":{"line":1039,"character":0},"end":{"line":1046,"character":7}}},{"selectionRange":{"start":{"line":1049,"character":0},"end":{"line":1065,"character":31}},"kind":12,"name":"pTxMetadataJsonSchema","range":{"start":{"line":1049,"character":0},"end":{"line":1065,"character":31}}},{"selectionRange":{"start":{"line":1068,"character":0},"end":{"line":1089,"character":11}},"kind":12,"name":"pMetaDataFile","range":{"start":{"line":1068,"character":0},"end":{"line":1089,"character":11}}},{"selectionRange":{"start":{"line":1092,"character":0},"end":{"line":1103,"character":66}},"kind":12,"name":"pWithdrawal","range":{"start":{"line":1092,"character":0},"end":{"line":1103,"character":66}}},{"selectionRange":{"start":{"line":1107,"character":0},"end":{"line":1120,"character":3}},"kind":12,"name":"pUpdateProposalFile","range":{"start":{"line":1107,"character":0},"end":{"line":1120,"character":3}}},{"selectionRange":{"start":{"line":1124,"character":0},"end":{"line":1137,"character":5}},"kind":12,"name":"pColdSigningKeyFile","range":{"start":{"line":1124,"character":0},"end":{"line":1137,"character":5}}},{"selectionRange":{"start":{"line":1140,"character":0},"end":{"line":1155,"character":42}},"kind":12,"name":"pSomeWitnessSigningData","range":{"start":{"line":1140,"character":0},"end":{"line":1155,"character":42}}},{"selectionRange":{"start":{"line":1158,"character":0},"end":{"line":1165,"character":7}},"kind":12,"name":"pSigningKeyFile","range":{"start":{"line":1158,"character":0},"end":{"line":1165,"character":7}}},{"selectionRange":{"start":{"line":1168,"character":0},"end":{"line":1182,"character":40}},"kind":12,"name":"pWitnessSigningData","range":{"start":{"line":1168,"character":0},"end":{"line":1182,"character":40}}},{"selectionRange":{"start":{"line":1185,"character":0},"end":{"line":1191,"character":7}},"kind":12,"name":"pKesPeriod","range":{"start":{"line":1185,"character":0},"end":{"line":1191,"character":7}}},{"selectionRange":{"start":{"line":1194,"character":0},"end":{"line":1200,"character":7}},"kind":12,"name":"pEpochNo","range":{"start":{"line":1194,"character":0},"end":{"line":1200,"character":7}}},{"selectionRange":{"start":{"line":1204,"character":0},"end":{"line":1210,"character":7}},"kind":12,"name":"pEpochNoUpdateProp","range":{"start":{"line":1204,"character":0},"end":{"line":1210,"character":7}}},{"selectionRange":{"start":{"line":1213,"character":0},"end":{"line":1220,"character":7}},"kind":12,"name":"pGenesisFile","range":{"start":{"line":1213,"character":0},"end":{"line":1220,"character":7}}},{"selectionRange":{"start":{"line":1223,"character":0},"end":{"line":1236,"character":5}},"kind":12,"name":"pOperatorCertIssueCounterFile","range":{"start":{"line":1223,"character":0},"end":{"line":1236,"character":5}}},{"selectionRange":{"start":{"line":1240,"character":0},"end":{"line":1247,"character":5}},"kind":12,"name":"pOutputFormat","range":{"start":{"line":1240,"character":0},"end":{"line":1247,"character":5}}},{"selectionRange":{"start":{"line":1251,"character":0},"end":{"line":1259,"character":9}},"kind":12,"name":"pMaybeOutputFile","range":{"start":{"line":1251,"character":0},"end":{"line":1259,"character":9}}},{"selectionRange":{"start":{"line":1262,"character":0},"end":{"line":1269,"character":7}},"kind":12,"name":"pOutputFile","range":{"start":{"line":1262,"character":0},"end":{"line":1269,"character":7}}},{"selectionRange":{"start":{"line":1272,"character":0},"end":{"line":1275,"character":60}},"kind":12,"name":"pColdVerificationKeyOrFile","range":{"start":{"line":1272,"character":0},"end":{"line":1275,"character":60}}},{"selectionRange":{"start":{"line":1278,"character":0},"end":{"line":1291,"character":5}},"kind":12,"name":"pColdVerificationKeyFile","range":{"start":{"line":1278,"character":0},"end":{"line":1291,"character":5}}},{"selectionRange":{"start":{"line":1297,"character":0},"end":{"line":1303,"character":7}},"kind":12,"name":"pVerificationKey","range":{"start":{"line":1297,"character":0},"end":{"line":1303,"character":7}}},{"selectionRange":{"start":{"line":1309,"character":0},"end":{"line":1311,"character":62}},"kind":12,"name":"pVerificationKeyOrFile","range":{"start":{"line":1309,"character":0},"end":{"line":1311,"character":62}}},{"selectionRange":{"start":{"line":1314,"character":0},"end":{"line":1321,"character":7}},"kind":12,"name":"pVerificationKeyFile","range":{"start":{"line":1314,"character":0},"end":{"line":1321,"character":7}}},{"selectionRange":{"start":{"line":1324,"character":0},"end":{"line":1331,"character":7}},"kind":12,"name":"pExtendedVerificationKeyFile","range":{"start":{"line":1324,"character":0},"end":{"line":1331,"character":7}}},{"selectionRange":{"start":{"line":1334,"character":0},"end":{"line":1341,"character":7}},"kind":12,"name":"pGenesisVerificationKeyFile","range":{"start":{"line":1334,"character":0},"end":{"line":1341,"character":7}}},{"selectionRange":{"start":{"line":1344,"character":0},"end":{"line":1356,"character":18}},"kind":12,"name":"pGenesisVerificationKeyHash","range":{"start":{"line":1344,"character":0},"end":{"line":1356,"character":18}}},{"selectionRange":{"start":{"line":1359,"character":0},"end":{"line":1371,"character":18}},"kind":12,"name":"pGenesisVerificationKey","range":{"start":{"line":1359,"character":0},"end":{"line":1371,"character":18}}},{"selectionRange":{"start":{"line":1374,"character":0},"end":{"line":1376,"character":63}},"kind":12,"name":"pGenesisVerificationKeyOrFile","range":{"start":{"line":1374,"character":0},"end":{"line":1376,"character":63}}},{"selectionRange":{"start":{"line":1379,"character":0},"end":{"line":1381,"character":59}},"kind":12,"name":"pGenesisVerificationKeyOrHashOrFile","range":{"start":{"line":1379,"character":0},"end":{"line":1381,"character":59}}},{"selectionRange":{"start":{"line":1384,"character":0},"end":{"line":1391,"character":7}},"kind":12,"name":"pGenesisDelegateVerificationKeyFile","range":{"start":{"line":1384,"character":0},"end":{"line":1391,"character":7}}},{"selectionRange":{"start":{"line":1394,"character":0},"end":{"line":1406,"character":18}},"kind":12,"name":"pGenesisDelegateVerificationKeyHash","range":{"start":{"line":1394,"character":0},"end":{"line":1406,"character":18}}},{"selectionRange":{"start":{"line":1409,"character":0},"end":{"line":1423,"character":18}},"kind":12,"name":"pGenesisDelegateVerificationKey","range":{"start":{"line":1409,"character":0},"end":{"line":1423,"character":18}}},{"selectionRange":{"start":{"line":1427,"character":0},"end":{"line":1429,"character":71}},"kind":12,"name":"pGenesisDelegateVerificationKeyOrFile","range":{"start":{"line":1427,"character":0},"end":{"line":1429,"character":71}}},{"selectionRange":{"start":{"line":1433,"character":0},"end":{"line":1435,"character":67}},"kind":12,"name":"pGenesisDelegateVerificationKeyOrHashOrFile","range":{"start":{"line":1433,"character":0},"end":{"line":1435,"character":67}}},{"selectionRange":{"start":{"line":1438,"character":0},"end":{"line":1440,"character":59}},"kind":12,"name":"pKesVerificationKeyOrFile","range":{"start":{"line":1438,"character":0},"end":{"line":1440,"character":59}}},{"selectionRange":{"start":{"line":1443,"character":0},"end":{"line":1469,"character":66}},"kind":12,"name":"pKesVerificationKey","range":{"start":{"line":1443,"character":0},"end":{"line":1469,"character":66}}},{"selectionRange":{"start":{"line":1472,"character":0},"end":{"line":1485,"character":5}},"kind":12,"name":"pKesVerificationKeyFile","range":{"start":{"line":1472,"character":0},"end":{"line":1485,"character":5}}},{"selectionRange":{"start":{"line":1488,"character":0},"end":{"line":1496,"character":7}},"kind":12,"name":"pNetworkId","range":{"start":{"line":1488,"character":0},"end":{"line":1496,"character":7}}},{"selectionRange":{"start":{"line":1499,"character":0},"end":{"line":1505,"character":7}},"kind":12,"name":"pTestnetMagic","range":{"start":{"line":1499,"character":0},"end":{"line":1505,"character":7}}},{"selectionRange":{"start":{"line":1508,"character":0},"end":{"line":1514,"character":5}},"kind":12,"name":"pTxSubmitFile","range":{"start":{"line":1508,"character":0},"end":{"line":1514,"character":5}}},{"selectionRange":{"start":{"line":1517,"character":0},"end":{"line":1537,"character":3}},"kind":12,"name":"pCardanoEra","range":{"start":{"line":1517,"character":0},"end":{"line":1537,"character":3}}},{"selectionRange":{"start":{"line":1540,"character":0},"end":{"line":1545,"character":5}},"kind":12,"name":"pTxIn","range":{"start":{"line":1540,"character":0},"end":{"line":1545,"character":5}}},{"selectionRange":{"start":{"line":1548,"character":0},"end":{"line":1548,"character":63}},"kind":12,"name":"parseTxIn","range":{"start":{"line":1548,"character":0},"end":{"line":1548,"character":63}}},{"selectionRange":{"start":{"line":1551,"character":0},"end":{"line":1556,"character":5}},"kind":12,"name":"renderTxIn","range":{"start":{"line":1551,"character":0},"end":{"line":1556,"character":5}}},{"selectionRange":{"start":{"line":1559,"character":0},"end":{"line":1563,"character":71}},"kind":12,"name":"parseTxId","range":{"start":{"line":1559,"character":0},"end":{"line":1563,"character":71}}},{"selectionRange":{"start":{"line":1566,"character":0},"end":{"line":1566,"character":35}},"kind":12,"name":"parseTxIx","range":{"start":{"line":1566,"character":0},"end":{"line":1566,"character":35}}},{"selectionRange":{"start":{"line":1570,"character":0},"end":{"line":1578,"character":7}},"kind":12,"name":"pTxOut","range":{"start":{"line":1570,"character":0},"end":{"line":1578,"character":7}}},{"selectionRange":{"start":{"line":1581,"character":0},"end":{"line":1587,"character":7}},"kind":12,"name":"pMintMultiAsset","range":{"start":{"line":1581,"character":0},"end":{"line":1587,"character":7}}},{"selectionRange":{"start":{"line":1590,"character":0},"end":{"line":1596,"character":7}},"kind":12,"name":"pTxLowerBound","range":{"start":{"line":1590,"character":0},"end":{"line":1596,"character":7}}},{"selectionRange":{"start":{"line":1599,"character":0},"end":{"line":1612,"character":5}},"kind":12,"name":"pTxUpperBound","range":{"start":{"line":1599,"character":0},"end":{"line":1612,"character":5}}},{"selectionRange":{"start":{"line":1615,"character":0},"end":{"line":1621,"character":7}},"kind":12,"name":"pTxFee","range":{"start":{"line":1615,"character":0},"end":{"line":1621,"character":7}}},{"selectionRange":{"start":{"line":1624,"character":0},"end":{"line":1631,"character":7}},"kind":12,"name":"pWitnessFile","range":{"start":{"line":1624,"character":0},"end":{"line":1631,"character":7}}},{"selectionRange":{"start":{"line":1634,"character":0},"end":{"line":1652,"character":28}},"kind":12,"name":"pTxBodyFile","range":{"start":{"line":1634,"character":0},"end":{"line":1652,"character":28}}},{"selectionRange":{"start":{"line":1656,"character":0},"end":{"line":1674,"character":28}},"kind":12,"name":"pTxFile","range":{"start":{"line":1656,"character":0},"end":{"line":1674,"character":28}}},{"selectionRange":{"start":{"line":1677,"character":0},"end":{"line":1683,"character":7}},"kind":12,"name":"pTxInCount","range":{"start":{"line":1677,"character":0},"end":{"line":1683,"character":7}}},{"selectionRange":{"start":{"line":1686,"character":0},"end":{"line":1692,"character":7}},"kind":12,"name":"pTxOutCount","range":{"start":{"line":1686,"character":0},"end":{"line":1692,"character":7}}},{"selectionRange":{"start":{"line":1695,"character":0},"end":{"line":1701,"character":7}},"kind":12,"name":"pTxShelleyWitnessCount","range":{"start":{"line":1695,"character":0},"end":{"line":1701,"character":7}}},{"selectionRange":{"start":{"line":1704,"character":0},"end":{"line":1711,"character":7}},"kind":12,"name":"pTxByronWitnessCount","range":{"start":{"line":1704,"character":0},"end":{"line":1711,"character":7}}},{"selectionRange":{"start":{"line":1714,"character":0},"end":{"line":1718,"character":40}},"kind":12,"name":"pQueryFilter","range":{"start":{"line":1714,"character":0},"end":{"line":1718,"character":40}}},{"selectionRange":{"start":{"line":1721,"character":0},"end":{"line":1726,"character":7}},"kind":12,"name":"pFilterByAddress","range":{"start":{"line":1721,"character":0},"end":{"line":1726,"character":7}}},{"selectionRange":{"start":{"line":1729,"character":0},"end":{"line":1734,"character":7}},"kind":12,"name":"pFilterByStakeAddress","range":{"start":{"line":1729,"character":0},"end":{"line":1734,"character":7}}},{"selectionRange":{"start":{"line":1737,"character":0},"end":{"line":1749,"character":19}},"kind":12,"name":"pByronAddress","range":{"start":{"line":1737,"character":0},"end":{"line":1749,"character":19}}},{"selectionRange":{"start":{"line":1752,"character":0},"end":{"line":1758,"character":7}},"kind":12,"name":"pAddress","range":{"start":{"line":1752,"character":0},"end":{"line":1758,"character":7}}},{"selectionRange":{"start":{"line":1761,"character":0},"end":{"line":1763,"character":61}},"kind":12,"name":"pStakeVerificationKeyOrFile","range":{"start":{"line":1761,"character":0},"end":{"line":1763,"character":61}}},{"selectionRange":{"start":{"line":1766,"character":0},"end":{"line":1772,"character":7}},"kind":12,"name":"pStakeVerificationKey","range":{"start":{"line":1766,"character":0},"end":{"line":1772,"character":7}}},{"selectionRange":{"start":{"line":1775,"character":0},"end":{"line":1788,"character":5}},"kind":12,"name":"pStakeVerificationKeyFile","range":{"start":{"line":1775,"character":0},"end":{"line":1788,"character":5}}},{"selectionRange":{"start":{"line":1792,"character":0},"end":{"line":1805,"character":5}},"kind":12,"name":"pStakePoolVerificationKeyFile","range":{"start":{"line":1792,"character":0},"end":{"line":1805,"character":5}}},{"selectionRange":{"start":{"line":1808,"character":0},"end":{"line":1829,"character":19}},"kind":12,"name":"pStakePoolVerificationKeyHash","range":{"start":{"line":1808,"character":0},"end":{"line":1829,"character":19}}},{"selectionRange":{"start":{"line":1832,"character":0},"end":{"line":1838,"character":7}},"kind":12,"name":"pStakePoolVerificationKey","range":{"start":{"line":1832,"character":0},"end":{"line":1838,"character":7}}},{"selectionRange":{"start":{"line":1842,"character":0},"end":{"line":1844,"character":65}},"kind":12,"name":"pStakePoolVerificationKeyOrFile","range":{"start":{"line":1842,"character":0},"end":{"line":1844,"character":65}}},{"selectionRange":{"start":{"line":1848,"character":0},"end":{"line":1850,"character":61}},"kind":12,"name":"pStakePoolVerificationKeyOrHashOrFile","range":{"start":{"line":1848,"character":0},"end":{"line":1850,"character":61}}},{"selectionRange":{"start":{"line":1853,"character":0},"end":{"line":1860,"character":7}},"kind":12,"name":"pVrfVerificationKeyFile","range":{"start":{"line":1853,"character":0},"end":{"line":1860,"character":7}}},{"selectionRange":{"start":{"line":1863,"character":0},"end":{"line":1875,"character":18}},"kind":12,"name":"pVrfVerificationKeyHash","range":{"start":{"line":1863,"character":0},"end":{"line":1875,"character":18}}},{"selectionRange":{"start":{"line":1878,"character":0},"end":{"line":1884,"character":7}},"kind":12,"name":"pVrfVerificationKey","range":{"start":{"line":1878,"character":0},"end":{"line":1884,"character":7}}},{"selectionRange":{"start":{"line":1887,"character":0},"end":{"line":1889,"character":59}},"kind":12,"name":"pVrfVerificationKeyOrFile","range":{"start":{"line":1887,"character":0},"end":{"line":1889,"character":59}}},{"selectionRange":{"start":{"line":1892,"character":0},"end":{"line":1894,"character":55}},"kind":12,"name":"pVrfVerificationKeyOrHashOrFile","range":{"start":{"line":1892,"character":0},"end":{"line":1894,"character":55}}},{"selectionRange":{"start":{"line":1897,"character":0},"end":{"line":1910,"character":5}},"kind":12,"name":"pRewardAcctVerificationKeyFile","range":{"start":{"line":1897,"character":0},"end":{"line":1910,"character":5}}},{"selectionRange":{"start":{"line":1913,"character":0},"end":{"line":1919,"character":7}},"kind":12,"name":"pRewardAcctVerificationKey","range":{"start":{"line":1913,"character":0},"end":{"line":1919,"character":7}}},{"selectionRange":{"start":{"line":1922,"character":0},"end":{"line":1924,"character":66}},"kind":12,"name":"pRewardAcctVerificationKeyOrFile","range":{"start":{"line":1922,"character":0},"end":{"line":1924,"character":66}}},{"selectionRange":{"start":{"line":1927,"character":0},"end":{"line":1940,"character":5}},"kind":12,"name":"pPoolOwnerVerificationKeyFile","range":{"start":{"line":1927,"character":0},"end":{"line":1940,"character":5}}},{"selectionRange":{"start":{"line":1943,"character":0},"end":{"line":1949,"character":7}},"kind":12,"name":"pPoolOwnerVerificationKey","range":{"start":{"line":1943,"character":0},"end":{"line":1949,"character":7}}},{"selectionRange":{"start":{"line":1952,"character":0},"end":{"line":1954,"character":65}},"kind":12,"name":"pPoolOwnerVerificationKeyOrFile","range":{"start":{"line":1952,"character":0},"end":{"line":1954,"character":65}}},{"selectionRange":{"start":{"line":1957,"character":0},"end":{"line":1962,"character":7}},"kind":12,"name":"pPoolPledge","range":{"start":{"line":1957,"character":0},"end":{"line":1962,"character":7}}},{"selectionRange":{"start":{"line":1966,"character":0},"end":{"line":1971,"character":7}},"kind":12,"name":"pPoolCost","range":{"start":{"line":1966,"character":0},"end":{"line":1971,"character":7}}},{"selectionRange":{"start":{"line":1974,"character":0},"end":{"line":1979,"character":7}},"kind":12,"name":"pPoolMargin","range":{"start":{"line":1974,"character":0},"end":{"line":1979,"character":7}}},{"selectionRange":{"start":{"line":1982,"character":0},"end":{"line":1982,"character":70}},"kind":12,"name":"pPoolRelay","range":{"start":{"line":1982,"character":0},"end":{"line":1982,"character":70}}},{"selectionRange":{"start":{"line":1985,"character":0},"end":{"line":1994,"character":16}},"kind":12,"name":"pMultiHostName","range":{"start":{"line":1985,"character":0},"end":{"line":1994,"character":16}}},{"selectionRange":{"start":{"line":1997,"character":0},"end":{"line":2006,"character":16}},"kind":12,"name":"pSingleHostName","range":{"start":{"line":1997,"character":0},"end":{"line":2006,"character":16}}},{"selectionRange":{"start":{"line":2009,"character":0},"end":{"line":2013,"character":73}},"kind":12,"name":"eDNSName","range":{"start":{"line":2009,"character":0},"end":{"line":2013,"character":73}}},{"selectionRange":{"start":{"line":2016,"character":0},"end":{"line":2031,"character":56}},"kind":12,"name":"pSingleHostAddress","range":{"start":{"line":2016,"character":0},"end":{"line":2031,"character":56}}},{"selectionRange":{"start":{"line":2036,"character":0},"end":{"line":2040,"character":11}},"kind":12,"name":"pIpV4","range":{"start":{"line":2036,"character":0},"end":{"line":2040,"character":11}}},{"selectionRange":{"start":{"line":2043,"character":0},"end":{"line":2047,"character":12}},"kind":12,"name":"pIpV6","range":{"start":{"line":2043,"character":0},"end":{"line":2047,"character":12}}},{"selectionRange":{"start":{"line":2050,"character":0},"end":{"line":2054,"character":12}},"kind":12,"name":"pPort","range":{"start":{"line":2050,"character":0},"end":{"line":2054,"character":12}}},{"selectionRange":{"start":{"line":2057,"character":0},"end":{"line":2061,"character":32}},"kind":12,"name":"pStakePoolMetadataReference","range":{"start":{"line":2057,"character":0},"end":{"line":2061,"character":32}}},{"selectionRange":{"start":{"line":2064,"character":0},"end":{"line":2069,"character":5}},"kind":12,"name":"pStakePoolMetadataUrl","range":{"start":{"line":2064,"character":0},"end":{"line":2069,"character":5}}},{"selectionRange":{"start":{"line":2072,"character":0},"end":{"line":2082,"character":27}},"kind":12,"name":"pStakePoolMetadataHash","range":{"start":{"line":2072,"character":0},"end":{"line":2082,"character":27}}},{"selectionRange":{"start":{"line":2085,"character":0},"end":{"line":2097,"character":19}},"kind":12,"name":"pStakePoolRegistrationCert","range":{"start":{"line":2085,"character":0},"end":{"line":2097,"character":19}}},{"selectionRange":{"start":{"line":2100,"character":0},"end":{"line":2104,"character":19}},"kind":12,"name":"pStakePoolRetirementCert","range":{"start":{"line":2100,"character":0},"end":{"line":2104,"character":19}}},{"selectionRange":{"start":{"line":2108,"character":0},"end":{"line":2126,"character":35}},"kind":12,"name":"pShelleyProtocolParametersUpdate","range":{"start":{"line":2108,"character":0},"end":{"line":2126,"character":35}}},{"selectionRange":{"start":{"line":2129,"character":0},"end":{"line":2134,"character":7}},"kind":12,"name":"pMinFeeLinearFactor","range":{"start":{"line":2129,"character":0},"end":{"line":2134,"character":7}}},{"selectionRange":{"start":{"line":2137,"character":0},"end":{"line":2142,"character":7}},"kind":12,"name":"pMinFeeConstantFactor","range":{"start":{"line":2137,"character":0},"end":{"line":2142,"character":7}}},{"selectionRange":{"start":{"line":2145,"character":0},"end":{"line":2150,"character":7}},"kind":12,"name":"pMinUTxOValue","range":{"start":{"line":2145,"character":0},"end":{"line":2150,"character":7}}},{"selectionRange":{"start":{"line":2153,"character":0},"end":{"line":2158,"character":7}},"kind":12,"name":"pMinPoolCost","range":{"start":{"line":2153,"character":0},"end":{"line":2158,"character":7}}},{"selectionRange":{"start":{"line":2161,"character":0},"end":{"line":2166,"character":7}},"kind":12,"name":"pMaxBodySize","range":{"start":{"line":2161,"character":0},"end":{"line":2166,"character":7}}},{"selectionRange":{"start":{"line":2169,"character":0},"end":{"line":2174,"character":7}},"kind":12,"name":"pMaxTransactionSize","range":{"start":{"line":2169,"character":0},"end":{"line":2174,"character":7}}},{"selectionRange":{"start":{"line":2177,"character":0},"end":{"line":2182,"character":7}},"kind":12,"name":"pMaxBlockHeaderSize","range":{"start":{"line":2177,"character":0},"end":{"line":2182,"character":7}}},{"selectionRange":{"start":{"line":2185,"character":0},"end":{"line":2190,"character":7}},"kind":12,"name":"pKeyRegistDeposit","range":{"start":{"line":2185,"character":0},"end":{"line":2190,"character":7}}},{"selectionRange":{"start":{"line":2193,"character":0},"end":{"line":2198,"character":7}},"kind":12,"name":"pPoolDeposit","range":{"start":{"line":2193,"character":0},"end":{"line":2198,"character":7}}},{"selectionRange":{"start":{"line":2201,"character":0},"end":{"line":2207,"character":7}},"kind":12,"name":"pEpochBoundRetirement","range":{"start":{"line":2201,"character":0},"end":{"line":2207,"character":7}}},{"selectionRange":{"start":{"line":2210,"character":0},"end":{"line":2215,"character":7}},"kind":12,"name":"pNumberOfPools","range":{"start":{"line":2210,"character":0},"end":{"line":2215,"character":7}}},{"selectionRange":{"start":{"line":2218,"character":0},"end":{"line":2223,"character":7}},"kind":12,"name":"pPoolInfluence","range":{"start":{"line":2218,"character":0},"end":{"line":2223,"character":7}}},{"selectionRange":{"start":{"line":2226,"character":0},"end":{"line":2231,"character":7}},"kind":12,"name":"pTreasuryExpansion","range":{"start":{"line":2226,"character":0},"end":{"line":2231,"character":7}}},{"selectionRange":{"start":{"line":2234,"character":0},"end":{"line":2239,"character":7}},"kind":12,"name":"pMonetaryExpansion","range":{"start":{"line":2234,"character":0},"end":{"line":2239,"character":7}}},{"selectionRange":{"start":{"line":2242,"character":0},"end":{"line":2247,"character":7}},"kind":12,"name":"pDecentralParam","range":{"start":{"line":2242,"character":0},"end":{"line":2247,"character":7}}},{"selectionRange":{"start":{"line":2250,"character":0},"end":{"line":2267,"character":55}},"kind":12,"name":"pExtraEntropy","range":{"start":{"line":2250,"character":0},"end":{"line":2267,"character":55}}},{"selectionRange":{"start":{"line":2270,"character":0},"end":{"line":2318,"character":34}},"kind":12,"name":"pProtocol","range":{"start":{"line":2270,"character":0},"end":{"line":2318,"character":34}}},{"selectionRange":{"start":{"line":2321,"character":0},"end":{"line":2336,"character":9}},"kind":12,"name":"pProtocolVersion","range":{"start":{"line":2321,"character":0},"end":{"line":2336,"character":9}}},{"selectionRange":{"start":{"line":2343,"character":0},"end":{"line":2343,"character":41}},"kind":12,"name":"parseLovelace","range":{"start":{"line":2343,"character":0},"end":{"line":2343,"character":41}}},{"selectionRange":{"start":{"line":2346,"character":0},"end":{"line":2350,"character":28}},"kind":12,"name":"parseAddressAny","range":{"start":{"line":2346,"character":0},"end":{"line":2350,"character":28}}},{"selectionRange":{"start":{"line":2353,"character":0},"end":{"line":2357,"character":28}},"kind":12,"name":"parseStakeAddress","range":{"start":{"line":2353,"character":0},"end":{"line":2357,"character":28}}},{"selectionRange":{"start":{"line":2360,"character":0},"end":{"line":2368,"character":17}},"kind":12,"name":"lexPlausibleAddressString","range":{"start":{"line":2360,"character":0},"end":{"line":2368,"character":17}}},{"selectionRange":{"start":{"line":2380,"character":0},"end":{"line":2391,"character":77}},"kind":12,"name":"readVerificationKey","range":{"start":{"line":2380,"character":0},"end":{"line":2391,"character":77}}},{"selectionRange":{"start":{"line":2394,"character":0},"end":{"line":2402,"character":68}},"kind":12,"name":"readOutputFormat","range":{"start":{"line":2394,"character":0},"end":{"line":2402,"character":68}}},{"selectionRange":{"start":{"line":2405,"character":0},"end":{"line":2406,"character":44}},"kind":12,"name":"readURIOfMaxLength","range":{"start":{"line":2405,"character":0},"end":{"line":2406,"character":44}}},{"selectionRange":{"start":{"line":2409,"character":0},"end":{"line":2417,"character":25}},"kind":12,"name":"readStringOfMaxLength","range":{"start":{"line":2409,"character":0},"end":{"line":2417,"character":25}}},{"selectionRange":{"start":{"line":2420,"character":0},"end":{"line":2425,"character":72}},"kind":12,"name":"readRationalUnitInterval","range":{"start":{"line":2420,"character":0},"end":{"line":2425,"character":72}}},{"selectionRange":{"start":{"line":2428,"character":0},"end":{"line":2428,"character":66}},"kind":12,"name":"readRational","range":{"start":{"line":2428,"character":0},"end":{"line":2428,"character":66}}},{"selectionRange":{"start":{"line":2431,"character":0},"end":{"line":2432,"character":71}},"kind":12,"name":"readerFromAttoParser","range":{"start":{"line":2431,"character":0},"end":{"line":2432,"character":71}}},{"selectionRange":{"start":{"line":2435,"character":0},"end":{"line":2443,"character":57}},"kind":12,"name":"readerFromParsecParser","range":{"start":{"line":2435,"character":0},"end":{"line":2443,"character":57}}}],"name":"Cardano.CLI.Shelley.Parsers","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":235}
2020-12-03 13:40:59.017074528 [ThreadId 7] - <--2--{"result":[{"selectionRange":{"start":{"line":3,"character":7},"end":{"line":3,"character":34}},"kind":1,"children":[{"selectionRange":{"start":{"line":15,"character":0},"end":{"line":52,"character":54}},"kind":2,"children":[{"selectionRange":{"start":{"line":15,"character":0},"end":{"line":15,"character":58}},"kind":2,"name":"import Cardano.Prelude","range":{"start":{"line":15,"character":0},"end":{"line":15,"character":58}}},{"selectionRange":{"start":{"line":16,"character":0},"end":{"line":16,"character":33}},"kind":2,"name":"import Prelude","range":{"start":{"line":16,"character":0},"end":{"line":16,"character":33}}},{"selectionRange":{"start":{"line":18,"character":0},"end":{"line":18,"character":53}},"kind":2,"name":"import Cardano.Api.Protocol","range":{"start":{"line":18,"character":0},"end":{"line":18,"character":53}}},{"selectionRange":{"start":{"line":19,"character":0},"end":{"line":19,"character":50}},"kind":2,"name":"import Cardano.Api.Typed","range":{"start":{"line":19,"character":0},"end":{"line":19,"character":50}}},{"selectionRange":{"start":{"line":21,"character":0},"end":{"line":21,"character":57}},"kind":2,"name":"import Cardano.Chain.Slotting","range":{"start":{"line":21,"character":0},"end":{"line":21,"character":57}}},{"selectionRange":{"start":{"line":22,"character":0},"end":{"line":22,"character":64}},"kind":2,"name":"import Cardano.CLI.Mary.TxOutParser","range":{"start":{"line":22,"character":0},"end":{"line":22,"character":64}}},{"selectionRange":{"start":{"line":23,"character":0},"end":{"line":23,"character":58}},"kind":2,"name":"import Cardano.CLI.Mary.ValueParser","range":{"start":{"line":23,"character":0},"end":{"line":23,"character":58}}},{"selectionRange":{"start":{"line":24,"character":0},"end":{"line":24,"character":45}},"kind":2,"name":"import Cardano.CLI.Shelley.Commands","range":{"start":{"line":24,"character":0},"end":{"line":24,"character":45}}},{"selectionRange":{"start":{"line":25,"character":0},"end":{"line":27,"character":62}},"kind":2,"name":"import Cardano.CLI.Shelley.Key","range":{"start":{"line":25,"character":0},"end":{"line":27,"character":62}}},{"selectionRange":{"start":{"line":28,"character":0},"end":{"line":28,"character":34}},"kind":2,"name":"import Cardano.CLI.Types","range":{"start":{"line":28,"character":0},"end":{"line":28,"character":34}}},{"selectionRange":{"start":{"line":29,"character":0},"end":{"line":29,"character":42}},"kind":2,"name":"import Control.Monad.Fail","range":{"start":{"line":29,"character":0},"end":{"line":29,"character":42}}},{"selectionRange":{"start":{"line":30,"character":0},"end":{"line":30,"character":51}},"kind":2,"name":"import Data.Attoparsec.Combinator","range":{"start":{"line":30,"character":0},"end":{"line":30,"character":51}}},{"selectionRange":{"start":{"line":31,"character":0},"end":{"line":31,"character":42}},"kind":2,"name":"import Data.Time.Clock","range":{"start":{"line":31,"character":0},"end":{"line":31,"character":42}}},{"selectionRange":{"start":{"line":32,"character":0},"end":{"line":32,"character":90}},"kind":2,"name":"import Data.Time.Format","range":{"start":{"line":32,"character":0},"end":{"line":32,"character":90}}},{"selectionRange":{"start":{"line":33,"character":0},"end":{"line":33,"character":44}},"kind":2,"name":"import Network.Socket","range":{"start":{"line":33,"character":0},"end":{"line":33,"character":44}}},{"selectionRange":{"start":{"line":34,"character":0},"end":{"line":34,"character":49}},"kind":2,"name":"import Options.Applicative","range":{"start":{"line":34,"character":0},"end":{"line":34,"character":49}}},{"selectionRange":{"start":{"line":35,"character":0},"end":{"line":35,"character":70}},"kind":2,"name":"import Ouroboros.Consensus.BlockchainTime","range":{"start":{"line":35,"character":0},"end":{"line":35,"character":70}}},{"selectionRange":{"start":{"line":37,"character":0},"end":{"line":37,"character":45}},"kind":2,"name":"import Data.ByteString.Char8","range":{"start":{"line":37,"character":0},"end":{"line":37,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":38,"character":0},"end":{"line":38,"character":34}},"kind":2,"name":"import Data.Char","range":{"start":{"line":38,"character":0},"end":{"line":38,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":39,"character":0},"end":{"line":39,"character":30}},"kind":2,"name":"import Data.IP","range":{"start":{"line":39,"character":0},"end":{"line":39,"character":30}},"detail":"qualified"},{"selectionRange":{"start":{"line":40,"character":0},"end":{"line":40,"character":41}},"kind":2,"name":"import Data.List.NonEmpty","range":{"start":{"line":40,"character":0},"end":{"line":40,"character":41}},"detail":"qualified"},{"selectionRange":{"start":{"line":41,"character":0},"end":{"line":41,"character":32}},"kind":2,"name":"import Data.Set","range":{"start":{"line":41,"character":0},"end":{"line":41,"character":32}},"detail":"qualified"},{"selectionRange":{"start":{"line":42,"character":0},"end":{"line":42,"character":34}},"kind":2,"name":"import Data.Text","range":{"start":{"line":42,"character":0},"end":{"line":42,"character":34}},"detail":"qualified"},{"selectionRange":{"start":{"line":43,"character":0},"end":{"line":43,"character":43}},"kind":2,"name":"import Data.Text.Encoding","range":{"start":{"line":43,"character":0},"end":{"line":43,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":45,"character":0},"end":{"line":45,"character":43}},"kind":2,"name":"import Options.Applicative","range":{"start":{"line":45,"character":0},"end":{"line":45,"character":43}},"detail":"qualified"},{"selectionRange":{"start":{"line":46,"character":0},"end":{"line":46,"character":57}},"kind":2,"name":"import Data.Attoparsec.ByteString.Char8","range":{"start":{"line":46,"character":0},"end":{"line":46,"character":57}},"detail":"qualified"},{"selectionRange":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"kind":2,"name":"import Text.Parsec","range":{"start":{"line":47,"character":0},"end":{"line":47,"character":38}},"detail":"qualified"},{"selectionRange":{"start":{"line":48,"character":0},"end":{"line":48,"character":45}},"kind":2,"name":"import Text.Parsec.String","range":{"start":{"line":48,"character":0},"end":{"line":48,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"kind":2,"name":"import Text.Parsec.Error","range":{"start":{"line":49,"character":0},"end":{"line":49,"character":45}},"detail":"qualified"},{"selectionRange":{"start":{"line":51,"character":0},"end":{"line":51,"character":57}},"kind":2,"name":"import Shelley.Spec.Ledger.BaseTypes","range":{"start":{"line":51,"character":0},"end":{"line":51,"character":57}},"detail":"qualified"},{"selectionRange":{"start":{"line":52,"character":0},"end":{"line":52,"character":54}},"kind":2,"name":"import Shelley.Spec.Ledger.TxBody","range":{"start":{"line":52,"character":0},"end":{"line":52,"character":54}},"detail":"qualified"}],"name":"imports","range":{"start":{"line":15,"character":0},"end":{"line":52,"character":54}}},{"selectionRange":{"start":{"line":59,"character":0},"end":{"line":93,"character":7}},"kind":12,"name":"parseShelleyCommands","range":{"start":{"line":59,"character":0},"end":{"line":93,"character":7}}},{"selectionRange":{"start":{"line":96,"character":0},"end":{"line":103,"character":7}},"kind":12,"name":"pTextViewCmd","range":{"start":{"line":96,"character":0},"end":{"line":103,"character":7}}},{"selectionRange":{"start":{"line":106,"character":0},"end":{"line":117,"character":5}},"kind":12,"name":"pCBORInFile","range":{"start":{"line":106,"character":0},"end":{"line":117,"character":5}}},{"selectionRange":{"start":{"line":120,"character":0},"end":{"line":161,"character":64}},"kind":12,"name":"pAddressCmd","range":{"start":{"line":120,"character":0},"end":{"line":161,"character":64}}},{"selectionRange":{"start":{"line":164,"character":0},"end":{"line":166,"character":64}},"kind":12,"name":"pPaymentVerificationKeyTextOrFile","range":{"start":{"line":164,"character":0},"end":{"line":166,"character":64}}},{"selectionRange":{"start":{"line":169,"character":0},"end":{"line":175,"character":7}},"kind":12,"name":"pPaymentVerificationKeyText","range":{"start":{"line":169,"character":0},"end":{"line":175,"character":7}}},{"selectionRange":{"start":{"line":178,"character":0},"end":{"line":191,"character":5}},"kind":12,"name":"pPaymentVerificationKeyFile","range":{"start":{"line":178,"character":0},"end":{"line":191,"character":5}}},{"selectionRange":{"start":{"line":194,"character":0},"end":{"line":199,"character":3}},"kind":12,"name":"pScript","range":{"start":{"line":194,"character":0},"end":{"line":199,"character":3}}},{"selectionRange":{"start":{"line":202,"character":0},"end":{"line":246,"character":51}},"kind":12,"name":"pStakeAddress","range":{"start":{"line":202,"character":0},"end":{"line":246,"character":51}}},{"selectionRange":{"start":{"line":249,"character":0},"end":{"line":457,"character":13}},"kind":12,"name":"pKeyCmd","range":{"start":{"line":249,"character":0},"end":{"line":457,"character":13}}},{"selectionRange":{"start":{"line":460,"character":0},"end":{"line":555,"character":50}},"kind":12,"name":"pTransaction","range":{"start":{"line":460,"character":0},"end":{"line":555,"character":50}}},{"selectionRange":{"start":{"line":559,"character":0},"end":{"line":621,"character":37}},"kind":12,"name":"pNodeCmd","range":{"start":{"line":559,"character":0},"end":{"line":621,"character":37}}},{"selectionRange":{"start":{"line":625,"character":0},"end":{"line":643,"character":89}},"kind":12,"name":"pPoolCmd","range":{"start":{"line":625,"character":0},"end":{"line":643,"character":89}}},{"selectionRange":{"start":{"line":647,"character":0},"end":{"line":717,"character":48}},"kind":12,"name":"pQueryCmd","range":{"start":{"line":647,"character":0},"end":{"line":717,"character":48}}},{"selectionRange":{"start":{"line":720,"character":0},"end":{"line":765,"character":60}},"kind":12,"name":"pGovernanceCmd","range":{"start":{"line":720,"character":0},"end":{"line":765,"character":60}}},{"selectionRange":{"start":{"line":768,"character":0},"end":{"line":773,"character":7}},"kind":12,"name":"pRewardAmt","range":{"start":{"line":768,"character":0},"end":{"line":773,"character":7}}},{"selectionRange":{"start":{"line":776,"character":0},"end":{"line":978,"character":11}},"kind":12,"name":"pGenesisCmd","range":{"start":{"line":776,"character":0},"end":{"line":978,"character":11}}},{"selectionRange":{"start":{"line":985,"character":0},"end":{"line":988,"character":21}},"kind":23,"children":[{"selectionRange":{"start":{"line":986,"character":4},"end":{"line":986,"character":9}},"kind":9,"name":"Input","range":{"start":{"line":986,"character":4},"end":{"line":986,"character":9}}},{"selectionRange":{"start":{"line":987,"character":4},"end":{"line":987,"character":10}},"kind":9,"name":"Output","range":{"start":{"line":987,"character":4},"end":{"line":987,"character":10}}}],"name":"FileDirection","range":{"start":{"line":985,"character":0},"end":{"line":988,"character":21}}},{"selectionRange":{"start":{"line":991,"character":0},"end":{"line":1007,"character":26}},"kind":12,"name":"pAddressKeyType","range":{"start":{"line":991,"character":0},"end":{"line":1007,"character":26}}},{"selectionRange":{"start":{"line":1011,"character":0},"end":{"line":1018,"character":7}},"kind":12,"name":"pProtocolParamsFile","range":{"start":{"line":1011,"character":0},"end":{"line":1018,"character":7}}},{"selectionRange":{"start":{"line":1021,"character":0},"end":{"line":1036,"character":5}},"kind":12,"name":"pCertificateFile","range":{"start":{"line":1021,"character":0},"end":{"line":1036,"character":5}}},{"selectionRange":{"start":{"line":1039,"character":0},"end":{"line":1046,"character":7}},"kind":12,"name":"pPoolMetaDataFile","range":{"start":{"line":1039,"character":0},"end":{"line":1046,"character":7}}},{"selectionRange":{"start":{"line":1049,"character":0},"end":{"line":1065,"character":31}},"kind":12,"name":"pTxMetadataJsonSchema","range":{"start":{"line":1049,"character":0},"end":{"line":1065,"character":31}}},{"selectionRange":{"start":{"line":1068,"character":0},"end":{"line":1089,"character":11}},"kind":12,"name":"pMetaDataFile","range":{"start":{"line":1068,"character":0},"end":{"line":1089,"character":11}}},{"selectionRange":{"start":{"line":1092,"character":0},"end":{"line":1103,"character":66}},"kind":12,"name":"pWithdrawal","range":{"start":{"line":1092,"character":0},"end":{"line":1103,"character":66}}},{"selectionRange":{"start":{"line":1107,"character":0},"end":{"line":1120,"character":3}},"kind":12,"name":"pUpdateProposalFile","range":{"start":{"line":1107,"character":0},"end":{"line":1120,"character":3}}},{"selectionRange":{"start":{"line":1124,"character":0},"end":{"line":1137,"character":5}},"kind":12,"name":"pColdSigningKeyFile","range":{"start":{"line":1124,"character":0},"end":{"line":1137,"character":5}}},{"selectionRange":{"start":{"line":1140,"character":0},"end":{"line":1155,"character":42}},"kind":12,"name":"pSomeWitnessSigningData","range":{"start":{"line":1140,"character":0},"end":{"line":1155,"character":42}}},{"selectionRange":{"start":{"line":1158,"character":0},"end":{"line":1165,"character":7}},"kind":12,"name":"pSigningKeyFile","range":{"start":{"line":1158,"character":0},"end":{"line":1165,"character":7}}},{"selectionRange":{"start":{"line":1168,"character":0},"end":{"line":1182,"character":40}},"kind":12,"name":"pWitnessSigningData","range":{"start":{"line":1168,"character":0},"end":{"line":1182,"character":40}}},{"selectionRange":{"start":{"line":1185,"character":0},"end":{"line":1191,"character":7}},"kind":12,"name":"pKesPeriod","range":{"start":{"line":1185,"character":0},"end":{"line":1191,"character":7}}},{"selectionRange":{"start":{"line":1194,"character":0},"end":{"line":1200,"character":7}},"kind":12,"name":"pEpochNo","range":{"start":{"line":1194,"character":0},"end":{"line":1200,"character":7}}},{"selectionRange":{"start":{"line":1204,"character":0},"end":{"line":1210,"character":7}},"kind":12,"name":"pEpochNoUpdateProp","range":{"start":{"line":1204,"character":0},"end":{"line":1210,"character":7}}},{"selectionRange":{"start":{"line":1213,"character":0},"end":{"line":1220,"character":7}},"kind":12,"name":"pGenesisFile","range":{"start":{"line":1213,"character":0},"end":{"line":1220,"character":7}}},{"selectionRange":{"start":{"line":1223,"character":0},"end":{"line":1236,"character":5}},"kind":12,"name":"pOperatorCertIssueCounterFile","range":{"start":{"line":1223,"character":0},"end":{"line":1236,"character":5}}},{"selectionRange":{"start":{"line":1240,"character":0},"end":{"line":1247,"character":5}},"kind":12,"name":"pOutputFormat","range":{"start":{"line":1240,"character":0},"end":{"line":1247,"character":5}}},{"selectionRange":{"start":{"line":1251,"character":0},"end":{"line":1259,"character":9}},"kind":12,"name":"pMaybeOutputFile","range":{"start":{"line":1251,"character":0},"end":{"line":1259,"character":9}}},{"selectionRange":{"start":{"line":1262,"character":0},"end":{"line":1269,"character":7}},"kind":12,"name":"pOutputFile","range":{"start":{"line":1262,"character":0},"end":{"line":1269,"character":7}}},{"selectionRange":{"start":{"line":1272,"character":0},"end":{"line":1275,"character":60}},"kind":12,"name":"pColdVerificationKeyOrFile","range":{"start":{"line":1272,"character":0},"end":{"line":1275,"character":60}}},{"selectionRange":{"start":{"line":1278,"character":0},"end":{"line":1291,"character":5}},"kind":12,"name":"pColdVerificationKeyFile","range":{"start":{"line":1278,"character":0},"end":{"line":1291,"character":5}}},{"selectionRange":{"start":{"line":1297,"character":0},"end":{"line":1303,"character":7}},"kind":12,"name":"pVerificationKey","range":{"start":{"line":1297,"character":0},"end":{"line":1303,"character":7}}},{"selectionRange":{"start":{"line":1309,"character":0},"end":{"line":1311,"character":62}},"kind":12,"name":"pVerificationKeyOrFile","range":{"start":{"line":1309,"character":0},"end":{"line":1311,"character":62}}},{"selectionRange":{"start":{"line":1314,"character":0},"end":{"line":1321,"character":7}},"kind":12,"name":"pVerificationKeyFile","range":{"start":{"line":1314,"character":0},"end":{"line":1321,"character":7}}},{"selectionRange":{"start":{"line":1324,"character":0},"end":{"line":1331,"character":7}},"kind":12,"name":"pExtendedVerificationKeyFile","range":{"start":{"line":1324,"character":0},"end":{"line":1331,"character":7}}},{"selectionRange":{"start":{"line":1334,"character":0},"end":{"line":1341,"character":7}},"kind":12,"name":"pGenesisVerificationKeyFile","range":{"start":{"line":1334,"character":0},"end":{"line":1341,"character":7}}},{"selectionRange":{"start":{"line":1344,"character":0},"end":{"line":1356,"character":18}},"kind":12,"name":"pGenesisVerificationKeyHash","range":{"start":{"line":1344,"character":0},"end":{"line":1356,"character":18}}},{"selectionRange":{"start":{"line":1359,"character":0},"end":{"line":1371,"character":18}},"kind":12,"name":"pGenesisVerificationKey","range":{"start":{"line":1359,"character":0},"end":{"line":1371,"character":18}}},{"selectionRange":{"start":{"line":1374,"character":0},"end":{"line":1376,"character":63}},"kind":12,"name":"pGenesisVerificationKeyOrFile","range":{"start":{"line":1374,"character":0},"end":{"line":1376,"character":63}}},{"selectionRange":{"start":{"line":1379,"character":0},"end":{"line":1381,"character":59}},"kind":12,"name":"pGenesisVerificationKeyOrHashOrFile","range":{"start":{"line":1379,"character":0},"end":{"line":1381,"character":59}}},{"selectionRange":{"start":{"line":1384,"character":0},"end":{"line":1391,"character":7}},"kind":12,"name":"pGenesisDelegateVerificationKeyFile","range":{"start":{"line":1384,"character":0},"end":{"line":1391,"character":7}}},{"selectionRange":{"start":{"line":1394,"character":0},"end":{"line":1406,"character":18}},"kind":12,"name":"pGenesisDelegateVerificationKeyHash","range":{"start":{"line":1394,"character":0},"end":{"line":1406,"character":18}}},{"selectionRange":{"start":{"line":1409,"character":0},"end":{"line":1423,"character":18}},"kind":12,"name":"pGenesisDelegateVerificationKey","range":{"start":{"line":1409,"character":0},"end":{"line":1423,"character":18}}},{"selectionRange":{"start":{"line":1427,"character":0},"end":{"line":1429,"character":71}},"kind":12,"name":"pGenesisDelegateVerificationKeyOrFile","range":{"start":{"line":1427,"character":0},"end":{"line":1429,"character":71}}},{"selectionRange":{"start":{"line":1433,"character":0},"end":{"line":1435,"character":67}},"kind":12,"name":"pGenesisDelegateVerificationKeyOrHashOrFile","range":{"start":{"line":1433,"character":0},"end":{"line":1435,"character":67}}},{"selectionRange":{"start":{"line":1438,"character":0},"end":{"line":1440,"character":59}},"kind":12,"name":"pKesVerificationKeyOrFile","range":{"start":{"line":1438,"character":0},"end":{"line":1440,"character":59}}},{"selectionRange":{"start":{"line":1443,"character":0},"end":{"line":1469,"character":66}},"kind":12,"name":"pKesVerificationKey","range":{"start":{"line":1443,"character":0},"end":{"line":1469,"character":66}}},{"selectionRange":{"start":{"line":1472,"character":0},"end":{"line":1485,"character":5}},"kind":12,"name":"pKesVerificationKeyFile","range":{"start":{"line":1472,"character":0},"end":{"line":1485,"character":5}}},{"selectionRange":{"start":{"line":1488,"character":0},"end":{"line":1496,"character":7}},"kind":12,"name":"pNetworkId","range":{"start":{"line":1488,"character":0},"end":{"line":1496,"character":7}}},{"selectionRange":{"start":{"line":1499,"character":0},"end":{"line":1505,"character":7}},"kind":12,"name":"pTestnetMagic","range":{"start":{"line":1499,"character":0},"end":{"line":1505,"character":7}}},{"selectionRange":{"start":{"line":1508,"character":0},"end":{"line":1514,"character":5}},"kind":12,"name":"pTxSubmitFile","range":{"start":{"line":1508,"character":0},"end":{"line":1514,"character":5}}},{"selectionRange":{"start":{"line":1517,"character":0},"end":{"line":1537,"character":3}},"kind":12,"name":"pCardanoEra","range":{"start":{"line":1517,"character":0},"end":{"line":1537,"character":3}}},{"selectionRange":{"start":{"line":1540,"character":0},"end":{"line":1545,"character":5}},"kind":12,"name":"pTxIn","range":{"start":{"line":1540,"character":0},"end":{"line":1545,"character":5}}},{"selectionRange":{"start":{"line":1548,"character":0},"end":{"line":1548,"character":63}},"kind":12,"name":"parseTxIn","range":{"start":{"line":1548,"character":0},"end":{"line":1548,"character":63}}},{"selectionRange":{"start":{"line":1551,"character":0},"end":{"line":1556,"character":5}},"kind":12,"name":"renderTxIn","range":{"start":{"line":1551,"character":0},"end":{"line":1556,"character":5}}},{"selectionRange":{"start":{"line":1559,"character":0},"end":{"line":1563,"character":71}},"kind":12,"name":"parseTxId","range":{"start":{"line":1559,"character":0},"end":{"line":1563,"character":71}}},{"selectionRange":{"start":{"line":1566,"character":0},"end":{"line":1566,"character":35}},"kind":12,"name":"parseTxIx","range":{"start":{"line":1566,"character":0},"end":{"line":1566,"character":35}}},{"selectionRange":{"start":{"line":1570,"character":0},"end":{"line":1578,"character":7}},"kind":12,"name":"pTxOut","range":{"start":{"line":1570,"character":0},"end":{"line":1578,"character":7}}},{"selectionRange":{"start":{"line":1581,"character":0},"end":{"line":1587,"character":7}},"kind":12,"name":"pMintMultiAsset","range":{"start":{"line":1581,"character":0},"end":{"line":1587,"character":7}}},{"selectionRange":{"start":{"line":1590,"character":0},"end":{"line":1596,"character":7}},"kind":12,"name":"pTxLowerBound","range":{"start":{"line":1590,"character":0},"end":{"line":1596,"character":7}}},{"selectionRange":{"start":{"line":1599,"character":0},"end":{"line":1612,"character":5}},"kind":12,"name":"pTxUpperBound","range":{"start":{"line":1599,"character":0},"end":{"line":1612,"character":5}}},{"selectionRange":{"start":{"line":1615,"character":0},"end":{"line":1621,"character":7}},"kind":12,"name":"pTxFee","range":{"start":{"line":1615,"character":0},"end":{"line":1621,"character":7}}},{"selectionRange":{"start":{"line":1624,"character":0},"end":{"line":1631,"character":7}},"kind":12,"name":"pWitnessFile","range":{"start":{"line":1624,"character":0},"end":{"line":1631,"character":7}}},{"selectionRange":{"start":{"line":1634,"character":0},"end":{"line":1652,"character":28}},"kind":12,"name":"pTxBodyFile","range":{"start":{"line":1634,"character":0},"end":{"line":1652,"character":28}}},{"selectionRange":{"start":{"line":1656,"character":0},"end":{"line":1674,"character":28}},"kind":12,"name":"pTxFile","range":{"start":{"line":1656,"character":0},"end":{"line":1674,"character":28}}},{"selectionRange":{"start":{"line":1677,"character":0},"end":{"line":1683,"character":7}},"kind":12,"name":"pTxInCount","range":{"start":{"line":1677,"character":0},"end":{"line":1683,"character":7}}},{"selectionRange":{"start":{"line":1686,"character":0},"end":{"line":1692,"character":7}},"kind":12,"name":"pTxOutCount","range":{"start":{"line":1686,"character":0},"end":{"line":1692,"character":7}}},{"selectionRange":{"start":{"line":1695,"character":0},"end":{"line":1701,"character":7}},"kind":12,"name":"pTxShelleyWitnessCount","range":{"start":{"line":1695,"character":0},"end":{"line":1701,"character":7}}},{"selectionRange":{"start":{"line":1704,"character":0},"end":{"line":1711,"character":7}},"kind":12,"name":"pTxByronWitnessCount","range":{"start":{"line":1704,"character":0},"end":{"line":1711,"character":7}}},{"selectionRange":{"start":{"line":1714,"character":0},"end":{"line":1718,"character":40}},"kind":12,"name":"pQueryFilter","range":{"start":{"line":1714,"character":0},"end":{"line":1718,"character":40}}},{"selectionRange":{"start":{"line":1721,"character":0},"end":{"line":1726,"character":7}},"kind":12,"name":"pFilterByAddress","range":{"start":{"line":1721,"character":0},"end":{"line":1726,"character":7}}},{"selectionRange":{"start":{"line":1729,"character":0},"end":{"line":1734,"character":7}},"kind":12,"name":"pFilterByStakeAddress","range":{"start":{"line":1729,"character":0},"end":{"line":1734,"character":7}}},{"selectionRange":{"start":{"line":1737,"character":0},"end":{"line":1749,"character":19}},"kind":12,"name":"pByronAddress","range":{"start":{"line":1737,"character":0},"end":{"line":1749,"character":19}}},{"selectionRange":{"start":{"line":1752,"character":0},"end":{"line":1758,"character":7}},"kind":12,"name":"pAddress","range":{"start":{"line":1752,"character":0},"end":{"line":1758,"character":7}}},{"selectionRange":{"start":{"line":1761,"character":0},"end":{"line":1763,"character":61}},"kind":12,"name":"pStakeVerificationKeyOrFile","range":{"start":{"line":1761,"character":0},"end":{"line":1763,"character":61}}},{"selectionRange":{"start":{"line":1766,"character":0},"end":{"line":1772,"character":7}},"kind":12,"name":"pStakeVerificationKey","range":{"start":{"line":1766,"character":0},"end":{"line":1772,"character":7}}},{"selectionRange":{"start":{"line":1775,"character":0},"end":{"line":1788,"character":5}},"kind":12,"name":"pStakeVerificationKeyFile","range":{"start":{"line":1775,"character":0},"end":{"line":1788,"character":5}}},{"selectionRange":{"start":{"line":1792,"character":0},"end":{"line":1805,"character":5}},"kind":12,"name":"pStakePoolVerificationKeyFile","range":{"start":{"line":1792,"character":0},"end":{"line":1805,"character":5}}},{"selectionRange":{"start":{"line":1808,"character":0},"end":{"line":1829,"character":19}},"kind":12,"name":"pStakePoolVerificationKeyHash","range":{"start":{"line":1808,"character":0},"end":{"line":1829,"character":19}}},{"selectionRange":{"start":{"line":1832,"character":0},"end":{"line":1838,"character":7}},"kind":12,"name":"pStakePoolVerificationKey","range":{"start":{"line":1832,"character":0},"end":{"line":1838,"character":7}}},{"selectionRange":{"start":{"line":1842,"character":0},"end":{"line":1844,"character":65}},"kind":12,"name":"pStakePoolVerificationKeyOrFile","range":{"start":{"line":1842,"character":0},"end":{"line":1844,"character":65}}},{"selectionRange":{"start":{"line":1848,"character":0},"end":{"line":1850,"character":61}},"kind":12,"name":"pStakePoolVerificationKeyOrHashOrFile","range":{"start":{"line":1848,"character":0},"end":{"line":1850,"character":61}}},{"selectionRange":{"start":{"line":1853,"character":0},"end":{"line":1860,"character":7}},"kind":12,"name":"pVrfVerificationKeyFile","range":{"start":{"line":1853,"character":0},"end":{"line":1860,"character":7}}},{"selectionRange":{"start":{"line":1863,"character":0},"end":{"line":1875,"character":18}},"kind":12,"name":"pVrfVerificationKeyHash","range":{"start":{"line":1863,"character":0},"end":{"line":1875,"character":18}}},{"selectionRange":{"start":{"line":1878,"character":0},"end":{"line":1884,"character":7}},"kind":12,"name":"pVrfVerificationKey","range":{"start":{"line":1878,"character":0},"end":{"line":1884,"character":7}}},{"selectionRange":{"start":{"line":1887,"character":0},"end":{"line":1889,"character":59}},"kind":12,"name":"pVrfVerificationKeyOrFile","range":{"start":{"line":1887,"character":0},"end":{"line":1889,"character":59}}},{"selectionRange":{"start":{"line":1892,"character":0},"end":{"line":1894,"character":55}},"kind":12,"name":"pVrfVerificationKeyOrHashOrFile","range":{"start":{"line":1892,"character":0},"end":{"line":1894,"character":55}}},{"selectionRange":{"start":{"line":1897,"character":0},"end":{"line":1910,"character":5}},"kind":12,"name":"pRewardAcctVerificationKeyFile","range":{"start":{"line":1897,"character":0},"end":{"line":1910,"character":5}}},{"selectionRange":{"start":{"line":1913,"character":0},"end":{"line":1919,"character":7}},"kind":12,"name":"pRewardAcctVerificationKey","range":{"start":{"line":1913,"character":0},"end":{"line":1919,"character":7}}},{"selectionRange":{"start":{"line":1922,"character":0},"end":{"line":1924,"character":66}},"kind":12,"name":"pRewardAcctVerificationKeyOrFile","range":{"start":{"line":1922,"character":0},"end":{"line":1924,"character":66}}},{"selectionRange":{"start":{"line":1927,"character":0},"end":{"line":1940,"character":5}},"kind":12,"name":"pPoolOwnerVerificationKeyFile","range":{"start":{"line":1927,"character":0},"end":{"line":1940,"character":5}}},{"selectionRange":{"start":{"line":1943,"character":0},"end":{"line":1949,"character":7}},"kind":12,"name":"pPoolOwnerVerificationKey","range":{"start":{"line":1943,"character":0},"end":{"line":1949,"character":7}}},{"selectionRange":{"start":{"line":1952,"character":0},"end":{"line":1954,"character":65}},"kind":12,"name":"pPoolOwnerVerificationKeyOrFile","range":{"start":{"line":1952,"character":0},"end":{"line":1954,"character":65}}},{"selectionRange":{"start":{"line":1957,"character":0},"end":{"line":1962,"character":7}},"kind":12,"name":"pPoolPledge","range":{"start":{"line":1957,"character":0},"end":{"line":1962,"character":7}}},{"selectionRange":{"start":{"line":1966,"character":0},"end":{"line":1971,"character":7}},"kind":12,"name":"pPoolCost","range":{"start":{"line":1966,"character":0},"end":{"line":1971,"character":7}}},{"selectionRange":{"start":{"line":1974,"character":0},"end":{"line":1979,"character":7}},"kind":12,"name":"pPoolMargin","range":{"start":{"line":1974,"character":0},"end":{"line":1979,"character":7}}},{"selectionRange":{"start":{"line":1982,"character":0},"end":{"line":1982,"character":70}},"kind":12,"name":"pPoolRelay","range":{"start":{"line":1982,"character":0},"end":{"line":1982,"character":70}}},{"selectionRange":{"start":{"line":1985,"character":0},"end":{"line":1994,"character":16}},"kind":12,"name":"pMultiHostName","range":{"start":{"line":1985,"character":0},"end":{"line":1994,"character":16}}},{"selectionRange":{"start":{"line":1997,"character":0},"end":{"line":2006,"character":16}},"kind":12,"name":"pSingleHostName","range":{"start":{"line":1997,"character":0},"end":{"line":2006,"character":16}}},{"selectionRange":{"start":{"line":2009,"character":0},"end":{"line":2013,"character":73}},"kind":12,"name":"eDNSName","range":{"start":{"line":2009,"character":0},"end":{"line":2013,"character":73}}},{"selectionRange":{"start":{"line":2016,"character":0},"end":{"line":2031,"character":56}},"kind":12,"name":"pSingleHostAddress","range":{"start":{"line":2016,"character":0},"end":{"line":2031,"character":56}}},{"selectionRange":{"start":{"line":2036,"character":0},"end":{"line":2040,"character":11}},"kind":12,"name":"pIpV4","range":{"start":{"line":2036,"character":0},"end":{"line":2040,"character":11}}},{"selectionRange":{"start":{"line":2043,"character":0},"end":{"line":2047,"character":12}},"kind":12,"name":"pIpV6","range":{"start":{"line":2043,"character":0},"end":{"line":2047,"character":12}}},{"selectionRange":{"start":{"line":2050,"character":0},"end":{"line":2054,"character":12}},"kind":12,"name":"pPort","range":{"start":{"line":2050,"character":0},"end":{"line":2054,"character":12}}},{"selectionRange":{"start":{"line":2057,"character":0},"end":{"line":2061,"character":32}},"kind":12,"name":"pStakePoolMetadataReference","range":{"start":{"line":2057,"character":0},"end":{"line":2061,"character":32}}},{"selectionRange":{"start":{"line":2064,"character":0},"end":{"line":2069,"character":5}},"kind":12,"name":"pStakePoolMetadataUrl","range":{"start":{"line":2064,"character":0},"end":{"line":2069,"character":5}}},{"selectionRange":{"start":{"line":2072,"character":0},"end":{"line":2082,"character":27}},"kind":12,"name":"pStakePoolMetadataHash","range":{"start":{"line":2072,"character":0},"end":{"line":2082,"character":27}}},{"selectionRange":{"start":{"line":2085,"character":0},"end":{"line":2097,"character":19}},"kind":12,"name":"pStakePoolRegistrationCert","range":{"start":{"line":2085,"character":0},"end":{"line":2097,"character":19}}},{"selectionRange":{"start":{"line":2100,"character":0},"end":{"line":2104,"character":19}},"kind":12,"name":"pStakePoolRetirementCert","range":{"start":{"line":2100,"character":0},"end":{"line":2104,"character":19}}},{"selectionRange":{"start":{"line":2108,"character":0},"end":{"line":2126,"character":35}},"kind":12,"name":"pShelleyProtocolParametersUpdate","range":{"start":{"line":2108,"character":0},"end":{"line":2126,"character":35}}},{"selectionRange":{"start":{"line":2129,"character":0},"end":{"line":2134,"character":7}},"kind":12,"name":"pMinFeeLinearFactor","range":{"start":{"line":2129,"character":0},"end":{"line":2134,"character":7}}},{"selectionRange":{"start":{"line":2137,"character":0},"end":{"line":2142,"character":7}},"kind":12,"name":"pMinFeeConstantFactor","range":{"start":{"line":2137,"character":0},"end":{"line":2142,"character":7}}},{"selectionRange":{"start":{"line":2145,"character":0},"end":{"line":2150,"character":7}},"kind":12,"name":"pMinUTxOValue","range":{"start":{"line":2145,"character":0},"end":{"line":2150,"character":7}}},{"selectionRange":{"start":{"line":2153,"character":0},"end":{"line":2158,"character":7}},"kind":12,"name":"pMinPoolCost","range":{"start":{"line":2153,"character":0},"end":{"line":2158,"character":7}}},{"selectionRange":{"start":{"line":2161,"character":0},"end":{"line":2166,"character":7}},"kind":12,"name":"pMaxBodySize","range":{"start":{"line":2161,"character":0},"end":{"line":2166,"character":7}}},{"selectionRange":{"start":{"line":2169,"character":0},"end":{"line":2174,"character":7}},"kind":12,"name":"pMaxTransactionSize","range":{"start":{"line":2169,"character":0},"end":{"line":2174,"character":7}}},{"selectionRange":{"start":{"line":2177,"character":0},"end":{"line":2182,"character":7}},"kind":12,"name":"pMaxBlockHeaderSize","range":{"start":{"line":2177,"character":0},"end":{"line":2182,"character":7}}},{"selectionRange":{"start":{"line":2185,"character":0},"end":{"line":2190,"character":7}},"kind":12,"name":"pKeyRegistDeposit","range":{"start":{"line":2185,"character":0},"end":{"line":2190,"character":7}}},{"selectionRange":{"start":{"line":2193,"character":0},"end":{"line":2198,"character":7}},"kind":12,"name":"pPoolDeposit","range":{"start":{"line":2193,"character":0},"end":{"line":2198,"character":7}}},{"selectionRange":{"start":{"line":2201,"character":0},"end":{"line":2207,"character":7}},"kind":12,"name":"pEpochBoundRetirement","range":{"start":{"line":2201,"character":0},"end":{"line":2207,"character":7}}},{"selectionRange":{"start":{"line":2210,"character":0},"end":{"line":2215,"character":7}},"kind":12,"name":"pNumberOfPools","range":{"start":{"line":2210,"character":0},"end":{"line":2215,"character":7}}},{"selectionRange":{"start":{"line":2218,"character":0},"end":{"line":2223,"character":7}},"kind":12,"name":"pPoolInfluence","range":{"start":{"line":2218,"character":0},"end":{"line":2223,"character":7}}},{"selectionRange":{"start":{"line":2226,"character":0},"end":{"line":2231,"character":7}},"kind":12,"name":"pTreasuryExpansion","range":{"start":{"line":2226,"character":0},"end":{"line":2231,"character":7}}},{"selectionRange":{"start":{"line":2234,"character":0},"end":{"line":2239,"character":7}},"kind":12,"name":"pMonetaryExpansion","range":{"start":{"line":2234,"character":0},"end":{"line":2239,"character":7}}},{"selectionRange":{"start":{"line":2242,"character":0},"end":{"line":2247,"character":7}},"kind":12,"name":"pDecentralParam","range":{"start":{"line":2242,"character":0},"end":{"line":2247,"character":7}}},{"selectionRange":{"start":{"line":2250,"character":0},"end":{"line":2267,"character":55}},"kind":12,"name":"pExtraEntropy","range":{"start":{"line":2250,"character":0},"end":{"line":2267,"character":55}}},{"selectionRange":{"start":{"line":2270,"character":0},"end":{"line":2318,"character":34}},"kind":12,"name":"pProtocol","range":{"start":{"line":2270,"character":0},"end":{"line":2318,"character":34}}},{"selectionRange":{"start":{"line":2321,"character":0},"end":{"line":2336,"character":9}},"kind":12,"name":"pProtocolVersion","range":{"start":{"line":2321,"character":0},"end":{"line":2336,"character":9}}},{"selectionRange":{"start":{"line":2343,"character":0},"end":{"line":2343,"character":41}},"kind":12,"name":"parseLovelace","range":{"start":{"line":2343,"character":0},"end":{"line":2343,"character":41}}},{"selectionRange":{"start":{"line":2346,"character":0},"end":{"line":2350,"character":28}},"kind":12,"name":"parseAddressAny","range":{"start":{"line":2346,"character":0},"end":{"line":2350,"character":28}}},{"selectionRange":{"start":{"line":2353,"character":0},"end":{"line":2357,"character":28}},"kind":12,"name":"parseStakeAddress","range":{"start":{"line":2353,"character":0},"end":{"line":2357,"character":28}}},{"selectionRange":{"start":{"line":2360,"character":0},"end":{"line":2368,"character":17}},"kind":12,"name":"lexPlausibleAddressString","range":{"start":{"line":2360,"character":0},"end":{"line":2368,"character":17}}},{"selectionRange":{"start":{"line":2380,"character":0},"end":{"line":2391,"character":77}},"kind":12,"name":"readVerificationKey","range":{"start":{"line":2380,"character":0},"end":{"line":2391,"character":77}}},{"selectionRange":{"start":{"line":2394,"character":0},"end":{"line":2402,"character":68}},"kind":12,"name":"readOutputFormat","range":{"start":{"line":2394,"character":0},"end":{"line":2402,"character":68}}},{"selectionRange":{"start":{"line":2405,"character":0},"end":{"line":2406,"character":44}},"kind":12,"name":"readURIOfMaxLength","range":{"start":{"line":2405,"character":0},"end":{"line":2406,"character":44}}},{"selectionRange":{"start":{"line":2409,"character":0},"end":{"line":2417,"character":25}},"kind":12,"name":"readStringOfMaxLength","range":{"start":{"line":2409,"character":0},"end":{"line":2417,"character":25}}},{"selectionRange":{"start":{"line":2420,"character":0},"end":{"line":2425,"character":72}},"kind":12,"name":"readRationalUnitInterval","range":{"start":{"line":2420,"character":0},"end":{"line":2425,"character":72}}},{"selectionRange":{"start":{"line":2428,"character":0},"end":{"line":2428,"character":66}},"kind":12,"name":"readRational","range":{"start":{"line":2428,"character":0},"end":{"line":2428,"character":66}}},{"selectionRange":{"start":{"line":2431,"character":0},"end":{"line":2432,"character":71}},"kind":12,"name":"readerFromAttoParser","range":{"start":{"line":2431,"character":0},"end":{"line":2432,"character":71}}},{"selectionRange":{"start":{"line":2435,"character":0},"end":{"line":2443,"character":57}},"kind":12,"name":"readerFromParsecParser","range":{"start":{"line":2435,"character":0},"end":{"line":2443,"character":57}}}],"name":"Cardano.CLI.Shelley.Parsers","range":{"start":{"line":0,"character":0},"end":{"line":9223372036854775807,"character":0}}}],"jsonrpc":"2.0","id":284}
2020-12-03 13:40:59.069377209 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"88/134"},"token":"619"},"method":"$/progress"}
2020-12-03 13:40:59.247585244 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"91/136"},"token":"619"},"method":"$/progress"}
2020-12-03 13:40:59.347824091 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"90/136"},"token":"619"},"method":"$/progress"}
2020-12-03 13:40:59.448804548 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"105/148"},"token":"619"},"method":"$/progress"}
2020-12-03 13:40:59.560818472 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"104/148"},"token":"619"},"method":"$/progress"}
2020-12-03 13:40:59.662021664 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"95/157"},"token":"619"},"method":"$/progress"}
2020-12-03 13:40:59.681139805 [ThreadId 12485] - Typechecking reverse dependencies forNormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Tx.hs": [NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Typed.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/OperationalCertificate.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Fees.hs"]
2020-12-03 13:40:59.68113847 [ThreadId 12486] - Typechecking reverse dependencies forNormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Parsers.hs": [NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/TextView.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Genesis.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/StakeAddress.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Address/Info.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Transaction.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Query.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Shelley/Run/Governance.hs",NormalizedFilePath "/home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-cli/src/Cardano/CLI/Parsers.hs"]
2020-12-03 13:40:59.729752775 [ThreadId 12623] - finish: ParentTC (took 1.17s)
2020-12-03 13:40:59.763108 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"154/187"},"token":"619"},"method":"$/progress"}
2020-12-03 13:40:59.863741934 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"185/201"},"token":"619"},"method":"$/progress"}
2020-12-03 13:40:59.877195232 [ThreadId 12956] - finish: C:GetHieAst (took 1.32s)
2020-12-03 13:40:59.878368893 [ThreadId 12957] - finish: C:GetDependencies (took 0.00s)
2020-12-03 13:40:59.87838526 [ThreadId 12959] - finish: C:GetModSummaryWithoutTimestamps (took 0.00s)
2020-12-03 13:40:59.879196475 [ThreadId 7] - <--2--{"result":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/Address.hs","range":{"start":{"line":439,"character":9},"end":{"line":439,"character":23}}},"jsonrpc":"2.0","id":316}
2020-12-03 13:40:59.964632044 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"report","message":"189/203"},"token":"619"},"method":"$/progress"}
2020-12-03 13:40:59.969479055 [ThreadId 12966] - finish: kick (took 1.41s)
2020-12-03 13:40:59.969532833 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"value":{"kind":"end"},"token":"619"},"method":"$/progress"}
2020-12-03 13:41:00.200213271 [ThreadId 7] - <--2--{"jsonrpc":"2.0","params":{"uri":"file:///home/jordan/Repos/Work/cardano-haskell/cardano-node/cardano-api/src/Cardano/Api/TxBody.hs","diagnostics":[{"severity":2,"range":{"start":{"line":719,"character":10},"end":{"line":719,"character":59}},"source":"parser","message":"Haddock parse error on input ‘-- * tranaction metadata   (in Shelley and later)’"}]},"method":"textDocument/publishDiagnostics"}
2020-12-03 13:41:00.235921057 [ThreadId 13007] - finish: C:GetHieAst (took 1.68s)
2020-12-03 13:41:00.235911047 [ThreadId 13008] - finish: C:GetHieAst (took 1.68s)
2020-12-03 13:41:00.236007647 [ThreadId 13007] - finish: C:GetHieAst (took 1.68s)
2020-12-03 13:41:00.281900319 [ThreadId 13001] - finish: InitialLoad (took 1.72s)
2020-12-03 13:41:00.282066732 [ThreadId 13001] - finish: ParentTC (took 1.72s)
2020-12-03 13:41:00.299558562 [ThreadId 12573] - finish: C:GetDocMap (took 1.74s)
2020-12-03 13:41:00.301642204 [ThreadId 12573] - finish: C:GetDocMap (took 1.74s)
2020-12-03 13:41:03.113481422 [ThreadId 13312] - finish: InitialLoad (took 4.55s)
